---
layout: post
title: 2015年3月至2016年3月工作总结
date: '2016-05-11 21:16'
comments: true
categories: ['职场感悟']  
tags: ['职场']
---

软件研发和软件开发是有区别的。

<!--more-->

研发需要技术攻关，它更关注的是软件的基础设施建设（如解决什么样的问题、选用怎样的技术解决问题、整体软件如何架构）；开发需要解决实际问题，最终把产品实现出来（如通信程序如何实现）。过去一年，我的主要工作是云平台的开发，其中包含自己开发以及相互协作去开发，我把这两者各开一个章节来讲，最后再加一章“未来规划”作为结束。

一、具体开发

具体开发过程中，总结起来无外乎刘老师常说的一句话：大处落墨，小处着笔。

（一）“大处落墨”在具体开发中等同于软件架构。

一个糟糕的软件架构花费的人力成本将非常之高。必须先弄清楚软件的模块有哪些，它们相互间的联系是什么，相互间的影响是什么。没有架构的开发意味着完全靠试错来发现和解决问题，最终形成的也是一个脆弱的产品，随时可能会崩溃，维护之前陈森填写的程序就有此感觉。

（二）“小处着笔”在具体开发中等同于实现及验证。

首先，在大框架已经清楚的情况下，如何确保每一行代码不会出错？这时候必须引入编码规范以及代码复查。编码规范迫使你遵循一个良好的编程习惯，不犯下一些低级的错误；代码复查（人力以及机器）可以发现并报告软件可能存在的质量问题。
其次，在所有代码都完成的情况下，如何确保它真的是对的？这时候必须引入测试。但是一共有多少情况需要验证？这个问题反馈到具体开发就是必须充分考虑所有可能的情况并逐一进行验证。

二、相互协作

主要谈谈实际协作的一些体会。

（一）理解、下放、处理和验证需求。
首先，理解来自上游的需求，我也曾犯下许多错误。例如：不清楚为什么要这样做然后自己想当然，遗漏一些细节而后偏离主题，确认需求的过程中没有主线思维导致表述不清引发歧义。

其次，对于下放需求，一是必须交代清楚为什么要这么做，在不明白背景的情况下什么错误都可能发生；二是必须清楚下游的能力所在，清楚谁适合做什么以及如何让他做到。
紧接着，处理需求一定要有时间限制，而且这个时间绝不能给的刚刚好让执行者舒舒服服，否则执行者本身不会有大的进步，企业人力成本也将非常之高（员工的工作产出一定是大于他的工资收入的）。

最后，必须对需求完成情况加以验证，而且最好是执行者本身具备这种验证能力。

（二）如何让错误产生价值。

犯了错误的当下再去责备已没有任何意义，而是应该想办法去解决问题。错误的积极意义在于如何不犯同类型的错误，以及从此少犯错误。相同类型的错误要予以批评，新的错误要做出反思。

（三）改变一个人非常之难。

我曾想要去改变DYF使他变得更积极却发现于事无补，但当我转而想如何提升他的能力来做更多事情，事情变得简单多了。

（四）与同事协作，职责一定要分明。

刚开始与LZQ协助确实有不少苦恼，因为我俩的职责没有一个明确的界定，经常遇到一个问题是到底这个事情归谁管？虽然后面我知道刘老师以及林总可以帮我做这个界定，但长远来讲必须把我俩各自的工作定义清楚才行。

（五）给予的重要性。

一味的向下索取将导致非常糟糕的结果：下游人员没有进步，失去工作激情，甚至离职。必须在管理的过程去给予一些东西：让对方学习新的东西，做更难的事情，传授一些做事情的基本方法，授课培训等。只有这样，当你真正需要他满负荷运行的时候才能调动得起来。

三、未来规划

拳头产品（云平台）必须花心思去打磨好（站在软件的角度）。云平台的下一个里程碑是今年年底做到：稳定、安全、交互便捷、简洁美。稳定指程序不会崩溃，安全指能承受得起外部的攻击，交互便捷指如何让使用者更容易得到他想要的信息，简洁美则是要有统一的美化标准。

另外，研发才是软件团队的真正核心竞争力，而且研发也能给我带来更多乐趣。接下来我想尽可能的朝研发靠拢，这也意味着我要学习更多和承受更多。但是要兼顾一个事情，我必须学习和思考如何把下面的人带好，使他们都成为比我还优秀的开发者。
