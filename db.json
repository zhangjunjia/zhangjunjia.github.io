{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1491832610304},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1491832610304},{"_id":"themes/next/.gitattributes","hash":"8454b9313cb1a97b63fb87e2d29daee497ce6249","modified":1491832610305},{"_id":"themes/next/.gitignore","hash":"ee0b13c268cc8695d3883a5da84930af02d4ed08","modified":1529554020076},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1491832610307},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1491832610308},{"_id":"themes/next/.javascript_ignore","hash":"cd250ad74ca22bd2c054476456a73d9687f05f87","modified":1529554020077},{"_id":"themes/next/.stylintrc","hash":"3b7f9785e9ad0dab764e1c535b40df02f4ff5fd6","modified":1491832610308},{"_id":"themes/next/.travis.yml","hash":"6674fbdfe0d0c03b8a04527ffb8ab66a94253acd","modified":1529554020078},{"_id":"themes/next/LICENSE","hash":"ec44503d7e617144909e54533754f0147845f0c5","modified":1491832610310},{"_id":"themes/next/README.cn.md","hash":"23e92a2599725db2f8dbd524fbef2087c6d11c7b","modified":1529554020079},{"_id":"themes/next/_config.yml","hash":"cd8ec8caaf33cb7ddf7a39733b9f2a0efda7a756","modified":1529554020082},{"_id":"themes/next/bower.json","hash":"486ebd72068848c97def75f36b71cbec9bb359c5","modified":1529554020084},{"_id":"themes/next/gulpfile.coffee","hash":"412defab3d93d404b7c26aaa0279e2e586e97454","modified":1491832610312},{"_id":"themes/next/README.md","hash":"50abff86ffe4113051a409c1ed9261195d2aead0","modified":1529554020081},{"_id":"themes/next/package.json","hash":"3963ad558a24c78a3fd4ef23cf5f73f421854627","modified":1529554020163},{"_id":"source/tags/index.md","hash":"825608293381a2aa22ed438443e2d60e74e79f7a","modified":1528350208553},{"_id":"source/_posts/2015-10-27-multi-agent.markdown","hash":"f420f2133223760c30729265631c8a697aa4ff0a","modified":1491748550000},{"_id":"source/_posts/2015-11-21-computer-systems.markdown","hash":"922d6a9661103b2582e58f432baaeeced297b480","modified":1491749185000},{"_id":"source/_posts/2015-11-14-hbase-java-api-example.markdown","hash":"cfe780097f4633fe629ad39c79b4cfc2bd23ce39","modified":1491749018000},{"_id":"source/_posts/2015-12-20-maven-howto.markdown","hash":"df5680acf59c33a148b3625268fce1743122b91d","modified":1500627657000},{"_id":"source/_posts/2015-11-23-cplusplus-primer-v5.markdown","hash":"339aadf2bb02a2fa5c44c7e71ad88379af590eaf","modified":1491749179000},{"_id":"source/_posts/2016-01-23-sth-about-spring-boot.markdown","hash":"f68413a71f95e0858282183af93a4e11b79449a3","modified":1491748986000},{"_id":"source/_posts/2016-02-06-sophie-s-world.markdown","hash":"8e0d28301a135cb43f85bd91698340b72b981938","modified":1491748981000},{"_id":"source/_posts/2016-04-11-rich-and-poor-dad.markdown","hash":"d9d7451456b23dcbaee47288a2f36d6a3e7180d8","modified":1491748974000},{"_id":"source/_posts/2016-04-22-advanced-linux-programing.markdown","hash":"c7d6b7adfc9a3010383587d9a301949c1c391a95","modified":1491749165000},{"_id":"source/_posts/2016-04-16-little-dog-money.markdown","hash":"98c13eb16e43a624ad0a845c353904084626c1df","modified":1491748960000},{"_id":"source/_posts/2016-05-05-svn-that-i-used.markdown","hash":"9b66a8b32a7996d267e0c57de210e1a79b97fbb0","modified":1491748930000},{"_id":"source/_posts/2016-05-09-after-my-machine-was-attacked.markdown","hash":"027c6d9ef02503d0d546ef76990a2b6ec6a06f76","modified":1491748937000},{"_id":"source/_posts/2016-05-09-lvm-that-i-used.markdown","hash":"c6ba545439f5b7180d2df23d4a33941a4c44370d","modified":1491748926000},{"_id":"source/_posts/2016-05-11-2015-work-summary.markdown","hash":"14fb7feac7559e59133b406e052d5486bafa50b1","modified":1491748921000},{"_id":"source/_posts/2016-05-11-hbase-incremental-backup.markdown","hash":"fc99ceb6114580e5fb5eb8bed7c86b01ebc54df4","modified":1491748912000},{"_id":"source/_posts/2016-06-22-autossh-helper.markdown","hash":"e4bce5678e49ccba5544a6f8d3793dd26b212180","modified":1491748860000},{"_id":"source/_posts/2016-06-22-svn-hooks.markdown","hash":"f4cd910951c46ac52f1767b47623ac0337fc8864","modified":1491748855000},{"_id":"source/_posts/2016-06-29-bugzilla-in-docker.markdown","hash":"a3decc7c0ad005e50f228742ac6829412ba8d2d9","modified":1491748842000},{"_id":"source/_posts/2016-06-28-ant-war-task.markdown","hash":"3eedebef067c17b8232dc2cdff1e85fa4ffb7953","modified":1491748850000},{"_id":"source/_posts/2016-07-13-to-be-a-manager.markdown","hash":"32ed2904c5b9a258c77c0dc5226401dc3bce2cf3","modified":1491748820000},{"_id":"source/_posts/2016-07-04-generate-core-file.markdown","hash":"f004451b3e38605237041065c484c0acf9a26ca9","modified":1491748830000},{"_id":"source/_posts/2016-07-14-learn-sth-from-chumen.markdown","hash":"f4a3ea3f812e7dec3d28dacf6167610550fd9207","modified":1491748809000},{"_id":"source/_posts/2016-07-31-learn-sth-from-master-liu.markdown","hash":"1f78ce60bab38d6376211ca95ae56327f0729ee6","modified":1491748799000},{"_id":"source/_posts/2016-08-02-summary-of-const.markdown","hash":"278cd6f6df21a31cf02f8fdd7660999f9819c1c4","modified":1491749206000},{"_id":"source/_posts/2016-08-02-qa-of-unp.markdown","hash":"960163b7b6b53f555734679c4c30a1da38aa501a","modified":1491749212000},{"_id":"source/_posts/2016-08-05-about-sigpipe.markdown","hash":"773a7888eb0e6a001ec726826474dd9ebf86b252","modified":1491748666000},{"_id":"source/_posts/2016-08-17-tomcat-multi-virtual-host.markdown","hash":"c1dd54b43e80051fdb20f893f94bd6ec1f79f0fa","modified":1491749136000},{"_id":"source/_posts/2016-08-13-c-sendmail.markdown","hash":"da752ff6b956610e4ad6b30f92d8052ec33f087c","modified":1491837041000},{"_id":"source/_posts/2016-08-28-why-not-go-to-sleep.markdown","hash":"fe723785a0f69adfef2f2bee9ea194563e37f327","modified":1491748618000},{"_id":"source/_posts/2016-08-28-attention.markdown","hash":"8a7b40ab77cf3b778755da48511a5f2604862602","modified":1491748642000},{"_id":"source/_posts/2016-09-11-saving-your-attention.markdown","hash":"1838cc206efe84145885442c40812d3a2feec4b7","modified":1491748629000},{"_id":"source/_posts/2016-10-16-living-in-the-future.markdown","hash":"bbe5b0d74005b743e5d32dfd47c95b0f7199d7b1","modified":1491749031000},{"_id":"source/_posts/2016-09-11-security-sense.markdown","hash":"c882e44c96bafaa624b17ad708ba64c61c980248","modified":1491748638000},{"_id":"source/_posts/2017-04-14-2015-2016-summary.md","hash":"5f419ca319e310ab17e3509b5a8a097ebe539518","modified":1492312774000},{"_id":"source/_posts/2017-04-11-how-to-manager-your-time.md","hash":"759ae4fca7fbc18188c335984b9b9d61ff2e267b","modified":1496473246000},{"_id":"source/_posts/2017-04-20-rx-8025.md","hash":"5b1616392786454441fc7697c6c5dc6fcf856d0c","modified":1494473679000},{"_id":"source/_posts/2017-04-22-dont-cry-over-spilt-milk.md","hash":"75d738007339389b795d5440b01ba798c219e10b","modified":1496473212000},{"_id":"source/_posts/2017-05-04-puzzle-of-c-pointer.md","hash":"2592f3a715d172022f36e365ac4dcb8d3ca0f015","modified":1494475762000},{"_id":"source/_posts/2017-05-09-power-adjustment.md","hash":"c667f2d8890217f06fa98a5ea8bdd73428af8fc3","modified":1494994362000},{"_id":"source/_posts/2017-05-24-deliberate-practice.md","hash":"92536bfd353b3b06d57f2469402ac788acf17977","modified":1497615670000},{"_id":"source/_posts/2017-06-03-talk-about-happy.md","hash":"6cf957657a80250f9fd6102ac7295aee8750d8bf","modified":1496473276000},{"_id":"source/_posts/2017-06-24-learn-from-steven-jobs.md","hash":"8cdd6953b56f4f3ae45c04b2aad24b6a00ced455","modified":1498383142000},{"_id":"source/_posts/2017-07-07-sth-about-fread.md","hash":"980d3961e83f3d6e69b1ea7f1ab97c3a975ad1f3","modified":1499420052000},{"_id":"source/_posts/2017-07-28-left-shift.md","hash":"0f93bdcd0331bc48d10d728a9653ea9bc3dae5ba","modified":1528344628040},{"_id":"source/_posts/2018-06-07-core-java-equals.md","hash":"b158460e59a473904191155a03b418a32d1a6b4e","modified":1528347164347},{"_id":"source/_posts/2018-06-14-close-wait-issue.md","hash":"6eead8c47bf4dc98640607e699af5d47992aea6f","modified":1529557859291},{"_id":"source/_posts/2018-06-16-too-many-open-files.md","hash":"2b795cfb691205b8c0d10141f155573c8dddcd6d","modified":1529556276130},{"_id":"source/_posts/2018-06-27-jvisual-find-memory-leak.md","hash":"667535236e56f17c23a58aaf8d03aaca3d83aa4f","modified":1530082212020},{"_id":"source/_posts/2018-07-04-zookeeper-puzzle-1.md","hash":"b22e25bf7539f44261cfb1e2098200505140433d","modified":1531287706345},{"_id":"source/_posts/2018-07-07-jvmtop-profile.md","hash":"a92fa3defdde745b9db74b41c556ff489c7e4ce6","modified":1530977039459},{"_id":"source/_posts/2018-09-12-use-jmc-jfr-jprofile.md","hash":"a456b3cca7cdd109c5b70b1ccbbf8bc80d4595f3","modified":1536764752157},{"_id":"source/_posts/2018-07-25-front-back-seperate.md","hash":"56b9f7784341c6be794105e3c6e1a9aab4453b10","modified":1532489518271},{"_id":"themes/next/.git/FETCH_HEAD","hash":"778b51a21e3c53e17a5b722a6329f3f7c0eb829f","modified":1529554019041},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1491832610248},{"_id":"themes/next/.git/ORIG_HEAD","hash":"481fa7b8f2c4ee5550cfc828764354aecad0325d","modified":1529553934982},{"_id":"themes/next/.git/config","hash":"8e94cc015a498d35202e9fd57e44b3c51e1e5634","modified":1491832610264},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1491832513491},{"_id":"themes/next/.git/index","hash":"a952d544e0203f2b128594709a0374fc9c6d3d1d","modified":1536763569779},{"_id":"themes/next/.git/packed-refs","hash":"2d676ac2fbdc2d7033e87a89abab9c16b1d952bc","modified":1491832610238},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5adfad3ef1b870063e621bc0838268eb2c7c697a","modified":1491832610306},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"a0a82dbfabdef9a9d7c17a08ceebfb4052d98d81","modified":1529554020073},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"1228506a940114288d61812bfe60c045a0abeac1","modified":1529554020074},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1529554020075},{"_id":"themes/next/languages/default.yml","hash":"b3bcd8934327448a43d9bfada5dd11b1b8c1402e","modified":1529554020086},{"_id":"themes/next/languages/de.yml","hash":"fd02d9c2035798d5dc7c1a96b4c3e24b05b31a47","modified":1529554020085},{"_id":"themes/next/languages/en.yml","hash":"2f4b4776ca1a08cc266a19afb0d1350a3926f42c","modified":1529554020088},{"_id":"themes/next/languages/fr-FR.yml","hash":"efeeb55d5c4add54ad59a612fc0630ee1300388c","modified":1529554020089},{"_id":"themes/next/languages/id.yml","hash":"dccae33e2a5b3c9f11c0e05ec4a7201af1b25745","modified":1529554020090},{"_id":"themes/next/languages/it.yml","hash":"a215d016146b1bd92cef046042081cbe0c7f976f","modified":1529554020091},{"_id":"themes/next/languages/ja.yml","hash":"37f954e47a3bc669620ca559e3edb3b0072a4be5","modified":1529554020092},{"_id":"themes/next/languages/ko.yml","hash":"dc8f3e8c64eb7c4bb2385025b3006b8efec8b31d","modified":1529554020093},{"_id":"themes/next/languages/nl-NL.yml","hash":"213e7a002b82fb265f69dabafbbc382cfd460030","modified":1529554020094},{"_id":"themes/next/languages/pt-BR.yml","hash":"568d494a1f37726a5375b11452a45c71c3e2852d","modified":1529554020095},{"_id":"themes/next/languages/pt.yml","hash":"2efcd240c66ab1a122f061505ca0fb1e8819877b","modified":1529554020096},{"_id":"themes/next/languages/vi.yml","hash":"a9b89ebd3e5933033d1386c7c56b66c44aca299a","modified":1529554020098},{"_id":"themes/next/languages/ru.yml","hash":"e33ee44e80f82e329900fc41eb0bb6823397a4d6","modified":1529554020098},{"_id":"themes/next/languages/zh-hk.yml","hash":"fe0d45807d015082049f05b54714988c244888da","modified":1529554020101},{"_id":"themes/next/languages/zh-Hans.yml","hash":"66b9b42f143c3cb2f782a94abd4c4cbd5fd7f55f","modified":1529554020099},{"_id":"themes/next/languages/zh-tw.yml","hash":"432463b481e105073accda16c3e590e54c8e7b74","modified":1529554020102},{"_id":"themes/next/layout/_layout.swig","hash":"2164570bb05db11ee4bcfbbb5d183a759afe9d07","modified":1529554020104},{"_id":"themes/next/layout/archive.swig","hash":"9a2c14874a75c7085d2bada5e39201d3fc4fd2b4","modified":1529554020153},{"_id":"themes/next/layout/category.swig","hash":"3cbb3f72429647411f9e85f2544bdf0e3ad2e6b2","modified":1529554020154},{"_id":"themes/next/layout/index.swig","hash":"555a357ecf17128db4e29346c92bb6298e66547a","modified":1529554020155},{"_id":"themes/next/layout/page.swig","hash":"e8fcaa641d46930237675d2ad4b56964d9e262e9","modified":1529554020157},{"_id":"themes/next/layout/schedule.swig","hash":"87ad6055df01fa2e63e51887d34a2d8f0fbd2f5a","modified":1529554020160},{"_id":"themes/next/layout/post.swig","hash":"7a6ce102ca82c3a80f776e555dddae1a9981e1ed","modified":1529554020159},{"_id":"themes/next/layout/tag.swig","hash":"34e1c016cbdf94a31f9c5d494854ff46b2a182e9","modified":1529554020161},{"_id":"themes/next/scripts/merge-configs.js","hash":"38d86aab4fc12fb741ae52099be475196b9db972","modified":1529554020164},{"_id":"themes/next/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1491832610364},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1491832610501},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1491832610501},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1491832610502},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1491832610421},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1491832513518},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1491832513504},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1491832513519},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1491832513516},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1491832513530},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1491832513551},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1491832513541},{"_id":"themes/next/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1491832513552},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1491832513564},{"_id":"themes/next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1491832513575},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1491832513577},{"_id":"themes/next/.git/logs/HEAD","hash":"bb87d84c27ddd7d2f0343a1211e9649a1997c811","modified":1529554020281},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1491832610321},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1491832610321},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"f83befdc740beb8dc88805efd7fbb0fef9ed19be","modified":1529554020106},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"8c56dd26157cbc580ae41d97ac34b90ab48ced3f","modified":1529554020105},{"_id":"themes/next/layout/_macro/post.swig","hash":"4ba938822d56c597490f0731893eaa2443942e0f","modified":1529554020108},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"9c7343fd470e0943ebd75f227a083a980816290b","modified":1529554020111},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"e2e4eae391476da994045ed4c7faf5e05aca2cd7","modified":1529554020113},{"_id":"themes/next/layout/_macro/reward.swig","hash":"357d86ec9586705bfbb2c40a8c7d247a407db21a","modified":1529554020109},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4adc65a602d1276615da3b887dcbf2ac68e7382b","modified":1529554020114},{"_id":"themes/next/layout/_partials/footer.swig","hash":"26e93336dc57a39590ba8dc80564a1d2ad5ff93b","modified":1529554020115},{"_id":"themes/next/layout/_partials/head.swig","hash":"f14a39dad1ddd98e6d3ceb25dda092ba80d391b5","modified":1529554020117},{"_id":"themes/next/layout/_partials/header.swig","hash":"c54b32263bc8d75918688fb21f795103b3f57f03","modified":1529554020118},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"77c61e0baea3544df361b7338c3cd13dc84dde22","modified":1491832610330},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1491832610330},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1491832610335},{"_id":"themes/next/layout/_partials/search.swig","hash":"b4ebe4a52a3b51efe549dd1cdee846103664f5eb","modified":1491832610331},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1491832610336},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"9be624634703be496a5d2535228bc568a8373af9","modified":1529554020135},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"a0bd3388587fd943baae0d84ca779a707fbcad89","modified":1491832610348},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"8301c9600bb3e47f7fb98b0e0332ef3c51bb1688","modified":1491832610348},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1491832610348},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"fa882641da3bd83d9a58a8a97f9d4c62a9ee7b5c","modified":1529554020148},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"554ec568e9d2c71e4a624a8de3cb5929050811d6","modified":1529554020149},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1491832610349},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"9a188938d46931d5f3882a140aa1c48b3a893f0c","modified":1491832610349},{"_id":"themes/next/scripts/tags/button.js","hash":"eddbb612c15ac27faf11c59c019ce188f33dec2c","modified":1529554020165},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1491832610365},{"_id":"themes/next/scripts/tags/exturl.js","hash":"5022c0ba9f1d13192677cf1fd66005c57c3d0f53","modified":1491832610366},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"bcba2ff25cd7850ce6da322d8bd85a8dd00b5ceb","modified":1529554020167},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1491832610367},{"_id":"themes/next/scripts/tags/full-image.js","hash":"c9f833158c66bd72f627a0559cf96550e867aa72","modified":1491832610366},{"_id":"themes/next/scripts/tags/label.js","hash":"6f00952d70aadece844ce7fd27adc52816cc7374","modified":1529554020166},{"_id":"themes/next/scripts/tags/note.js","hash":"f7eae135f35cdab23728e9d0d88b76e00715faa0","modified":1529554020168},{"_id":"themes/next/scripts/tags/tabs.js","hash":"aa7fc94a5ec27737458d9fe1a75c0db7593352fd","modified":1529554020168},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1491832610420},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1529554020226},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1491832610422},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1491832610422},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1529554020227},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1491832610423},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1491832610425},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1491832610424},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1491832610424},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1491832610425},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1491832610426},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1529554020227},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1529554020228},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1491832610427},{"_id":"themes/next/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1529554020228},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1491832610427},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1491832610427},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1491832610428},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1491832610428},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1491832610337},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1491832610337},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1491832610403},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1491832610403},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1491832610404},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1491832610417},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1491832610419},{"_id":"themes/next/.git/refs/heads/master","hash":"7999da428ebb87e5a2b27315d8d5123c1ccdfaa5","modified":1529554020278},{"_id":"themes/next/.git/refs/tags/v5.1.2","hash":"75173e2dd18a6221ff84742ff53d01ac5c6e04b0","modified":1529553933957},{"_id":"themes/next/.git/refs/tags/v5.1.3","hash":"5eec1427a836e6e34c81dc784bafb33c2ccf48f9","modified":1529553933959},{"_id":"themes/next/.git/refs/tags/v5.1.4","hash":"66e8b5048a20ce41a8a240072e535d725d62aef4","modified":1529553933962},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1491832610329},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1491832610329},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1491832610332},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1491832610333},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1491832610333},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"b2f0d247b213e4cf8de47af6a304d98070cc7256","modified":1529554020120},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"0a9cdd6958395fcdffc80ab60f0c6301b63664a5","modified":1529554020121},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1491832610332},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1491832610332},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1491832610336},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1529554020134},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"ff947f3561b229bc528cb1837d4ca19612219411","modified":1529554020136},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"71397a5823e8ec8aad3b68aace13150623b3e19d","modified":1491832610339},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1491832610337},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"753d262911c27baf663fcaf199267133528656af","modified":1491832610339},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1491832610340},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"7b11eac3a0685fa1ab2ab6ecff60afc4f15f0d16","modified":1491832610340},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"ccc443b22bd4f8c7ac4145664686c756395b90e0","modified":1529554020138},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"7d94845f96197d9d84a405fa5d4ede75fb81b225","modified":1529554020138},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"b1e13df83fb2b1d5d513b30b7aa6158b0837daab","modified":1491832610342},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"45f3f629c2aacc381095750e1c8649041a71a84b","modified":1529554020139},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"e6d10ee4fb70b3ae1cd37e9e36e000306734aa2e","modified":1529554020141},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"4c501ea0b9c494181eb3c607c5526a5754e7fbd8","modified":1491832610344},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"5a8027328f060f965b3014060bebec1d7cf149c1","modified":1529554020142},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1491832610343},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b83a51bbe0f1e2ded9819070840b0ea145f003a6","modified":1491832610344},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"f9a1647a8f1866deeb94052d1f87a5df99cb1e70","modified":1491832610343},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"1600f340e0225361580c44890568dc07dbcf2c89","modified":1491832610345},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"af7f3e43cbdc4f88c13f101f0f341af96ace3383","modified":1491832610346},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"4dcc3213c033994d342d02b800b6229295433d30","modified":1529554020142},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"9246162d4bc7e949ce1d12d135cbbaf5dc3024ec","modified":1529554020145},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"493bd5999a1061b981922be92d8277a0f9152447","modified":1529554020144},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"4050553d44ba1396174161c9a6bb0f89fa779eca","modified":1529554020146},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"7e65ff8fe586cd655b0e9d1ad2912663ff9bd36c","modified":1529554020147},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1491832610355},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"93479642fd076a1257fecc25fcf5d20ccdefe509","modified":1529554020151},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"34599633658f3b0ffb487728b7766e1c7b551f5a","modified":1491832610351},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1491832610354},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1491832610402},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"07f7da320689f828f6e36a6123807964a45157a0","modified":1529554020212},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"7896c3ee107e1a8b9108b6019f1c070600a1e8cc","modified":1529554020213},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"0e55cbd93852dc3f8ccb44df74d35d9918f847e0","modified":1529554020214},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"58e7dd5947817d9fc30770712fc39b2f52230d1e","modified":1529554020220},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"a25408534f8fe6e321db4bbf9dd03335d648fe17","modified":1529554020221},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"4069f918ccc312da86db6c51205fc6c6eaabb116","modified":1529554020223},{"_id":"themes/next/source/css/_variables/base.styl","hash":"b1f6ea881a4938a54603d68282b0f8efb4d7915d","modified":1529554020224},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1491832610429},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"cb431b54ba9c692165a1f5a12e4c564a560f8058","modified":1491832610429},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1491832610431},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"0289031200c3d4c2bdd801ee10fff13bb2c353e4","modified":1529554020230},{"_id":"themes/next/source/js/src/exturl.js","hash":"a2a0f0de07e46211f74942a468f42ee270aa555c","modified":1491832610430},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"1512c751d219577d338ac0780fb2bbd9075d5298","modified":1491832610431},{"_id":"themes/next/source/js/src/motion.js","hash":"885176ed51d468f662fbf0fc09611f45c7e5a3b1","modified":1529554020231},{"_id":"themes/next/source/js/src/post-details.js","hash":"93a18271b4123dd8f94f09d1439b47c3c19a8712","modified":1529554020233},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"02cf91514e41200bc9df5d8bdbeb58575ec06074","modified":1491832610433},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1491832610434},{"_id":"themes/next/source/js/src/utils.js","hash":"b3e9eca64aba59403334f3fa821f100d98d40337","modified":1529554020236},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"b02737510e9b89aeed6b54f89f602a9c24b06ff2","modified":1529554020252},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1491832610441},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"9be892a4e14e0da18ff9cb962c9ef71f163b1b22","modified":1491832610443},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1491832610436},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"672d3b5767e0eacd83bb41b188c913f2cf754793","modified":1491832610443},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1491832610453},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1491832610454},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1491832610454},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1491832610455},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"b4aefc910578d76b267e86dfffdd5121c8db9aec","modified":1491832610457},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1491832610459},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1491832610459},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1491832610458},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1491832610460},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1491832610482},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1491832610483},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1491832610483},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1491832610484},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1491832610484},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1491832610480},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1491832610485},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"e33aa8fa48b6639d8d8b937d13261597dd473b3a","modified":1529554020256},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"14264a210bf94232d58d7599ea2ba93bfa4fb458","modified":1529554020255},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"2ce5f3bf15c523b9bfc97720d8884bb22602a454","modified":1529554020258},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1529554020260},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1529554020261},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1529554020259},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1529554020262},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1529554020262},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1529554020263},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1529554020263},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1529554020264},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1529554020265},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1529554020266},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1529554020267},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1529554020270},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1529554020269},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"8aaa675f577d5501f5f22d5ccb07c2b76310b690","modified":1529554020271},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"46a50b91c98b639c9a2b9265c5a1e66a5c656881","modified":1529554020274},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"8148492dd49aa876d32bb7d5b728d3f5bf6f5074","modified":1529554020275},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"2d9a9f38c493fdf7c0b833bb9184b6a1645c11b2","modified":1529554020272},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1491832610494},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1491832610494},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1491832610498},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1491832610499},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1491832610499},{"_id":"themes/next/.git/objects/pack/pack-b917c6fb2d5a18e3923541264dd980ef922f76a8.idx","hash":"a00f381500f11464db83ce56638401d84aa89997","modified":1529553933324},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1491832610482},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"bb87d84c27ddd7d2f0343a1211e9649a1997c811","modified":1529554020280},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1491832610246},{"_id":"themes/next/.git/refs/remotes/origin/dev","hash":"c9abcffd1f03a6a76afa09334100c5003cf895a0","modified":1529553933711},{"_id":"themes/next/.git/refs/remotes/origin/master","hash":"7999da428ebb87e5a2b27315d8d5123c1ccdfaa5","modified":1529553933704},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1491832610351},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"218cc936ba3518a3591b2c9eda46bc701edf7710","modified":1491832610350},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"237d185ac62ec9877e300947fa0109c44fb8db19","modified":1529554020171},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"8f86f694c0749a18ab3ad6f6df75466ca137a4bc","modified":1529554020170},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"8b32928686c327151e13d3ab100157f9a03cd59f","modified":1529554020173},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1491832610372},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"7ad4081466b397e2a6204141bb7768b7c01bd93c","modified":1491832610372},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"4f2801fc4cf3f31bf2069f41db8c6ce0e3da9e39","modified":1529554020178},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1491832610392},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1491832610399},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"1da5c800d025345f212a3bf1be035060f4e5e6ed","modified":1491832610400},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"24ee4b356ff55fc6e58f26a929fa07750002cf29","modified":1529554020209},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1491832610401},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"91ca75492cd51f2553f4d294ed2f48239fcd55eb","modified":1529554020210},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1491832610401},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a17e2b871a335f290afb392a08f94fd35f59c715","modified":1529554020211},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"60fa84aa7731760f05f52dd7d8f79b5f74ac478d","modified":1529554020215},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1491832610405},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1491832610406},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1491832610406},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1491832610407},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"9c99034f8e00d47e978b3959f51eb4a9ded0fcc8","modified":1529554020217},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1491832610408},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"bce344d3a665b4c55230d2a91eac2ad16d6f32fd","modified":1491832610413},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1491832610408},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"416988dca389e6e2fdfa51fa7f4ee07eb53f82fb","modified":1491832610413},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"4642e30010af8b2b037f5b43146b10a934941958","modified":1491832610414},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"ad2dcedf393ed1f3f5afd2508d24969c916d02fc","modified":1529554020219},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"86197902dfd3bededba10ba62b8f9f22e0420bde","modified":1491832610416},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1491832610415},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1491832610410},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1491832610410},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"e695e58f714129ca292c2e54cd62c251aca7f7fe","modified":1529554020218},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1491832610411},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1491832610411},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"f1d0b5d7af32c423eaa8bb93ab6a0b45655645dc","modified":1529554020234},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"6c26cdb36687d4f0a11dabf5290a909c3506be5c","modified":1529554020244},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"6d586bfcfb7ae48f1b12f76eec82d3ad31947501","modified":1529554020247},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"16b03db23a52623348f37c04544f2792032c1fb6","modified":1529554020249},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1491832610444},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1491832610444},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1491832610446},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1491832610445},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1491832610446},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1491832610447},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1491832610451},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1491832610452},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1491832610453},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1491832610456},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1491832610457},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1491832610462},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"3655f1fdf1e584c4d8e8d39026093ca306a5a341","modified":1491832610461},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1491832610463},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1491832610493},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1491832610493},{"_id":"themes/next/.git/objects/pack/pack-68527ffb7261713ce611682d19be09c63324ba35.idx","hash":"13007e681c50c894ccfd30db475bcfeaf37be203","modified":1491832609828},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"4ac683b2bc8531c84d98f51b86957be0e6f830f3","modified":1529554020246},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1491832610478},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1491832610479},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1491832610497},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"8043be039b87092f17f6e9628477dcfba9ea5003","modified":1491832610246},{"_id":"themes/next/.git/logs/refs/remotes/origin/master","hash":"c40b519e0623c0e4b95ebe3c6ba811a64b60f526","modified":1529553933707},{"_id":"themes/next/.git/logs/refs/remotes/origin/dev","hash":"8a8a394159ace95fce68fcd4cbcc07e58aba7f1b","modified":1529553933712},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1491832610378},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1491832610379},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"9f73c4696f0907aa451a855444f88fc0698fa472","modified":1529554020174},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"f9760ecf186954cee3ba4a149be334e9ba296b89","modified":1491832610379},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"b6f3a06a94a6ee5470c956663164d58eda818a64","modified":1529554020176},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"8cf318644acc8b4978537c263290363e21c7f5af","modified":1491832610380},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1491832610373},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1491832610374},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"1a0d059799a298fe17c49a44298d32cebde93785","modified":1491832610374},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1491832610376},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1491832610375},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1491832610376},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"50450d9fdc8a2b2be8cfca51e3e1a01ffd636c0b","modified":1529554020175},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1491832610377},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"62fbbd32cf5a99ae550c45c763a2c4813a138d01","modified":1529554020179},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"875cbe88d5c7f6248990e2beb97c9828920e7e24","modified":1529554020181},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"caf263d1928496688c0e1419801eafd7e6919ce5","modified":1491832610382},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1491832610382},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1491832610383},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"a6c6eb8adba0a090ad1f4b9124e866887f20d10d","modified":1529554020182},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"d0d7a5c90d62b685520d2b47fea8ba6019ff5402","modified":1529554020183},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"27deb3d3a243d30022055dac7dad851024099a8b","modified":1491832610384},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"ca88ea6999a61fb905eb6e72eba5f92d4ee31e6e","modified":1529554020186},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1491832610385},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"b2495ae5e04dcca610aacadc47881d9e716cd440","modified":1529554020186},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"ccb34c52be8adba5996c6b94f9e723bd07d34c16","modified":1529554020188},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1491832610386},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"7968343e41f8b94b318c36289dff1196c3eb1791","modified":1529554020188},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"761eba9811b050b25d548cc0854de4824b41eb08","modified":1491832610387},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"39f04c4c7237a4e10acd3002331992b79945d241","modified":1529554020191},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"89d6c3b697efc63de42afd2e89194b1be14152af","modified":1529554020189},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"8dd9a1c6f4f6baa00c2cf01837e7617120cf9660","modified":1529554020193},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"11c22f0fb3f6beb13e5a425ec064a4ff974c13b7","modified":1529554020194},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1491832610389},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"c8fe49a4bc014c24dead05b782a7082411a4abc5","modified":1529554020195},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1491832610389},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"a1521d48bb06d8d703753f52a198baa197af7da2","modified":1529554020196},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"5ef6343835f484a2c0770bd1eb9cc443609e4c39","modified":1529554020197},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1491832610391},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"bba4f3bdb7517cd85376df3e1209b570c0548c69","modified":1491832610395},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1491832610396},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"a6e7d698702c2e383dde3fde2abde27951679084","modified":1491832610396},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1491832610397},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"10599e16414a8b7a76c4e79e6617b5fe3d4d1adf","modified":1529554020205},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"874278147115601d2abf15987f5f7a84ada1ac6b","modified":1529554020204},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1491832610398},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"16087276945fa038f199692e3eabb1c52b8ea633","modified":1529554020206},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"9c8196394a89dfa40b87bf0019e80144365a9c93","modified":1529554020208},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1491832610392},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"a3bdd71237afc112b2aa255f278cab6baeb25351","modified":1491832610393},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"28825ae15fa20ae3942cdaa7bcc1f3523ce59acc","modified":1529554020207},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"f825da191816eef69ea8efb498a7f756d5ebb498","modified":1529554020199},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1491832610394},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"2ab1322fe52ab5aafd49e68f5bd890e8380ee927","modified":1529554020199},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"b7076e58d647265ee0ad2b461fe8ce72c9373bc5","modified":1529554020200},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"9a409b798decdefdaf7a23f0b11004a8c27e82f3","modified":1529554020201},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"154a87a32d2fead480d5e909c37f6c476671c5e6","modified":1529554020202},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"b80604868e4f5cf20fccafd7ee415c20c804f700","modified":1529554020203},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1491832610409},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1491832610409},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1491832610412},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1529554020238},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1529554020240},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1529554020239},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1529554020242},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1529554020242},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1491832610447},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1491832610448},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1491832610449},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1491832610449},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1491832610450},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1491832610450},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1491832610466},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1491832610469},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1491832610477},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"90a1b22129efc172e2dfcceeeb76bff58bc3192f","modified":1491832610441},{"_id":"themes/next/source/lib/three/three.min.js","hash":"26273b1cb4914850a89529b48091dc584f2c57b8","modified":1491832610491},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1491832610475},{"_id":"themes/next/.git/objects/pack/pack-b917c6fb2d5a18e3923541264dd980ef922f76a8.pack","hash":"a2090623e1f09e839e62e38f9a1f2f8bd588e039","modified":1529553933241},{"_id":"themes/next/.git/objects/pack/pack-68527ffb7261713ce611682d19be09c63324ba35.pack","hash":"26317d834bf4b97b0afac3a3aceec64e1977a124","modified":1491832609951},{"_id":"public/tags/index.html","hash":"22ded7e213069df4c955e23738567063142a3647","modified":1536764976363},{"_id":"public/2018/07/04/zookeeper-puzzle-1/index.html","hash":"2d5e53c74405aff1a3eadd6a1179c98cf75144bf","modified":1536764976364},{"_id":"public/2018/07/07/jvmtop-profile/index.html","hash":"2e80dea8683e2d74a920d574c80c8206b0a71d6e","modified":1536764976364},{"_id":"public/2018/07/25/front-back-seperate/index.html","hash":"4d53cf893cf53196df336f984815f860b0774a4d","modified":1536764976364},{"_id":"public/2018/06/14/close-wait-issue/index.html","hash":"f99f031f2cc3b1bec66be26c0955595f1c546d13","modified":1536764976364},{"_id":"public/2018/06/07/core-java-equals/index.html","hash":"56d8f0779bc81cca2504ebf63c997c4ed9405341","modified":1536764976364},{"_id":"public/2018/06/27/jvisual-find-memory-leak/index.html","hash":"7ea1a3c172caadc7dea091ca004fc4d0e132b4ad","modified":1536764976364},{"_id":"public/2017/07/28/left-shift/index.html","hash":"9bb79343afe7482a458057dd58515fcbe8007ae3","modified":1536764976364},{"_id":"public/2017/07/07/sth-about-fread/index.html","hash":"ae37aced16c0550405f2d58df59484a814f59ad3","modified":1536764976364},{"_id":"public/2017/05/09/power-adjustment/index.html","hash":"47f41a4c4fba5edf24a36c7f4e1067b3c065fbe1","modified":1536764976365},{"_id":"public/2017/05/04/puzzle-of-c-pointer/index.html","hash":"a090bb23c50d46a44a5031275cb5a0e69da4fa39","modified":1536764976365},{"_id":"public/2016/08/02/qa-of-unp/index.html","hash":"ac1790b6552e5e6208e5ae73b83cfc8bb50aa93f","modified":1536764976365},{"_id":"public/2016/07/14/learn-sth-from-chumen/index.html","hash":"5278d1015bc930b45ae0cdf309def8e0136bab61","modified":1536764976365},{"_id":"public/2016/07/04/generate-core-file/index.html","hash":"76a83dac6c603acc08ea02527bfde2d66c414be0","modified":1536764976365},{"_id":"public/2016/06/29/bugzilla-in-docker/index.html","hash":"92d87593db8f06fab5f592da61ee5299d310d783","modified":1536764976365},{"_id":"public/2016/06/22/svn-hooks/index.html","hash":"e282f83f941227a4d8ad00ad29b7ea564e344c2c","modified":1536764976365},{"_id":"public/2016/05/09/after-my-machine-was-attacked/index.html","hash":"d2a9dcc435e9f2a475aac52fa301a9818dff3cac","modified":1536764976365},{"_id":"public/2016/05/05/svn-that-i-used/index.html","hash":"e2c88cc01c28a5ff3e7d196656f341f54fbf2c2c","modified":1536764976365},{"_id":"public/archives/page/6/index.html","hash":"667554d9ad10a16dd54caf3e02c5c3eafa581458","modified":1536764976365},{"_id":"public/archives/2015/index.html","hash":"ea29cda53a70ec3a91f0eb9910aa2bbfd1fb01db","modified":1536764976365},{"_id":"public/archives/2015/11/index.html","hash":"697b05ced1c5a14ef87fff8e609dfb5fb069ad71","modified":1536764976365},{"_id":"public/archives/2015/10/index.html","hash":"ea415c35734145b66b0aa2d603be7c0f5fd32545","modified":1536764976365},{"_id":"public/archives/2015/12/index.html","hash":"7de42b8f3128efe74107d7831151c07bfa13e768","modified":1536764976365},{"_id":"public/archives/2016/01/index.html","hash":"2930170947a561470b2d111234a66510a61cec3f","modified":1536764976365},{"_id":"public/archives/2016/page/3/index.html","hash":"cfe3d2c45f8b7442293014a8279590bb1b34c049","modified":1536764976365},{"_id":"public/archives/2016/04/index.html","hash":"bb7f00bfa17886ef1f913a3d50c33dcbfcb7a684","modified":1536764976365},{"_id":"public/archives/2016/02/index.html","hash":"f0ee15dbb65445041d0a8c1211aaec6605921594","modified":1536764976365},{"_id":"public/archives/2016/07/index.html","hash":"58cc6ea788096edbd9d91efd9e0cd4dc570d0fbb","modified":1536764976365},{"_id":"public/archives/2016/08/index.html","hash":"9c03f2d8f8bf0de42e81161fae96e5f49036dd75","modified":1536764976366},{"_id":"public/archives/2016/05/index.html","hash":"90e13739ffb5d96720d30a265f245ea9af22eb99","modified":1536764976366},{"_id":"public/archives/2016/06/index.html","hash":"3f9c62be35dcf6acf62b48dce2353ba09fcaf46c","modified":1536764976366},{"_id":"public/archives/2016/09/index.html","hash":"2718d2343fc4bb1f4521b74d3fa6bd9a16758e62","modified":1536764976366},{"_id":"public/archives/2016/10/index.html","hash":"a9e139a893213d0380b9a1bce1db5689ada7999a","modified":1536764976366},{"_id":"public/archives/2017/page/2/index.html","hash":"3083081a6851f9a3d996bbb0f3fdc3b10e582ddc","modified":1536764976366},{"_id":"public/archives/2017/04/index.html","hash":"b7473cff274ad38cc832b3f9348f60e0d2da1f44","modified":1536764976366},{"_id":"public/archives/2017/05/index.html","hash":"6481e1222fa57cd0f8279223868f21d9989197fa","modified":1536764976366},{"_id":"public/archives/2018/06/index.html","hash":"d05cc84b699da2e4367007f3108289ef951aa1ab","modified":1536764976366},{"_id":"public/archives/2018/index.html","hash":"4f8df427424b7684cba129fd2b7d4ef9aceb58a5","modified":1536764976366},{"_id":"public/archives/2017/06/index.html","hash":"b92441a56b007e33bff5317bf029ea232efe98cb","modified":1536764976366},{"_id":"public/archives/2018/07/index.html","hash":"f09ad94c6f179d631208076decf4e4b3fb0100d1","modified":1536764976366},{"_id":"public/archives/2017/07/index.html","hash":"989c5a2bcbb922065e47f9e2c403b387554d91c1","modified":1536764976366},{"_id":"public/tags/HBase/index.html","hash":"6552d58348e73ecb64465c704738ce9f8c847953","modified":1536764976366},{"_id":"public/tags/C-C/index.html","hash":"4ba825bfc9833887ed0d9468f13f56f8d284b774","modified":1536764976366},{"_id":"public/tags/AI/index.html","hash":"64b66dae5634cc49059505abc4abe3bf868440ad","modified":1536764976366},{"_id":"public/tags/Maven/index.html","hash":"0744aa0f8d3cbee748c2e7c3e95cad542eb70ae6","modified":1536764976366},{"_id":"public/tags/Java/index.html","hash":"163ca28ec30e25cee8ea294c071022b7c4c43fc0","modified":1536764976366},{"_id":"public/tags/Spring/index.html","hash":"a384a9db835d4a13ba9b4b1ce5e2e1b40e211eab","modified":1536764976366},{"_id":"public/tags/财商/index.html","hash":"d2bb7dbfe63761f4d22aa23b4758538cba42be53","modified":1536764976366},{"_id":"public/tags/哲学/index.html","hash":"32484a6384b80503cb5985acf8399589b2e0164b","modified":1536764976367},{"_id":"public/tags/计算机原理/index.html","hash":"641f7c29060454d88f904c66c0423673621d8084","modified":1536764976367},{"_id":"public/tags/读书/index.html","hash":"c8bf0b90d216482038673c27e278659d17badf2d","modified":1536764976367},{"_id":"public/tags/Linux/index.html","hash":"91c7c7a9f74684f08ae3fddcc302ffb46dfc262d","modified":1536764976367},{"_id":"public/tags/SVN/index.html","hash":"914c0abc4c4107cad23679b6177b9d47811ab3a0","modified":1536764976367},{"_id":"public/tags/信息安全/index.html","hash":"d4e3eec1eb2eaf4d6678a329523d47db9a51a30f","modified":1536764976367},{"_id":"public/tags/LVM/index.html","hash":"8e168a76ea9819d66dc37ba3b0b83f358ee11098","modified":1536764976367},{"_id":"public/tags/贯行/index.html","hash":"d8a6905e7c8e26eda86c6c4c29feba767de4709c","modified":1536764976367},{"_id":"public/tags/内网穿透/index.html","hash":"deb6909dba1b11ae36b943832d88287a69596cec","modified":1536764976367},{"_id":"public/tags/Eclipse/index.html","hash":"5d1267d104a3217e081a737da8efc5dc6e3565ed","modified":1536764976367},{"_id":"public/tags/Docker/index.html","hash":"916b30f2a2f0fdf232c1b3faf2b566faa98d49d1","modified":1536764976367},{"_id":"public/tags/Hadoop/index.html","hash":"6a68821733e611d3814c86b2e57355c1613c4000","modified":1536764976367},{"_id":"public/tags/Network/index.html","hash":"a3cc5e9ba894dea1393be8267fab71b1790aac2a","modified":1536764976367},{"_id":"public/tags/Wisdom/index.html","hash":"be81b130e1064008baee94a6678eb061ffa212ba","modified":1536764976367},{"_id":"public/tags/TCP-IP/index.html","hash":"97f82db42e8cc3adde5ac603ebc41bff4f60d14b","modified":1536764976367},{"_id":"public/tags/李笑来/index.html","hash":"6e8b9fa5eb6f2a0fe882ae7c1650af20e0f30294","modified":1536764976367},{"_id":"public/tags/随想/index.html","hash":"256b3a7bd33757f4c46497f85e64224b4756359a","modified":1536764976367},{"_id":"public/tags/Tomcat/index.html","hash":"aca4c08215d3998b14aec2cbff4be3fd7c75abcc","modified":1536764976367},{"_id":"public/tags/5分钟商学院/index.html","hash":"cde0989c9b977af495c1dedf54639ef122eed188","modified":1536764976367},{"_id":"public/tags/刘润/index.html","hash":"638ff9d364e41bbe851552a34b701c0ff1f9ae10","modified":1536764976367},{"_id":"public/tags/商业知识/index.html","hash":"c9061488845c00acdfaa251e98a0d17640f308ab","modified":1536764976367},{"_id":"public/tags/年总结/index.html","hash":"5e186c63b4a5a3384b45a72bfdb3ff1bd8fed941","modified":1536764976367},{"_id":"public/tags/I2C/index.html","hash":"a7cebb7833b5b0aaedbba6f2d1688c7e5c944ff3","modified":1536764976368},{"_id":"public/tags/rx8025/index.html","hash":"46fb6296e7adfe2515f5b0169e5b000dcc72e87c","modified":1536764976368},{"_id":"public/tags/Beaglebone/index.html","hash":"546890193d5892f24318cbbfe289adafec0b905b","modified":1536764976368},{"_id":"public/tags/时间管理/index.html","hash":"fc347a02fb8df7c43ca2668f50af5c3297b582a6","modified":1536764976368},{"_id":"public/tags/成长日志/index.html","hash":"c9a71f50a39e60b14ad4dd1a165daf453fec44fd","modified":1536764976368},{"_id":"public/tags/动态规划/index.html","hash":"5d73888fc8096b18450d50f0d7a24805c594e277","modified":1536764976368},{"_id":"public/tags/指针/index.html","hash":"679dbbcbb6a66d43c78baede2c949edc1b26430d","modified":1536764976368},{"_id":"public/tags/刻意练习/index.html","hash":"7deebab5b60a3f25a31513b18f57dc647d479842","modified":1536764976369},{"_id":"public/tags/TED/index.html","hash":"8aa394afc89d4faf2a4ffc0c0e865011d3e9ff00","modified":1536764976369},{"_id":"public/tags/快乐/index.html","hash":"a2e724c587f7f5c3f75d237725c9b2539ab2803a","modified":1536764976369},{"_id":"public/tags/Mina/index.html","hash":"0e58d89c029016bb2d84a027c3646ba7b9bac888","modified":1536764976369},{"_id":"public/tags/幸福/index.html","hash":"4cab8269789f7504dde74c37a494ee22b58330ae","modified":1536764976369},{"_id":"public/categories/人工智能/index.html","hash":"18b34a911ed04538bd0ef16b8c2fcf015b2ba5dc","modified":1536764976369},{"_id":"public/categories/编程实践/index.html","hash":"5e4278b45dd9e360a4ecc4da07cc9e9eaad81117","modified":1536764976369},{"_id":"public/categories/编程实践/page/2/index.html","hash":"409b0989e9d99009d60e949ed7d0a22ad003e27a","modified":1536764976369},{"_id":"public/categories/读书笔记/index.html","hash":"3a88c8ba0eff92cd7a064cc84c71f4115cce928a","modified":1536764976369},{"_id":"public/page/6/index.html","hash":"8f9f0d8bbf17aa238e74ab17897e9d05991fcb3a","modified":1536764976369},{"_id":"public/categories/一些感悟/index.html","hash":"3bd7787f553a3a1e8039a2dc5a77b1eb27e0905f","modified":1536764976369},{"_id":"public/categories/科技与人文/index.html","hash":"3e6f4c70ecd87856381a9f7943f8947fdfaaaced","modified":1536764976369},{"_id":"public/categories/读书笔记/page/2/index.html","hash":"c08fb5bc89c09d4de94c27b4119ed685b9382522","modified":1536764976369},{"_id":"public/categories/算法/index.html","hash":"94337cd6e64fcf1b4710fa938d6e0f4dfd034091","modified":1536764976369},{"_id":"public/2018/06/16/too-many-open-files/index.html","hash":"b07c6fd30242bcde8be4165a402c7d3f102ada98","modified":1536764976369},{"_id":"public/2017/06/24/learn-from-steven-jobs/index.html","hash":"cec4e519879a1026a0c09cf4ee8f29da38c56b19","modified":1536764976370},{"_id":"public/2017/06/03/talk-about-happy/index.html","hash":"c736c61159a56896bcc8a158d47594396848f815","modified":1536764976370},{"_id":"public/2017/05/24/deliberate-practice/index.html","hash":"bab6d5ef2d6ef73b586f1e89c7b1226d8e009058","modified":1536764976370},{"_id":"public/2017/04/20/rx-8025/index.html","hash":"e0b26fa33b6292534860ff5df4133db75f0d818e","modified":1536764976370},{"_id":"public/2017/04/22/dont-cry-over-spilt-milk/index.html","hash":"16b60bd92a20cd009364caaaa41308773d0a66ec","modified":1536764976370},{"_id":"public/2017/04/14/2015-2016-summary/index.html","hash":"d00fd220a696547c52a4fd78e325568329bc29a8","modified":1536764976370},{"_id":"public/2016/10/16/living-in-the-future/index.html","hash":"cce0a7f81f6611482498440a098710fe9d1b8170","modified":1536764976370},{"_id":"public/2017/04/11/how-to-manager-your-time/index.html","hash":"2bbf685c4743a15de6b5c223a3f19358c1d60d2d","modified":1536764976370},{"_id":"public/2016/09/11/security-sense/index.html","hash":"6fee511cc66679d4f9ebec6bb13c5bdb93477c60","modified":1536764976370},{"_id":"public/2016/09/11/saving-your-attention/index.html","hash":"696dca1b871885b75f1db8e0562eff6cfd50c5fa","modified":1536764976370},{"_id":"public/2016/08/28/attention/index.html","hash":"ebf38a16cedc136afc222111d8dcc8d3474ae429","modified":1536764976370},{"_id":"public/2016/08/28/why-not-go-to-sleep/index.html","hash":"5d1e8dad53516e17d12077e1043a74c9639cbee7","modified":1536764976370},{"_id":"public/2016/08/17/tomcat-multi-virtual-host/index.html","hash":"7cd72e1fce2b9a4b5ed6f3db77dd0d28452cbb02","modified":1536764976370},{"_id":"public/2016/08/13/c-sendmail/index.html","hash":"2dbc2bae9afd69aa5e0da7ea09470d2de2b7e859","modified":1536764976370},{"_id":"public/2016/08/05/about-sigpipe/index.html","hash":"dbd7aa948a8433e8d9fc846a6e7a98fd0428a9b6","modified":1536764976370},{"_id":"public/2016/08/02/summary-of-const/index.html","hash":"a73a80597d0ae4589d7056fec37ee9e7b73cce80","modified":1536764976370},{"_id":"public/2016/07/31/learn-sth-from-master-liu/index.html","hash":"1acc08d9a9c0dc2cdaab2121f3b16cde54521dc3","modified":1536764976371},{"_id":"public/2016/07/13/to-be-a-manager/index.html","hash":"6861b2ae3ef03128a5a714252dd73389260260e7","modified":1536764976371},{"_id":"public/2016/06/28/ant-war-task/index.html","hash":"277d6aa02e15ae25415301b4d655133b347a7e8e","modified":1536764976371},{"_id":"public/2016/06/22/autossh-helper/index.html","hash":"2cd295ac5254e3bffdd527687f6a6b1269337335","modified":1536764976371},{"_id":"public/2016/05/11/2015-work-summary/index.html","hash":"42c9d5be49e9900a34b082b15f43c334a215dec5","modified":1536764976371},{"_id":"public/2016/05/11/hbase-incremental-backup/index.html","hash":"9e66ab3aefa4aed3651c2b942d9928bec28a1add","modified":1536764976371},{"_id":"public/2016/05/09/lvm-that-i-used/index.html","hash":"ecd220d97622484faf9af930079b2b928ef3d605","modified":1536764976371},{"_id":"public/2016/04/16/little-dog-money/index.html","hash":"b29ac76977c9d47c74b470636ec97dd7b757024e","modified":1536764976371},{"_id":"public/2016/04/22/advanced-linux-programing/index.html","hash":"3d3db66028d86b83fb029126d8df7c6dccc70c01","modified":1536764976371},{"_id":"public/2016/04/11/rich-and-poor-dad/index.html","hash":"089963dfacb1e2055351f7f6a09ff79aa9a6d869","modified":1536764976371},{"_id":"public/2016/01/23/sth-about-spring-boot/index.html","hash":"f3efb647ea1e1162fffe12aaa24f969fe33a0897","modified":1536764976371},{"_id":"public/2016/02/06/sophie-s-world/index.html","hash":"3545c16124d08b48190d2f8e379c852fa72d0d9b","modified":1536764976371},{"_id":"public/2015/11/23/cplusplus-primer-v5/index.html","hash":"ae8ace6d2959bf1b77d9d871eabb2c20c2cf09c0","modified":1536764976371},{"_id":"public/2015/11/14/hbase-java-api-example/index.html","hash":"d4f489397db1b049fe11804d4a541d29c433f4c1","modified":1536764976371},{"_id":"public/2015/11/21/computer-systems/index.html","hash":"0fce1352026e77113dd72b59ed6d18e9458e316a","modified":1536764976372},{"_id":"public/2015/12/20/maven-howto/index.html","hash":"68c1dd96a445edf90e629df23bbfa87a16399d3f","modified":1536764976372},{"_id":"public/2015/10/27/multi-agent/index.html","hash":"84440327ef9f8b7ad482c917adbabaaf998904eb","modified":1536764976372},{"_id":"public/archives/index.html","hash":"c622a8668568b462994a68ec40921f407dca7c66","modified":1536764976372},{"_id":"public/archives/page/2/index.html","hash":"9312b9879a211b8d025c81fa05ee5839f8e34127","modified":1536764976372},{"_id":"public/archives/page/4/index.html","hash":"4f26fd172a6837f72272be9363a77ae46134013b","modified":1536764976372},{"_id":"public/archives/page/3/index.html","hash":"e7d6af4869ef4bc5f445622da6d71bf87e2eb6a5","modified":1536764976372},{"_id":"public/archives/page/5/index.html","hash":"4b4eab4779c8057a73b2390c1349ef6239492815","modified":1536764976372},{"_id":"public/archives/2016/page/2/index.html","hash":"c79282cfa6a965ba0e2315bb7ea8dd1fac903e60","modified":1536764976372},{"_id":"public/archives/2016/index.html","hash":"b38fb82be34ea362d7bff635322be461706f5916","modified":1536764976372},{"_id":"public/archives/2017/index.html","hash":"cd5a3ed9de0836029ac3a66238134733d4582ca6","modified":1536764976372},{"_id":"public/page/3/index.html","hash":"e10d8069193649d285c8cd0333ef6659e5119aef","modified":1536764976372},{"_id":"public/index.html","hash":"f71ac560c382bc47d38749c5a3ff955e04825e85","modified":1536764976372},{"_id":"public/page/2/index.html","hash":"7c4cef713b2a6ed06ccd93793afdba6910e08f91","modified":1536764976372},{"_id":"public/page/4/index.html","hash":"cfcb2af1c8ab53cf01f24c4ae4e08e2afb90fcd3","modified":1536764976372},{"_id":"public/page/5/index.html","hash":"8ef0eb0b36b8067fa742f836e2864066ff5fbeca","modified":1536764976373},{"_id":"public/2018/09/12/use-jmc-jfr-jprofile/index.html","hash":"c43383181a0ac7ce9ce9bba246e836a8be6b3861","modified":1536764976379},{"_id":"public/archives/2018/09/index.html","hash":"6cdef0c420f7f40912b10bbe8448898f2223136e","modified":1536764976379},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1536764976379},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1536764976379},{"_id":"public/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1536764976379},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1536764976379},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1536764976379},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1536764976379},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1536764976379},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1536764976379},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1536764976380},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1536764976380},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1536764976380},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1536764976380},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1536764976380},{"_id":"public/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1536764976380},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1536764976380},{"_id":"public/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1536764976380},{"_id":"public/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1536764976380},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1536764976380},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1536764976380},{"_id":"public/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1536764976380},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1536764976380},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1536764976380},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1536764976380},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1536764976380},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1536764976380},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1536764976380},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1536764976825},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1536764976825},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1536764976829},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1536764976829},{"_id":"public/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1536764976829},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1536764976829},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1536764976829},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1536764976837},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1536764976838},{"_id":"public/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1536764976843},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1536764976843},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1536764976843},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1536764976843},{"_id":"public/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1536764976843},{"_id":"public/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1536764976843},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1536764976843},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1536764976843},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1536764976843},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1536764976843},{"_id":"public/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1536764976843},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1536764976843},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1536764976843},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1536764976843},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1536764976843},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1536764976843},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1536764976843},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1536764976844},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1536764976844},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1536764976844},{"_id":"public/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1536764976844},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1536764976844},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1536764976844},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1536764976844},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1536764976844},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1536764976844},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1536764976844},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1536764976844},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1536764976844},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1536764976844},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1536764976844},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1536764976844},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1536764976844},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1536764976844},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1536764976844},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1536764976844},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1536764976844},{"_id":"public/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1536764976844},{"_id":"public/css/main.css","hash":"bb784841065530ea01dcff1055d44385180939d6","modified":1536764976844},{"_id":"public/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1536764976845},{"_id":"public/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1536764976845},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1536764976845},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1536764976845},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1536764976845},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1536764976845},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1536764976845},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1536764976845},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1536764976845},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1536764976845},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1536764976845},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1536764976845},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1536764976845},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1536764976845},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1536764976850},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1536764976850},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1536764976851},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1536764976851},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1536764976851},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1536764976851},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1536764976851},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1536764976851},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1536764976851},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1536764976851},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1536764976851},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1536764976851},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1536764976851},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1536764976851},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1536764976851},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1536764976851},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1536764976852},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1536764976852},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1536764976852},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1536764976852},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1536764976864}],"Category":[{"name":"人工智能","_id":"cjlza6m400003pgup8t3316fx"},{"name":"编程实践","_id":"cjlza6m450008pgupz78tap8a"},{"name":"读书笔记","_id":"cjlza6m4a000epgupfxqwwrke"},{"name":"一些感悟","_id":"cjlza6m4v001bpguptnrymwhs"},{"name":"科技与人文","_id":"cjlza6m5b0022pgupica3k8sa"},{"name":"算法","_id":"cjlza6may004rpgupi66nnary"}],"Data":[],"Page":[{"title":"tags","date":"2018-06-07T05:41:06.000Z","type":"tags","_content":"\n\n","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2018-06-07 13:41:06\ntype: \"tags\"\n---\n\n\n","updated":"2018-06-07T05:43:28.553Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjlza6m3t0000pgupwg8u9631","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"layout":"post","title":"Multi-Agent Systems简介","date":"2015-10-27T00:50:00.000Z","comments":1,"_content":"\n本文简单介绍Multi-Agent Systems这项技术。\n\n<!--more-->\n\n## 1. 什么是Multi-Agent Systems\n\n### 1.1 Multi-Agent Systems的产生背景\n\n源于20世纪70年代MIT关于分布式人工智能的研究，目的是通过：\n\n- 简化分布计算的复杂性——将分布系统软件间的协作独立出来；\n- 克服人机界面的局限性——减少使用者时间和决策成本；\n\n最终来提高软件系统解决复杂问题的能力。\n\n### 1.2 Agent的定义\n\nAgent（软件实体）：能在特定的环境下连续、自发地实现功能，并且与相关代理和进程相联系的软件实体。\n\n### 1.3 Agent的属性\n\n- 自主性\n\t- 代理性：代表用户工作；\n\t- 自制性：没有用户和其他代理干预的情况下完成大部分工作；\n\t- 连续性：工作是连续的，而不是只执行一次；\n\t- 主动响应能力：主动进行基于自身目标的能力；\n- 互操作\n\t- 被动响应能力：感知环境，并对环境做出适当反应；\n\t- 社会能力：与其他代理或用户交互完成目标；\n\t- 可移动性：携带数据和指令移动到其他环境工作；\n- 学习\n\t- 自适应性：代理能适应环境变化（目标变化、代理资源变化）；\n\n### 1.4 Multi-Agent Systems的定义\n\nSystems（系统）：在这里指各个能够独立运作的子系统；\n\nMulti-Agent Systems（多代理系统）：[单代理+多个子系统]不能够解决的复杂问题，由[多个代理+多个子系统]协商合作形成的问题求解网络。\n\n[单代理+多个子系统]：\n- 便于快速的将复杂系统分解成简单的子系统；\n\n[多个代理+多个子系统]：\n- 分布系统软件天然需要多代理；\n- 复杂的大型系统使用单代理，该单代理将成为系统能力的瓶颈；\n\n### 1.5 Multi-Agent Systems是如何协作的\n\n各个子系统如何通过代理协作，简要概括如下：\n1. 首先，提出“谁能解决问题？”；\n2. 其次，代理网络中能解决这个问题回答“我能，但是得符合我的条件”；\n3. 于是，代理间进行协商，在解决问题后把结果返回给具体的问题提出者；\n\n#### 1.5.1 行业例子\n\nWWW（万维网）\n\n- 浏览器输入域名 ==> DNS分布式数据库系统（域名和IP相互映射） ==> 提供具体服务的服务器；\n\nGuardian辅助看护系统\n\n- 检查代理：收集传感器数据 ==> 推理代理：组织系统的决策过程 ==> 控制代理：控制系统的运行；\n\nCIMS应用集成平台\n\n- 多应用：提供具体服务 ==> 多软件代理：定位到能提供具体服务的应用，与该应用进行通信 ==> 单控制代理：协调软件代理间的工作；\n\n## 2. 如何实现Multi-Agent Systems\n\n### 2.1 Multi-Agent Systems的相关理论\n\n知识表达与推理：通过一定的数据结构以及相应操作对要解决的问题进行建模。\n\n- Disciple知识表达方法；\n- 知识学习、知识获得；\n\n代理通信语言(ACL)：代理之间的通信与交流需要协议基础，一条ACL消息一个KQML表达，表达的“参数”是由词汇表中的词锁组成的KIF句子。\n\n- KIF知识交换格式的“内部”语言；\n- 词汇表；\n- KQML知识查询和操作语言的“外部语言”；\n\n多代理协调模型：代理与代理、代理与外界的交互方式。\n\n- 控制驱动：外部世界以事件触发的方式与代理交互（状态机）；\n- 数据驱动：外部世界以数据交换的方式与代理交互；\n\n代理的协商模型：代理间协作的模式。\n\n- 表达和维护自身信念、愿望、目标和意图模型的能力；\n- 对其他代理的信念、愿望、目标和意图进行推测的能力；\n- 影响其他代理的信念、意图和行为的能力；\n\n### 2.2 面向代理的软件工程\n\n既可以把复杂的系统分解成子系统，然后使用代理进行交互、协作；也可以把互相有关联的子系统通过代理组织成一个实体。\n\nTODO 并没有确切规范，待补充\n\n1. 划分子系统：把因复杂或分布的软件系统切割成一个又一个的能实现一个或多个特定目标的子系统；\n\t- 确定子系统的类型、目标；\n\t- 确定子系统的数据接口、提供的服务；\n\t- 确定子系统的层次结构——使用UML进行建模；\n2. 定义软件代理：通常为一个子系统设置一个代理；\n\t- 确定软件代理的类型、个数；\n\t- 确定软件代理间的通信方式；\n\t- 确定软件代理间存在的交互；\n\t- 确定软件代理的层次结构——使用UML进行建模；\n\n面向代理的软件工程其实是对面向对象的软件工程更高一级别的抽象。\n\n### 2.3 本地ERP与电能云平台构成的多代理系统实现举例\n\nTODO 工厂有几个子系统未知、具备的接口未知，待补充\n","source":"_posts/2015-10-27-multi-agent.markdown","raw":"---\nlayout: post\ntitle: Multi-Agent Systems简介\ndate: '2015-10-27 08:50'\ncomments: true\ncategories: ['人工智能']\ntags: ['AI']\n---\n\n本文简单介绍Multi-Agent Systems这项技术。\n\n<!--more-->\n\n## 1. 什么是Multi-Agent Systems\n\n### 1.1 Multi-Agent Systems的产生背景\n\n源于20世纪70年代MIT关于分布式人工智能的研究，目的是通过：\n\n- 简化分布计算的复杂性——将分布系统软件间的协作独立出来；\n- 克服人机界面的局限性——减少使用者时间和决策成本；\n\n最终来提高软件系统解决复杂问题的能力。\n\n### 1.2 Agent的定义\n\nAgent（软件实体）：能在特定的环境下连续、自发地实现功能，并且与相关代理和进程相联系的软件实体。\n\n### 1.3 Agent的属性\n\n- 自主性\n\t- 代理性：代表用户工作；\n\t- 自制性：没有用户和其他代理干预的情况下完成大部分工作；\n\t- 连续性：工作是连续的，而不是只执行一次；\n\t- 主动响应能力：主动进行基于自身目标的能力；\n- 互操作\n\t- 被动响应能力：感知环境，并对环境做出适当反应；\n\t- 社会能力：与其他代理或用户交互完成目标；\n\t- 可移动性：携带数据和指令移动到其他环境工作；\n- 学习\n\t- 自适应性：代理能适应环境变化（目标变化、代理资源变化）；\n\n### 1.4 Multi-Agent Systems的定义\n\nSystems（系统）：在这里指各个能够独立运作的子系统；\n\nMulti-Agent Systems（多代理系统）：[单代理+多个子系统]不能够解决的复杂问题，由[多个代理+多个子系统]协商合作形成的问题求解网络。\n\n[单代理+多个子系统]：\n- 便于快速的将复杂系统分解成简单的子系统；\n\n[多个代理+多个子系统]：\n- 分布系统软件天然需要多代理；\n- 复杂的大型系统使用单代理，该单代理将成为系统能力的瓶颈；\n\n### 1.5 Multi-Agent Systems是如何协作的\n\n各个子系统如何通过代理协作，简要概括如下：\n1. 首先，提出“谁能解决问题？”；\n2. 其次，代理网络中能解决这个问题回答“我能，但是得符合我的条件”；\n3. 于是，代理间进行协商，在解决问题后把结果返回给具体的问题提出者；\n\n#### 1.5.1 行业例子\n\nWWW（万维网）\n\n- 浏览器输入域名 ==> DNS分布式数据库系统（域名和IP相互映射） ==> 提供具体服务的服务器；\n\nGuardian辅助看护系统\n\n- 检查代理：收集传感器数据 ==> 推理代理：组织系统的决策过程 ==> 控制代理：控制系统的运行；\n\nCIMS应用集成平台\n\n- 多应用：提供具体服务 ==> 多软件代理：定位到能提供具体服务的应用，与该应用进行通信 ==> 单控制代理：协调软件代理间的工作；\n\n## 2. 如何实现Multi-Agent Systems\n\n### 2.1 Multi-Agent Systems的相关理论\n\n知识表达与推理：通过一定的数据结构以及相应操作对要解决的问题进行建模。\n\n- Disciple知识表达方法；\n- 知识学习、知识获得；\n\n代理通信语言(ACL)：代理之间的通信与交流需要协议基础，一条ACL消息一个KQML表达，表达的“参数”是由词汇表中的词锁组成的KIF句子。\n\n- KIF知识交换格式的“内部”语言；\n- 词汇表；\n- KQML知识查询和操作语言的“外部语言”；\n\n多代理协调模型：代理与代理、代理与外界的交互方式。\n\n- 控制驱动：外部世界以事件触发的方式与代理交互（状态机）；\n- 数据驱动：外部世界以数据交换的方式与代理交互；\n\n代理的协商模型：代理间协作的模式。\n\n- 表达和维护自身信念、愿望、目标和意图模型的能力；\n- 对其他代理的信念、愿望、目标和意图进行推测的能力；\n- 影响其他代理的信念、意图和行为的能力；\n\n### 2.2 面向代理的软件工程\n\n既可以把复杂的系统分解成子系统，然后使用代理进行交互、协作；也可以把互相有关联的子系统通过代理组织成一个实体。\n\nTODO 并没有确切规范，待补充\n\n1. 划分子系统：把因复杂或分布的软件系统切割成一个又一个的能实现一个或多个特定目标的子系统；\n\t- 确定子系统的类型、目标；\n\t- 确定子系统的数据接口、提供的服务；\n\t- 确定子系统的层次结构——使用UML进行建模；\n2. 定义软件代理：通常为一个子系统设置一个代理；\n\t- 确定软件代理的类型、个数；\n\t- 确定软件代理间的通信方式；\n\t- 确定软件代理间存在的交互；\n\t- 确定软件代理的层次结构——使用UML进行建模；\n\n面向代理的软件工程其实是对面向对象的软件工程更高一级别的抽象。\n\n### 2.3 本地ERP与电能云平台构成的多代理系统实现举例\n\nTODO 工厂有几个子系统未知、具备的接口未知，待补充\n","slug":"multi-agent","published":1,"updated":"2017-04-09T14:35:50.000Z","photos":[],"link":"","_id":"cjlza6m3u0001pguppx3p8ecg","content":"<p>本文简单介绍Multi-Agent Systems这项技术。</p>\n<a id=\"more\"></a>\n<h2 id=\"1-什么是Multi-Agent-Systems\"><a href=\"#1-什么是Multi-Agent-Systems\" class=\"headerlink\" title=\"1. 什么是Multi-Agent Systems\"></a>1. 什么是Multi-Agent Systems</h2><h3 id=\"1-1-Multi-Agent-Systems的产生背景\"><a href=\"#1-1-Multi-Agent-Systems的产生背景\" class=\"headerlink\" title=\"1.1 Multi-Agent Systems的产生背景\"></a>1.1 Multi-Agent Systems的产生背景</h3><p>源于20世纪70年代MIT关于分布式人工智能的研究，目的是通过：</p>\n<ul>\n<li>简化分布计算的复杂性——将分布系统软件间的协作独立出来；</li>\n<li>克服人机界面的局限性——减少使用者时间和决策成本；</li>\n</ul>\n<p>最终来提高软件系统解决复杂问题的能力。</p>\n<h3 id=\"1-2-Agent的定义\"><a href=\"#1-2-Agent的定义\" class=\"headerlink\" title=\"1.2 Agent的定义\"></a>1.2 Agent的定义</h3><p>Agent（软件实体）：能在特定的环境下连续、自发地实现功能，并且与相关代理和进程相联系的软件实体。</p>\n<h3 id=\"1-3-Agent的属性\"><a href=\"#1-3-Agent的属性\" class=\"headerlink\" title=\"1.3 Agent的属性\"></a>1.3 Agent的属性</h3><ul>\n<li>自主性<ul>\n<li>代理性：代表用户工作；</li>\n<li>自制性：没有用户和其他代理干预的情况下完成大部分工作；</li>\n<li>连续性：工作是连续的，而不是只执行一次；</li>\n<li>主动响应能力：主动进行基于自身目标的能力；</li>\n</ul>\n</li>\n<li>互操作<ul>\n<li>被动响应能力：感知环境，并对环境做出适当反应；</li>\n<li>社会能力：与其他代理或用户交互完成目标；</li>\n<li>可移动性：携带数据和指令移动到其他环境工作；</li>\n</ul>\n</li>\n<li>学习<ul>\n<li>自适应性：代理能适应环境变化（目标变化、代理资源变化）；</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"1-4-Multi-Agent-Systems的定义\"><a href=\"#1-4-Multi-Agent-Systems的定义\" class=\"headerlink\" title=\"1.4 Multi-Agent Systems的定义\"></a>1.4 Multi-Agent Systems的定义</h3><p>Systems（系统）：在这里指各个能够独立运作的子系统；</p>\n<p>Multi-Agent Systems（多代理系统）：[单代理+多个子系统]不能够解决的复杂问题，由[多个代理+多个子系统]协商合作形成的问题求解网络。</p>\n<p>[单代理+多个子系统]：</p>\n<ul>\n<li>便于快速的将复杂系统分解成简单的子系统；</li>\n</ul>\n<p>[多个代理+多个子系统]：</p>\n<ul>\n<li>分布系统软件天然需要多代理；</li>\n<li>复杂的大型系统使用单代理，该单代理将成为系统能力的瓶颈；</li>\n</ul>\n<h3 id=\"1-5-Multi-Agent-Systems是如何协作的\"><a href=\"#1-5-Multi-Agent-Systems是如何协作的\" class=\"headerlink\" title=\"1.5 Multi-Agent Systems是如何协作的\"></a>1.5 Multi-Agent Systems是如何协作的</h3><p>各个子系统如何通过代理协作，简要概括如下：</p>\n<ol>\n<li>首先，提出“谁能解决问题？”；</li>\n<li>其次，代理网络中能解决这个问题回答“我能，但是得符合我的条件”；</li>\n<li>于是，代理间进行协商，在解决问题后把结果返回给具体的问题提出者；</li>\n</ol>\n<h4 id=\"1-5-1-行业例子\"><a href=\"#1-5-1-行业例子\" class=\"headerlink\" title=\"1.5.1 行业例子\"></a>1.5.1 行业例子</h4><p>WWW（万维网）</p>\n<ul>\n<li>浏览器输入域名 ==&gt; DNS分布式数据库系统（域名和IP相互映射） ==&gt; 提供具体服务的服务器；</li>\n</ul>\n<p>Guardian辅助看护系统</p>\n<ul>\n<li>检查代理：收集传感器数据 ==&gt; 推理代理：组织系统的决策过程 ==&gt; 控制代理：控制系统的运行；</li>\n</ul>\n<p>CIMS应用集成平台</p>\n<ul>\n<li>多应用：提供具体服务 ==&gt; 多软件代理：定位到能提供具体服务的应用，与该应用进行通信 ==&gt; 单控制代理：协调软件代理间的工作；</li>\n</ul>\n<h2 id=\"2-如何实现Multi-Agent-Systems\"><a href=\"#2-如何实现Multi-Agent-Systems\" class=\"headerlink\" title=\"2. 如何实现Multi-Agent Systems\"></a>2. 如何实现Multi-Agent Systems</h2><h3 id=\"2-1-Multi-Agent-Systems的相关理论\"><a href=\"#2-1-Multi-Agent-Systems的相关理论\" class=\"headerlink\" title=\"2.1 Multi-Agent Systems的相关理论\"></a>2.1 Multi-Agent Systems的相关理论</h3><p>知识表达与推理：通过一定的数据结构以及相应操作对要解决的问题进行建模。</p>\n<ul>\n<li>Disciple知识表达方法；</li>\n<li>知识学习、知识获得；</li>\n</ul>\n<p>代理通信语言(ACL)：代理之间的通信与交流需要协议基础，一条ACL消息一个KQML表达，表达的“参数”是由词汇表中的词锁组成的KIF句子。</p>\n<ul>\n<li>KIF知识交换格式的“内部”语言；</li>\n<li>词汇表；</li>\n<li>KQML知识查询和操作语言的“外部语言”；</li>\n</ul>\n<p>多代理协调模型：代理与代理、代理与外界的交互方式。</p>\n<ul>\n<li>控制驱动：外部世界以事件触发的方式与代理交互（状态机）；</li>\n<li>数据驱动：外部世界以数据交换的方式与代理交互；</li>\n</ul>\n<p>代理的协商模型：代理间协作的模式。</p>\n<ul>\n<li>表达和维护自身信念、愿望、目标和意图模型的能力；</li>\n<li>对其他代理的信念、愿望、目标和意图进行推测的能力；</li>\n<li>影响其他代理的信念、意图和行为的能力；</li>\n</ul>\n<h3 id=\"2-2-面向代理的软件工程\"><a href=\"#2-2-面向代理的软件工程\" class=\"headerlink\" title=\"2.2 面向代理的软件工程\"></a>2.2 面向代理的软件工程</h3><p>既可以把复杂的系统分解成子系统，然后使用代理进行交互、协作；也可以把互相有关联的子系统通过代理组织成一个实体。</p>\n<p>TODO 并没有确切规范，待补充</p>\n<ol>\n<li>划分子系统：把因复杂或分布的软件系统切割成一个又一个的能实现一个或多个特定目标的子系统；<ul>\n<li>确定子系统的类型、目标；</li>\n<li>确定子系统的数据接口、提供的服务；</li>\n<li>确定子系统的层次结构——使用UML进行建模；</li>\n</ul>\n</li>\n<li>定义软件代理：通常为一个子系统设置一个代理；<ul>\n<li>确定软件代理的类型、个数；</li>\n<li>确定软件代理间的通信方式；</li>\n<li>确定软件代理间存在的交互；</li>\n<li>确定软件代理的层次结构——使用UML进行建模；</li>\n</ul>\n</li>\n</ol>\n<p>面向代理的软件工程其实是对面向对象的软件工程更高一级别的抽象。</p>\n<h3 id=\"2-3-本地ERP与电能云平台构成的多代理系统实现举例\"><a href=\"#2-3-本地ERP与电能云平台构成的多代理系统实现举例\" class=\"headerlink\" title=\"2.3 本地ERP与电能云平台构成的多代理系统实现举例\"></a>2.3 本地ERP与电能云平台构成的多代理系统实现举例</h3><p>TODO 工厂有几个子系统未知、具备的接口未知，待补充</p>\n","site":{"data":{}},"excerpt":"<p>本文简单介绍Multi-Agent Systems这项技术。</p>","more":"<h2 id=\"1-什么是Multi-Agent-Systems\"><a href=\"#1-什么是Multi-Agent-Systems\" class=\"headerlink\" title=\"1. 什么是Multi-Agent Systems\"></a>1. 什么是Multi-Agent Systems</h2><h3 id=\"1-1-Multi-Agent-Systems的产生背景\"><a href=\"#1-1-Multi-Agent-Systems的产生背景\" class=\"headerlink\" title=\"1.1 Multi-Agent Systems的产生背景\"></a>1.1 Multi-Agent Systems的产生背景</h3><p>源于20世纪70年代MIT关于分布式人工智能的研究，目的是通过：</p>\n<ul>\n<li>简化分布计算的复杂性——将分布系统软件间的协作独立出来；</li>\n<li>克服人机界面的局限性——减少使用者时间和决策成本；</li>\n</ul>\n<p>最终来提高软件系统解决复杂问题的能力。</p>\n<h3 id=\"1-2-Agent的定义\"><a href=\"#1-2-Agent的定义\" class=\"headerlink\" title=\"1.2 Agent的定义\"></a>1.2 Agent的定义</h3><p>Agent（软件实体）：能在特定的环境下连续、自发地实现功能，并且与相关代理和进程相联系的软件实体。</p>\n<h3 id=\"1-3-Agent的属性\"><a href=\"#1-3-Agent的属性\" class=\"headerlink\" title=\"1.3 Agent的属性\"></a>1.3 Agent的属性</h3><ul>\n<li>自主性<ul>\n<li>代理性：代表用户工作；</li>\n<li>自制性：没有用户和其他代理干预的情况下完成大部分工作；</li>\n<li>连续性：工作是连续的，而不是只执行一次；</li>\n<li>主动响应能力：主动进行基于自身目标的能力；</li>\n</ul>\n</li>\n<li>互操作<ul>\n<li>被动响应能力：感知环境，并对环境做出适当反应；</li>\n<li>社会能力：与其他代理或用户交互完成目标；</li>\n<li>可移动性：携带数据和指令移动到其他环境工作；</li>\n</ul>\n</li>\n<li>学习<ul>\n<li>自适应性：代理能适应环境变化（目标变化、代理资源变化）；</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"1-4-Multi-Agent-Systems的定义\"><a href=\"#1-4-Multi-Agent-Systems的定义\" class=\"headerlink\" title=\"1.4 Multi-Agent Systems的定义\"></a>1.4 Multi-Agent Systems的定义</h3><p>Systems（系统）：在这里指各个能够独立运作的子系统；</p>\n<p>Multi-Agent Systems（多代理系统）：[单代理+多个子系统]不能够解决的复杂问题，由[多个代理+多个子系统]协商合作形成的问题求解网络。</p>\n<p>[单代理+多个子系统]：</p>\n<ul>\n<li>便于快速的将复杂系统分解成简单的子系统；</li>\n</ul>\n<p>[多个代理+多个子系统]：</p>\n<ul>\n<li>分布系统软件天然需要多代理；</li>\n<li>复杂的大型系统使用单代理，该单代理将成为系统能力的瓶颈；</li>\n</ul>\n<h3 id=\"1-5-Multi-Agent-Systems是如何协作的\"><a href=\"#1-5-Multi-Agent-Systems是如何协作的\" class=\"headerlink\" title=\"1.5 Multi-Agent Systems是如何协作的\"></a>1.5 Multi-Agent Systems是如何协作的</h3><p>各个子系统如何通过代理协作，简要概括如下：</p>\n<ol>\n<li>首先，提出“谁能解决问题？”；</li>\n<li>其次，代理网络中能解决这个问题回答“我能，但是得符合我的条件”；</li>\n<li>于是，代理间进行协商，在解决问题后把结果返回给具体的问题提出者；</li>\n</ol>\n<h4 id=\"1-5-1-行业例子\"><a href=\"#1-5-1-行业例子\" class=\"headerlink\" title=\"1.5.1 行业例子\"></a>1.5.1 行业例子</h4><p>WWW（万维网）</p>\n<ul>\n<li>浏览器输入域名 ==&gt; DNS分布式数据库系统（域名和IP相互映射） ==&gt; 提供具体服务的服务器；</li>\n</ul>\n<p>Guardian辅助看护系统</p>\n<ul>\n<li>检查代理：收集传感器数据 ==&gt; 推理代理：组织系统的决策过程 ==&gt; 控制代理：控制系统的运行；</li>\n</ul>\n<p>CIMS应用集成平台</p>\n<ul>\n<li>多应用：提供具体服务 ==&gt; 多软件代理：定位到能提供具体服务的应用，与该应用进行通信 ==&gt; 单控制代理：协调软件代理间的工作；</li>\n</ul>\n<h2 id=\"2-如何实现Multi-Agent-Systems\"><a href=\"#2-如何实现Multi-Agent-Systems\" class=\"headerlink\" title=\"2. 如何实现Multi-Agent Systems\"></a>2. 如何实现Multi-Agent Systems</h2><h3 id=\"2-1-Multi-Agent-Systems的相关理论\"><a href=\"#2-1-Multi-Agent-Systems的相关理论\" class=\"headerlink\" title=\"2.1 Multi-Agent Systems的相关理论\"></a>2.1 Multi-Agent Systems的相关理论</h3><p>知识表达与推理：通过一定的数据结构以及相应操作对要解决的问题进行建模。</p>\n<ul>\n<li>Disciple知识表达方法；</li>\n<li>知识学习、知识获得；</li>\n</ul>\n<p>代理通信语言(ACL)：代理之间的通信与交流需要协议基础，一条ACL消息一个KQML表达，表达的“参数”是由词汇表中的词锁组成的KIF句子。</p>\n<ul>\n<li>KIF知识交换格式的“内部”语言；</li>\n<li>词汇表；</li>\n<li>KQML知识查询和操作语言的“外部语言”；</li>\n</ul>\n<p>多代理协调模型：代理与代理、代理与外界的交互方式。</p>\n<ul>\n<li>控制驱动：外部世界以事件触发的方式与代理交互（状态机）；</li>\n<li>数据驱动：外部世界以数据交换的方式与代理交互；</li>\n</ul>\n<p>代理的协商模型：代理间协作的模式。</p>\n<ul>\n<li>表达和维护自身信念、愿望、目标和意图模型的能力；</li>\n<li>对其他代理的信念、愿望、目标和意图进行推测的能力；</li>\n<li>影响其他代理的信念、意图和行为的能力；</li>\n</ul>\n<h3 id=\"2-2-面向代理的软件工程\"><a href=\"#2-2-面向代理的软件工程\" class=\"headerlink\" title=\"2.2 面向代理的软件工程\"></a>2.2 面向代理的软件工程</h3><p>既可以把复杂的系统分解成子系统，然后使用代理进行交互、协作；也可以把互相有关联的子系统通过代理组织成一个实体。</p>\n<p>TODO 并没有确切规范，待补充</p>\n<ol>\n<li>划分子系统：把因复杂或分布的软件系统切割成一个又一个的能实现一个或多个特定目标的子系统；<ul>\n<li>确定子系统的类型、目标；</li>\n<li>确定子系统的数据接口、提供的服务；</li>\n<li>确定子系统的层次结构——使用UML进行建模；</li>\n</ul>\n</li>\n<li>定义软件代理：通常为一个子系统设置一个代理；<ul>\n<li>确定软件代理的类型、个数；</li>\n<li>确定软件代理间的通信方式；</li>\n<li>确定软件代理间存在的交互；</li>\n<li>确定软件代理的层次结构——使用UML进行建模；</li>\n</ul>\n</li>\n</ol>\n<p>面向代理的软件工程其实是对面向对象的软件工程更高一级别的抽象。</p>\n<h3 id=\"2-3-本地ERP与电能云平台构成的多代理系统实现举例\"><a href=\"#2-3-本地ERP与电能云平台构成的多代理系统实现举例\" class=\"headerlink\" title=\"2.3 本地ERP与电能云平台构成的多代理系统实现举例\"></a>2.3 本地ERP与电能云平台构成的多代理系统实现举例</h3><p>TODO 工厂有几个子系统未知、具备的接口未知，待补充</p>"},{"layout":"post","title":"HBase Java API用到的一些特性","date":"2015-11-14T15:13:00.000Z","comments":1,"_content":"\n本文介绍用到的一些HBase Java API。\n\n<!--more-->\n\n## 已知rowkey∈[startRow, stopRow)，timestamp为0，查询第一条记录和最后一条记录\n\n关键：使用PageFilter设置返回行数，使用scan.setReversed(true)设置反向扫描；\n\n- 查询第一条记录\n\n```java\n// 已知变量\nbyte[] startRow, stopRow;\n// TODO 在这里实例化startRow和stopRow\nScan scan = new Scan();\nscan.setStartRow(startRow);\nscan.setStopRow(stopRow);\ntry {\n\t// 限定timestamp\n\tscan.setTimeStamp(0l);\n\t// 使用new PageFilter(num)限定返回结果行数，num为1表示只返回一行记录\n\tscan.setFilter(new PageFilter(1));\n} catch (IOException e) {\n\t// TODO 处理异常\n}\n// TODO 在这里添加要查询的colum family和qualifier并执行查询和结果解析\n```\n\n- 查询最后一条记录\n\n```java\n// 已知变量\nbyte[] startRow, stopRow;\n// TODO 在这里实例化startRow和stopRow\nScan scan = new Scan();\n// 由于设置了反向扫描，stopRow和startRow需要调转位置\nscan.setStartRow(stopRow);\nscan.setStopRow(startRow);\ntry {\n\t// 反向扫描\n\tscan.setReversed(true);\n\t// 限定timestamp\n\tscan.setTimeStamp(0l);\n\t// 使用new PageFilter(num)限定返回结果行数，num为1表示只返回一行记录\n\tscan.setFilter(new PageFilter(1));\n} catch (IOException e) {\n\t// TODO 处理异常\n}\n// TODO 在这里添加要查询的colum family和qualifier并执行查询和结果解析\n```\n","source":"_posts/2015-11-14-hbase-java-api-example.markdown","raw":"---\nlayout: post\ntitle: HBase Java API用到的一些特性\ndate: '2015-11-14 23:13'\ncomments: true\ncategories: ['编程实践']  \ntags: ['HBase', 'Java']\n---\n\n本文介绍用到的一些HBase Java API。\n\n<!--more-->\n\n## 已知rowkey∈[startRow, stopRow)，timestamp为0，查询第一条记录和最后一条记录\n\n关键：使用PageFilter设置返回行数，使用scan.setReversed(true)设置反向扫描；\n\n- 查询第一条记录\n\n```java\n// 已知变量\nbyte[] startRow, stopRow;\n// TODO 在这里实例化startRow和stopRow\nScan scan = new Scan();\nscan.setStartRow(startRow);\nscan.setStopRow(stopRow);\ntry {\n\t// 限定timestamp\n\tscan.setTimeStamp(0l);\n\t// 使用new PageFilter(num)限定返回结果行数，num为1表示只返回一行记录\n\tscan.setFilter(new PageFilter(1));\n} catch (IOException e) {\n\t// TODO 处理异常\n}\n// TODO 在这里添加要查询的colum family和qualifier并执行查询和结果解析\n```\n\n- 查询最后一条记录\n\n```java\n// 已知变量\nbyte[] startRow, stopRow;\n// TODO 在这里实例化startRow和stopRow\nScan scan = new Scan();\n// 由于设置了反向扫描，stopRow和startRow需要调转位置\nscan.setStartRow(stopRow);\nscan.setStopRow(startRow);\ntry {\n\t// 反向扫描\n\tscan.setReversed(true);\n\t// 限定timestamp\n\tscan.setTimeStamp(0l);\n\t// 使用new PageFilter(num)限定返回结果行数，num为1表示只返回一行记录\n\tscan.setFilter(new PageFilter(1));\n} catch (IOException e) {\n\t// TODO 处理异常\n}\n// TODO 在这里添加要查询的colum family和qualifier并执行查询和结果解析\n```\n","slug":"hbase-java-api-example","published":1,"updated":"2017-04-09T14:43:38.000Z","photos":[],"link":"","_id":"cjlza6m3y0002pgupwgx29rxh","content":"<p>本文介绍用到的一些HBase Java API。</p>\n<a id=\"more\"></a>\n<h2 id=\"已知rowkey∈-startRow-stopRow-，timestamp为0，查询第一条记录和最后一条记录\"><a href=\"#已知rowkey∈-startRow-stopRow-，timestamp为0，查询第一条记录和最后一条记录\" class=\"headerlink\" title=\"已知rowkey∈[startRow, stopRow)，timestamp为0，查询第一条记录和最后一条记录\"></a>已知rowkey∈[startRow, stopRow)，timestamp为0，查询第一条记录和最后一条记录</h2><p>关键：使用PageFilter设置返回行数，使用scan.setReversed(true)设置反向扫描；</p>\n<ul>\n<li>查询第一条记录</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 已知变量</span></span><br><span class=\"line\"><span class=\"keyword\">byte</span>[] startRow, stopRow;</span><br><span class=\"line\"><span class=\"comment\">// TODO 在这里实例化startRow和stopRow</span></span><br><span class=\"line\">Scan scan = <span class=\"keyword\">new</span> Scan();</span><br><span class=\"line\">scan.setStartRow(startRow);</span><br><span class=\"line\">scan.setStopRow(stopRow);</span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 限定timestamp</span></span><br><span class=\"line\">\tscan.setTimeStamp(<span class=\"number\">0l</span>);</span><br><span class=\"line\">\t<span class=\"comment\">// 使用new PageFilter(num)限定返回结果行数，num为1表示只返回一行记录</span></span><br><span class=\"line\">\tscan.setFilter(<span class=\"keyword\">new</span> PageFilter(<span class=\"number\">1</span>));</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// TODO 处理异常</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// TODO 在这里添加要查询的colum family和qualifier并执行查询和结果解析</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>查询最后一条记录</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 已知变量</span></span><br><span class=\"line\"><span class=\"keyword\">byte</span>[] startRow, stopRow;</span><br><span class=\"line\"><span class=\"comment\">// TODO 在这里实例化startRow和stopRow</span></span><br><span class=\"line\">Scan scan = <span class=\"keyword\">new</span> Scan();</span><br><span class=\"line\"><span class=\"comment\">// 由于设置了反向扫描，stopRow和startRow需要调转位置</span></span><br><span class=\"line\">scan.setStartRow(stopRow);</span><br><span class=\"line\">scan.setStopRow(startRow);</span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 反向扫描</span></span><br><span class=\"line\">\tscan.setReversed(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">\t<span class=\"comment\">// 限定timestamp</span></span><br><span class=\"line\">\tscan.setTimeStamp(<span class=\"number\">0l</span>);</span><br><span class=\"line\">\t<span class=\"comment\">// 使用new PageFilter(num)限定返回结果行数，num为1表示只返回一行记录</span></span><br><span class=\"line\">\tscan.setFilter(<span class=\"keyword\">new</span> PageFilter(<span class=\"number\">1</span>));</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// TODO 处理异常</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// TODO 在这里添加要查询的colum family和qualifier并执行查询和结果解析</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>本文介绍用到的一些HBase Java API。</p>","more":"<h2 id=\"已知rowkey∈-startRow-stopRow-，timestamp为0，查询第一条记录和最后一条记录\"><a href=\"#已知rowkey∈-startRow-stopRow-，timestamp为0，查询第一条记录和最后一条记录\" class=\"headerlink\" title=\"已知rowkey∈[startRow, stopRow)，timestamp为0，查询第一条记录和最后一条记录\"></a>已知rowkey∈[startRow, stopRow)，timestamp为0，查询第一条记录和最后一条记录</h2><p>关键：使用PageFilter设置返回行数，使用scan.setReversed(true)设置反向扫描；</p>\n<ul>\n<li>查询第一条记录</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 已知变量</span></span><br><span class=\"line\"><span class=\"keyword\">byte</span>[] startRow, stopRow;</span><br><span class=\"line\"><span class=\"comment\">// TODO 在这里实例化startRow和stopRow</span></span><br><span class=\"line\">Scan scan = <span class=\"keyword\">new</span> Scan();</span><br><span class=\"line\">scan.setStartRow(startRow);</span><br><span class=\"line\">scan.setStopRow(stopRow);</span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 限定timestamp</span></span><br><span class=\"line\">\tscan.setTimeStamp(<span class=\"number\">0l</span>);</span><br><span class=\"line\">\t<span class=\"comment\">// 使用new PageFilter(num)限定返回结果行数，num为1表示只返回一行记录</span></span><br><span class=\"line\">\tscan.setFilter(<span class=\"keyword\">new</span> PageFilter(<span class=\"number\">1</span>));</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// TODO 处理异常</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// TODO 在这里添加要查询的colum family和qualifier并执行查询和结果解析</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>查询最后一条记录</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 已知变量</span></span><br><span class=\"line\"><span class=\"keyword\">byte</span>[] startRow, stopRow;</span><br><span class=\"line\"><span class=\"comment\">// TODO 在这里实例化startRow和stopRow</span></span><br><span class=\"line\">Scan scan = <span class=\"keyword\">new</span> Scan();</span><br><span class=\"line\"><span class=\"comment\">// 由于设置了反向扫描，stopRow和startRow需要调转位置</span></span><br><span class=\"line\">scan.setStartRow(stopRow);</span><br><span class=\"line\">scan.setStopRow(startRow);</span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 反向扫描</span></span><br><span class=\"line\">\tscan.setReversed(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">\t<span class=\"comment\">// 限定timestamp</span></span><br><span class=\"line\">\tscan.setTimeStamp(<span class=\"number\">0l</span>);</span><br><span class=\"line\">\t<span class=\"comment\">// 使用new PageFilter(num)限定返回结果行数，num为1表示只返回一行记录</span></span><br><span class=\"line\">\tscan.setFilter(<span class=\"keyword\">new</span> PageFilter(<span class=\"number\">1</span>));</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// TODO 处理异常</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// TODO 在这里添加要查询的colum family和qualifier并执行查询和结果解析</span></span><br></pre></td></tr></table></figure>"},{"layout":"post","title":"《C++ Primer v5》读书笔记","date":"2015-11-23T12:31:00.000Z","comments":1,"_content":"\n《C++ Primer v5》的读书笔记。\n\n<!--more-->\n\n## CHAPTER 1 GETTING STARTED\n\n- Variable type: when we wrote`T t`, we sayed that \"t has type T\", or \"t is a T\"\n\n- gcc/g++ warning all options: `-Wall` for *nix, `/W4` for windows\n\n- Flush the stream: we should always put `std::cout << std::endl;` at the end of `std::cout` to flush the stream of std-out, or else it won't output immediately\n\n- Left operating left: `std::cout << \"text 1\" << \" and text 2\" << std::endl;` equals to\n```c++\nstd::cout << \"text 1\";\nstd::cout << \" and text 2\";\nstd::cout << std:endl;\n```\n\n<!--more-->\n\n- istream hits invalid state: `while (std::cin >> value)` will end at\n\t1. hit the **end-of-file**\n\t1. encounter an invalid input, such as reading a value is not a integer\n\n## CHAPTER 2 VARIABLES AND BASIC TYPES\n\n### Primitive built-in types\n\n- Signed and unsigned types\n\t1. except for bool and extended character types, the integral types may be signed or unsigned(float is not integral types)\n\t1. there are three character types (two in real usage): char, signed char and unsigned char\n\t\t- char is signed in some machine and unsiged in others\n\t1. use an unsigned when you are sure of it's usage\n\t1. don't use plain char or bool in arithmetic experssions\n\t1. double is better for float, float has not enough precison and in some machines double computation is faster than float\n\n- Type conversions\n\t1. when assign a float to int, \n\t\t- the fractional part of float is truncated as temp\n\t\t- give temp to the int mentioned above\n\t1. when assign an out-of-value to unsigned type, the lower bits doesn't change, the higher bit out-of-range is truncated, this is same to modulo\n\t1. when assign an out-of-value to signed type, the result is undefined\n\n### Variables\n\n- List initialization\n```c++\nint sold = 0;   // ok\nint sold = {0}; // ok\nint sold{0};    // ok\nint sold(0);    // ok\nint sold(1d);   // ok but truncated\nint sold{1d};   // error:narrowing conversation required\n```\n\n- Default initialization: built-in type defined outside any function body are initialized to zero, inside the function is uninitialized\n\n- declaration and definition are different\n\t1. declaration secifies the type and name of a variable\n\t1. definition inits the variable\n\t1. to use the same variable in multiple files, you must only have one definition and multi declaration\n```c++\n// declaration but not definition, must be outside the function\nextern int j; \n// declaration and definition\nint j;        \n// only definition, declaration is override, must be outside the function\nextern double pi = 3.14; \n```\n\n- illegal variable names\n```c++\nint __a; // contains 2 underscores\nint _Ab; // start with underscore, and follow with a upper letter immediately\n```\n\n- get variables outer scope\n```c++\nstd::cout << ::reused << std::endl; // use '::'\n```\n\n### Compound Types\n\n- Reference: \n\t1. a reference to object, it's not an object\n\t1. must be initialized, can't re-bind\n```c++\nint val1 = 1024;\ndouble val2 = 123;\nint &relVal1 = val1; // ok\nint &relVal2;        // error, must be init\nint &relVal3 = val2; // error, type error\n```\n\n- Pointers\n\t- different to reference\n\t\t1. it's an object\n\t\t1. can be rebind\n\t\t1. needn't initialized when defined\n\t\t1. like built-in types, it has undefined value in function if it's not defined\n\t- pointer value state\n\t\t1. point to an object\n\t\t1. point to the location just immediately past the end of an object (illegal pointer)\n\t\t1. null pointer\n\t\t1. invalid pointer (not initialized)\n\t- special\n\t\t1. same type valid pointers can use in comparation (address compare)\n\t\t1. void pointers\n\t\t\t- can compare to another pointer\n\t\t\t- pass or return it from a function\n\t\t\t- assign it to another void* pointer\n\t\t1. define two pointer in a line: `int *p1, *p2`, '*' only works for the variable name\n\t\t1. reference to pointers (example below)\n\n```c++\n// normal\ndouble val = 123;\ndouble *pd1 = &val; \n             // ok, give the pointer itself a new value\nint *pd2 = &val;    // error, types differ\npd2 = pd1;   // error, types differ\npd1 = val;   // error, can't assign object to pointer\n\n// special\nint *p1, p2; // only p1 is pointer\nint i=0;\nint *p;\nint *&r = p; // read from right to left: r is a reference to pointer\nr = &i;\n*r = 0;      // set i to 0\n```\n\n### const Qualifer\n\n- local to file\n\t1. default internal linkage in C++\n\t\t- if we define `const int ivv = 0` in source file, and `extern const int ivv` in header file, 'ivv' only works in that source file, this is the so-called 'local-to-file', differ to the normal case\n\t\t- to use 'ivv' in multi files, we should declare `extern const int ivv` in header file, and define `extern const int ivv = 0` in source file\n\t1. default external linkage in C\n\t\t- in C, const variable's scope is the same to normal case\n\n- reference to const\n\t1. const reference to const object/normal/plain/expression/double, means read only\n\t1. if reference to double, it's a tempory value, if the origin double changes, the reference to const will never know that\n```c++ \n// ok initialization\nconst int ci = 1024;\nint i = 1024;\ndouble dval = 3.14;\nconst int &r1 = ci; // from const object\nconst int &r2 = i;  // from normal int\nconst int &r3 = 12; // from plain int\nconst int &r4 = r1 * 2; // from expression\nconst int &r5 = dval; // dval --> temp int --> r5\n// error case\nr1 = 123; // can't rebind\nint &r6 = ci; // only const reference can reference to const object\n```\n\n- pointer to const(**can't change the memory the address points to**)\n\t1. similar to 'reference to const', it stores the address of a object and has read access but not write access to the address\n\t1. **can rebind**\n\n- const pointers(**can't change the address**)\n\t1. can't rebind, must be initialized at first time\n\t1. itself const, always point to the same address\n\t1. **can change the address's real value**\n```c++\nint errNumb = 0;\nint *const curErr = &errNumb; // const pointers\nconst int *curPnt = &errNumb; // pointer to const\nconst int i = 123;\nconst int *const curNor = &i; // a const pointer to a const int\n```\n\n- top-level & low-level const\n\t1. top-level: itself const, const objects(pointers)\n\t1. low-level: pointer or reference to const\n\t1. when we copy a object, top-level is ignored and low-level will never be ignored\n```c++\nconst int a = 0;\nint b = a; // ok: top-level ignore\nint const *m = 0;\nint *n = m; // error: low-level can't be ignore\n```\n\n- constexpr:**applies to the pointer** but not the type to which the pointer points\n```c++\nconst int *p = 0; // pointer to const\nconstexpr int *q = 0; // a const pointer to int\n```\n\n### Dealing with type\n\n- type alias\n\t1. typedef is the alias of an object\n```c++\ntypedef double wages; // `wages` is same to double\nusing wages = double;\n// pointer\ntypedef char *pstring; // pstring is an object: char*, pointer to char\nconst pstring cstr = 0; // same to `const (char*) cstr = 0`, cstr is a const pointer to char\n```\n\n- auto: automatically determines the type, **ignores the top-level**\n- decltype: similar to auto, but **top-level is keeped**\n\t1. decltype((v)) is always a reference type\n```c++\nconst int i = 0;\nauto a = i; // normal int \ndecltype(i) b = 0; // const int\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n## CHAPTER 3 STRINGS, VECTORS, AND ARRAYS\n\n### Namespace using Declarations\n\n```c++\n// main.cpp\nusing std::cout; // 只使用于本源文件，引入另外一个命名空间的成员到当前作用域\nint main(){\n    cout << \"hello\" << endl;\n    return 0;\n}\n```\n\n<!--more-->\n\n### Library string Type\n\n使用前提：\n\n- 头文件引入：`#include <string>`\n- 作用域引入：`using std::string`\n\n#### 定义\n\n```c++\n// 默认实例化为空\nstring s1;\n// 直接实例化为指定值\nstring s1(10, 'c');\nstring s2(\"haha\");\n// 复制实例化\nstring s3 = \"haha\";\n```\n\n#### 字符串操作\n\n几个特殊的字符串操作举例如下：\n\n- 输入和输出\n\n```c++\nstring word;\nwhile(cin >> word) // is>>s，返回is\n    cout << word << endl; // os << s，返回os\nwhile(getline(cin, word)) // 返回is\n    cout << word << endl;\n```\n- 比较：比较从左到右第一个不同的字符的ASCII值，如从左到右无不同字符则长度较长的字符串大\n```c++\n// s2大s1，s3大于前两个字符串\nstring s1 = \"hello\";\nstring s2 = \"hello, world\";\nstring s3 = \"hexo\";\n```\n- size()\n```c++\nstring s1;\nauto size = s1.size(); // string::size_type，一个无符号整型\n```\n- 拼接\n```c++\n// string类型间可自由拼接\nstring s1 = \"t\";\nstring s2 = \"x\";\ns1 += s2;\n// string和literals\nstring s3 = \"t\" + \"x\"; // error：字面量不可相加\nstring s4 = \"t\" + s1 + \"x\"; // 合法，运算顺序从左到右\n```\n\n#### 处理字符串内的字符\n\n一共有两类操作，\n\n- 字符串遍历（copy和reference）\n- 数组下标（reference）\n\n```c++\nstring s1 = \"test\";\n// 字符串遍历\nfor(auto c : s1) // c是copy，改变c的值不影响字符串\n    // do sth\nfor(auto &c : s1) // c是reference\n    // do sth\ns1[0] = 'y'; // 引用第0个数组下标的字符\n```\n\n### Library vector Type\n\n使用前提：\n- 头文件引入：`#include <vector>`\n- 作用域引入：`using std::vector`\n\n#### 定义\n\n*注意括号和花括号的不同*：\n```c++\n// 默认实例化为空\nvector<string> v1; \n// 指定元素数量\nvector<int> v2(10); // 10个0\nvector<int> v3(10, 1); // 10个1\n// 列表实例化\nvector<int> {10, 1}; // 10和1两个元素\n```\n\n#### 操作\n\n注意：\n\n- 数组下标可操作vector的尺寸之外的元素如`vector[size+1] = 3`，但这并不会向vector新增一个元素，而且会产生越界异常\n```c++\nvector<int> v1(10, 1);\nv1.push_back(2); // 插入\nv1[0] = 3; // 数组下标引用\nv1.size(); // vector::size_type\n// 比较操作需要装相同元素，且相同元素间可比较\n```\n\n### Introducing Iterators\n\n#### 定义\n\nstring有两种iterator类型，指向某个具体字符：\n\n- string::iterator指向的元素可读写\n- string::const_iterator指向的元素只可以读\n\nvector有两种iterator类型，指向某个具体元素：\n\n- vector::iterator\n- vector::const_iterator\n\n```c++\nstring s1(\"123\");\nauto i1 = s1.begin(); // 指向第一个元素\nauto i2 = s1.end(); // 指向最后一个元素的尾部\nauto i3 = s1.cbegin(); // 只可读\n```\n\n#### 操作\n\n常用操作如下：\n```c++\nvector s1{\"123\"};\nauto i1 = s1.begin();\n*i1 = \"345\"; // dereference，取得引用\n(*i1).size(); // 调用第一个元素的成员size()\n*i1.size(); // error：调用顺序是*(i1.size())\ni1++; // 可进行加减运算，指向不同成员\n// 比较运算符规则：出现在容器前面的元素较小\n```\n\n注意：在使用iterator遍历vector时不能使用push_back，它会使得之前指向它的iterator都无效\n\n### Arrays\n\n#### 定义\n\n```c++\n// 默认实例化\nint arr[10]; // 10个int值，在函数外int值默认为0，函数内int值为undefined，与built-in类型的默认值规则相同\n// 显示实例化\nint arr2[10] = {0, 1, 2}; // 后七个元素的值同上\n// 字符数组\nchar c1[] = \"C++\"; // 共4个元素，最后一个为'\\0'\n// 不能复制和赋值\nint arr3 [] = arr; // error\narr2 = arr; // error\n// 复杂的定义\nint *ptr[10]; // ptr是一个数组，该数组含有10个int型指针\nint (*ptr)[10]; // ptr是一个指针，指向含有10个int元素的数组\n```\n\n#### 操纵数组\n\n1. 使用数组下标\n2. 使用for-each，如`for(auto tmp : arr)或for(auto &tmp : arr)`\n\n#### 数组与指针\n\n- 数组名指向第一个元素\n```c++\nstring nums[] = {\"one\", \"two\", \"three\"};\n// 下面两个式子等效\nstring *ptr = nums;\nptr = &nums[0];\n```\n\n- auto和decltype具有不同效果\n```c++\nint ia[] = {1,2,3};\nauto ia2(ia); // 等效于&ia[0]\ndecltype(ia) ia3 = {4,5,6}; // 具有与ia一样的类型\n```\n\n- 指针与数组\n```c++\nint arr[] = {1,2,3};\nint *ptr = 0; // 指针状态1：空指针\nptr = arr; // 指针状态2：指向某个对象\nptr = arr[3]; // 指针状态3：指向一块内存的结束地址，指针本身有效，不能使用*号取值\nptr = arr[4]; // 指针状态4：这是一个无效的指针，指针地址未定义，不能使用*号取值\n```\n\n- begin和end函数取数组首尾\n```c++\nint ia[] = {1,2,3};\nint *begin = begin(ia);\nint *end = end(ia);\nvector<int> ivec(begin(ia), end(ia)); // 将ia的内容复制到ivec\n```\n\n- 数组指针运算\n    - 指向相同数组的指针才可使用关系运算符；\n    - built-in数组指针下标可使用负数，如：`p[-2]`，p指向一个数组的元素；vector等library type的数组下标必须是正数；\n\n#### c类型字符串\n\n```c++\nstring s = \"c++\"; // 可使用c类型字符串为string类型赋值\nconst char *str = s; // error：反之则不行，应使用s.c_str()\n```\n\n### 多维数组\n\n```c++\nint ia[3][4];\n// 指针p为类型int (*p)[4]，指向含有4个int的数组\nfor(auto p = begin(ia); p != end(ia); ++p) {\n    // q指向int[4]的第一个元素\n    for(auto q = begin(*p); q != end(*p); ++q) {\n        cout << *q << '';\n    } \n}\n```\n","source":"_posts/2015-11-23-cplusplus-primer-v5.markdown","raw":"---\nlayout: post\ntitle: 《C++ Primer v5》读书笔记\ndate: '2015-11-23 20:31'\ncomments: true\ncategories: ['读书笔记']  \ntags: ['C/C++']\n---\n\n《C++ Primer v5》的读书笔记。\n\n<!--more-->\n\n## CHAPTER 1 GETTING STARTED\n\n- Variable type: when we wrote`T t`, we sayed that \"t has type T\", or \"t is a T\"\n\n- gcc/g++ warning all options: `-Wall` for *nix, `/W4` for windows\n\n- Flush the stream: we should always put `std::cout << std::endl;` at the end of `std::cout` to flush the stream of std-out, or else it won't output immediately\n\n- Left operating left: `std::cout << \"text 1\" << \" and text 2\" << std::endl;` equals to\n```c++\nstd::cout << \"text 1\";\nstd::cout << \" and text 2\";\nstd::cout << std:endl;\n```\n\n<!--more-->\n\n- istream hits invalid state: `while (std::cin >> value)` will end at\n\t1. hit the **end-of-file**\n\t1. encounter an invalid input, such as reading a value is not a integer\n\n## CHAPTER 2 VARIABLES AND BASIC TYPES\n\n### Primitive built-in types\n\n- Signed and unsigned types\n\t1. except for bool and extended character types, the integral types may be signed or unsigned(float is not integral types)\n\t1. there are three character types (two in real usage): char, signed char and unsigned char\n\t\t- char is signed in some machine and unsiged in others\n\t1. use an unsigned when you are sure of it's usage\n\t1. don't use plain char or bool in arithmetic experssions\n\t1. double is better for float, float has not enough precison and in some machines double computation is faster than float\n\n- Type conversions\n\t1. when assign a float to int, \n\t\t- the fractional part of float is truncated as temp\n\t\t- give temp to the int mentioned above\n\t1. when assign an out-of-value to unsigned type, the lower bits doesn't change, the higher bit out-of-range is truncated, this is same to modulo\n\t1. when assign an out-of-value to signed type, the result is undefined\n\n### Variables\n\n- List initialization\n```c++\nint sold = 0;   // ok\nint sold = {0}; // ok\nint sold{0};    // ok\nint sold(0);    // ok\nint sold(1d);   // ok but truncated\nint sold{1d};   // error:narrowing conversation required\n```\n\n- Default initialization: built-in type defined outside any function body are initialized to zero, inside the function is uninitialized\n\n- declaration and definition are different\n\t1. declaration secifies the type and name of a variable\n\t1. definition inits the variable\n\t1. to use the same variable in multiple files, you must only have one definition and multi declaration\n```c++\n// declaration but not definition, must be outside the function\nextern int j; \n// declaration and definition\nint j;        \n// only definition, declaration is override, must be outside the function\nextern double pi = 3.14; \n```\n\n- illegal variable names\n```c++\nint __a; // contains 2 underscores\nint _Ab; // start with underscore, and follow with a upper letter immediately\n```\n\n- get variables outer scope\n```c++\nstd::cout << ::reused << std::endl; // use '::'\n```\n\n### Compound Types\n\n- Reference: \n\t1. a reference to object, it's not an object\n\t1. must be initialized, can't re-bind\n```c++\nint val1 = 1024;\ndouble val2 = 123;\nint &relVal1 = val1; // ok\nint &relVal2;        // error, must be init\nint &relVal3 = val2; // error, type error\n```\n\n- Pointers\n\t- different to reference\n\t\t1. it's an object\n\t\t1. can be rebind\n\t\t1. needn't initialized when defined\n\t\t1. like built-in types, it has undefined value in function if it's not defined\n\t- pointer value state\n\t\t1. point to an object\n\t\t1. point to the location just immediately past the end of an object (illegal pointer)\n\t\t1. null pointer\n\t\t1. invalid pointer (not initialized)\n\t- special\n\t\t1. same type valid pointers can use in comparation (address compare)\n\t\t1. void pointers\n\t\t\t- can compare to another pointer\n\t\t\t- pass or return it from a function\n\t\t\t- assign it to another void* pointer\n\t\t1. define two pointer in a line: `int *p1, *p2`, '*' only works for the variable name\n\t\t1. reference to pointers (example below)\n\n```c++\n// normal\ndouble val = 123;\ndouble *pd1 = &val; \n             // ok, give the pointer itself a new value\nint *pd2 = &val;    // error, types differ\npd2 = pd1;   // error, types differ\npd1 = val;   // error, can't assign object to pointer\n\n// special\nint *p1, p2; // only p1 is pointer\nint i=0;\nint *p;\nint *&r = p; // read from right to left: r is a reference to pointer\nr = &i;\n*r = 0;      // set i to 0\n```\n\n### const Qualifer\n\n- local to file\n\t1. default internal linkage in C++\n\t\t- if we define `const int ivv = 0` in source file, and `extern const int ivv` in header file, 'ivv' only works in that source file, this is the so-called 'local-to-file', differ to the normal case\n\t\t- to use 'ivv' in multi files, we should declare `extern const int ivv` in header file, and define `extern const int ivv = 0` in source file\n\t1. default external linkage in C\n\t\t- in C, const variable's scope is the same to normal case\n\n- reference to const\n\t1. const reference to const object/normal/plain/expression/double, means read only\n\t1. if reference to double, it's a tempory value, if the origin double changes, the reference to const will never know that\n```c++ \n// ok initialization\nconst int ci = 1024;\nint i = 1024;\ndouble dval = 3.14;\nconst int &r1 = ci; // from const object\nconst int &r2 = i;  // from normal int\nconst int &r3 = 12; // from plain int\nconst int &r4 = r1 * 2; // from expression\nconst int &r5 = dval; // dval --> temp int --> r5\n// error case\nr1 = 123; // can't rebind\nint &r6 = ci; // only const reference can reference to const object\n```\n\n- pointer to const(**can't change the memory the address points to**)\n\t1. similar to 'reference to const', it stores the address of a object and has read access but not write access to the address\n\t1. **can rebind**\n\n- const pointers(**can't change the address**)\n\t1. can't rebind, must be initialized at first time\n\t1. itself const, always point to the same address\n\t1. **can change the address's real value**\n```c++\nint errNumb = 0;\nint *const curErr = &errNumb; // const pointers\nconst int *curPnt = &errNumb; // pointer to const\nconst int i = 123;\nconst int *const curNor = &i; // a const pointer to a const int\n```\n\n- top-level & low-level const\n\t1. top-level: itself const, const objects(pointers)\n\t1. low-level: pointer or reference to const\n\t1. when we copy a object, top-level is ignored and low-level will never be ignored\n```c++\nconst int a = 0;\nint b = a; // ok: top-level ignore\nint const *m = 0;\nint *n = m; // error: low-level can't be ignore\n```\n\n- constexpr:**applies to the pointer** but not the type to which the pointer points\n```c++\nconst int *p = 0; // pointer to const\nconstexpr int *q = 0; // a const pointer to int\n```\n\n### Dealing with type\n\n- type alias\n\t1. typedef is the alias of an object\n```c++\ntypedef double wages; // `wages` is same to double\nusing wages = double;\n// pointer\ntypedef char *pstring; // pstring is an object: char*, pointer to char\nconst pstring cstr = 0; // same to `const (char*) cstr = 0`, cstr is a const pointer to char\n```\n\n- auto: automatically determines the type, **ignores the top-level**\n- decltype: similar to auto, but **top-level is keeped**\n\t1. decltype((v)) is always a reference type\n```c++\nconst int i = 0;\nauto a = i; // normal int \ndecltype(i) b = 0; // const int\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n## CHAPTER 3 STRINGS, VECTORS, AND ARRAYS\n\n### Namespace using Declarations\n\n```c++\n// main.cpp\nusing std::cout; // 只使用于本源文件，引入另外一个命名空间的成员到当前作用域\nint main(){\n    cout << \"hello\" << endl;\n    return 0;\n}\n```\n\n<!--more-->\n\n### Library string Type\n\n使用前提：\n\n- 头文件引入：`#include <string>`\n- 作用域引入：`using std::string`\n\n#### 定义\n\n```c++\n// 默认实例化为空\nstring s1;\n// 直接实例化为指定值\nstring s1(10, 'c');\nstring s2(\"haha\");\n// 复制实例化\nstring s3 = \"haha\";\n```\n\n#### 字符串操作\n\n几个特殊的字符串操作举例如下：\n\n- 输入和输出\n\n```c++\nstring word;\nwhile(cin >> word) // is>>s，返回is\n    cout << word << endl; // os << s，返回os\nwhile(getline(cin, word)) // 返回is\n    cout << word << endl;\n```\n- 比较：比较从左到右第一个不同的字符的ASCII值，如从左到右无不同字符则长度较长的字符串大\n```c++\n// s2大s1，s3大于前两个字符串\nstring s1 = \"hello\";\nstring s2 = \"hello, world\";\nstring s3 = \"hexo\";\n```\n- size()\n```c++\nstring s1;\nauto size = s1.size(); // string::size_type，一个无符号整型\n```\n- 拼接\n```c++\n// string类型间可自由拼接\nstring s1 = \"t\";\nstring s2 = \"x\";\ns1 += s2;\n// string和literals\nstring s3 = \"t\" + \"x\"; // error：字面量不可相加\nstring s4 = \"t\" + s1 + \"x\"; // 合法，运算顺序从左到右\n```\n\n#### 处理字符串内的字符\n\n一共有两类操作，\n\n- 字符串遍历（copy和reference）\n- 数组下标（reference）\n\n```c++\nstring s1 = \"test\";\n// 字符串遍历\nfor(auto c : s1) // c是copy，改变c的值不影响字符串\n    // do sth\nfor(auto &c : s1) // c是reference\n    // do sth\ns1[0] = 'y'; // 引用第0个数组下标的字符\n```\n\n### Library vector Type\n\n使用前提：\n- 头文件引入：`#include <vector>`\n- 作用域引入：`using std::vector`\n\n#### 定义\n\n*注意括号和花括号的不同*：\n```c++\n// 默认实例化为空\nvector<string> v1; \n// 指定元素数量\nvector<int> v2(10); // 10个0\nvector<int> v3(10, 1); // 10个1\n// 列表实例化\nvector<int> {10, 1}; // 10和1两个元素\n```\n\n#### 操作\n\n注意：\n\n- 数组下标可操作vector的尺寸之外的元素如`vector[size+1] = 3`，但这并不会向vector新增一个元素，而且会产生越界异常\n```c++\nvector<int> v1(10, 1);\nv1.push_back(2); // 插入\nv1[0] = 3; // 数组下标引用\nv1.size(); // vector::size_type\n// 比较操作需要装相同元素，且相同元素间可比较\n```\n\n### Introducing Iterators\n\n#### 定义\n\nstring有两种iterator类型，指向某个具体字符：\n\n- string::iterator指向的元素可读写\n- string::const_iterator指向的元素只可以读\n\nvector有两种iterator类型，指向某个具体元素：\n\n- vector::iterator\n- vector::const_iterator\n\n```c++\nstring s1(\"123\");\nauto i1 = s1.begin(); // 指向第一个元素\nauto i2 = s1.end(); // 指向最后一个元素的尾部\nauto i3 = s1.cbegin(); // 只可读\n```\n\n#### 操作\n\n常用操作如下：\n```c++\nvector s1{\"123\"};\nauto i1 = s1.begin();\n*i1 = \"345\"; // dereference，取得引用\n(*i1).size(); // 调用第一个元素的成员size()\n*i1.size(); // error：调用顺序是*(i1.size())\ni1++; // 可进行加减运算，指向不同成员\n// 比较运算符规则：出现在容器前面的元素较小\n```\n\n注意：在使用iterator遍历vector时不能使用push_back，它会使得之前指向它的iterator都无效\n\n### Arrays\n\n#### 定义\n\n```c++\n// 默认实例化\nint arr[10]; // 10个int值，在函数外int值默认为0，函数内int值为undefined，与built-in类型的默认值规则相同\n// 显示实例化\nint arr2[10] = {0, 1, 2}; // 后七个元素的值同上\n// 字符数组\nchar c1[] = \"C++\"; // 共4个元素，最后一个为'\\0'\n// 不能复制和赋值\nint arr3 [] = arr; // error\narr2 = arr; // error\n// 复杂的定义\nint *ptr[10]; // ptr是一个数组，该数组含有10个int型指针\nint (*ptr)[10]; // ptr是一个指针，指向含有10个int元素的数组\n```\n\n#### 操纵数组\n\n1. 使用数组下标\n2. 使用for-each，如`for(auto tmp : arr)或for(auto &tmp : arr)`\n\n#### 数组与指针\n\n- 数组名指向第一个元素\n```c++\nstring nums[] = {\"one\", \"two\", \"three\"};\n// 下面两个式子等效\nstring *ptr = nums;\nptr = &nums[0];\n```\n\n- auto和decltype具有不同效果\n```c++\nint ia[] = {1,2,3};\nauto ia2(ia); // 等效于&ia[0]\ndecltype(ia) ia3 = {4,5,6}; // 具有与ia一样的类型\n```\n\n- 指针与数组\n```c++\nint arr[] = {1,2,3};\nint *ptr = 0; // 指针状态1：空指针\nptr = arr; // 指针状态2：指向某个对象\nptr = arr[3]; // 指针状态3：指向一块内存的结束地址，指针本身有效，不能使用*号取值\nptr = arr[4]; // 指针状态4：这是一个无效的指针，指针地址未定义，不能使用*号取值\n```\n\n- begin和end函数取数组首尾\n```c++\nint ia[] = {1,2,3};\nint *begin = begin(ia);\nint *end = end(ia);\nvector<int> ivec(begin(ia), end(ia)); // 将ia的内容复制到ivec\n```\n\n- 数组指针运算\n    - 指向相同数组的指针才可使用关系运算符；\n    - built-in数组指针下标可使用负数，如：`p[-2]`，p指向一个数组的元素；vector等library type的数组下标必须是正数；\n\n#### c类型字符串\n\n```c++\nstring s = \"c++\"; // 可使用c类型字符串为string类型赋值\nconst char *str = s; // error：反之则不行，应使用s.c_str()\n```\n\n### 多维数组\n\n```c++\nint ia[3][4];\n// 指针p为类型int (*p)[4]，指向含有4个int的数组\nfor(auto p = begin(ia); p != end(ia); ++p) {\n    // q指向int[4]的第一个元素\n    for(auto q = begin(*p); q != end(*p); ++q) {\n        cout << *q << '';\n    } \n}\n```\n","slug":"cplusplus-primer-v5","published":1,"updated":"2017-04-09T14:46:19.000Z","photos":[],"link":"","_id":"cjlza6m420005pgup5ewf3r9x","content":"<p>《C++ Primer v5》的读书笔记。</p>\n<a id=\"more\"></a>\n<h2 id=\"CHAPTER-1-GETTING-STARTED\"><a href=\"#CHAPTER-1-GETTING-STARTED\" class=\"headerlink\" title=\"CHAPTER 1 GETTING STARTED\"></a>CHAPTER 1 GETTING STARTED</h2><ul>\n<li><p>Variable type: when we wrote<code>T t</code>, we sayed that “t has type T”, or “t is a T”</p>\n</li>\n<li><p>gcc/g++ warning all options: <code>-Wall</code> for *nix, <code>/W4</code> for windows</p>\n</li>\n<li><p>Flush the stream: we should always put <code>std::cout &lt;&lt; std::endl;</code> at the end of <code>std::cout</code> to flush the stream of std-out, or else it won’t output immediately</p>\n</li>\n<li><p>Left operating left: <code>std::cout &lt;&lt; &quot;text 1&quot; &lt;&lt; &quot; and text 2&quot; &lt;&lt; std::endl;</code> equals to</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"text 1\"</span>;</span><br><span class=\"line\"><span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\" and text 2\"</span>;</span><br><span class=\"line\"><span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">std</span>:<span class=\"built_in\">endl</span>;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<!--more-->\n<ul>\n<li>istream hits invalid state: <code>while (std::cin &gt;&gt; value)</code> will end at<ol>\n<li>hit the <strong>end-of-file</strong></li>\n<li>encounter an invalid input, such as reading a value is not a integer</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"CHAPTER-2-VARIABLES-AND-BASIC-TYPES\"><a href=\"#CHAPTER-2-VARIABLES-AND-BASIC-TYPES\" class=\"headerlink\" title=\"CHAPTER 2 VARIABLES AND BASIC TYPES\"></a>CHAPTER 2 VARIABLES AND BASIC TYPES</h2><h3 id=\"Primitive-built-in-types\"><a href=\"#Primitive-built-in-types\" class=\"headerlink\" title=\"Primitive built-in types\"></a>Primitive built-in types</h3><ul>\n<li><p>Signed and unsigned types</p>\n<ol>\n<li>except for bool and extended character types, the integral types may be signed or unsigned(float is not integral types)</li>\n<li>there are three character types (two in real usage): char, signed char and unsigned char<ul>\n<li>char is signed in some machine and unsiged in others</li>\n</ul>\n</li>\n<li>use an unsigned when you are sure of it’s usage</li>\n<li>don’t use plain char or bool in arithmetic experssions</li>\n<li>double is better for float, float has not enough precison and in some machines double computation is faster than float</li>\n</ol>\n</li>\n<li><p>Type conversions</p>\n<ol>\n<li>when assign a float to int, <ul>\n<li>the fractional part of float is truncated as temp</li>\n<li>give temp to the int mentioned above</li>\n</ul>\n</li>\n<li>when assign an out-of-value to unsigned type, the lower bits doesn’t change, the higher bit out-of-range is truncated, this is same to modulo</li>\n<li>when assign an out-of-value to signed type, the result is undefined</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"Variables\"><a href=\"#Variables\" class=\"headerlink\" title=\"Variables\"></a>Variables</h3><ul>\n<li><p>List initialization</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> sold = <span class=\"number\">0</span>;   <span class=\"comment\">// ok</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> sold = &#123;<span class=\"number\">0</span>&#125;; <span class=\"comment\">// ok</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> sold&#123;<span class=\"number\">0</span>&#125;;    <span class=\"comment\">// ok</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">sold</span><span class=\"params\">(<span class=\"number\">0</span>)</span></span>;    <span class=\"comment\">// ok</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">sold</span><span class=\"params\">(<span class=\"number\">1</span>d)</span></span>;   <span class=\"comment\">// ok but truncated</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> sold&#123;<span class=\"number\">1</span>d&#125;;   <span class=\"comment\">// error:narrowing conversation required</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Default initialization: built-in type defined outside any function body are initialized to zero, inside the function is uninitialized</p>\n</li>\n<li><p>declaration and definition are different</p>\n<ol>\n<li>declaration secifies the type and name of a variable</li>\n<li>definition inits the variable</li>\n<li>to use the same variable in multiple files, you must only have one definition and multi declaration<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// declaration but not definition, must be outside the function</span></span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"keyword\">int</span> j; </span><br><span class=\"line\"><span class=\"comment\">// declaration and definition</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> j;        </span><br><span class=\"line\"><span class=\"comment\">// only definition, declaration is override, must be outside the function</span></span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"keyword\">double</span> pi = <span class=\"number\">3.14</span>;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n<li><p>illegal variable names</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> __a; <span class=\"comment\">// contains 2 underscores</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> _Ab; <span class=\"comment\">// start with underscore, and follow with a upper letter immediately</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>get variables outer scope</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; ::reused &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>; <span class=\"comment\">// use '::'</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"Compound-Types\"><a href=\"#Compound-Types\" class=\"headerlink\" title=\"Compound Types\"></a>Compound Types</h3><ul>\n<li><p>Reference: </p>\n<ol>\n<li>a reference to object, it’s not an object</li>\n<li>must be initialized, can’t re-bind<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> val1 = <span class=\"number\">1024</span>;</span><br><span class=\"line\"><span class=\"keyword\">double</span> val2 = <span class=\"number\">123</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> &amp;relVal1 = val1; <span class=\"comment\">// ok</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> &amp;relVal2;        <span class=\"comment\">// error, must be init</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> &amp;relVal3 = val2; <span class=\"comment\">// error, type error</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n<li><p>Pointers</p>\n<ul>\n<li>different to reference<ol>\n<li>it’s an object</li>\n<li>can be rebind</li>\n<li>needn’t initialized when defined</li>\n<li>like built-in types, it has undefined value in function if it’s not defined</li>\n</ol>\n</li>\n<li>pointer value state<ol>\n<li>point to an object</li>\n<li>point to the location just immediately past the end of an object (illegal pointer)</li>\n<li>null pointer</li>\n<li>invalid pointer (not initialized)</li>\n</ol>\n</li>\n<li>special<ol>\n<li>same type valid pointers can use in comparation (address compare)</li>\n<li>void pointers<ul>\n<li>can compare to another pointer</li>\n<li>pass or return it from a function</li>\n<li>assign it to another void* pointer</li>\n</ul>\n</li>\n<li>define two pointer in a line: <code>int *p1, *p2</code>, ‘*’ only works for the variable name</li>\n<li>reference to pointers (example below)</li>\n</ol>\n</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// normal</span></span><br><span class=\"line\"><span class=\"keyword\">double</span> val = <span class=\"number\">123</span>;</span><br><span class=\"line\"><span class=\"keyword\">double</span> *pd1 = &amp;val; </span><br><span class=\"line\">             <span class=\"comment\">// ok, give the pointer itself a new value</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> *pd2 = &amp;val;    <span class=\"comment\">// error, types differ</span></span><br><span class=\"line\">pd2 = pd1;   <span class=\"comment\">// error, types differ</span></span><br><span class=\"line\">pd1 = val;   <span class=\"comment\">// error, can't assign object to pointer</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// special</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> *p1, p2; <span class=\"comment\">// only p1 is pointer</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> *p;</span><br><span class=\"line\"><span class=\"keyword\">int</span> *&amp;r = p; <span class=\"comment\">// read from right to left: r is a reference to pointer</span></span><br><span class=\"line\">r = &amp;i;</span><br><span class=\"line\">*r = <span class=\"number\">0</span>;      <span class=\"comment\">// set i to 0</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"const-Qualifer\"><a href=\"#const-Qualifer\" class=\"headerlink\" title=\"const Qualifer\"></a>const Qualifer</h3><ul>\n<li><p>local to file</p>\n<ol>\n<li>default internal linkage in C++<ul>\n<li>if we define <code>const int ivv = 0</code> in source file, and <code>extern const int ivv</code> in header file, ‘ivv’ only works in that source file, this is the so-called ‘local-to-file’, differ to the normal case</li>\n<li>to use ‘ivv’ in multi files, we should declare <code>extern const int ivv</code> in header file, and define <code>extern const int ivv = 0</code> in source file</li>\n</ul>\n</li>\n<li>default external linkage in C<ul>\n<li>in C, const variable’s scope is the same to normal case</li>\n</ul>\n</li>\n</ol>\n</li>\n<li><p>reference to const</p>\n<ol>\n<li>const reference to const object/normal/plain/expression/double, means read only</li>\n<li>if reference to double, it’s a tempory value, if the origin double changes, the reference to const will never know that<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ok initialization</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> ci = <span class=\"number\">1024</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> i = <span class=\"number\">1024</span>;</span><br><span class=\"line\"><span class=\"keyword\">double</span> dval = <span class=\"number\">3.14</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> &amp;r1 = ci; <span class=\"comment\">// from const object</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> &amp;r2 = i;  <span class=\"comment\">// from normal int</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> &amp;r3 = <span class=\"number\">12</span>; <span class=\"comment\">// from plain int</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> &amp;r4 = r1 * <span class=\"number\">2</span>; <span class=\"comment\">// from expression</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> &amp;r5 = dval; <span class=\"comment\">// dval --&gt; temp int --&gt; r5</span></span><br><span class=\"line\"><span class=\"comment\">// error case</span></span><br><span class=\"line\">r1 = <span class=\"number\">123</span>; <span class=\"comment\">// can't rebind</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> &amp;r6 = ci; <span class=\"comment\">// only const reference can reference to const object</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n<li><p>pointer to const(<strong>can’t change the memory the address points to</strong>)</p>\n<ol>\n<li>similar to ‘reference to const’, it stores the address of a object and has read access but not write access to the address</li>\n<li><strong>can rebind</strong></li>\n</ol>\n</li>\n<li><p>const pointers(<strong>can’t change the address</strong>)</p>\n<ol>\n<li>can’t rebind, must be initialized at first time</li>\n<li>itself const, always point to the same address</li>\n<li><strong>can change the address’s real value</strong><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> errNumb = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> *<span class=\"keyword\">const</span> curErr = &amp;errNumb; <span class=\"comment\">// const pointers</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> *curPnt = &amp;errNumb; <span class=\"comment\">// pointer to const</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> i = <span class=\"number\">123</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> *<span class=\"keyword\">const</span> curNor = &amp;i; <span class=\"comment\">// a const pointer to a const int</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n<li><p>top-level &amp; low-level const</p>\n<ol>\n<li>top-level: itself const, const objects(pointers)</li>\n<li>low-level: pointer or reference to const</li>\n<li>when we copy a object, top-level is ignored and low-level will never be ignored<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> a = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> b = a; <span class=\"comment\">// ok: top-level ignore</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> <span class=\"keyword\">const</span> *m = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> *n = m; <span class=\"comment\">// error: low-level can't be ignore</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n<li><p>constexpr:<strong>applies to the pointer</strong> but not the type to which the pointer points</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> *p = <span class=\"number\">0</span>; <span class=\"comment\">// pointer to const</span></span><br><span class=\"line\"><span class=\"keyword\">constexpr</span> <span class=\"keyword\">int</span> *q = <span class=\"number\">0</span>; <span class=\"comment\">// a const pointer to int</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"Dealing-with-type\"><a href=\"#Dealing-with-type\" class=\"headerlink\" title=\"Dealing with type\"></a>Dealing with type</h3><ul>\n<li><p>type alias</p>\n<ol>\n<li>typedef is the alias of an object<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">double</span> wages; <span class=\"comment\">// `wages` is same to double</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> wages = <span class=\"keyword\">double</span>;</span><br><span class=\"line\"><span class=\"comment\">// pointer</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">char</span> *pstring; <span class=\"comment\">// pstring is an object: char*, pointer to char</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> pstring cstr = <span class=\"number\">0</span>; <span class=\"comment\">// same to `const (char*) cstr = 0`, cstr is a const pointer to char</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n<li><p>auto: automatically determines the type, <strong>ignores the top-level</strong></p>\n</li>\n<li>decltype: similar to auto, but <strong>top-level is keeped</strong><ol>\n<li>decltype((v)) is always a reference type<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">auto</span> a = i; <span class=\"comment\">// normal int </span></span><br><span class=\"line\"><span class=\"keyword\">decltype</span>(i) b = <span class=\"number\">0</span>; <span class=\"comment\">// const int</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"CHAPTER-3-STRINGS-VECTORS-AND-ARRAYS\"><a href=\"#CHAPTER-3-STRINGS-VECTORS-AND-ARRAYS\" class=\"headerlink\" title=\"CHAPTER 3 STRINGS, VECTORS, AND ARRAYS\"></a>CHAPTER 3 STRINGS, VECTORS, AND ARRAYS</h2><h3 id=\"Namespace-using-Declarations\"><a href=\"#Namespace-using-Declarations\" class=\"headerlink\" title=\"Namespace using Declarations\"></a>Namespace using Declarations</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// main.cpp</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span>; <span class=\"comment\">// 只使用于本源文件，引入另外一个命名空间的成员到当前作用域</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"hello\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<!--more-->\n<h3 id=\"Library-string-Type\"><a href=\"#Library-string-Type\" class=\"headerlink\" title=\"Library string Type\"></a>Library string Type</h3><p>使用前提：</p>\n<ul>\n<li>头文件引入：<code>#include &lt;string&gt;</code></li>\n<li>作用域引入：<code>using std::string</code></li>\n</ul>\n<h4 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 默认实例化为空</span></span><br><span class=\"line\"><span class=\"built_in\">string</span> s1;</span><br><span class=\"line\"><span class=\"comment\">// 直接实例化为指定值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">s1</span><span class=\"params\">(<span class=\"number\">10</span>, <span class=\"string\">'c'</span>)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">s2</span><span class=\"params\">(<span class=\"string\">\"haha\"</span>)</span></span>;</span><br><span class=\"line\"><span class=\"comment\">// 复制实例化</span></span><br><span class=\"line\"><span class=\"built_in\">string</span> s3 = <span class=\"string\">\"haha\"</span>;</span><br></pre></td></tr></table></figure>\n<h4 id=\"字符串操作\"><a href=\"#字符串操作\" class=\"headerlink\" title=\"字符串操作\"></a>字符串操作</h4><p>几个特殊的字符串操作举例如下：</p>\n<ul>\n<li>输入和输出</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">string</span> word;</span><br><span class=\"line\"><span class=\"keyword\">while</span>(<span class=\"built_in\">cin</span> &gt;&gt; word) <span class=\"comment\">// is&gt;&gt;s，返回is</span></span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; word &lt;&lt; <span class=\"built_in\">endl</span>; <span class=\"comment\">// os &lt;&lt; s，返回os</span></span><br><span class=\"line\"><span class=\"keyword\">while</span>(getline(<span class=\"built_in\">cin</span>, word)) <span class=\"comment\">// 返回is</span></span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; word &lt;&lt; <span class=\"built_in\">endl</span>;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>比较：比较从左到右第一个不同的字符的ASCII值，如从左到右无不同字符则长度较长的字符串大</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// s2大s1，s3大于前两个字符串</span></span><br><span class=\"line\"><span class=\"built_in\">string</span> s1 = <span class=\"string\">\"hello\"</span>;</span><br><span class=\"line\"><span class=\"built_in\">string</span> s2 = <span class=\"string\">\"hello, world\"</span>;</span><br><span class=\"line\"><span class=\"built_in\">string</span> s3 = <span class=\"string\">\"hexo\"</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>size()</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">string</span> s1;</span><br><span class=\"line\"><span class=\"keyword\">auto</span> size = s1.size(); <span class=\"comment\">// string::size_type，一个无符号整型</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>拼接</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// string类型间可自由拼接</span></span><br><span class=\"line\"><span class=\"built_in\">string</span> s1 = <span class=\"string\">\"t\"</span>;</span><br><span class=\"line\"><span class=\"built_in\">string</span> s2 = <span class=\"string\">\"x\"</span>;</span><br><span class=\"line\">s1 += s2;</span><br><span class=\"line\"><span class=\"comment\">// string和literals</span></span><br><span class=\"line\"><span class=\"built_in\">string</span> s3 = <span class=\"string\">\"t\"</span> + <span class=\"string\">\"x\"</span>; <span class=\"comment\">// error：字面量不可相加</span></span><br><span class=\"line\"><span class=\"built_in\">string</span> s4 = <span class=\"string\">\"t\"</span> + s1 + <span class=\"string\">\"x\"</span>; <span class=\"comment\">// 合法，运算顺序从左到右</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"处理字符串内的字符\"><a href=\"#处理字符串内的字符\" class=\"headerlink\" title=\"处理字符串内的字符\"></a>处理字符串内的字符</h4><p>一共有两类操作，</p>\n<ul>\n<li>字符串遍历（copy和reference）</li>\n<li>数组下标（reference）</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">string</span> s1 = <span class=\"string\">\"test\"</span>;</span><br><span class=\"line\"><span class=\"comment\">// 字符串遍历</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> c : s1) <span class=\"comment\">// c是copy，改变c的值不影响字符串</span></span><br><span class=\"line\">    <span class=\"comment\">// do sth</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> &amp;c : s1) <span class=\"comment\">// c是reference</span></span><br><span class=\"line\">    <span class=\"comment\">// do sth</span></span><br><span class=\"line\">s1[<span class=\"number\">0</span>] = <span class=\"string\">'y'</span>; <span class=\"comment\">// 引用第0个数组下标的字符</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Library-vector-Type\"><a href=\"#Library-vector-Type\" class=\"headerlink\" title=\"Library vector Type\"></a>Library vector Type</h3><p>使用前提：</p>\n<ul>\n<li>头文件引入：<code>#include &lt;vector&gt;</code></li>\n<li>作用域引入：<code>using std::vector</code></li>\n</ul>\n<h4 id=\"定义-1\"><a href=\"#定义-1\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p><em>注意括号和花括号的不同</em>：<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 默认实例化为空</span></span><br><span class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt; v1; </span><br><span class=\"line\"><span class=\"comment\">// 指定元素数量</span></span><br><span class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; v2(<span class=\"number\">10</span>); <span class=\"comment\">// 10个0</span></span><br><span class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; v3(<span class=\"number\">10</span>, <span class=\"number\">1</span>); <span class=\"comment\">// 10个1</span></span><br><span class=\"line\"><span class=\"comment\">// 列表实例化</span></span><br><span class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; &#123;<span class=\"number\">10</span>, <span class=\"number\">1</span>&#125;; <span class=\"comment\">// 10和1两个元素</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"操作\"><a href=\"#操作\" class=\"headerlink\" title=\"操作\"></a>操作</h4><p>注意：</p>\n<ul>\n<li>数组下标可操作vector的尺寸之外的元素如<code>vector[size+1] = 3</code>，但这并不会向vector新增一个元素，而且会产生越界异常<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; v1(<span class=\"number\">10</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">v1.push_back(<span class=\"number\">2</span>); <span class=\"comment\">// 插入</span></span><br><span class=\"line\">v1[<span class=\"number\">0</span>] = <span class=\"number\">3</span>; <span class=\"comment\">// 数组下标引用</span></span><br><span class=\"line\">v1.size(); <span class=\"comment\">// vector::size_type</span></span><br><span class=\"line\"><span class=\"comment\">// 比较操作需要装相同元素，且相同元素间可比较</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"Introducing-Iterators\"><a href=\"#Introducing-Iterators\" class=\"headerlink\" title=\"Introducing Iterators\"></a>Introducing Iterators</h3><h4 id=\"定义-2\"><a href=\"#定义-2\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>string有两种iterator类型，指向某个具体字符：</p>\n<ul>\n<li>string::iterator指向的元素可读写</li>\n<li>string::const_iterator指向的元素只可以读</li>\n</ul>\n<p>vector有两种iterator类型，指向某个具体元素：</p>\n<ul>\n<li>vector::iterator</li>\n<li>vector::const_iterator</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">s1</span><span class=\"params\">(<span class=\"string\">\"123\"</span>)</span></span>;</span><br><span class=\"line\"><span class=\"keyword\">auto</span> i1 = s1.begin(); <span class=\"comment\">// 指向第一个元素</span></span><br><span class=\"line\"><span class=\"keyword\">auto</span> i2 = s1.end(); <span class=\"comment\">// 指向最后一个元素的尾部</span></span><br><span class=\"line\"><span class=\"keyword\">auto</span> i3 = s1.cbegin(); <span class=\"comment\">// 只可读</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"操作-1\"><a href=\"#操作-1\" class=\"headerlink\" title=\"操作\"></a>操作</h4><p>常用操作如下：<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">vector</span> s1&#123;<span class=\"string\">\"123\"</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">auto</span> i1 = s1.begin();</span><br><span class=\"line\">*i1 = <span class=\"string\">\"345\"</span>; <span class=\"comment\">// dereference，取得引用</span></span><br><span class=\"line\">(*i1).size(); <span class=\"comment\">// 调用第一个元素的成员size()</span></span><br><span class=\"line\">*i1.size(); <span class=\"comment\">// error：调用顺序是*(i1.size())</span></span><br><span class=\"line\">i1++; <span class=\"comment\">// 可进行加减运算，指向不同成员</span></span><br><span class=\"line\"><span class=\"comment\">// 比较运算符规则：出现在容器前面的元素较小</span></span><br></pre></td></tr></table></figure></p>\n<p>注意：在使用iterator遍历vector时不能使用push_back，它会使得之前指向它的iterator都无效</p>\n<h3 id=\"Arrays\"><a href=\"#Arrays\" class=\"headerlink\" title=\"Arrays\"></a>Arrays</h3><h4 id=\"定义-3\"><a href=\"#定义-3\" class=\"headerlink\" title=\"定义\"></a>定义</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 默认实例化</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> arr[<span class=\"number\">10</span>]; <span class=\"comment\">// 10个int值，在函数外int值默认为0，函数内int值为undefined，与built-in类型的默认值规则相同</span></span><br><span class=\"line\"><span class=\"comment\">// 显示实例化</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> arr2[<span class=\"number\">10</span>] = &#123;<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>&#125;; <span class=\"comment\">// 后七个元素的值同上</span></span><br><span class=\"line\"><span class=\"comment\">// 字符数组</span></span><br><span class=\"line\"><span class=\"keyword\">char</span> c1[] = <span class=\"string\">\"C++\"</span>; <span class=\"comment\">// 共4个元素，最后一个为'\\0'</span></span><br><span class=\"line\"><span class=\"comment\">// 不能复制和赋值</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> arr3 [] = arr; <span class=\"comment\">// error</span></span><br><span class=\"line\">arr2 = arr; <span class=\"comment\">// error</span></span><br><span class=\"line\"><span class=\"comment\">// 复杂的定义</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> *ptr[<span class=\"number\">10</span>]; <span class=\"comment\">// ptr是一个数组，该数组含有10个int型指针</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> (*ptr)[<span class=\"number\">10</span>]; <span class=\"comment\">// ptr是一个指针，指向含有10个int元素的数组</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"操纵数组\"><a href=\"#操纵数组\" class=\"headerlink\" title=\"操纵数组\"></a>操纵数组</h4><ol>\n<li>使用数组下标</li>\n<li>使用for-each，如<code>for(auto tmp : arr)或for(auto &amp;tmp : arr)</code></li>\n</ol>\n<h4 id=\"数组与指针\"><a href=\"#数组与指针\" class=\"headerlink\" title=\"数组与指针\"></a>数组与指针</h4><ul>\n<li><p>数组名指向第一个元素</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">string</span> nums[] = &#123;<span class=\"string\">\"one\"</span>, <span class=\"string\">\"two\"</span>, <span class=\"string\">\"three\"</span>&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 下面两个式子等效</span></span><br><span class=\"line\"><span class=\"built_in\">string</span> *ptr = nums;</span><br><span class=\"line\">ptr = &amp;nums[<span class=\"number\">0</span>];</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>auto和decltype具有不同效果</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> ia[] = &#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">auto</span> <span class=\"title\">ia2</span><span class=\"params\">(ia)</span></span>; <span class=\"comment\">// 等效于&amp;ia[0]</span></span><br><span class=\"line\"><span class=\"keyword\">decltype</span>(ia) ia3 = &#123;<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>&#125;; <span class=\"comment\">// 具有与ia一样的类型</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>指针与数组</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> arr[] = &#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">int</span> *ptr = <span class=\"number\">0</span>; <span class=\"comment\">// 指针状态1：空指针</span></span><br><span class=\"line\">ptr = arr; <span class=\"comment\">// 指针状态2：指向某个对象</span></span><br><span class=\"line\">ptr = arr[<span class=\"number\">3</span>]; <span class=\"comment\">// 指针状态3：指向一块内存的结束地址，指针本身有效，不能使用*号取值</span></span><br><span class=\"line\">ptr = arr[<span class=\"number\">4</span>]; <span class=\"comment\">// 指针状态4：这是一个无效的指针，指针地址未定义，不能使用*号取值</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>begin和end函数取数组首尾</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> ia[] = &#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">int</span> *begin = begin(ia);</span><br><span class=\"line\"><span class=\"keyword\">int</span> *end = end(ia);</span><br><span class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; ivec(begin(ia), end(ia)); <span class=\"comment\">// 将ia的内容复制到ivec</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>数组指针运算</p>\n<ul>\n<li>指向相同数组的指针才可使用关系运算符；</li>\n<li>built-in数组指针下标可使用负数，如：<code>p[-2]</code>，p指向一个数组的元素；vector等library type的数组下标必须是正数；</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"c类型字符串\"><a href=\"#c类型字符串\" class=\"headerlink\" title=\"c类型字符串\"></a>c类型字符串</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">string</span> s = <span class=\"string\">\"c++\"</span>; <span class=\"comment\">// 可使用c类型字符串为string类型赋值</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *str = s; <span class=\"comment\">// error：反之则不行，应使用s.c_str()</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"多维数组\"><a href=\"#多维数组\" class=\"headerlink\" title=\"多维数组\"></a>多维数组</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> ia[<span class=\"number\">3</span>][<span class=\"number\">4</span>];</span><br><span class=\"line\"><span class=\"comment\">// 指针p为类型int (*p)[4]，指向含有4个int的数组</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> p = begin(ia); p != end(ia); ++p) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// q指向int[4]的第一个元素</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> q = begin(*p); q != end(*p); ++q) &#123;</span><br><span class=\"line\">        cout &lt;&lt; *q &lt;&lt; '';</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>《C++ Primer v5》的读书笔记。</p>","more":"<h2 id=\"CHAPTER-1-GETTING-STARTED\"><a href=\"#CHAPTER-1-GETTING-STARTED\" class=\"headerlink\" title=\"CHAPTER 1 GETTING STARTED\"></a>CHAPTER 1 GETTING STARTED</h2><ul>\n<li><p>Variable type: when we wrote<code>T t</code>, we sayed that “t has type T”, or “t is a T”</p>\n</li>\n<li><p>gcc/g++ warning all options: <code>-Wall</code> for *nix, <code>/W4</code> for windows</p>\n</li>\n<li><p>Flush the stream: we should always put <code>std::cout &lt;&lt; std::endl;</code> at the end of <code>std::cout</code> to flush the stream of std-out, or else it won’t output immediately</p>\n</li>\n<li><p>Left operating left: <code>std::cout &lt;&lt; &quot;text 1&quot; &lt;&lt; &quot; and text 2&quot; &lt;&lt; std::endl;</code> equals to</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"text 1\"</span>;</span><br><span class=\"line\"><span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\" and text 2\"</span>;</span><br><span class=\"line\"><span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">std</span>:<span class=\"built_in\">endl</span>;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<!--more-->\n<ul>\n<li>istream hits invalid state: <code>while (std::cin &gt;&gt; value)</code> will end at<ol>\n<li>hit the <strong>end-of-file</strong></li>\n<li>encounter an invalid input, such as reading a value is not a integer</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"CHAPTER-2-VARIABLES-AND-BASIC-TYPES\"><a href=\"#CHAPTER-2-VARIABLES-AND-BASIC-TYPES\" class=\"headerlink\" title=\"CHAPTER 2 VARIABLES AND BASIC TYPES\"></a>CHAPTER 2 VARIABLES AND BASIC TYPES</h2><h3 id=\"Primitive-built-in-types\"><a href=\"#Primitive-built-in-types\" class=\"headerlink\" title=\"Primitive built-in types\"></a>Primitive built-in types</h3><ul>\n<li><p>Signed and unsigned types</p>\n<ol>\n<li>except for bool and extended character types, the integral types may be signed or unsigned(float is not integral types)</li>\n<li>there are three character types (two in real usage): char, signed char and unsigned char<ul>\n<li>char is signed in some machine and unsiged in others</li>\n</ul>\n</li>\n<li>use an unsigned when you are sure of it’s usage</li>\n<li>don’t use plain char or bool in arithmetic experssions</li>\n<li>double is better for float, float has not enough precison and in some machines double computation is faster than float</li>\n</ol>\n</li>\n<li><p>Type conversions</p>\n<ol>\n<li>when assign a float to int, <ul>\n<li>the fractional part of float is truncated as temp</li>\n<li>give temp to the int mentioned above</li>\n</ul>\n</li>\n<li>when assign an out-of-value to unsigned type, the lower bits doesn’t change, the higher bit out-of-range is truncated, this is same to modulo</li>\n<li>when assign an out-of-value to signed type, the result is undefined</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"Variables\"><a href=\"#Variables\" class=\"headerlink\" title=\"Variables\"></a>Variables</h3><ul>\n<li><p>List initialization</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> sold = <span class=\"number\">0</span>;   <span class=\"comment\">// ok</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> sold = &#123;<span class=\"number\">0</span>&#125;; <span class=\"comment\">// ok</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> sold&#123;<span class=\"number\">0</span>&#125;;    <span class=\"comment\">// ok</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">sold</span><span class=\"params\">(<span class=\"number\">0</span>)</span></span>;    <span class=\"comment\">// ok</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">sold</span><span class=\"params\">(<span class=\"number\">1</span>d)</span></span>;   <span class=\"comment\">// ok but truncated</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> sold&#123;<span class=\"number\">1</span>d&#125;;   <span class=\"comment\">// error:narrowing conversation required</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Default initialization: built-in type defined outside any function body are initialized to zero, inside the function is uninitialized</p>\n</li>\n<li><p>declaration and definition are different</p>\n<ol>\n<li>declaration secifies the type and name of a variable</li>\n<li>definition inits the variable</li>\n<li>to use the same variable in multiple files, you must only have one definition and multi declaration<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// declaration but not definition, must be outside the function</span></span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"keyword\">int</span> j; </span><br><span class=\"line\"><span class=\"comment\">// declaration and definition</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> j;        </span><br><span class=\"line\"><span class=\"comment\">// only definition, declaration is override, must be outside the function</span></span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"keyword\">double</span> pi = <span class=\"number\">3.14</span>;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n<li><p>illegal variable names</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> __a; <span class=\"comment\">// contains 2 underscores</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> _Ab; <span class=\"comment\">// start with underscore, and follow with a upper letter immediately</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>get variables outer scope</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; ::reused &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>; <span class=\"comment\">// use '::'</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"Compound-Types\"><a href=\"#Compound-Types\" class=\"headerlink\" title=\"Compound Types\"></a>Compound Types</h3><ul>\n<li><p>Reference: </p>\n<ol>\n<li>a reference to object, it’s not an object</li>\n<li>must be initialized, can’t re-bind<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> val1 = <span class=\"number\">1024</span>;</span><br><span class=\"line\"><span class=\"keyword\">double</span> val2 = <span class=\"number\">123</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> &amp;relVal1 = val1; <span class=\"comment\">// ok</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> &amp;relVal2;        <span class=\"comment\">// error, must be init</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> &amp;relVal3 = val2; <span class=\"comment\">// error, type error</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n<li><p>Pointers</p>\n<ul>\n<li>different to reference<ol>\n<li>it’s an object</li>\n<li>can be rebind</li>\n<li>needn’t initialized when defined</li>\n<li>like built-in types, it has undefined value in function if it’s not defined</li>\n</ol>\n</li>\n<li>pointer value state<ol>\n<li>point to an object</li>\n<li>point to the location just immediately past the end of an object (illegal pointer)</li>\n<li>null pointer</li>\n<li>invalid pointer (not initialized)</li>\n</ol>\n</li>\n<li>special<ol>\n<li>same type valid pointers can use in comparation (address compare)</li>\n<li>void pointers<ul>\n<li>can compare to another pointer</li>\n<li>pass or return it from a function</li>\n<li>assign it to another void* pointer</li>\n</ul>\n</li>\n<li>define two pointer in a line: <code>int *p1, *p2</code>, ‘*’ only works for the variable name</li>\n<li>reference to pointers (example below)</li>\n</ol>\n</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// normal</span></span><br><span class=\"line\"><span class=\"keyword\">double</span> val = <span class=\"number\">123</span>;</span><br><span class=\"line\"><span class=\"keyword\">double</span> *pd1 = &amp;val; </span><br><span class=\"line\">             <span class=\"comment\">// ok, give the pointer itself a new value</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> *pd2 = &amp;val;    <span class=\"comment\">// error, types differ</span></span><br><span class=\"line\">pd2 = pd1;   <span class=\"comment\">// error, types differ</span></span><br><span class=\"line\">pd1 = val;   <span class=\"comment\">// error, can't assign object to pointer</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// special</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> *p1, p2; <span class=\"comment\">// only p1 is pointer</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> *p;</span><br><span class=\"line\"><span class=\"keyword\">int</span> *&amp;r = p; <span class=\"comment\">// read from right to left: r is a reference to pointer</span></span><br><span class=\"line\">r = &amp;i;</span><br><span class=\"line\">*r = <span class=\"number\">0</span>;      <span class=\"comment\">// set i to 0</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"const-Qualifer\"><a href=\"#const-Qualifer\" class=\"headerlink\" title=\"const Qualifer\"></a>const Qualifer</h3><ul>\n<li><p>local to file</p>\n<ol>\n<li>default internal linkage in C++<ul>\n<li>if we define <code>const int ivv = 0</code> in source file, and <code>extern const int ivv</code> in header file, ‘ivv’ only works in that source file, this is the so-called ‘local-to-file’, differ to the normal case</li>\n<li>to use ‘ivv’ in multi files, we should declare <code>extern const int ivv</code> in header file, and define <code>extern const int ivv = 0</code> in source file</li>\n</ul>\n</li>\n<li>default external linkage in C<ul>\n<li>in C, const variable’s scope is the same to normal case</li>\n</ul>\n</li>\n</ol>\n</li>\n<li><p>reference to const</p>\n<ol>\n<li>const reference to const object/normal/plain/expression/double, means read only</li>\n<li>if reference to double, it’s a tempory value, if the origin double changes, the reference to const will never know that<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ok initialization</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> ci = <span class=\"number\">1024</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> i = <span class=\"number\">1024</span>;</span><br><span class=\"line\"><span class=\"keyword\">double</span> dval = <span class=\"number\">3.14</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> &amp;r1 = ci; <span class=\"comment\">// from const object</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> &amp;r2 = i;  <span class=\"comment\">// from normal int</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> &amp;r3 = <span class=\"number\">12</span>; <span class=\"comment\">// from plain int</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> &amp;r4 = r1 * <span class=\"number\">2</span>; <span class=\"comment\">// from expression</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> &amp;r5 = dval; <span class=\"comment\">// dval --&gt; temp int --&gt; r5</span></span><br><span class=\"line\"><span class=\"comment\">// error case</span></span><br><span class=\"line\">r1 = <span class=\"number\">123</span>; <span class=\"comment\">// can't rebind</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> &amp;r6 = ci; <span class=\"comment\">// only const reference can reference to const object</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n<li><p>pointer to const(<strong>can’t change the memory the address points to</strong>)</p>\n<ol>\n<li>similar to ‘reference to const’, it stores the address of a object and has read access but not write access to the address</li>\n<li><strong>can rebind</strong></li>\n</ol>\n</li>\n<li><p>const pointers(<strong>can’t change the address</strong>)</p>\n<ol>\n<li>can’t rebind, must be initialized at first time</li>\n<li>itself const, always point to the same address</li>\n<li><strong>can change the address’s real value</strong><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> errNumb = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> *<span class=\"keyword\">const</span> curErr = &amp;errNumb; <span class=\"comment\">// const pointers</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> *curPnt = &amp;errNumb; <span class=\"comment\">// pointer to const</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> i = <span class=\"number\">123</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> *<span class=\"keyword\">const</span> curNor = &amp;i; <span class=\"comment\">// a const pointer to a const int</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n<li><p>top-level &amp; low-level const</p>\n<ol>\n<li>top-level: itself const, const objects(pointers)</li>\n<li>low-level: pointer or reference to const</li>\n<li>when we copy a object, top-level is ignored and low-level will never be ignored<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> a = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> b = a; <span class=\"comment\">// ok: top-level ignore</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> <span class=\"keyword\">const</span> *m = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> *n = m; <span class=\"comment\">// error: low-level can't be ignore</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n<li><p>constexpr:<strong>applies to the pointer</strong> but not the type to which the pointer points</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> *p = <span class=\"number\">0</span>; <span class=\"comment\">// pointer to const</span></span><br><span class=\"line\"><span class=\"keyword\">constexpr</span> <span class=\"keyword\">int</span> *q = <span class=\"number\">0</span>; <span class=\"comment\">// a const pointer to int</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"Dealing-with-type\"><a href=\"#Dealing-with-type\" class=\"headerlink\" title=\"Dealing with type\"></a>Dealing with type</h3><ul>\n<li><p>type alias</p>\n<ol>\n<li>typedef is the alias of an object<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">double</span> wages; <span class=\"comment\">// `wages` is same to double</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> wages = <span class=\"keyword\">double</span>;</span><br><span class=\"line\"><span class=\"comment\">// pointer</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">char</span> *pstring; <span class=\"comment\">// pstring is an object: char*, pointer to char</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> pstring cstr = <span class=\"number\">0</span>; <span class=\"comment\">// same to `const (char*) cstr = 0`, cstr is a const pointer to char</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n<li><p>auto: automatically determines the type, <strong>ignores the top-level</strong></p>\n</li>\n<li>decltype: similar to auto, but <strong>top-level is keeped</strong><ol>\n<li>decltype((v)) is always a reference type<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">auto</span> a = i; <span class=\"comment\">// normal int </span></span><br><span class=\"line\"><span class=\"keyword\">decltype</span>(i) b = <span class=\"number\">0</span>; <span class=\"comment\">// const int</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"CHAPTER-3-STRINGS-VECTORS-AND-ARRAYS\"><a href=\"#CHAPTER-3-STRINGS-VECTORS-AND-ARRAYS\" class=\"headerlink\" title=\"CHAPTER 3 STRINGS, VECTORS, AND ARRAYS\"></a>CHAPTER 3 STRINGS, VECTORS, AND ARRAYS</h2><h3 id=\"Namespace-using-Declarations\"><a href=\"#Namespace-using-Declarations\" class=\"headerlink\" title=\"Namespace using Declarations\"></a>Namespace using Declarations</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// main.cpp</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span>; <span class=\"comment\">// 只使用于本源文件，引入另外一个命名空间的成员到当前作用域</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"hello\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<!--more-->\n<h3 id=\"Library-string-Type\"><a href=\"#Library-string-Type\" class=\"headerlink\" title=\"Library string Type\"></a>Library string Type</h3><p>使用前提：</p>\n<ul>\n<li>头文件引入：<code>#include &lt;string&gt;</code></li>\n<li>作用域引入：<code>using std::string</code></li>\n</ul>\n<h4 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 默认实例化为空</span></span><br><span class=\"line\"><span class=\"built_in\">string</span> s1;</span><br><span class=\"line\"><span class=\"comment\">// 直接实例化为指定值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">s1</span><span class=\"params\">(<span class=\"number\">10</span>, <span class=\"string\">'c'</span>)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">s2</span><span class=\"params\">(<span class=\"string\">\"haha\"</span>)</span></span>;</span><br><span class=\"line\"><span class=\"comment\">// 复制实例化</span></span><br><span class=\"line\"><span class=\"built_in\">string</span> s3 = <span class=\"string\">\"haha\"</span>;</span><br></pre></td></tr></table></figure>\n<h4 id=\"字符串操作\"><a href=\"#字符串操作\" class=\"headerlink\" title=\"字符串操作\"></a>字符串操作</h4><p>几个特殊的字符串操作举例如下：</p>\n<ul>\n<li>输入和输出</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">string</span> word;</span><br><span class=\"line\"><span class=\"keyword\">while</span>(<span class=\"built_in\">cin</span> &gt;&gt; word) <span class=\"comment\">// is&gt;&gt;s，返回is</span></span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; word &lt;&lt; <span class=\"built_in\">endl</span>; <span class=\"comment\">// os &lt;&lt; s，返回os</span></span><br><span class=\"line\"><span class=\"keyword\">while</span>(getline(<span class=\"built_in\">cin</span>, word)) <span class=\"comment\">// 返回is</span></span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; word &lt;&lt; <span class=\"built_in\">endl</span>;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>比较：比较从左到右第一个不同的字符的ASCII值，如从左到右无不同字符则长度较长的字符串大</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// s2大s1，s3大于前两个字符串</span></span><br><span class=\"line\"><span class=\"built_in\">string</span> s1 = <span class=\"string\">\"hello\"</span>;</span><br><span class=\"line\"><span class=\"built_in\">string</span> s2 = <span class=\"string\">\"hello, world\"</span>;</span><br><span class=\"line\"><span class=\"built_in\">string</span> s3 = <span class=\"string\">\"hexo\"</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>size()</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">string</span> s1;</span><br><span class=\"line\"><span class=\"keyword\">auto</span> size = s1.size(); <span class=\"comment\">// string::size_type，一个无符号整型</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>拼接</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// string类型间可自由拼接</span></span><br><span class=\"line\"><span class=\"built_in\">string</span> s1 = <span class=\"string\">\"t\"</span>;</span><br><span class=\"line\"><span class=\"built_in\">string</span> s2 = <span class=\"string\">\"x\"</span>;</span><br><span class=\"line\">s1 += s2;</span><br><span class=\"line\"><span class=\"comment\">// string和literals</span></span><br><span class=\"line\"><span class=\"built_in\">string</span> s3 = <span class=\"string\">\"t\"</span> + <span class=\"string\">\"x\"</span>; <span class=\"comment\">// error：字面量不可相加</span></span><br><span class=\"line\"><span class=\"built_in\">string</span> s4 = <span class=\"string\">\"t\"</span> + s1 + <span class=\"string\">\"x\"</span>; <span class=\"comment\">// 合法，运算顺序从左到右</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"处理字符串内的字符\"><a href=\"#处理字符串内的字符\" class=\"headerlink\" title=\"处理字符串内的字符\"></a>处理字符串内的字符</h4><p>一共有两类操作，</p>\n<ul>\n<li>字符串遍历（copy和reference）</li>\n<li>数组下标（reference）</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">string</span> s1 = <span class=\"string\">\"test\"</span>;</span><br><span class=\"line\"><span class=\"comment\">// 字符串遍历</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> c : s1) <span class=\"comment\">// c是copy，改变c的值不影响字符串</span></span><br><span class=\"line\">    <span class=\"comment\">// do sth</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> &amp;c : s1) <span class=\"comment\">// c是reference</span></span><br><span class=\"line\">    <span class=\"comment\">// do sth</span></span><br><span class=\"line\">s1[<span class=\"number\">0</span>] = <span class=\"string\">'y'</span>; <span class=\"comment\">// 引用第0个数组下标的字符</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Library-vector-Type\"><a href=\"#Library-vector-Type\" class=\"headerlink\" title=\"Library vector Type\"></a>Library vector Type</h3><p>使用前提：</p>\n<ul>\n<li>头文件引入：<code>#include &lt;vector&gt;</code></li>\n<li>作用域引入：<code>using std::vector</code></li>\n</ul>\n<h4 id=\"定义-1\"><a href=\"#定义-1\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p><em>注意括号和花括号的不同</em>：<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 默认实例化为空</span></span><br><span class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt; v1; </span><br><span class=\"line\"><span class=\"comment\">// 指定元素数量</span></span><br><span class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; v2(<span class=\"number\">10</span>); <span class=\"comment\">// 10个0</span></span><br><span class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; v3(<span class=\"number\">10</span>, <span class=\"number\">1</span>); <span class=\"comment\">// 10个1</span></span><br><span class=\"line\"><span class=\"comment\">// 列表实例化</span></span><br><span class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; &#123;<span class=\"number\">10</span>, <span class=\"number\">1</span>&#125;; <span class=\"comment\">// 10和1两个元素</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"操作\"><a href=\"#操作\" class=\"headerlink\" title=\"操作\"></a>操作</h4><p>注意：</p>\n<ul>\n<li>数组下标可操作vector的尺寸之外的元素如<code>vector[size+1] = 3</code>，但这并不会向vector新增一个元素，而且会产生越界异常<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; v1(<span class=\"number\">10</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">v1.push_back(<span class=\"number\">2</span>); <span class=\"comment\">// 插入</span></span><br><span class=\"line\">v1[<span class=\"number\">0</span>] = <span class=\"number\">3</span>; <span class=\"comment\">// 数组下标引用</span></span><br><span class=\"line\">v1.size(); <span class=\"comment\">// vector::size_type</span></span><br><span class=\"line\"><span class=\"comment\">// 比较操作需要装相同元素，且相同元素间可比较</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"Introducing-Iterators\"><a href=\"#Introducing-Iterators\" class=\"headerlink\" title=\"Introducing Iterators\"></a>Introducing Iterators</h3><h4 id=\"定义-2\"><a href=\"#定义-2\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>string有两种iterator类型，指向某个具体字符：</p>\n<ul>\n<li>string::iterator指向的元素可读写</li>\n<li>string::const_iterator指向的元素只可以读</li>\n</ul>\n<p>vector有两种iterator类型，指向某个具体元素：</p>\n<ul>\n<li>vector::iterator</li>\n<li>vector::const_iterator</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">s1</span><span class=\"params\">(<span class=\"string\">\"123\"</span>)</span></span>;</span><br><span class=\"line\"><span class=\"keyword\">auto</span> i1 = s1.begin(); <span class=\"comment\">// 指向第一个元素</span></span><br><span class=\"line\"><span class=\"keyword\">auto</span> i2 = s1.end(); <span class=\"comment\">// 指向最后一个元素的尾部</span></span><br><span class=\"line\"><span class=\"keyword\">auto</span> i3 = s1.cbegin(); <span class=\"comment\">// 只可读</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"操作-1\"><a href=\"#操作-1\" class=\"headerlink\" title=\"操作\"></a>操作</h4><p>常用操作如下：<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">vector</span> s1&#123;<span class=\"string\">\"123\"</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">auto</span> i1 = s1.begin();</span><br><span class=\"line\">*i1 = <span class=\"string\">\"345\"</span>; <span class=\"comment\">// dereference，取得引用</span></span><br><span class=\"line\">(*i1).size(); <span class=\"comment\">// 调用第一个元素的成员size()</span></span><br><span class=\"line\">*i1.size(); <span class=\"comment\">// error：调用顺序是*(i1.size())</span></span><br><span class=\"line\">i1++; <span class=\"comment\">// 可进行加减运算，指向不同成员</span></span><br><span class=\"line\"><span class=\"comment\">// 比较运算符规则：出现在容器前面的元素较小</span></span><br></pre></td></tr></table></figure></p>\n<p>注意：在使用iterator遍历vector时不能使用push_back，它会使得之前指向它的iterator都无效</p>\n<h3 id=\"Arrays\"><a href=\"#Arrays\" class=\"headerlink\" title=\"Arrays\"></a>Arrays</h3><h4 id=\"定义-3\"><a href=\"#定义-3\" class=\"headerlink\" title=\"定义\"></a>定义</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 默认实例化</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> arr[<span class=\"number\">10</span>]; <span class=\"comment\">// 10个int值，在函数外int值默认为0，函数内int值为undefined，与built-in类型的默认值规则相同</span></span><br><span class=\"line\"><span class=\"comment\">// 显示实例化</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> arr2[<span class=\"number\">10</span>] = &#123;<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>&#125;; <span class=\"comment\">// 后七个元素的值同上</span></span><br><span class=\"line\"><span class=\"comment\">// 字符数组</span></span><br><span class=\"line\"><span class=\"keyword\">char</span> c1[] = <span class=\"string\">\"C++\"</span>; <span class=\"comment\">// 共4个元素，最后一个为'\\0'</span></span><br><span class=\"line\"><span class=\"comment\">// 不能复制和赋值</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> arr3 [] = arr; <span class=\"comment\">// error</span></span><br><span class=\"line\">arr2 = arr; <span class=\"comment\">// error</span></span><br><span class=\"line\"><span class=\"comment\">// 复杂的定义</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> *ptr[<span class=\"number\">10</span>]; <span class=\"comment\">// ptr是一个数组，该数组含有10个int型指针</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> (*ptr)[<span class=\"number\">10</span>]; <span class=\"comment\">// ptr是一个指针，指向含有10个int元素的数组</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"操纵数组\"><a href=\"#操纵数组\" class=\"headerlink\" title=\"操纵数组\"></a>操纵数组</h4><ol>\n<li>使用数组下标</li>\n<li>使用for-each，如<code>for(auto tmp : arr)或for(auto &amp;tmp : arr)</code></li>\n</ol>\n<h4 id=\"数组与指针\"><a href=\"#数组与指针\" class=\"headerlink\" title=\"数组与指针\"></a>数组与指针</h4><ul>\n<li><p>数组名指向第一个元素</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">string</span> nums[] = &#123;<span class=\"string\">\"one\"</span>, <span class=\"string\">\"two\"</span>, <span class=\"string\">\"three\"</span>&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 下面两个式子等效</span></span><br><span class=\"line\"><span class=\"built_in\">string</span> *ptr = nums;</span><br><span class=\"line\">ptr = &amp;nums[<span class=\"number\">0</span>];</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>auto和decltype具有不同效果</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> ia[] = &#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">auto</span> <span class=\"title\">ia2</span><span class=\"params\">(ia)</span></span>; <span class=\"comment\">// 等效于&amp;ia[0]</span></span><br><span class=\"line\"><span class=\"keyword\">decltype</span>(ia) ia3 = &#123;<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>&#125;; <span class=\"comment\">// 具有与ia一样的类型</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>指针与数组</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> arr[] = &#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">int</span> *ptr = <span class=\"number\">0</span>; <span class=\"comment\">// 指针状态1：空指针</span></span><br><span class=\"line\">ptr = arr; <span class=\"comment\">// 指针状态2：指向某个对象</span></span><br><span class=\"line\">ptr = arr[<span class=\"number\">3</span>]; <span class=\"comment\">// 指针状态3：指向一块内存的结束地址，指针本身有效，不能使用*号取值</span></span><br><span class=\"line\">ptr = arr[<span class=\"number\">4</span>]; <span class=\"comment\">// 指针状态4：这是一个无效的指针，指针地址未定义，不能使用*号取值</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>begin和end函数取数组首尾</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> ia[] = &#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">int</span> *begin = begin(ia);</span><br><span class=\"line\"><span class=\"keyword\">int</span> *end = end(ia);</span><br><span class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; ivec(begin(ia), end(ia)); <span class=\"comment\">// 将ia的内容复制到ivec</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>数组指针运算</p>\n<ul>\n<li>指向相同数组的指针才可使用关系运算符；</li>\n<li>built-in数组指针下标可使用负数，如：<code>p[-2]</code>，p指向一个数组的元素；vector等library type的数组下标必须是正数；</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"c类型字符串\"><a href=\"#c类型字符串\" class=\"headerlink\" title=\"c类型字符串\"></a>c类型字符串</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">string</span> s = <span class=\"string\">\"c++\"</span>; <span class=\"comment\">// 可使用c类型字符串为string类型赋值</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *str = s; <span class=\"comment\">// error：反之则不行，应使用s.c_str()</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"多维数组\"><a href=\"#多维数组\" class=\"headerlink\" title=\"多维数组\"></a>多维数组</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> ia[<span class=\"number\">3</span>][<span class=\"number\">4</span>];</span><br><span class=\"line\"><span class=\"comment\">// 指针p为类型int (*p)[4]，指向含有4个int的数组</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> p = begin(ia); p != end(ia); ++p) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// q指向int[4]的第一个元素</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> q = begin(*p); q != end(*p); ++q) &#123;</span><br><span class=\"line\">        cout &lt;&lt; *q &lt;&lt; '';</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"layout":"post","title":"Maven HOWTO","date":"2015-12-20T08:31:00.000Z","comments":1,"_content":"\nMaven版本：3.3.1\n\n<!--more-->\n\n操作系统：Windows 7\n\nJava版本：1.8\n\n移译自[Maven Getting Started Guide](https://maven.apache.org/guides/getting-started/)。\n\n## What And Why\n\nMaven是一个Java的编译（Build）自动化工具，按我的理解，它可以做到：\n- 创建自动化\n- 包依赖管理自动化\n- 编译和单元测试自动化\n- 配置注入自动化\n- 程序（War或Jar）打包自动化，及远程部署\n\n因此，它是一个可以提升开发效率的工具。\n\n## How\n\n### 配置\n\n#### Java配置\n\n1. 下载[JDK8][2]并安装到你的电脑（本文用的是jdk-8u65-windows-x64.exe）；\n\n2. 配置环境变量，右击“计算机”==>选择“高级系统设置”==>选择“高级”选项卡==>点击“环境变量”按钮：\n    - 新建系统变量`JAVA_HOME`，内容为：`C:\\Program Files\\Java\\jdk1.8.0_65`；\n    - 修改系统变量`PATH`，在末尾加入内容：`;%JAVA_HOME%\\jre\\bin`；如无此系统变量则新建系统变量`PATH`，内容为：`%JAVA_HOME%\\jre\\bin`；\n    - 新建系统变量`CLASSPATH`，内容为：`.;%JAVA_HOME%\\lib\\dt.jar;%JAVA_HOME%\\lib\\tools.jar`；\n\n3. 注销后登入，打开CMD.exe，输入\n    ```\n    echo %JAVA_HOME%\n    java -version\n    ```\n\n    上述两个命令皆有输出则表示安装Java成功。\n\n#### Maven配置\n\n1. 到[Maven下载页][3]下载apache-maven-3.3.1-bin.zip（apache-maven-3.3.3有Bug，其boot文件夹缺少了一个关键Jar包，已向Maven mail-list提出，不知道修复了没有）；\n\n2. 将压缩包解压到一个你喜欢的地方，如`D:\\Softwares\\apache-maven-3.3.1`；\n\n3. 配置环境变量，右击“计算机”==>选择“高级系统设置”==>选择“高级”选项卡==>点击“环境变量”按钮：\n    - 新建系统变量`M2_HOME`，内容为：`D:\\Softwares\\apache-maven-3.3.1`；\n    - 修改系统变量`PATH`，在末尾加入内容：`;%M2_HOME%\\bin`；\n\n4. **重新打开**一个CMD.exe窗口，输入：\n    ```\n    echo %M2_HOME%\n    mvn -v\n    ```\n\n    上述两个命令皆有输出则表示安装Maven成功。\n\n5. 配置开源中国Maven库（非必要）\n    - 第一次运行mvn命令时，需要去官网（国外）的Maven库同步Jar包到本地，据官网说在网络畅通情况下4分钟就同步完毕，后续运行mvn命令就不需要这么长时间了\n    - 如果你觉得时间太长无法忍受，可以配置mvn的中国库，参考[OSC的使用帮助](http://maven.oschina.net/help.html)即可配置。简要概括如下：\n\n```xml\n<! -- 在mirrors添加如下配置即可 -->\n<mirror>\n  <id>nexus-osc</id>\n  <mirrorOf>*</mirrorOf>\n  <name>Nexus osc</name>\n  <url>http://maven.oschina.net/content/groups/public/</url>\n</mirror>\n\n<! -- 在profiles添加如下配置即可 -->\n<profile>\n  <id>jdk-1.4</id>\n  <activation>\n    <jdk>1.4</jdk>\n  </activation>\n  <repositories>\n    <repository>\n      <id>jdk14</id>\n      <name>Repository for JDK 1.4 builds</name>\n      <url>http://www.myhost.com/maven/jdk14</url>\n      <layout>default</layout>\n      <snapshotPolicy>always</snapshotPolicy>\n    </repository>\n  </repositories>\n</profile>\n```\n\n\n### Demo项目\n\n#### 创建Java项目\n\n运行下述命令创建demo项目my-app：\n```bash\nmvn -B archetype:generate \\\n  -DarchetypeGroupId=org.apache.maven.archetypes \\\n  -DgroupId=com.mycompany.app \\\n  -DartifactId=my-app\n```\n\nmy-app的目录结构如下：\n```\nmy-app\n|-- pom.xml\n`-- src\n    |-- main\n    |   `-- java\n    |       `-- com\n    |           `-- mycompany\n    |               `-- app\n    |                   `-- App.java\n    `-- test\n        `-- java\n            `-- com\n                `-- mycompany\n                    `-- app\n                        `-- AppTest.java\n```\n\n其中的pom.xml是Maven的基础配置文件，pom(Project Object Model，项目对象模型)，它的内容及注释如下：\n```xml\n<! -- pom文件的开始标签 -->\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0\n                      http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n  <! -- Maven的pom版本 -->\n  <modelVersion>4.0.0</modelVersion>\n  <! -- 唯一的组织或公司编号，标识此项目所属组 -->\n  <groupId>com.mycompany.app</groupId>\n  <! -- 此项目属于组的哪个项目 -->\n  <artifactId>my-app</artifactId>\n  <! -- 可执行程序打包方式 -->\n  <packaging>jar</packaging>\n  <! -- 项目版本，SNAPSHOT表示开发版 -->\n  <version>1.0-SNAPSHOT</version>\n  <! -- 项目的显示名称，常用于maven生成的文档 -->\n  <name>Maven Quick Start Archetype</name>\n  <! -- 项目的主页，常用于maven生成的文档 -->\n  <url>http://maven.apache.org</url>\n  <! -- 所用的依赖库 -->\n  <dependencies>\n    <dependency>\n      <groupId>junit</groupId>\n      <artifactId>junit</artifactId>\n      <version>3.8.1</version>\n      <scope>test</scope>\n    </dependency>\n  </dependencies>\n</project>\n```\n\n#### 编译\n\n编译项目src/main：`mvn compile`，将更新<project>/target/classes文件夹\n\n#### 测试\n\n编译并运行项目src/test：`mvn test`，将更新<project>/target/test-classes文件夹，并在<project>/target/surefire-reports生成测试报告\n\n编译项目src/test而不运行：`mvn test-compile`\n\n#### 清除\n\n`mvn clean`：删除<project>/target\n\n#### 打包\n\n打包项目到<project>/target：`mvn package`\n\n打包项目到maven本地仓库：`mvn install`\n\n#### 其他\n\n`mvn site`：生成<project>/target/site，即项目主页文档\n\n`mvn eclipse:eclipse`：为项目添加eclipse标识，因此可被eclipse import\n\n`mvn idea:idea`：类似于eclipse\n\n#### 插件\n\n在pom.xml中添加<build>标签，可定制maven的编译过程\n```xml\n<project ...>\n  <build>\n    <plugins>\n      <plugin>\n        <groupId>org.apache.maven.plugins</groupId>\n        <artifactId>maven-compiler-plugin</artifactId>\n        <version>2.5.1</version>\n        <configuration>\n          <source>1.5</source>\n          <target>1.5</target>\n        </configuration>\n      </plugin>\n    </plugins>\n  </build>\n</project>\n```\n\n#### 配置注入\n\n文件结构为：\n```\nmy-app\n|-- pom.xml\n`-- src\n    |-- main\n    |   |-- java\n    |   |   `-- com\n    |   |       `-- mycompany\n    |   |           `-- app\n    |   |               `-- App.java\n    |   `-- resources\n    |       `-- META-INF\n    |           `-- application.properties\n    `-- test\n        `-- java\n            `-- com\n                `-- mycompany\n                    `-- app\n                        `-- AppTest.java\n```\n\n想要注入配置到`application.properties`，方法如下\n\n- pom.xml注入\n    - pom.xml配置如下\n    \n    ```xml\n    <build>\n      <resources>\n        <resource>\n          <directory>src/main/resources</directory>\n          <filtering>true</filtering>\n        </resource>\n      </resources>\n    </build>\n    ```\n    - application.properties配置如下\n    \n    ```\n    # application.properties\n    application.name=${pom.name}\n    application.version=${pom.version}\n    ```\n    - 即可使用pom.xml中的name和version属性注入到配置文件，运行`mvn process-resources`后application.properties的内容变为\n    \n    ```\n    # application.properties\n    application.name=Maven Quick Start Archetype\n    application.version=1.0-SNAPSHOT\n    ```\n- 配置文件注入（配置文件必须在classpath内）\n    * pom.xml配置如下，filter.properties的key直接可为src/main/resources下的所有配置文件使用\n    \n    ``` xml\n    <build>\n      <filters>\n        <filter>src/main/filters/filter.properties</filter>\n      </filters>\n      <resources>\n        <resource>\n          <directory>src/main/resources</directory>\n          <filtering>true</filtering>\n        </resource>\n      </resources>\n    </build>\n    ```\n- pom.xml的propertie注入\n    * pom.xml配置如下，my.filter.value可直接为src/main/resources下的所有配置文件使用\n    \n    ```xml\n    <project ...>\n      <properties>\n        <my.filter.value>hello</my.filter.value>\n      </properties>\n    </project>\n    ```\n- 运行时注入\n    * `mvn process-resources \"-Dcommand.line.prop=hello again\"`，command.line.prop可直接为src/main/resources下的所有配置文件使用\n\n#### 依赖\n\n```xml\n<project ...>\n  <dependencies>\n    <dependency>\n      <! -- ~/.m2/repository中查找junit组的junit包的3.8.1版本，如查询不到则到maven仓库下载 -->\n      <! -- 上文mvn package的jar包可在这里使用 -->\n      <groupId>junit</groupId>\n      <! -- junit组的junit项目 -->\n      <artifactId>junit</artifactId>\n      <! -- 版本号 -->\n      <version>3.8.1</version>\n      <! -- test|compile|runtime -->\n      <scope>test</scope>\n    </dependency>\n  </dependencies>\n</project>\n```\n\n浏览器访问[http://repo.maven.apache.org/maven2](http://repo.maven.apache.org/maven2)可查看maven库的所有可用jar包，以junit为例，查看[http://repo.maven.apache.org/maven2/junit/junit/maven-metadata.xml](http://repo.maven.apache.org/maven2/junit/junit/maven-metadata.xml)可查询junit所有可用版本\n\n使用[http://maven.oschina.net/home.html](http://maven.oschina.net/home.html)可按关键字检索所需jar包\n\n使用`mvn dependency:tree`可查看当前项目的依赖树\n\n#### 远程部署到其他maven库\n\n配置pom.xml如下：\n```xml\n<project ...>\n  <distributionManagement>\n    <repository>\n      <id>mycompany-repository</id>\n      <name>MyCompany Repository</name>\n      <url>scp://repository.mycompany.com/repository/maven2</url>\n    </repository>\n  </distributionManagement>\n</project>\n```\n\n配置Maven的settings.xml如下：\n```xml\n<settings xmlns=\"http://maven.apache.org/SETTINGS/1.0.0\"\n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xsi:schemaLocation=\"http://maven.apache.org/SETTINGS/1.0.0\n                      http://maven.apache.org/xsd/settings-1.0.0.xsd\">\n  ...\n  <servers>\n    <server>\n      <id>mycompany-repository</id>\n      <username>jvanzyl</username>\n      <! -- Default value is ~/.ssh/id_dsa -->\n      <privateKey>/path/to/identity</privateKey> (default is ~/.ssh/id_dsa)\n      <passphrase>my_key_passphrase</passphrase>\n    </server>\n  </servers>\n  ...\n</settings>\n```\n\n#### 文档创建\n\n```bash\nmvn archetype:generate \\\n  -DarchetypeGroupId=org.apache.maven.archetypes \\\n  -DarchetypeArtifactId=maven-archetype-site \\\n  -DgroupId=com.mycompany.app \\\n  -DartifactId=my-app-site\n```\n\n#### 创建web项目\n\n创建web项目：\n```bash\nmvn archetype:generate \\\n    -DarchetypeGroupId=org.apache.maven.archetypes \\\n    -DarchetypeArtifactId=maven-archetype-webapp \\\n    -DgroupId=com.mycompany.app \\\n    -DartifactId=my-webapp\n```\n\nweb项目的pom.xml配置如下：\n```xml\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0\n                      http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n  <modelVersion>4.0.0</modelVersion>\n \n  <groupId>com.mycompany.app</groupId>\n  <artifactId>my-webapp</artifactId>\n  <version>1.0-SNAPSHOT</version>\n  <! -- 打包方式 -->\n  <packaging>war</packaging>\n \n  <dependencies>\n    <dependency>\n      <groupId>junit</groupId>\n      <artifactId>junit</artifactId>\n      <version>3.8.1</version>\n      <scope>test</scope>\n    </dependency>\n  </dependencies>\n  <! -- 最终打包成war的名称 -->\n  <build>\n    <finalName>my-webapp</finalName>\n  </build>\n</project>\n```\n\n`mvn clean package`编译并打包为war包`target/my-webapp.war`\n\n#### 多个项目组装为一个项目\n\n两个项目要组装为一个项目，目录结构如下：\n```\n+- pom.xml\n+- my-app\n| +- pom.xml\n| +- src\n|   +- main\n|     +- java\n+- my-webapp\n| +- pom.xml\n| +- src\n|   +- main\n|     +- webapp\n```\n\npom.xml如下：\n```xml\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0\n                      http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n  <modelVersion>4.0.0</modelVersion>\n \n  <groupId>com.mycompany.app</groupId>\n  <artifactId>app</artifactId>\n  <version>1.0-SNAPSHOT</version>\n  <packaging>pom</packaging>\n \n  <modules>\n    <module>my-app</module>\n    <module>my-webapp</module>\n  </modules>\n</project>\n```\n\n配置`my-webapp/pom.xml`使my-webapp引用my-app：\n```xml\n  ...\n  <dependencies>\n    <dependency>\n      <! -- 这将使得my-app在war包之前得到编译和打包 -->\n      <groupId>com.mycompany.app</groupId>\n      <artifactId>my-app</artifactId>\n      <version>1.0-SNAPSHOT</version>\n    </dependency>\n    ...\n  </dependencies>\n```\n\n配置`my-webapp/pom.xml`和`my-app/pom.xml`添加<parent>标签：\n```xml\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0\n                      http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n  <parent>\n    <groupId>com.mycompany.app</groupId>\n    <artifactId>app</artifactId>\n    <version>1.0-SNAPSHOT</version>\n  </parent>\n  ...\n```\n\n`mvn clean install`将编译并打包war包：`my-webapp/target/my-webapp.war`，而my-app项目将作为war包WEB-INF/lib中的一个jar包\n","source":"_posts/2015-12-20-maven-howto.markdown","raw":"---\nlayout: post\ntitle: Maven HOWTO\ndate: '2015-12-20 16:31'\ncomments: true\ncategories: ['编程实践']  \ntags: ['Maven']\n---\n\nMaven版本：3.3.1\n\n<!--more-->\n\n操作系统：Windows 7\n\nJava版本：1.8\n\n移译自[Maven Getting Started Guide](https://maven.apache.org/guides/getting-started/)。\n\n## What And Why\n\nMaven是一个Java的编译（Build）自动化工具，按我的理解，它可以做到：\n- 创建自动化\n- 包依赖管理自动化\n- 编译和单元测试自动化\n- 配置注入自动化\n- 程序（War或Jar）打包自动化，及远程部署\n\n因此，它是一个可以提升开发效率的工具。\n\n## How\n\n### 配置\n\n#### Java配置\n\n1. 下载[JDK8][2]并安装到你的电脑（本文用的是jdk-8u65-windows-x64.exe）；\n\n2. 配置环境变量，右击“计算机”==>选择“高级系统设置”==>选择“高级”选项卡==>点击“环境变量”按钮：\n    - 新建系统变量`JAVA_HOME`，内容为：`C:\\Program Files\\Java\\jdk1.8.0_65`；\n    - 修改系统变量`PATH`，在末尾加入内容：`;%JAVA_HOME%\\jre\\bin`；如无此系统变量则新建系统变量`PATH`，内容为：`%JAVA_HOME%\\jre\\bin`；\n    - 新建系统变量`CLASSPATH`，内容为：`.;%JAVA_HOME%\\lib\\dt.jar;%JAVA_HOME%\\lib\\tools.jar`；\n\n3. 注销后登入，打开CMD.exe，输入\n    ```\n    echo %JAVA_HOME%\n    java -version\n    ```\n\n    上述两个命令皆有输出则表示安装Java成功。\n\n#### Maven配置\n\n1. 到[Maven下载页][3]下载apache-maven-3.3.1-bin.zip（apache-maven-3.3.3有Bug，其boot文件夹缺少了一个关键Jar包，已向Maven mail-list提出，不知道修复了没有）；\n\n2. 将压缩包解压到一个你喜欢的地方，如`D:\\Softwares\\apache-maven-3.3.1`；\n\n3. 配置环境变量，右击“计算机”==>选择“高级系统设置”==>选择“高级”选项卡==>点击“环境变量”按钮：\n    - 新建系统变量`M2_HOME`，内容为：`D:\\Softwares\\apache-maven-3.3.1`；\n    - 修改系统变量`PATH`，在末尾加入内容：`;%M2_HOME%\\bin`；\n\n4. **重新打开**一个CMD.exe窗口，输入：\n    ```\n    echo %M2_HOME%\n    mvn -v\n    ```\n\n    上述两个命令皆有输出则表示安装Maven成功。\n\n5. 配置开源中国Maven库（非必要）\n    - 第一次运行mvn命令时，需要去官网（国外）的Maven库同步Jar包到本地，据官网说在网络畅通情况下4分钟就同步完毕，后续运行mvn命令就不需要这么长时间了\n    - 如果你觉得时间太长无法忍受，可以配置mvn的中国库，参考[OSC的使用帮助](http://maven.oschina.net/help.html)即可配置。简要概括如下：\n\n```xml\n<! -- 在mirrors添加如下配置即可 -->\n<mirror>\n  <id>nexus-osc</id>\n  <mirrorOf>*</mirrorOf>\n  <name>Nexus osc</name>\n  <url>http://maven.oschina.net/content/groups/public/</url>\n</mirror>\n\n<! -- 在profiles添加如下配置即可 -->\n<profile>\n  <id>jdk-1.4</id>\n  <activation>\n    <jdk>1.4</jdk>\n  </activation>\n  <repositories>\n    <repository>\n      <id>jdk14</id>\n      <name>Repository for JDK 1.4 builds</name>\n      <url>http://www.myhost.com/maven/jdk14</url>\n      <layout>default</layout>\n      <snapshotPolicy>always</snapshotPolicy>\n    </repository>\n  </repositories>\n</profile>\n```\n\n\n### Demo项目\n\n#### 创建Java项目\n\n运行下述命令创建demo项目my-app：\n```bash\nmvn -B archetype:generate \\\n  -DarchetypeGroupId=org.apache.maven.archetypes \\\n  -DgroupId=com.mycompany.app \\\n  -DartifactId=my-app\n```\n\nmy-app的目录结构如下：\n```\nmy-app\n|-- pom.xml\n`-- src\n    |-- main\n    |   `-- java\n    |       `-- com\n    |           `-- mycompany\n    |               `-- app\n    |                   `-- App.java\n    `-- test\n        `-- java\n            `-- com\n                `-- mycompany\n                    `-- app\n                        `-- AppTest.java\n```\n\n其中的pom.xml是Maven的基础配置文件，pom(Project Object Model，项目对象模型)，它的内容及注释如下：\n```xml\n<! -- pom文件的开始标签 -->\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0\n                      http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n  <! -- Maven的pom版本 -->\n  <modelVersion>4.0.0</modelVersion>\n  <! -- 唯一的组织或公司编号，标识此项目所属组 -->\n  <groupId>com.mycompany.app</groupId>\n  <! -- 此项目属于组的哪个项目 -->\n  <artifactId>my-app</artifactId>\n  <! -- 可执行程序打包方式 -->\n  <packaging>jar</packaging>\n  <! -- 项目版本，SNAPSHOT表示开发版 -->\n  <version>1.0-SNAPSHOT</version>\n  <! -- 项目的显示名称，常用于maven生成的文档 -->\n  <name>Maven Quick Start Archetype</name>\n  <! -- 项目的主页，常用于maven生成的文档 -->\n  <url>http://maven.apache.org</url>\n  <! -- 所用的依赖库 -->\n  <dependencies>\n    <dependency>\n      <groupId>junit</groupId>\n      <artifactId>junit</artifactId>\n      <version>3.8.1</version>\n      <scope>test</scope>\n    </dependency>\n  </dependencies>\n</project>\n```\n\n#### 编译\n\n编译项目src/main：`mvn compile`，将更新<project>/target/classes文件夹\n\n#### 测试\n\n编译并运行项目src/test：`mvn test`，将更新<project>/target/test-classes文件夹，并在<project>/target/surefire-reports生成测试报告\n\n编译项目src/test而不运行：`mvn test-compile`\n\n#### 清除\n\n`mvn clean`：删除<project>/target\n\n#### 打包\n\n打包项目到<project>/target：`mvn package`\n\n打包项目到maven本地仓库：`mvn install`\n\n#### 其他\n\n`mvn site`：生成<project>/target/site，即项目主页文档\n\n`mvn eclipse:eclipse`：为项目添加eclipse标识，因此可被eclipse import\n\n`mvn idea:idea`：类似于eclipse\n\n#### 插件\n\n在pom.xml中添加<build>标签，可定制maven的编译过程\n```xml\n<project ...>\n  <build>\n    <plugins>\n      <plugin>\n        <groupId>org.apache.maven.plugins</groupId>\n        <artifactId>maven-compiler-plugin</artifactId>\n        <version>2.5.1</version>\n        <configuration>\n          <source>1.5</source>\n          <target>1.5</target>\n        </configuration>\n      </plugin>\n    </plugins>\n  </build>\n</project>\n```\n\n#### 配置注入\n\n文件结构为：\n```\nmy-app\n|-- pom.xml\n`-- src\n    |-- main\n    |   |-- java\n    |   |   `-- com\n    |   |       `-- mycompany\n    |   |           `-- app\n    |   |               `-- App.java\n    |   `-- resources\n    |       `-- META-INF\n    |           `-- application.properties\n    `-- test\n        `-- java\n            `-- com\n                `-- mycompany\n                    `-- app\n                        `-- AppTest.java\n```\n\n想要注入配置到`application.properties`，方法如下\n\n- pom.xml注入\n    - pom.xml配置如下\n    \n    ```xml\n    <build>\n      <resources>\n        <resource>\n          <directory>src/main/resources</directory>\n          <filtering>true</filtering>\n        </resource>\n      </resources>\n    </build>\n    ```\n    - application.properties配置如下\n    \n    ```\n    # application.properties\n    application.name=${pom.name}\n    application.version=${pom.version}\n    ```\n    - 即可使用pom.xml中的name和version属性注入到配置文件，运行`mvn process-resources`后application.properties的内容变为\n    \n    ```\n    # application.properties\n    application.name=Maven Quick Start Archetype\n    application.version=1.0-SNAPSHOT\n    ```\n- 配置文件注入（配置文件必须在classpath内）\n    * pom.xml配置如下，filter.properties的key直接可为src/main/resources下的所有配置文件使用\n    \n    ``` xml\n    <build>\n      <filters>\n        <filter>src/main/filters/filter.properties</filter>\n      </filters>\n      <resources>\n        <resource>\n          <directory>src/main/resources</directory>\n          <filtering>true</filtering>\n        </resource>\n      </resources>\n    </build>\n    ```\n- pom.xml的propertie注入\n    * pom.xml配置如下，my.filter.value可直接为src/main/resources下的所有配置文件使用\n    \n    ```xml\n    <project ...>\n      <properties>\n        <my.filter.value>hello</my.filter.value>\n      </properties>\n    </project>\n    ```\n- 运行时注入\n    * `mvn process-resources \"-Dcommand.line.prop=hello again\"`，command.line.prop可直接为src/main/resources下的所有配置文件使用\n\n#### 依赖\n\n```xml\n<project ...>\n  <dependencies>\n    <dependency>\n      <! -- ~/.m2/repository中查找junit组的junit包的3.8.1版本，如查询不到则到maven仓库下载 -->\n      <! -- 上文mvn package的jar包可在这里使用 -->\n      <groupId>junit</groupId>\n      <! -- junit组的junit项目 -->\n      <artifactId>junit</artifactId>\n      <! -- 版本号 -->\n      <version>3.8.1</version>\n      <! -- test|compile|runtime -->\n      <scope>test</scope>\n    </dependency>\n  </dependencies>\n</project>\n```\n\n浏览器访问[http://repo.maven.apache.org/maven2](http://repo.maven.apache.org/maven2)可查看maven库的所有可用jar包，以junit为例，查看[http://repo.maven.apache.org/maven2/junit/junit/maven-metadata.xml](http://repo.maven.apache.org/maven2/junit/junit/maven-metadata.xml)可查询junit所有可用版本\n\n使用[http://maven.oschina.net/home.html](http://maven.oschina.net/home.html)可按关键字检索所需jar包\n\n使用`mvn dependency:tree`可查看当前项目的依赖树\n\n#### 远程部署到其他maven库\n\n配置pom.xml如下：\n```xml\n<project ...>\n  <distributionManagement>\n    <repository>\n      <id>mycompany-repository</id>\n      <name>MyCompany Repository</name>\n      <url>scp://repository.mycompany.com/repository/maven2</url>\n    </repository>\n  </distributionManagement>\n</project>\n```\n\n配置Maven的settings.xml如下：\n```xml\n<settings xmlns=\"http://maven.apache.org/SETTINGS/1.0.0\"\n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xsi:schemaLocation=\"http://maven.apache.org/SETTINGS/1.0.0\n                      http://maven.apache.org/xsd/settings-1.0.0.xsd\">\n  ...\n  <servers>\n    <server>\n      <id>mycompany-repository</id>\n      <username>jvanzyl</username>\n      <! -- Default value is ~/.ssh/id_dsa -->\n      <privateKey>/path/to/identity</privateKey> (default is ~/.ssh/id_dsa)\n      <passphrase>my_key_passphrase</passphrase>\n    </server>\n  </servers>\n  ...\n</settings>\n```\n\n#### 文档创建\n\n```bash\nmvn archetype:generate \\\n  -DarchetypeGroupId=org.apache.maven.archetypes \\\n  -DarchetypeArtifactId=maven-archetype-site \\\n  -DgroupId=com.mycompany.app \\\n  -DartifactId=my-app-site\n```\n\n#### 创建web项目\n\n创建web项目：\n```bash\nmvn archetype:generate \\\n    -DarchetypeGroupId=org.apache.maven.archetypes \\\n    -DarchetypeArtifactId=maven-archetype-webapp \\\n    -DgroupId=com.mycompany.app \\\n    -DartifactId=my-webapp\n```\n\nweb项目的pom.xml配置如下：\n```xml\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0\n                      http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n  <modelVersion>4.0.0</modelVersion>\n \n  <groupId>com.mycompany.app</groupId>\n  <artifactId>my-webapp</artifactId>\n  <version>1.0-SNAPSHOT</version>\n  <! -- 打包方式 -->\n  <packaging>war</packaging>\n \n  <dependencies>\n    <dependency>\n      <groupId>junit</groupId>\n      <artifactId>junit</artifactId>\n      <version>3.8.1</version>\n      <scope>test</scope>\n    </dependency>\n  </dependencies>\n  <! -- 最终打包成war的名称 -->\n  <build>\n    <finalName>my-webapp</finalName>\n  </build>\n</project>\n```\n\n`mvn clean package`编译并打包为war包`target/my-webapp.war`\n\n#### 多个项目组装为一个项目\n\n两个项目要组装为一个项目，目录结构如下：\n```\n+- pom.xml\n+- my-app\n| +- pom.xml\n| +- src\n|   +- main\n|     +- java\n+- my-webapp\n| +- pom.xml\n| +- src\n|   +- main\n|     +- webapp\n```\n\npom.xml如下：\n```xml\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0\n                      http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n  <modelVersion>4.0.0</modelVersion>\n \n  <groupId>com.mycompany.app</groupId>\n  <artifactId>app</artifactId>\n  <version>1.0-SNAPSHOT</version>\n  <packaging>pom</packaging>\n \n  <modules>\n    <module>my-app</module>\n    <module>my-webapp</module>\n  </modules>\n</project>\n```\n\n配置`my-webapp/pom.xml`使my-webapp引用my-app：\n```xml\n  ...\n  <dependencies>\n    <dependency>\n      <! -- 这将使得my-app在war包之前得到编译和打包 -->\n      <groupId>com.mycompany.app</groupId>\n      <artifactId>my-app</artifactId>\n      <version>1.0-SNAPSHOT</version>\n    </dependency>\n    ...\n  </dependencies>\n```\n\n配置`my-webapp/pom.xml`和`my-app/pom.xml`添加<parent>标签：\n```xml\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0\n                      http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n  <parent>\n    <groupId>com.mycompany.app</groupId>\n    <artifactId>app</artifactId>\n    <version>1.0-SNAPSHOT</version>\n  </parent>\n  ...\n```\n\n`mvn clean install`将编译并打包war包：`my-webapp/target/my-webapp.war`，而my-app项目将作为war包WEB-INF/lib中的一个jar包\n","slug":"maven-howto","published":1,"updated":"2017-07-21T09:00:57.000Z","photos":[],"link":"","_id":"cjlza6m430006pgupxmkaeai9","content":"<p>Maven版本：3.3.1</p>\n<a id=\"more\"></a>\n<p>操作系统：Windows 7</p>\n<p>Java版本：1.8</p>\n<p>移译自<a href=\"https://maven.apache.org/guides/getting-started/\" target=\"_blank\" rel=\"noopener\">Maven Getting Started Guide</a>。</p>\n<h2 id=\"What-And-Why\"><a href=\"#What-And-Why\" class=\"headerlink\" title=\"What And Why\"></a>What And Why</h2><p>Maven是一个Java的编译（Build）自动化工具，按我的理解，它可以做到：</p>\n<ul>\n<li>创建自动化</li>\n<li>包依赖管理自动化</li>\n<li>编译和单元测试自动化</li>\n<li>配置注入自动化</li>\n<li>程序（War或Jar）打包自动化，及远程部署</li>\n</ul>\n<p>因此，它是一个可以提升开发效率的工具。</p>\n<h2 id=\"How\"><a href=\"#How\" class=\"headerlink\" title=\"How\"></a>How</h2><h3 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h3><h4 id=\"Java配置\"><a href=\"#Java配置\" class=\"headerlink\" title=\"Java配置\"></a>Java配置</h4><ol>\n<li><p>下载[JDK8][2]并安装到你的电脑（本文用的是jdk-8u65-windows-x64.exe）；</p>\n</li>\n<li><p>配置环境变量，右击“计算机”==&gt;选择“高级系统设置”==&gt;选择“高级”选项卡==&gt;点击“环境变量”按钮：</p>\n<ul>\n<li>新建系统变量<code>JAVA_HOME</code>，内容为：<code>C:\\Program Files\\Java\\jdk1.8.0_65</code>；</li>\n<li>修改系统变量<code>PATH</code>，在末尾加入内容：<code>;%JAVA_HOME%\\jre\\bin</code>；如无此系统变量则新建系统变量<code>PATH</code>，内容为：<code>%JAVA_HOME%\\jre\\bin</code>；</li>\n<li>新建系统变量<code>CLASSPATH</code>，内容为：<code>.;%JAVA_HOME%\\lib\\dt.jar;%JAVA_HOME%\\lib\\tools.jar</code>；</li>\n</ul>\n</li>\n<li><p>注销后登入，打开CMD.exe，输入</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo %JAVA_HOME%</span><br><span class=\"line\">java -version</span><br></pre></td></tr></table></figure>\n<p> 上述两个命令皆有输出则表示安装Java成功。</p>\n</li>\n</ol>\n<h4 id=\"Maven配置\"><a href=\"#Maven配置\" class=\"headerlink\" title=\"Maven配置\"></a>Maven配置</h4><ol>\n<li><p>到[Maven下载页][3]下载apache-maven-3.3.1-bin.zip（apache-maven-3.3.3有Bug，其boot文件夹缺少了一个关键Jar包，已向Maven mail-list提出，不知道修复了没有）；</p>\n</li>\n<li><p>将压缩包解压到一个你喜欢的地方，如<code>D:\\Softwares\\apache-maven-3.3.1</code>；</p>\n</li>\n<li><p>配置环境变量，右击“计算机”==&gt;选择“高级系统设置”==&gt;选择“高级”选项卡==&gt;点击“环境变量”按钮：</p>\n<ul>\n<li>新建系统变量<code>M2_HOME</code>，内容为：<code>D:\\Softwares\\apache-maven-3.3.1</code>；</li>\n<li>修改系统变量<code>PATH</code>，在末尾加入内容：<code>;%M2_HOME%\\bin</code>；</li>\n</ul>\n</li>\n<li><p><strong>重新打开</strong>一个CMD.exe窗口，输入：</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo %M2_HOME%</span><br><span class=\"line\">mvn -v</span><br></pre></td></tr></table></figure>\n<p> 上述两个命令皆有输出则表示安装Maven成功。</p>\n</li>\n<li><p>配置开源中国Maven库（非必要）</p>\n<ul>\n<li>第一次运行mvn命令时，需要去官网（国外）的Maven库同步Jar包到本地，据官网说在网络畅通情况下4分钟就同步完毕，后续运行mvn命令就不需要这么长时间了</li>\n<li>如果你觉得时间太长无法忍受，可以配置mvn的中国库，参考<a href=\"http://maven.oschina.net/help.html\" target=\"_blank\" rel=\"noopener\">OSC的使用帮助</a>即可配置。简要概括如下：</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">!</span> <span class=\"attr\">--</span> 在<span class=\"attr\">mirrors</span>添加如下配置即可 <span class=\"attr\">--</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mirror</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>nexus-osc<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">mirrorOf</span>&gt;</span>*<span class=\"tag\">&lt;/<span class=\"name\">mirrorOf</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>Nexus osc<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>http://maven.oschina.net/content/groups/public/<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mirror</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">!</span> <span class=\"attr\">--</span> 在<span class=\"attr\">profiles</span>添加如下配置即可 <span class=\"attr\">--</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">profile</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>jdk-1.4<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">activation</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">jdk</span>&gt;</span>1.4<span class=\"tag\">&lt;/<span class=\"name\">jdk</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">activation</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">repositories</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">repository</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>jdk14<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>Repository for JDK 1.4 builds<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>http://www.myhost.com/maven/jdk14<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">layout</span>&gt;</span>default<span class=\"tag\">&lt;/<span class=\"name\">layout</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">snapshotPolicy</span>&gt;</span>always<span class=\"tag\">&lt;/<span class=\"name\">snapshotPolicy</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">repository</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">repositories</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">profile</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Demo项目\"><a href=\"#Demo项目\" class=\"headerlink\" title=\"Demo项目\"></a>Demo项目</h3><h4 id=\"创建Java项目\"><a href=\"#创建Java项目\" class=\"headerlink\" title=\"创建Java项目\"></a>创建Java项目</h4><p>运行下述命令创建demo项目my-app：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn -B archetype:generate \\</span><br><span class=\"line\">  -DarchetypeGroupId=org.apache.maven.archetypes \\</span><br><span class=\"line\">  -DgroupId=com.mycompany.app \\</span><br><span class=\"line\">  -DartifactId=my-app</span><br></pre></td></tr></table></figure></p>\n<p>my-app的目录结构如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">my-app</span><br><span class=\"line\">|-- pom.xml</span><br><span class=\"line\">`-- src</span><br><span class=\"line\">    |-- main</span><br><span class=\"line\">    |   `-- java</span><br><span class=\"line\">    |       `-- com</span><br><span class=\"line\">    |           `-- mycompany</span><br><span class=\"line\">    |               `-- app</span><br><span class=\"line\">    |                   `-- App.java</span><br><span class=\"line\">    `-- test</span><br><span class=\"line\">        `-- java</span><br><span class=\"line\">            `-- com</span><br><span class=\"line\">                `-- mycompany</span><br><span class=\"line\">                    `-- app</span><br><span class=\"line\">                        `-- AppTest.java</span><br></pre></td></tr></table></figure></p>\n<p>其中的pom.xml是Maven的基础配置文件，pom(Project Object Model，项目对象模型)，它的内容及注释如下：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">!</span> <span class=\"attr\">--</span> <span class=\"attr\">pom</span>文件的开始标签 <span class=\"attr\">--</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">                      http://maven.apache.org/xsd/maven-4.0.0.xsd\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">!</span> <span class=\"attr\">--</span> <span class=\"attr\">Maven</span>的<span class=\"attr\">pom</span>版本 <span class=\"attr\">--</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">!</span> <span class=\"attr\">--</span> 唯一的组织或公司编号，标识此项目所属组 <span class=\"attr\">--</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.mycompany.app<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">!</span> <span class=\"attr\">--</span> 此项目属于组的哪个项目 <span class=\"attr\">--</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>my-app<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">!</span> <span class=\"attr\">--</span> 可执行程序打包方式 <span class=\"attr\">--</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">packaging</span>&gt;</span>jar<span class=\"tag\">&lt;/<span class=\"name\">packaging</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">!</span> <span class=\"attr\">--</span> 项目版本，<span class=\"attr\">SNAPSHOT</span>表示开发版 <span class=\"attr\">--</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">!</span> <span class=\"attr\">--</span> 项目的显示名称，常用于<span class=\"attr\">maven</span>生成的文档 <span class=\"attr\">--</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>Maven Quick Start Archetype<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">!</span> <span class=\"attr\">--</span> 项目的主页，常用于<span class=\"attr\">maven</span>生成的文档 <span class=\"attr\">--</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>http://maven.apache.org<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">!</span> <span class=\"attr\">--</span> 所用的依赖库 <span class=\"attr\">--</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.8.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"编译\"><a href=\"#编译\" class=\"headerlink\" title=\"编译\"></a>编译</h4><p>编译项目src/main：<code>mvn compile</code>，将更新<project>/target/classes文件夹</project></p>\n<h4 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h4><p>编译并运行项目src/test：<code>mvn test</code>，将更新<project>/target/test-classes文件夹，并在<project>/target/surefire-reports生成测试报告</project></project></p>\n<p>编译项目src/test而不运行：<code>mvn test-compile</code></p>\n<h4 id=\"清除\"><a href=\"#清除\" class=\"headerlink\" title=\"清除\"></a>清除</h4><p><code>mvn clean</code>：删除<project>/target</project></p>\n<h4 id=\"打包\"><a href=\"#打包\" class=\"headerlink\" title=\"打包\"></a>打包</h4><p>打包项目到<project>/target：<code>mvn package</code></project></p>\n<p>打包项目到maven本地仓库：<code>mvn install</code></p>\n<h4 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h4><p><code>mvn site</code>：生成<project>/target/site，即项目主页文档</project></p>\n<p><code>mvn eclipse:eclipse</code>：为项目添加eclipse标识，因此可被eclipse import</p>\n<p><code>mvn idea:idea</code>：类似于eclipse</p>\n<h4 id=\"插件\"><a href=\"#插件\" class=\"headerlink\" title=\"插件\"></a>插件</h4><p>在pom.xml中添加<build>标签，可定制maven的编译过程<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">...</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.maven.plugins<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-compiler-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.5.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">source</span>&gt;</span>1.5<span class=\"tag\">&lt;/<span class=\"name\">source</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">target</span>&gt;</span>1.5<span class=\"tag\">&lt;/<span class=\"name\">target</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br></pre></td></tr></table></figure></build></p>\n<h4 id=\"配置注入\"><a href=\"#配置注入\" class=\"headerlink\" title=\"配置注入\"></a>配置注入</h4><p>文件结构为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">my-app</span><br><span class=\"line\">|-- pom.xml</span><br><span class=\"line\">`-- src</span><br><span class=\"line\">    |-- main</span><br><span class=\"line\">    |   |-- java</span><br><span class=\"line\">    |   |   `-- com</span><br><span class=\"line\">    |   |       `-- mycompany</span><br><span class=\"line\">    |   |           `-- app</span><br><span class=\"line\">    |   |               `-- App.java</span><br><span class=\"line\">    |   `-- resources</span><br><span class=\"line\">    |       `-- META-INF</span><br><span class=\"line\">    |           `-- application.properties</span><br><span class=\"line\">    `-- test</span><br><span class=\"line\">        `-- java</span><br><span class=\"line\">            `-- com</span><br><span class=\"line\">                `-- mycompany</span><br><span class=\"line\">                    `-- app</span><br><span class=\"line\">                        `-- AppTest.java</span><br></pre></td></tr></table></figure></p>\n<p>想要注入配置到<code>application.properties</code>，方法如下</p>\n<ul>\n<li><p>pom.xml注入</p>\n<ul>\n<li><p>pom.xml配置如下</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">directory</span>&gt;</span>src/main/resources<span class=\"tag\">&lt;/<span class=\"name\">directory</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">filtering</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">filtering</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>application.properties配置如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># application.properties</span><br><span class=\"line\">application.name=$&#123;pom.name&#125;</span><br><span class=\"line\">application.version=$&#123;pom.version&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>即可使用pom.xml中的name和version属性注入到配置文件，运行<code>mvn process-resources</code>后application.properties的内容变为</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># application.properties</span><br><span class=\"line\">application.name=Maven Quick Start Archetype</span><br><span class=\"line\">application.version=1.0-SNAPSHOT</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>配置文件注入（配置文件必须在classpath内）</p>\n<ul>\n<li><p>pom.xml配置如下，filter.properties的key直接可为src/main/resources下的所有配置文件使用</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">filters</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">filter</span>&gt;</span>src/main/filters/filter.properties<span class=\"tag\">&lt;/<span class=\"name\">filter</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">filters</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">directory</span>&gt;</span>src/main/resources<span class=\"tag\">&lt;/<span class=\"name\">directory</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">filtering</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">filtering</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>pom.xml的propertie注入</p>\n<ul>\n<li><p>pom.xml配置如下，my.filter.value可直接为src/main/resources下的所有配置文件使用</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">...</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">my.filter.value</span>&gt;</span>hello<span class=\"tag\">&lt;/<span class=\"name\">my.filter.value</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>运行时注入</p>\n<ul>\n<li><code>mvn process-resources &quot;-Dcommand.line.prop=hello again&quot;</code>，command.line.prop可直接为src/main/resources下的所有配置文件使用</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"依赖\"><a href=\"#依赖\" class=\"headerlink\" title=\"依赖\"></a>依赖</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">...</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">!</span> <span class=\"attr\">--</span> ~/<span class=\"attr\">.m2</span>/<span class=\"attr\">repository</span>中查找<span class=\"attr\">junit</span>组的<span class=\"attr\">junit</span>包的<span class=\"attr\">3.8.1</span>版本，如查询不到则到<span class=\"attr\">maven</span>仓库下载 <span class=\"attr\">--</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">!</span> <span class=\"attr\">--</span> 上文<span class=\"attr\">mvn</span> <span class=\"attr\">package</span>的<span class=\"attr\">jar</span>包可在这里使用 <span class=\"attr\">--</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">!</span> <span class=\"attr\">--</span> <span class=\"attr\">junit</span>组的<span class=\"attr\">junit</span>项目 <span class=\"attr\">--</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">!</span> <span class=\"attr\">--</span> 版本号 <span class=\"attr\">--</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.8.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">!</span> <span class=\"attr\">--</span> <span class=\"attr\">test</span>|<span class=\"attr\">compile</span>|<span class=\"attr\">runtime</span> <span class=\"attr\">--</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>浏览器访问<a href=\"http://repo.maven.apache.org/maven2\" target=\"_blank\" rel=\"noopener\">http://repo.maven.apache.org/maven2</a>可查看maven库的所有可用jar包，以junit为例，查看<a href=\"http://repo.maven.apache.org/maven2/junit/junit/maven-metadata.xml\" target=\"_blank\" rel=\"noopener\">http://repo.maven.apache.org/maven2/junit/junit/maven-metadata.xml</a>可查询junit所有可用版本</p>\n<p>使用<a href=\"http://maven.oschina.net/home.html\" target=\"_blank\" rel=\"noopener\">http://maven.oschina.net/home.html</a>可按关键字检索所需jar包</p>\n<p>使用<code>mvn dependency:tree</code>可查看当前项目的依赖树</p>\n<h4 id=\"远程部署到其他maven库\"><a href=\"#远程部署到其他maven库\" class=\"headerlink\" title=\"远程部署到其他maven库\"></a>远程部署到其他maven库</h4><p>配置pom.xml如下：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">...</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">distributionManagement</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">repository</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>mycompany-repository<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>MyCompany Repository<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>scp://repository.mycompany.com/repository/maven2<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">repository</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">distributionManagement</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>配置Maven的settings.xml如下：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">settings</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://maven.apache.org/SETTINGS/1.0.0\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://maven.apache.org/SETTINGS/1.0.0</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">                      http://maven.apache.org/xsd/settings-1.0.0.xsd\"</span>&gt;</span></span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">servers</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">server</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>mycompany-repository<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">username</span>&gt;</span>jvanzyl<span class=\"tag\">&lt;/<span class=\"name\">username</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">!</span> <span class=\"attr\">--</span> <span class=\"attr\">Default</span> <span class=\"attr\">value</span> <span class=\"attr\">is</span> ~/<span class=\"attr\">.ssh</span>/<span class=\"attr\">id_dsa</span> <span class=\"attr\">--</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">privateKey</span>&gt;</span>/path/to/identity<span class=\"tag\">&lt;/<span class=\"name\">privateKey</span>&gt;</span> (default is ~/.ssh/id_dsa)</span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">passphrase</span>&gt;</span>my_key_passphrase<span class=\"tag\">&lt;/<span class=\"name\">passphrase</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">server</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">servers</span>&gt;</span></span><br><span class=\"line\">  ...</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">settings</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"文档创建\"><a href=\"#文档创建\" class=\"headerlink\" title=\"文档创建\"></a>文档创建</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn archetype:generate \\</span><br><span class=\"line\">  -DarchetypeGroupId=org.apache.maven.archetypes \\</span><br><span class=\"line\">  -DarchetypeArtifactId=maven-archetype-site \\</span><br><span class=\"line\">  -DgroupId=com.mycompany.app \\</span><br><span class=\"line\">  -DartifactId=my-app-site</span><br></pre></td></tr></table></figure>\n<h4 id=\"创建web项目\"><a href=\"#创建web项目\" class=\"headerlink\" title=\"创建web项目\"></a>创建web项目</h4><p>创建web项目：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn archetype:generate \\</span><br><span class=\"line\">    -DarchetypeGroupId=org.apache.maven.archetypes \\</span><br><span class=\"line\">    -DarchetypeArtifactId=maven-archetype-webapp \\</span><br><span class=\"line\">    -DgroupId=com.mycompany.app \\</span><br><span class=\"line\">    -DartifactId=my-webapp</span><br></pre></td></tr></table></figure></p>\n<p>web项目的pom.xml配置如下：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">                      http://maven.apache.org/xsd/maven-4.0.0.xsd\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.mycompany.app<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>my-webapp<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">!</span> <span class=\"attr\">--</span> 打包方式 <span class=\"attr\">--</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">packaging</span>&gt;</span>war<span class=\"tag\">&lt;/<span class=\"name\">packaging</span>&gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.8.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">!</span> <span class=\"attr\">--</span> 最终打包成<span class=\"attr\">war</span>的名称 <span class=\"attr\">--</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">finalName</span>&gt;</span>my-webapp<span class=\"tag\">&lt;/<span class=\"name\">finalName</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p><code>mvn clean package</code>编译并打包为war包<code>target/my-webapp.war</code></p>\n<h4 id=\"多个项目组装为一个项目\"><a href=\"#多个项目组装为一个项目\" class=\"headerlink\" title=\"多个项目组装为一个项目\"></a>多个项目组装为一个项目</h4><p>两个项目要组装为一个项目，目录结构如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+- pom.xml</span><br><span class=\"line\">+- my-app</span><br><span class=\"line\">| +- pom.xml</span><br><span class=\"line\">| +- src</span><br><span class=\"line\">|   +- main</span><br><span class=\"line\">|     +- java</span><br><span class=\"line\">+- my-webapp</span><br><span class=\"line\">| +- pom.xml</span><br><span class=\"line\">| +- src</span><br><span class=\"line\">|   +- main</span><br><span class=\"line\">|     +- webapp</span><br></pre></td></tr></table></figure></p>\n<p>pom.xml如下：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">                      http://maven.apache.org/xsd/maven-4.0.0.xsd\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.mycompany.app<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>app<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">packaging</span>&gt;</span>pom<span class=\"tag\">&lt;/<span class=\"name\">packaging</span>&gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">modules</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">module</span>&gt;</span>my-app<span class=\"tag\">&lt;/<span class=\"name\">module</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">module</span>&gt;</span>my-webapp<span class=\"tag\">&lt;/<span class=\"name\">module</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">modules</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>配置<code>my-webapp/pom.xml</code>使my-webapp引用my-app：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">!</span> <span class=\"attr\">--</span> 这将使得<span class=\"attr\">my-app</span>在<span class=\"attr\">war</span>包之前得到编译和打包 <span class=\"attr\">--</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.mycompany.app<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>my-app<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  ...</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>配置<code>my-webapp/pom.xml</code>和<code>my-app/pom.xml</code>添加<parent>标签：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">                      http://maven.apache.org/xsd/maven-4.0.0.xsd\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.mycompany.app<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>app<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">  ...</span><br></pre></td></tr></table></figure></parent></p>\n<p><code>mvn clean install</code>将编译并打包war包：<code>my-webapp/target/my-webapp.war</code>，而my-app项目将作为war包WEB-INF/lib中的一个jar包</p>\n","site":{"data":{}},"excerpt":"<p>Maven版本：3.3.1</p>","more":"<p>操作系统：Windows 7</p>\n<p>Java版本：1.8</p>\n<p>移译自<a href=\"https://maven.apache.org/guides/getting-started/\" target=\"_blank\" rel=\"noopener\">Maven Getting Started Guide</a>。</p>\n<h2 id=\"What-And-Why\"><a href=\"#What-And-Why\" class=\"headerlink\" title=\"What And Why\"></a>What And Why</h2><p>Maven是一个Java的编译（Build）自动化工具，按我的理解，它可以做到：</p>\n<ul>\n<li>创建自动化</li>\n<li>包依赖管理自动化</li>\n<li>编译和单元测试自动化</li>\n<li>配置注入自动化</li>\n<li>程序（War或Jar）打包自动化，及远程部署</li>\n</ul>\n<p>因此，它是一个可以提升开发效率的工具。</p>\n<h2 id=\"How\"><a href=\"#How\" class=\"headerlink\" title=\"How\"></a>How</h2><h3 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h3><h4 id=\"Java配置\"><a href=\"#Java配置\" class=\"headerlink\" title=\"Java配置\"></a>Java配置</h4><ol>\n<li><p>下载[JDK8][2]并安装到你的电脑（本文用的是jdk-8u65-windows-x64.exe）；</p>\n</li>\n<li><p>配置环境变量，右击“计算机”==&gt;选择“高级系统设置”==&gt;选择“高级”选项卡==&gt;点击“环境变量”按钮：</p>\n<ul>\n<li>新建系统变量<code>JAVA_HOME</code>，内容为：<code>C:\\Program Files\\Java\\jdk1.8.0_65</code>；</li>\n<li>修改系统变量<code>PATH</code>，在末尾加入内容：<code>;%JAVA_HOME%\\jre\\bin</code>；如无此系统变量则新建系统变量<code>PATH</code>，内容为：<code>%JAVA_HOME%\\jre\\bin</code>；</li>\n<li>新建系统变量<code>CLASSPATH</code>，内容为：<code>.;%JAVA_HOME%\\lib\\dt.jar;%JAVA_HOME%\\lib\\tools.jar</code>；</li>\n</ul>\n</li>\n<li><p>注销后登入，打开CMD.exe，输入</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo %JAVA_HOME%</span><br><span class=\"line\">java -version</span><br></pre></td></tr></table></figure>\n<p> 上述两个命令皆有输出则表示安装Java成功。</p>\n</li>\n</ol>\n<h4 id=\"Maven配置\"><a href=\"#Maven配置\" class=\"headerlink\" title=\"Maven配置\"></a>Maven配置</h4><ol>\n<li><p>到[Maven下载页][3]下载apache-maven-3.3.1-bin.zip（apache-maven-3.3.3有Bug，其boot文件夹缺少了一个关键Jar包，已向Maven mail-list提出，不知道修复了没有）；</p>\n</li>\n<li><p>将压缩包解压到一个你喜欢的地方，如<code>D:\\Softwares\\apache-maven-3.3.1</code>；</p>\n</li>\n<li><p>配置环境变量，右击“计算机”==&gt;选择“高级系统设置”==&gt;选择“高级”选项卡==&gt;点击“环境变量”按钮：</p>\n<ul>\n<li>新建系统变量<code>M2_HOME</code>，内容为：<code>D:\\Softwares\\apache-maven-3.3.1</code>；</li>\n<li>修改系统变量<code>PATH</code>，在末尾加入内容：<code>;%M2_HOME%\\bin</code>；</li>\n</ul>\n</li>\n<li><p><strong>重新打开</strong>一个CMD.exe窗口，输入：</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo %M2_HOME%</span><br><span class=\"line\">mvn -v</span><br></pre></td></tr></table></figure>\n<p> 上述两个命令皆有输出则表示安装Maven成功。</p>\n</li>\n<li><p>配置开源中国Maven库（非必要）</p>\n<ul>\n<li>第一次运行mvn命令时，需要去官网（国外）的Maven库同步Jar包到本地，据官网说在网络畅通情况下4分钟就同步完毕，后续运行mvn命令就不需要这么长时间了</li>\n<li>如果你觉得时间太长无法忍受，可以配置mvn的中国库，参考<a href=\"http://maven.oschina.net/help.html\" target=\"_blank\" rel=\"noopener\">OSC的使用帮助</a>即可配置。简要概括如下：</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">!</span> <span class=\"attr\">--</span> 在<span class=\"attr\">mirrors</span>添加如下配置即可 <span class=\"attr\">--</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mirror</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>nexus-osc<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">mirrorOf</span>&gt;</span>*<span class=\"tag\">&lt;/<span class=\"name\">mirrorOf</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>Nexus osc<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>http://maven.oschina.net/content/groups/public/<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mirror</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">!</span> <span class=\"attr\">--</span> 在<span class=\"attr\">profiles</span>添加如下配置即可 <span class=\"attr\">--</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">profile</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>jdk-1.4<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">activation</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">jdk</span>&gt;</span>1.4<span class=\"tag\">&lt;/<span class=\"name\">jdk</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">activation</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">repositories</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">repository</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>jdk14<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>Repository for JDK 1.4 builds<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>http://www.myhost.com/maven/jdk14<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">layout</span>&gt;</span>default<span class=\"tag\">&lt;/<span class=\"name\">layout</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">snapshotPolicy</span>&gt;</span>always<span class=\"tag\">&lt;/<span class=\"name\">snapshotPolicy</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">repository</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">repositories</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">profile</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Demo项目\"><a href=\"#Demo项目\" class=\"headerlink\" title=\"Demo项目\"></a>Demo项目</h3><h4 id=\"创建Java项目\"><a href=\"#创建Java项目\" class=\"headerlink\" title=\"创建Java项目\"></a>创建Java项目</h4><p>运行下述命令创建demo项目my-app：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn -B archetype:generate \\</span><br><span class=\"line\">  -DarchetypeGroupId=org.apache.maven.archetypes \\</span><br><span class=\"line\">  -DgroupId=com.mycompany.app \\</span><br><span class=\"line\">  -DartifactId=my-app</span><br></pre></td></tr></table></figure></p>\n<p>my-app的目录结构如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">my-app</span><br><span class=\"line\">|-- pom.xml</span><br><span class=\"line\">`-- src</span><br><span class=\"line\">    |-- main</span><br><span class=\"line\">    |   `-- java</span><br><span class=\"line\">    |       `-- com</span><br><span class=\"line\">    |           `-- mycompany</span><br><span class=\"line\">    |               `-- app</span><br><span class=\"line\">    |                   `-- App.java</span><br><span class=\"line\">    `-- test</span><br><span class=\"line\">        `-- java</span><br><span class=\"line\">            `-- com</span><br><span class=\"line\">                `-- mycompany</span><br><span class=\"line\">                    `-- app</span><br><span class=\"line\">                        `-- AppTest.java</span><br></pre></td></tr></table></figure></p>\n<p>其中的pom.xml是Maven的基础配置文件，pom(Project Object Model，项目对象模型)，它的内容及注释如下：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">!</span> <span class=\"attr\">--</span> <span class=\"attr\">pom</span>文件的开始标签 <span class=\"attr\">--</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">                      http://maven.apache.org/xsd/maven-4.0.0.xsd\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">!</span> <span class=\"attr\">--</span> <span class=\"attr\">Maven</span>的<span class=\"attr\">pom</span>版本 <span class=\"attr\">--</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">!</span> <span class=\"attr\">--</span> 唯一的组织或公司编号，标识此项目所属组 <span class=\"attr\">--</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.mycompany.app<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">!</span> <span class=\"attr\">--</span> 此项目属于组的哪个项目 <span class=\"attr\">--</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>my-app<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">!</span> <span class=\"attr\">--</span> 可执行程序打包方式 <span class=\"attr\">--</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">packaging</span>&gt;</span>jar<span class=\"tag\">&lt;/<span class=\"name\">packaging</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">!</span> <span class=\"attr\">--</span> 项目版本，<span class=\"attr\">SNAPSHOT</span>表示开发版 <span class=\"attr\">--</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">!</span> <span class=\"attr\">--</span> 项目的显示名称，常用于<span class=\"attr\">maven</span>生成的文档 <span class=\"attr\">--</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>Maven Quick Start Archetype<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">!</span> <span class=\"attr\">--</span> 项目的主页，常用于<span class=\"attr\">maven</span>生成的文档 <span class=\"attr\">--</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>http://maven.apache.org<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">!</span> <span class=\"attr\">--</span> 所用的依赖库 <span class=\"attr\">--</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.8.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"编译\"><a href=\"#编译\" class=\"headerlink\" title=\"编译\"></a>编译</h4><p>编译项目src/main：<code>mvn compile</code>，将更新<project>/target/classes文件夹</project></p>\n<h4 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h4><p>编译并运行项目src/test：<code>mvn test</code>，将更新<project>/target/test-classes文件夹，并在<project>/target/surefire-reports生成测试报告</project></project></p>\n<p>编译项目src/test而不运行：<code>mvn test-compile</code></p>\n<h4 id=\"清除\"><a href=\"#清除\" class=\"headerlink\" title=\"清除\"></a>清除</h4><p><code>mvn clean</code>：删除<project>/target</project></p>\n<h4 id=\"打包\"><a href=\"#打包\" class=\"headerlink\" title=\"打包\"></a>打包</h4><p>打包项目到<project>/target：<code>mvn package</code></project></p>\n<p>打包项目到maven本地仓库：<code>mvn install</code></p>\n<h4 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h4><p><code>mvn site</code>：生成<project>/target/site，即项目主页文档</project></p>\n<p><code>mvn eclipse:eclipse</code>：为项目添加eclipse标识，因此可被eclipse import</p>\n<p><code>mvn idea:idea</code>：类似于eclipse</p>\n<h4 id=\"插件\"><a href=\"#插件\" class=\"headerlink\" title=\"插件\"></a>插件</h4><p>在pom.xml中添加<build>标签，可定制maven的编译过程<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">...</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.maven.plugins<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-compiler-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.5.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">source</span>&gt;</span>1.5<span class=\"tag\">&lt;/<span class=\"name\">source</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">target</span>&gt;</span>1.5<span class=\"tag\">&lt;/<span class=\"name\">target</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br></pre></td></tr></table></figure></build></p>\n<h4 id=\"配置注入\"><a href=\"#配置注入\" class=\"headerlink\" title=\"配置注入\"></a>配置注入</h4><p>文件结构为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">my-app</span><br><span class=\"line\">|-- pom.xml</span><br><span class=\"line\">`-- src</span><br><span class=\"line\">    |-- main</span><br><span class=\"line\">    |   |-- java</span><br><span class=\"line\">    |   |   `-- com</span><br><span class=\"line\">    |   |       `-- mycompany</span><br><span class=\"line\">    |   |           `-- app</span><br><span class=\"line\">    |   |               `-- App.java</span><br><span class=\"line\">    |   `-- resources</span><br><span class=\"line\">    |       `-- META-INF</span><br><span class=\"line\">    |           `-- application.properties</span><br><span class=\"line\">    `-- test</span><br><span class=\"line\">        `-- java</span><br><span class=\"line\">            `-- com</span><br><span class=\"line\">                `-- mycompany</span><br><span class=\"line\">                    `-- app</span><br><span class=\"line\">                        `-- AppTest.java</span><br></pre></td></tr></table></figure></p>\n<p>想要注入配置到<code>application.properties</code>，方法如下</p>\n<ul>\n<li><p>pom.xml注入</p>\n<ul>\n<li><p>pom.xml配置如下</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">directory</span>&gt;</span>src/main/resources<span class=\"tag\">&lt;/<span class=\"name\">directory</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">filtering</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">filtering</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>application.properties配置如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># application.properties</span><br><span class=\"line\">application.name=$&#123;pom.name&#125;</span><br><span class=\"line\">application.version=$&#123;pom.version&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>即可使用pom.xml中的name和version属性注入到配置文件，运行<code>mvn process-resources</code>后application.properties的内容变为</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># application.properties</span><br><span class=\"line\">application.name=Maven Quick Start Archetype</span><br><span class=\"line\">application.version=1.0-SNAPSHOT</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>配置文件注入（配置文件必须在classpath内）</p>\n<ul>\n<li><p>pom.xml配置如下，filter.properties的key直接可为src/main/resources下的所有配置文件使用</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">filters</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">filter</span>&gt;</span>src/main/filters/filter.properties<span class=\"tag\">&lt;/<span class=\"name\">filter</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">filters</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">directory</span>&gt;</span>src/main/resources<span class=\"tag\">&lt;/<span class=\"name\">directory</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">filtering</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">filtering</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>pom.xml的propertie注入</p>\n<ul>\n<li><p>pom.xml配置如下，my.filter.value可直接为src/main/resources下的所有配置文件使用</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">...</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">my.filter.value</span>&gt;</span>hello<span class=\"tag\">&lt;/<span class=\"name\">my.filter.value</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>运行时注入</p>\n<ul>\n<li><code>mvn process-resources &quot;-Dcommand.line.prop=hello again&quot;</code>，command.line.prop可直接为src/main/resources下的所有配置文件使用</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"依赖\"><a href=\"#依赖\" class=\"headerlink\" title=\"依赖\"></a>依赖</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">...</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">!</span> <span class=\"attr\">--</span> ~/<span class=\"attr\">.m2</span>/<span class=\"attr\">repository</span>中查找<span class=\"attr\">junit</span>组的<span class=\"attr\">junit</span>包的<span class=\"attr\">3.8.1</span>版本，如查询不到则到<span class=\"attr\">maven</span>仓库下载 <span class=\"attr\">--</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">!</span> <span class=\"attr\">--</span> 上文<span class=\"attr\">mvn</span> <span class=\"attr\">package</span>的<span class=\"attr\">jar</span>包可在这里使用 <span class=\"attr\">--</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">!</span> <span class=\"attr\">--</span> <span class=\"attr\">junit</span>组的<span class=\"attr\">junit</span>项目 <span class=\"attr\">--</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">!</span> <span class=\"attr\">--</span> 版本号 <span class=\"attr\">--</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.8.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">!</span> <span class=\"attr\">--</span> <span class=\"attr\">test</span>|<span class=\"attr\">compile</span>|<span class=\"attr\">runtime</span> <span class=\"attr\">--</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>浏览器访问<a href=\"http://repo.maven.apache.org/maven2\" target=\"_blank\" rel=\"noopener\">http://repo.maven.apache.org/maven2</a>可查看maven库的所有可用jar包，以junit为例，查看<a href=\"http://repo.maven.apache.org/maven2/junit/junit/maven-metadata.xml\" target=\"_blank\" rel=\"noopener\">http://repo.maven.apache.org/maven2/junit/junit/maven-metadata.xml</a>可查询junit所有可用版本</p>\n<p>使用<a href=\"http://maven.oschina.net/home.html\" target=\"_blank\" rel=\"noopener\">http://maven.oschina.net/home.html</a>可按关键字检索所需jar包</p>\n<p>使用<code>mvn dependency:tree</code>可查看当前项目的依赖树</p>\n<h4 id=\"远程部署到其他maven库\"><a href=\"#远程部署到其他maven库\" class=\"headerlink\" title=\"远程部署到其他maven库\"></a>远程部署到其他maven库</h4><p>配置pom.xml如下：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">...</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">distributionManagement</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">repository</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>mycompany-repository<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>MyCompany Repository<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>scp://repository.mycompany.com/repository/maven2<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">repository</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">distributionManagement</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>配置Maven的settings.xml如下：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">settings</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://maven.apache.org/SETTINGS/1.0.0\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://maven.apache.org/SETTINGS/1.0.0</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">                      http://maven.apache.org/xsd/settings-1.0.0.xsd\"</span>&gt;</span></span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">servers</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">server</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>mycompany-repository<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">username</span>&gt;</span>jvanzyl<span class=\"tag\">&lt;/<span class=\"name\">username</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">!</span> <span class=\"attr\">--</span> <span class=\"attr\">Default</span> <span class=\"attr\">value</span> <span class=\"attr\">is</span> ~/<span class=\"attr\">.ssh</span>/<span class=\"attr\">id_dsa</span> <span class=\"attr\">--</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">privateKey</span>&gt;</span>/path/to/identity<span class=\"tag\">&lt;/<span class=\"name\">privateKey</span>&gt;</span> (default is ~/.ssh/id_dsa)</span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">passphrase</span>&gt;</span>my_key_passphrase<span class=\"tag\">&lt;/<span class=\"name\">passphrase</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">server</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">servers</span>&gt;</span></span><br><span class=\"line\">  ...</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">settings</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"文档创建\"><a href=\"#文档创建\" class=\"headerlink\" title=\"文档创建\"></a>文档创建</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn archetype:generate \\</span><br><span class=\"line\">  -DarchetypeGroupId=org.apache.maven.archetypes \\</span><br><span class=\"line\">  -DarchetypeArtifactId=maven-archetype-site \\</span><br><span class=\"line\">  -DgroupId=com.mycompany.app \\</span><br><span class=\"line\">  -DartifactId=my-app-site</span><br></pre></td></tr></table></figure>\n<h4 id=\"创建web项目\"><a href=\"#创建web项目\" class=\"headerlink\" title=\"创建web项目\"></a>创建web项目</h4><p>创建web项目：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn archetype:generate \\</span><br><span class=\"line\">    -DarchetypeGroupId=org.apache.maven.archetypes \\</span><br><span class=\"line\">    -DarchetypeArtifactId=maven-archetype-webapp \\</span><br><span class=\"line\">    -DgroupId=com.mycompany.app \\</span><br><span class=\"line\">    -DartifactId=my-webapp</span><br></pre></td></tr></table></figure></p>\n<p>web项目的pom.xml配置如下：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">                      http://maven.apache.org/xsd/maven-4.0.0.xsd\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.mycompany.app<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>my-webapp<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">!</span> <span class=\"attr\">--</span> 打包方式 <span class=\"attr\">--</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">packaging</span>&gt;</span>war<span class=\"tag\">&lt;/<span class=\"name\">packaging</span>&gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.8.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">!</span> <span class=\"attr\">--</span> 最终打包成<span class=\"attr\">war</span>的名称 <span class=\"attr\">--</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">finalName</span>&gt;</span>my-webapp<span class=\"tag\">&lt;/<span class=\"name\">finalName</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p><code>mvn clean package</code>编译并打包为war包<code>target/my-webapp.war</code></p>\n<h4 id=\"多个项目组装为一个项目\"><a href=\"#多个项目组装为一个项目\" class=\"headerlink\" title=\"多个项目组装为一个项目\"></a>多个项目组装为一个项目</h4><p>两个项目要组装为一个项目，目录结构如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+- pom.xml</span><br><span class=\"line\">+- my-app</span><br><span class=\"line\">| +- pom.xml</span><br><span class=\"line\">| +- src</span><br><span class=\"line\">|   +- main</span><br><span class=\"line\">|     +- java</span><br><span class=\"line\">+- my-webapp</span><br><span class=\"line\">| +- pom.xml</span><br><span class=\"line\">| +- src</span><br><span class=\"line\">|   +- main</span><br><span class=\"line\">|     +- webapp</span><br></pre></td></tr></table></figure></p>\n<p>pom.xml如下：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">                      http://maven.apache.org/xsd/maven-4.0.0.xsd\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.mycompany.app<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>app<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">packaging</span>&gt;</span>pom<span class=\"tag\">&lt;/<span class=\"name\">packaging</span>&gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">modules</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">module</span>&gt;</span>my-app<span class=\"tag\">&lt;/<span class=\"name\">module</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">module</span>&gt;</span>my-webapp<span class=\"tag\">&lt;/<span class=\"name\">module</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">modules</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>配置<code>my-webapp/pom.xml</code>使my-webapp引用my-app：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">!</span> <span class=\"attr\">--</span> 这将使得<span class=\"attr\">my-app</span>在<span class=\"attr\">war</span>包之前得到编译和打包 <span class=\"attr\">--</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.mycompany.app<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>my-app<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  ...</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>配置<code>my-webapp/pom.xml</code>和<code>my-app/pom.xml</code>添加<parent>标签：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">                      http://maven.apache.org/xsd/maven-4.0.0.xsd\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.mycompany.app<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>app<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">  ...</span><br></pre></td></tr></table></figure></parent></p>\n<p><code>mvn clean install</code>将编译并打包war包：<code>my-webapp/target/my-webapp.war</code>，而my-app项目将作为war包WEB-INF/lib中的一个jar包</p>"},{"layout":"post","title":"Spring Boot初探","date":"2016-01-23T07:02:00.000Z","comments":1,"_content":"\n本着实用主义的目的简单介绍Spring Boot。\n\n<!--more-->\n\n## 概要\n\n- 它的出现并不是为了取代传统的Spring Framework，而是提供一种新的Spring开发体验——尽可能消除大量繁琐的XML配置\n- 个人觉得Spring Framework的Java注解式开发已经做得够好了（省去大量的配置工作），并不是非得用Spring Boot不可的\n- 官网的[Guide](http://docs.spring.io/spring-boot/docs/current-SNAPSHOT/reference/htmlsingle/)已经写得非常好了，我只是从实用主义讲如何快速入门\n\n## 代码与相关理论\n\n### 准备工作\n\n访问[Spring Initializr](https://start.spring.io/)生成以maven构建的demo项目，Dependencies我分别勾选了[Web]和[Security]，在终端下定位到生成的demo项目运行`mvn eclipse:eclipse`生成eclipse标识，接下来就可以使用eclipse进行开发了。\n\n### 代码（自动生成）游园活动\n\n代码结构如下：\n```\ndemo\n + src/test/java\n   + com.example\n     - DemoApplicationTests.java\n + src/main/java\n   + com.example\n     - DemoApplication.java\n + src/main/resources\n   + templates\n   + static\n   - application.properties\n - pom.xml \n```\n\n#### pom.xml\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>com.example</groupId>\n    <artifactId>demo</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <!-- 不同于传统Spring的地方：兼容将项目打包成war丢到外置Tomcat容器，也可打包成jar使用内置Tomcat运行Spring Web项目，直接运行jar包即可 -->\n    <packaging>jar</packaging>\n\n    <name>demo</name>\n    <description>Demo project for Spring Boot</description>\n\n    <!-- 必须要引入的parent，parent包含了大量基础的spring依赖，因此你不需要在pom.xml配置一堆所需引用的spring jar包 -->\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>1.3.2.RELEASE</version>\n        <relativePath/> <!-- lookup parent from repository -->\n    </parent>\n\n    <properties>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <java.version>1.8</java.version>\n    </properties>\n\n    <!-- 以组件的形式在这里添加一条dependency，即官网宣称的开箱即用，简直傻瓜式啊 -->\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-security</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n        \n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n    </dependencies>\n    \n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n        </plugins>\n    </build>    \n\n</project>\n```\n可开箱即用的其他dependency如下：\n- [官网](http://docs.spring.io/spring-boot/docs/current-SNAPSHOT/reference/htmlsingle/#using-boot-starter-poms)\n- [非官网](https://github.com/spring-projects/spring-boot/blob/master/spring-boot-starters/README.adoc)\n\n#### DemoApplication.java\n\n```java\npackage com.example;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n/**\n * @SpringBootApplication等价于 @Configuration @EnableAutoConfiguration @ComponentScan\n * @Configuration标注配置类，即以往的XML配置文件被映射成了一个类\n * @EnableAutoConfiguration，表示由Spring Boot启动默认配置，如web项目将默认配置内置tomcat端口号8080\n * @ComponentScan放置在basePackage（例子中是com.example），com.example.*下的所有Java文件将被扫描解释\n */\n@SpringBootApplication\npublic class DemoApplication {\n\n    // 这里的args一般传的是配置类\n    public static void main(String[] args) {\n        SpringApplication.run(DemoApplication.class, args);\n    }\n}\n\n```\n\n#### DemoApplicationTests.java\n\n```java\npackage com.example;\n\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.springframework.test.context.web.WebAppConfiguration;\nimport org.springframework.boot.test.SpringApplicationConfiguration;\nimport org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n\n@RunWith(SpringJUnit4ClassRunner.class) // 指定以spring-junit运行单元测试\n@SpringApplicationConfiguration(classes = DemoApplication.class) // 指定我们的应用类\n@WebAppConfiguration // 表明要测试的是一个web应用\npublic class DemoApplicationTests {\n\n    @Test\n    public void contextLoads() {\n    }\n\n}\n```\n\n#### application.properties\n\nSpring Boot的默认配置文件，假设我在此文件有一个键值`name=jayzee`，那么我在java代码中可以直接使用如下（Spring Boot自动注入）：\n\n```java\n@Value(\"${name}\")\nprivate String name;\n```\n\n我在此文件添加一个键值`server.port=8090`修改内置tomcat的默认端口为8090。\n\n#### templates\n\n[Template engines](http://docs.spring.io/spring-boot/docs/current-SNAPSHOT/reference/htmlsingle/#boot-features-spring-mvc-template-engines)说到：\n- 此文件夹用于放置动态html如jsp（官网建议尽量少用，因为在内置tomcat下运行将不起作用）等其他模板文件\n\n#### static\n\n[Static Content](http://docs.spring.io/spring-boot/docs/current-SNAPSHOT/reference/htmlsingle/#boot-features-spring-mvc-static-content)\n- 此文件用于存放静态资源文件如：html、js、css和json等\n- 如果这里存放有index.html，则默认作为项目的home page\n- 前台代码`<link href=\"/css/spring-2a2d595e6ed9a0b24f027f2b63b134d6.css\"/>`直接引用`/static/css/spring-2a2d595e6ed9a0b24f027f2b63b134d6.css`\n\n### 结尾\n\n终端定位到demo项目，运行\n\n```\nmvn package\njava -jar target/demo-0.0.1-SNAPSHOT.jar\n```\n\n访问`http://localhost:8090/`则可看到弹出一个登录窗口（因为我们引入了security组件）。\n\n[Security](http://docs.spring.io/spring-boot/docs/current-SNAPSHOT/reference/htmlsingle/#boot-features-security)提到，默认账户是`user`，随机密码在启动tomcat时在控制台打印。\n\n其他资源：\n- [spring boot之login+jdbc完整例子](http://www.tianmaying.com/tutorial/spring-mvc-microblog)\n- [此博文demo项目源码](https://github.com/JayzeeZhang/spring-boot-demo)\n","source":"_posts/2016-01-23-sth-about-spring-boot.markdown","raw":"---\nlayout: post\ntitle: Spring Boot初探\ndate: '2016-01-23 15:02'\ncomments: true\ncategories: ['编程实践']  \ntags: ['Spring']\n---\n\n本着实用主义的目的简单介绍Spring Boot。\n\n<!--more-->\n\n## 概要\n\n- 它的出现并不是为了取代传统的Spring Framework，而是提供一种新的Spring开发体验——尽可能消除大量繁琐的XML配置\n- 个人觉得Spring Framework的Java注解式开发已经做得够好了（省去大量的配置工作），并不是非得用Spring Boot不可的\n- 官网的[Guide](http://docs.spring.io/spring-boot/docs/current-SNAPSHOT/reference/htmlsingle/)已经写得非常好了，我只是从实用主义讲如何快速入门\n\n## 代码与相关理论\n\n### 准备工作\n\n访问[Spring Initializr](https://start.spring.io/)生成以maven构建的demo项目，Dependencies我分别勾选了[Web]和[Security]，在终端下定位到生成的demo项目运行`mvn eclipse:eclipse`生成eclipse标识，接下来就可以使用eclipse进行开发了。\n\n### 代码（自动生成）游园活动\n\n代码结构如下：\n```\ndemo\n + src/test/java\n   + com.example\n     - DemoApplicationTests.java\n + src/main/java\n   + com.example\n     - DemoApplication.java\n + src/main/resources\n   + templates\n   + static\n   - application.properties\n - pom.xml \n```\n\n#### pom.xml\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>com.example</groupId>\n    <artifactId>demo</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <!-- 不同于传统Spring的地方：兼容将项目打包成war丢到外置Tomcat容器，也可打包成jar使用内置Tomcat运行Spring Web项目，直接运行jar包即可 -->\n    <packaging>jar</packaging>\n\n    <name>demo</name>\n    <description>Demo project for Spring Boot</description>\n\n    <!-- 必须要引入的parent，parent包含了大量基础的spring依赖，因此你不需要在pom.xml配置一堆所需引用的spring jar包 -->\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>1.3.2.RELEASE</version>\n        <relativePath/> <!-- lookup parent from repository -->\n    </parent>\n\n    <properties>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <java.version>1.8</java.version>\n    </properties>\n\n    <!-- 以组件的形式在这里添加一条dependency，即官网宣称的开箱即用，简直傻瓜式啊 -->\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-security</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n        \n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n    </dependencies>\n    \n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n        </plugins>\n    </build>    \n\n</project>\n```\n可开箱即用的其他dependency如下：\n- [官网](http://docs.spring.io/spring-boot/docs/current-SNAPSHOT/reference/htmlsingle/#using-boot-starter-poms)\n- [非官网](https://github.com/spring-projects/spring-boot/blob/master/spring-boot-starters/README.adoc)\n\n#### DemoApplication.java\n\n```java\npackage com.example;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n/**\n * @SpringBootApplication等价于 @Configuration @EnableAutoConfiguration @ComponentScan\n * @Configuration标注配置类，即以往的XML配置文件被映射成了一个类\n * @EnableAutoConfiguration，表示由Spring Boot启动默认配置，如web项目将默认配置内置tomcat端口号8080\n * @ComponentScan放置在basePackage（例子中是com.example），com.example.*下的所有Java文件将被扫描解释\n */\n@SpringBootApplication\npublic class DemoApplication {\n\n    // 这里的args一般传的是配置类\n    public static void main(String[] args) {\n        SpringApplication.run(DemoApplication.class, args);\n    }\n}\n\n```\n\n#### DemoApplicationTests.java\n\n```java\npackage com.example;\n\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.springframework.test.context.web.WebAppConfiguration;\nimport org.springframework.boot.test.SpringApplicationConfiguration;\nimport org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n\n@RunWith(SpringJUnit4ClassRunner.class) // 指定以spring-junit运行单元测试\n@SpringApplicationConfiguration(classes = DemoApplication.class) // 指定我们的应用类\n@WebAppConfiguration // 表明要测试的是一个web应用\npublic class DemoApplicationTests {\n\n    @Test\n    public void contextLoads() {\n    }\n\n}\n```\n\n#### application.properties\n\nSpring Boot的默认配置文件，假设我在此文件有一个键值`name=jayzee`，那么我在java代码中可以直接使用如下（Spring Boot自动注入）：\n\n```java\n@Value(\"${name}\")\nprivate String name;\n```\n\n我在此文件添加一个键值`server.port=8090`修改内置tomcat的默认端口为8090。\n\n#### templates\n\n[Template engines](http://docs.spring.io/spring-boot/docs/current-SNAPSHOT/reference/htmlsingle/#boot-features-spring-mvc-template-engines)说到：\n- 此文件夹用于放置动态html如jsp（官网建议尽量少用，因为在内置tomcat下运行将不起作用）等其他模板文件\n\n#### static\n\n[Static Content](http://docs.spring.io/spring-boot/docs/current-SNAPSHOT/reference/htmlsingle/#boot-features-spring-mvc-static-content)\n- 此文件用于存放静态资源文件如：html、js、css和json等\n- 如果这里存放有index.html，则默认作为项目的home page\n- 前台代码`<link href=\"/css/spring-2a2d595e6ed9a0b24f027f2b63b134d6.css\"/>`直接引用`/static/css/spring-2a2d595e6ed9a0b24f027f2b63b134d6.css`\n\n### 结尾\n\n终端定位到demo项目，运行\n\n```\nmvn package\njava -jar target/demo-0.0.1-SNAPSHOT.jar\n```\n\n访问`http://localhost:8090/`则可看到弹出一个登录窗口（因为我们引入了security组件）。\n\n[Security](http://docs.spring.io/spring-boot/docs/current-SNAPSHOT/reference/htmlsingle/#boot-features-security)提到，默认账户是`user`，随机密码在启动tomcat时在控制台打印。\n\n其他资源：\n- [spring boot之login+jdbc完整例子](http://www.tianmaying.com/tutorial/spring-mvc-microblog)\n- [此博文demo项目源码](https://github.com/JayzeeZhang/spring-boot-demo)\n","slug":"sth-about-spring-boot","published":1,"updated":"2017-04-09T14:43:06.000Z","photos":[],"link":"","_id":"cjlza6m450007pgup0o9cxuas","content":"<p>本着实用主义的目的简单介绍Spring Boot。</p>\n<a id=\"more\"></a>\n<h2 id=\"概要\"><a href=\"#概要\" class=\"headerlink\" title=\"概要\"></a>概要</h2><ul>\n<li>它的出现并不是为了取代传统的Spring Framework，而是提供一种新的Spring开发体验——尽可能消除大量繁琐的XML配置</li>\n<li>个人觉得Spring Framework的Java注解式开发已经做得够好了（省去大量的配置工作），并不是非得用Spring Boot不可的</li>\n<li>官网的<a href=\"http://docs.spring.io/spring-boot/docs/current-SNAPSHOT/reference/htmlsingle/\" target=\"_blank\" rel=\"noopener\">Guide</a>已经写得非常好了，我只是从实用主义讲如何快速入门</li>\n</ul>\n<h2 id=\"代码与相关理论\"><a href=\"#代码与相关理论\" class=\"headerlink\" title=\"代码与相关理论\"></a>代码与相关理论</h2><h3 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h3><p>访问<a href=\"https://start.spring.io/\" target=\"_blank\" rel=\"noopener\">Spring Initializr</a>生成以maven构建的demo项目，Dependencies我分别勾选了[Web]和[Security]，在终端下定位到生成的demo项目运行<code>mvn eclipse:eclipse</code>生成eclipse标识，接下来就可以使用eclipse进行开发了。</p>\n<h3 id=\"代码（自动生成）游园活动\"><a href=\"#代码（自动生成）游园活动\" class=\"headerlink\" title=\"代码（自动生成）游园活动\"></a>代码（自动生成）游园活动</h3><p>代码结构如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">demo</span><br><span class=\"line\"> + src/test/java</span><br><span class=\"line\">   + com.example</span><br><span class=\"line\">     - DemoApplicationTests.java</span><br><span class=\"line\"> + src/main/java</span><br><span class=\"line\">   + com.example</span><br><span class=\"line\">     - DemoApplication.java</span><br><span class=\"line\"> + src/main/resources</span><br><span class=\"line\">   + templates</span><br><span class=\"line\">   + static</span><br><span class=\"line\">   - application.properties</span><br><span class=\"line\"> - pom.xml</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"pom-xml\"><a href=\"#pom-xml\" class=\"headerlink\" title=\"pom.xml\"></a>pom.xml</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0\"</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.example<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>demo<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.0.1-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 不同于传统Spring的地方：兼容将项目打包成war丢到外置Tomcat容器，也可打包成jar使用内置Tomcat运行Spring Web项目，直接运行jar包即可 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">packaging</span>&gt;</span>jar<span class=\"tag\">&lt;/<span class=\"name\">packaging</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>demo<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">description</span>&gt;</span>Demo project for Spring Boot<span class=\"tag\">&lt;/<span class=\"name\">description</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 必须要引入的parent，parent包含了大量基础的spring依赖，因此你不需要在pom.xml配置一堆所需引用的spring jar包 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-parent<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.3.2.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">relativePath</span>/&gt;</span> <span class=\"comment\">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">project.build.sourceEncoding</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">java.version</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">java.version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 以组件的形式在这里添加一条dependency，即官网宣称的开箱即用，简直傻瓜式啊 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-security<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-test<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span>    </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>可开箱即用的其他dependency如下：</p>\n<ul>\n<li><a href=\"http://docs.spring.io/spring-boot/docs/current-SNAPSHOT/reference/htmlsingle/#using-boot-starter-poms\" target=\"_blank\" rel=\"noopener\">官网</a></li>\n<li><a href=\"https://github.com/spring-projects/spring-boot/blob/master/spring-boot-starters/README.adoc\" target=\"_blank\" rel=\"noopener\">非官网</a></li>\n</ul>\n<h4 id=\"DemoApplication-java\"><a href=\"#DemoApplication-java\" class=\"headerlink\" title=\"DemoApplication.java\"></a>DemoApplication.java</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.SpringApplication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@SpringBootApplication</span>等价于 <span class=\"doctag\">@Configuration</span> <span class=\"doctag\">@EnableAutoConfiguration</span> <span class=\"doctag\">@ComponentScan</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Configuration</span>标注配置类，即以往的XML配置文件被映射成了一个类</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@EnableAutoConfiguration</span>，表示由Spring Boot启动默认配置，如web项目将默认配置内置tomcat端口号8080</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@ComponentScan</span>放置在basePackage（例子中是com.example），com.example.*下的所有Java文件将被扫描解释</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DemoApplication</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 这里的args一般传的是配置类</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        SpringApplication.run(DemoApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"DemoApplicationTests-java\"><a href=\"#DemoApplicationTests-java\" class=\"headerlink\" title=\"DemoApplicationTests.java\"></a>DemoApplicationTests.java</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.junit.Test;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.junit.runner.RunWith;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.test.context.web.WebAppConfiguration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.test.SpringApplicationConfiguration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@RunWith</span>(SpringJUnit4ClassRunner.class) <span class=\"comment\">// 指定以spring-junit运行单元测试</span></span><br><span class=\"line\"><span class=\"meta\">@SpringApplicationConfiguration</span>(classes = DemoApplication.class) <span class=\"comment\">// 指定我们的应用类</span></span><br><span class=\"line\"><span class=\"meta\">@WebAppConfiguration</span> <span class=\"comment\">// 表明要测试的是一个web应用</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DemoApplicationTests</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">contextLoads</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"application-properties\"><a href=\"#application-properties\" class=\"headerlink\" title=\"application.properties\"></a>application.properties</h4><p>Spring Boot的默认配置文件，假设我在此文件有一个键值<code>name=jayzee</code>，那么我在java代码中可以直接使用如下（Spring Boot自动注入）：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Value</span>(<span class=\"string\">\"$&#123;name&#125;\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">private</span> String name;</span><br></pre></td></tr></table></figure>\n<p>我在此文件添加一个键值<code>server.port=8090</code>修改内置tomcat的默认端口为8090。</p>\n<h4 id=\"templates\"><a href=\"#templates\" class=\"headerlink\" title=\"templates\"></a>templates</h4><p><a href=\"http://docs.spring.io/spring-boot/docs/current-SNAPSHOT/reference/htmlsingle/#boot-features-spring-mvc-template-engines\" target=\"_blank\" rel=\"noopener\">Template engines</a>说到：</p>\n<ul>\n<li>此文件夹用于放置动态html如jsp（官网建议尽量少用，因为在内置tomcat下运行将不起作用）等其他模板文件</li>\n</ul>\n<h4 id=\"static\"><a href=\"#static\" class=\"headerlink\" title=\"static\"></a>static</h4><p><a href=\"http://docs.spring.io/spring-boot/docs/current-SNAPSHOT/reference/htmlsingle/#boot-features-spring-mvc-static-content\" target=\"_blank\" rel=\"noopener\">Static Content</a></p>\n<ul>\n<li>此文件用于存放静态资源文件如：html、js、css和json等</li>\n<li>如果这里存放有index.html，则默认作为项目的home page</li>\n<li>前台代码<code>&lt;link href=&quot;/css/spring-2a2d595e6ed9a0b24f027f2b63b134d6.css&quot;/&gt;</code>直接引用<code>/static/css/spring-2a2d595e6ed9a0b24f027f2b63b134d6.css</code></li>\n</ul>\n<h3 id=\"结尾\"><a href=\"#结尾\" class=\"headerlink\" title=\"结尾\"></a>结尾</h3><p>终端定位到demo项目，运行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn package</span><br><span class=\"line\">java -jar target/demo-0.0.1-SNAPSHOT.jar</span><br></pre></td></tr></table></figure>\n<p>访问<code>http://localhost:8090/</code>则可看到弹出一个登录窗口（因为我们引入了security组件）。</p>\n<p><a href=\"http://docs.spring.io/spring-boot/docs/current-SNAPSHOT/reference/htmlsingle/#boot-features-security\" target=\"_blank\" rel=\"noopener\">Security</a>提到，默认账户是<code>user</code>，随机密码在启动tomcat时在控制台打印。</p>\n<p>其他资源：</p>\n<ul>\n<li><a href=\"http://www.tianmaying.com/tutorial/spring-mvc-microblog\" target=\"_blank\" rel=\"noopener\">spring boot之login+jdbc完整例子</a></li>\n<li><a href=\"https://github.com/JayzeeZhang/spring-boot-demo\" target=\"_blank\" rel=\"noopener\">此博文demo项目源码</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>本着实用主义的目的简单介绍Spring Boot。</p>","more":"<h2 id=\"概要\"><a href=\"#概要\" class=\"headerlink\" title=\"概要\"></a>概要</h2><ul>\n<li>它的出现并不是为了取代传统的Spring Framework，而是提供一种新的Spring开发体验——尽可能消除大量繁琐的XML配置</li>\n<li>个人觉得Spring Framework的Java注解式开发已经做得够好了（省去大量的配置工作），并不是非得用Spring Boot不可的</li>\n<li>官网的<a href=\"http://docs.spring.io/spring-boot/docs/current-SNAPSHOT/reference/htmlsingle/\" target=\"_blank\" rel=\"noopener\">Guide</a>已经写得非常好了，我只是从实用主义讲如何快速入门</li>\n</ul>\n<h2 id=\"代码与相关理论\"><a href=\"#代码与相关理论\" class=\"headerlink\" title=\"代码与相关理论\"></a>代码与相关理论</h2><h3 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h3><p>访问<a href=\"https://start.spring.io/\" target=\"_blank\" rel=\"noopener\">Spring Initializr</a>生成以maven构建的demo项目，Dependencies我分别勾选了[Web]和[Security]，在终端下定位到生成的demo项目运行<code>mvn eclipse:eclipse</code>生成eclipse标识，接下来就可以使用eclipse进行开发了。</p>\n<h3 id=\"代码（自动生成）游园活动\"><a href=\"#代码（自动生成）游园活动\" class=\"headerlink\" title=\"代码（自动生成）游园活动\"></a>代码（自动生成）游园活动</h3><p>代码结构如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">demo</span><br><span class=\"line\"> + src/test/java</span><br><span class=\"line\">   + com.example</span><br><span class=\"line\">     - DemoApplicationTests.java</span><br><span class=\"line\"> + src/main/java</span><br><span class=\"line\">   + com.example</span><br><span class=\"line\">     - DemoApplication.java</span><br><span class=\"line\"> + src/main/resources</span><br><span class=\"line\">   + templates</span><br><span class=\"line\">   + static</span><br><span class=\"line\">   - application.properties</span><br><span class=\"line\"> - pom.xml</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"pom-xml\"><a href=\"#pom-xml\" class=\"headerlink\" title=\"pom.xml\"></a>pom.xml</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0\"</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.example<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>demo<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.0.1-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 不同于传统Spring的地方：兼容将项目打包成war丢到外置Tomcat容器，也可打包成jar使用内置Tomcat运行Spring Web项目，直接运行jar包即可 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">packaging</span>&gt;</span>jar<span class=\"tag\">&lt;/<span class=\"name\">packaging</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>demo<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">description</span>&gt;</span>Demo project for Spring Boot<span class=\"tag\">&lt;/<span class=\"name\">description</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 必须要引入的parent，parent包含了大量基础的spring依赖，因此你不需要在pom.xml配置一堆所需引用的spring jar包 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-parent<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.3.2.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">relativePath</span>/&gt;</span> <span class=\"comment\">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">project.build.sourceEncoding</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">java.version</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">java.version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 以组件的形式在这里添加一条dependency，即官网宣称的开箱即用，简直傻瓜式啊 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-security<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-test<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span>    </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>可开箱即用的其他dependency如下：</p>\n<ul>\n<li><a href=\"http://docs.spring.io/spring-boot/docs/current-SNAPSHOT/reference/htmlsingle/#using-boot-starter-poms\" target=\"_blank\" rel=\"noopener\">官网</a></li>\n<li><a href=\"https://github.com/spring-projects/spring-boot/blob/master/spring-boot-starters/README.adoc\" target=\"_blank\" rel=\"noopener\">非官网</a></li>\n</ul>\n<h4 id=\"DemoApplication-java\"><a href=\"#DemoApplication-java\" class=\"headerlink\" title=\"DemoApplication.java\"></a>DemoApplication.java</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.SpringApplication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@SpringBootApplication</span>等价于 <span class=\"doctag\">@Configuration</span> <span class=\"doctag\">@EnableAutoConfiguration</span> <span class=\"doctag\">@ComponentScan</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Configuration</span>标注配置类，即以往的XML配置文件被映射成了一个类</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@EnableAutoConfiguration</span>，表示由Spring Boot启动默认配置，如web项目将默认配置内置tomcat端口号8080</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@ComponentScan</span>放置在basePackage（例子中是com.example），com.example.*下的所有Java文件将被扫描解释</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DemoApplication</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 这里的args一般传的是配置类</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        SpringApplication.run(DemoApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"DemoApplicationTests-java\"><a href=\"#DemoApplicationTests-java\" class=\"headerlink\" title=\"DemoApplicationTests.java\"></a>DemoApplicationTests.java</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.junit.Test;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.junit.runner.RunWith;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.test.context.web.WebAppConfiguration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.test.SpringApplicationConfiguration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@RunWith</span>(SpringJUnit4ClassRunner.class) <span class=\"comment\">// 指定以spring-junit运行单元测试</span></span><br><span class=\"line\"><span class=\"meta\">@SpringApplicationConfiguration</span>(classes = DemoApplication.class) <span class=\"comment\">// 指定我们的应用类</span></span><br><span class=\"line\"><span class=\"meta\">@WebAppConfiguration</span> <span class=\"comment\">// 表明要测试的是一个web应用</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DemoApplicationTests</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">contextLoads</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"application-properties\"><a href=\"#application-properties\" class=\"headerlink\" title=\"application.properties\"></a>application.properties</h4><p>Spring Boot的默认配置文件，假设我在此文件有一个键值<code>name=jayzee</code>，那么我在java代码中可以直接使用如下（Spring Boot自动注入）：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Value</span>(<span class=\"string\">\"$&#123;name&#125;\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">private</span> String name;</span><br></pre></td></tr></table></figure>\n<p>我在此文件添加一个键值<code>server.port=8090</code>修改内置tomcat的默认端口为8090。</p>\n<h4 id=\"templates\"><a href=\"#templates\" class=\"headerlink\" title=\"templates\"></a>templates</h4><p><a href=\"http://docs.spring.io/spring-boot/docs/current-SNAPSHOT/reference/htmlsingle/#boot-features-spring-mvc-template-engines\" target=\"_blank\" rel=\"noopener\">Template engines</a>说到：</p>\n<ul>\n<li>此文件夹用于放置动态html如jsp（官网建议尽量少用，因为在内置tomcat下运行将不起作用）等其他模板文件</li>\n</ul>\n<h4 id=\"static\"><a href=\"#static\" class=\"headerlink\" title=\"static\"></a>static</h4><p><a href=\"http://docs.spring.io/spring-boot/docs/current-SNAPSHOT/reference/htmlsingle/#boot-features-spring-mvc-static-content\" target=\"_blank\" rel=\"noopener\">Static Content</a></p>\n<ul>\n<li>此文件用于存放静态资源文件如：html、js、css和json等</li>\n<li>如果这里存放有index.html，则默认作为项目的home page</li>\n<li>前台代码<code>&lt;link href=&quot;/css/spring-2a2d595e6ed9a0b24f027f2b63b134d6.css&quot;/&gt;</code>直接引用<code>/static/css/spring-2a2d595e6ed9a0b24f027f2b63b134d6.css</code></li>\n</ul>\n<h3 id=\"结尾\"><a href=\"#结尾\" class=\"headerlink\" title=\"结尾\"></a>结尾</h3><p>终端定位到demo项目，运行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn package</span><br><span class=\"line\">java -jar target/demo-0.0.1-SNAPSHOT.jar</span><br></pre></td></tr></table></figure>\n<p>访问<code>http://localhost:8090/</code>则可看到弹出一个登录窗口（因为我们引入了security组件）。</p>\n<p><a href=\"http://docs.spring.io/spring-boot/docs/current-SNAPSHOT/reference/htmlsingle/#boot-features-security\" target=\"_blank\" rel=\"noopener\">Security</a>提到，默认账户是<code>user</code>，随机密码在启动tomcat时在控制台打印。</p>\n<p>其他资源：</p>\n<ul>\n<li><a href=\"http://www.tianmaying.com/tutorial/spring-mvc-microblog\" target=\"_blank\" rel=\"noopener\">spring boot之login+jdbc完整例子</a></li>\n<li><a href=\"https://github.com/JayzeeZhang/spring-boot-demo\" target=\"_blank\" rel=\"noopener\">此博文demo项目源码</a></li>\n</ul>"},{"layout":"post","title":"读《富爸爸穷爸爸》","date":"2016-04-11T11:51:00.000Z","comments":1,"_content":"\nQ：为什么读这本书？\n\n<!--more-->\n\nA：工作至今近3年，总计到手工资收入20万左右，除去给家里的4万，剩余部分按30%至50%的强制储蓄结算至少得有5万到8万左右的结余。然而事实很残酷，我现在几乎零结余。我迫切需要改善自己的财务情况，于是重读这本理财启蒙书。\n\nQ：你从这本书感悟了什么？\nA：读书并结合自身情况，感悟以下——\n\n1. 财富观。**你拥有的财富是指在你不工作的情况下，能支撑你活多久**。与其相关的其一是收入和支出，在你不工作的情况下，你的收入和你的支出持平，你就等于实现了财富自由；其二是资产与负债，资产是指不需要你为之持续付出劳动但却能把钱放到你口袋里的东西（**最重要的资产是你头脑的智识**，作者也称其为财商，由会计、投资策略、市场和法律等知识组成，**所以必须不断的投资自己——不断的学习和调整**），负债是指不断把钱从你口袋拿走的东西。**对于资产，我们应坚持不对买入，而且坚决不变换资产以满足自己的消费需求。**\n\n2. 认真选择，并忠于选择。我们每天都在做选择，例如我现在选择写读后感而不是去午睡、有时候我选择赖床而不是早起读书。**认真选择其实就是热爱生命，为的是更好的活着**。认真选择的反面是赌博，那样做你只能终日祈祷上帝能帮帮你了。做完选择之后，必须忠于选择，就好像我选择了身体健康，那我必须每周花至少二小时的时间锻炼身体。关于选择的问题有二：**逃避选择也是一种选择，选择之后却不持之以恒。**\n\n3. **循序渐进——事物发展的规律**。我们打羽毛球，必定会经历犯错、修正、学习这三个过程，然后渐渐的我们犯的错越来越少了，打的球愈发让对手难受了，这是一个循序渐进的过程。但是对于理财，很多人想打破规律，如获得财富而不犯任何一次错误、不学习不行动就能致富。你必须学会与风险或者说失败打交道，并且不断学习和调整，才能真正致富。\n\n4. 工作不能解决全部问题。首先，**放眼身边获得财务自由的同事，没有一个是仅靠专注于工作达成的**；其次，目前工作对于我而言其终极目的是挣钱，也就是说其实我对挣钱的热情远大于对工作的热情，但为了把工作做得更好，我暗示自己我非常热爱工作是没有问题的，**而且两者并轨也较为稳妥，问题就在于我花在认识“钱”的时间太少了**；最后，除非你的工作收入非常之高或者将变得非常之高，**你必须关注于自己的事业**（能给自己带来第二收入的“工作”），否则你增长财富的速度将非常之慢。\n\n5. 打通一切。如查理芒格和刘老师所说，**你所学的一切智识必须将他们融合在一起并且能应用到实际**，尤其是改善自己的生活。\n\n6. 启发性思维。**承认问题在于自己要比认定问题在别人有效得多**，因为改变自己比改变别人容易，其次这也能激发自己去解决问题。**坚决不说“我不能”，而应该是“我如何能”**，如思考我如何在不动用资产的情况下五一劳动节外出旅游。\n\n7. 内心的支撑。不管是投资、工作还是生活，你必须能从中找到乐趣，这样你才能源源不断的为之注入动力。想一想，**还没赚到钱，自己就先快乐了，这是何等的幸福。同时必须明白自己想要和不想要什么，我们需要一种超现实的力量去支持自己走下去。另外，我们应该寻找和跟随自己内心的英雄，从他们身上汲取力量。**\n\n8. 目的性需要极强。很多时候我们显得非常之忙碌，**其实是不敢直面问题，直面问题需要目的性极强，而且需要有相当的勇气，因为它开始必定有些困难，但是困难的路必定越走越容易，这是客观的规律**。\n\n9. 先给予后获得。在社交中，你先对别人礼貌，别人才有可能对你礼貌。同样的，我们必须**先支付给自己的资产，才能获取资产的丰厚回报**。还有一定需要注意的是，我们必须对多久收回投资有个心理预期，否则就是不理性。\n\n10. **不要轻视圈子的力量以及群体的智慧**。慎重选择朋友，好的朋友在自己上升的同时也能福泽于你，而你在上升的同时也别忘了帮助于你的朋友。我们所处的时代让我们能迅速找到有用的智识，问题就在于你能不能理解它并把它用起来。\n\nQ：接下来你打算怎么做？\nA：以下——\n\n1. 量入为出：每月开销限制在2500，其余投入货币基金；\n2. 补充知识：继续补充理财相关的知识（书本和社区）；\n3. 发展事业：创造第二收入，同时实践买入其他资产（股票、债券和基金等）。\n","source":"_posts/2016-04-11-rich-and-poor-dad.markdown","raw":"---\nlayout: post\ntitle: 读《富爸爸穷爸爸》\ndate: '2016-04-11 19:51'\ncomments: true\ncategories: ['读书笔记']  \ntags: ['财商', '读书']\n---\n\nQ：为什么读这本书？\n\n<!--more-->\n\nA：工作至今近3年，总计到手工资收入20万左右，除去给家里的4万，剩余部分按30%至50%的强制储蓄结算至少得有5万到8万左右的结余。然而事实很残酷，我现在几乎零结余。我迫切需要改善自己的财务情况，于是重读这本理财启蒙书。\n\nQ：你从这本书感悟了什么？\nA：读书并结合自身情况，感悟以下——\n\n1. 财富观。**你拥有的财富是指在你不工作的情况下，能支撑你活多久**。与其相关的其一是收入和支出，在你不工作的情况下，你的收入和你的支出持平，你就等于实现了财富自由；其二是资产与负债，资产是指不需要你为之持续付出劳动但却能把钱放到你口袋里的东西（**最重要的资产是你头脑的智识**，作者也称其为财商，由会计、投资策略、市场和法律等知识组成，**所以必须不断的投资自己——不断的学习和调整**），负债是指不断把钱从你口袋拿走的东西。**对于资产，我们应坚持不对买入，而且坚决不变换资产以满足自己的消费需求。**\n\n2. 认真选择，并忠于选择。我们每天都在做选择，例如我现在选择写读后感而不是去午睡、有时候我选择赖床而不是早起读书。**认真选择其实就是热爱生命，为的是更好的活着**。认真选择的反面是赌博，那样做你只能终日祈祷上帝能帮帮你了。做完选择之后，必须忠于选择，就好像我选择了身体健康，那我必须每周花至少二小时的时间锻炼身体。关于选择的问题有二：**逃避选择也是一种选择，选择之后却不持之以恒。**\n\n3. **循序渐进——事物发展的规律**。我们打羽毛球，必定会经历犯错、修正、学习这三个过程，然后渐渐的我们犯的错越来越少了，打的球愈发让对手难受了，这是一个循序渐进的过程。但是对于理财，很多人想打破规律，如获得财富而不犯任何一次错误、不学习不行动就能致富。你必须学会与风险或者说失败打交道，并且不断学习和调整，才能真正致富。\n\n4. 工作不能解决全部问题。首先，**放眼身边获得财务自由的同事，没有一个是仅靠专注于工作达成的**；其次，目前工作对于我而言其终极目的是挣钱，也就是说其实我对挣钱的热情远大于对工作的热情，但为了把工作做得更好，我暗示自己我非常热爱工作是没有问题的，**而且两者并轨也较为稳妥，问题就在于我花在认识“钱”的时间太少了**；最后，除非你的工作收入非常之高或者将变得非常之高，**你必须关注于自己的事业**（能给自己带来第二收入的“工作”），否则你增长财富的速度将非常之慢。\n\n5. 打通一切。如查理芒格和刘老师所说，**你所学的一切智识必须将他们融合在一起并且能应用到实际**，尤其是改善自己的生活。\n\n6. 启发性思维。**承认问题在于自己要比认定问题在别人有效得多**，因为改变自己比改变别人容易，其次这也能激发自己去解决问题。**坚决不说“我不能”，而应该是“我如何能”**，如思考我如何在不动用资产的情况下五一劳动节外出旅游。\n\n7. 内心的支撑。不管是投资、工作还是生活，你必须能从中找到乐趣，这样你才能源源不断的为之注入动力。想一想，**还没赚到钱，自己就先快乐了，这是何等的幸福。同时必须明白自己想要和不想要什么，我们需要一种超现实的力量去支持自己走下去。另外，我们应该寻找和跟随自己内心的英雄，从他们身上汲取力量。**\n\n8. 目的性需要极强。很多时候我们显得非常之忙碌，**其实是不敢直面问题，直面问题需要目的性极强，而且需要有相当的勇气，因为它开始必定有些困难，但是困难的路必定越走越容易，这是客观的规律**。\n\n9. 先给予后获得。在社交中，你先对别人礼貌，别人才有可能对你礼貌。同样的，我们必须**先支付给自己的资产，才能获取资产的丰厚回报**。还有一定需要注意的是，我们必须对多久收回投资有个心理预期，否则就是不理性。\n\n10. **不要轻视圈子的力量以及群体的智慧**。慎重选择朋友，好的朋友在自己上升的同时也能福泽于你，而你在上升的同时也别忘了帮助于你的朋友。我们所处的时代让我们能迅速找到有用的智识，问题就在于你能不能理解它并把它用起来。\n\nQ：接下来你打算怎么做？\nA：以下——\n\n1. 量入为出：每月开销限制在2500，其余投入货币基金；\n2. 补充知识：继续补充理财相关的知识（书本和社区）；\n3. 发展事业：创造第二收入，同时实践买入其他资产（股票、债券和基金等）。\n","slug":"rich-and-poor-dad","published":1,"updated":"2017-04-09T14:42:54.000Z","photos":[],"link":"","_id":"cjlza6m47000bpgup38on6261","content":"<p>Q：为什么读这本书？</p>\n<a id=\"more\"></a>\n<p>A：工作至今近3年，总计到手工资收入20万左右，除去给家里的4万，剩余部分按30%至50%的强制储蓄结算至少得有5万到8万左右的结余。然而事实很残酷，我现在几乎零结余。我迫切需要改善自己的财务情况，于是重读这本理财启蒙书。</p>\n<p>Q：你从这本书感悟了什么？<br>A：读书并结合自身情况，感悟以下——</p>\n<ol>\n<li><p>财富观。<strong>你拥有的财富是指在你不工作的情况下，能支撑你活多久</strong>。与其相关的其一是收入和支出，在你不工作的情况下，你的收入和你的支出持平，你就等于实现了财富自由；其二是资产与负债，资产是指不需要你为之持续付出劳动但却能把钱放到你口袋里的东西（<strong>最重要的资产是你头脑的智识</strong>，作者也称其为财商，由会计、投资策略、市场和法律等知识组成，<strong>所以必须不断的投资自己——不断的学习和调整</strong>），负债是指不断把钱从你口袋拿走的东西。<strong>对于资产，我们应坚持不对买入，而且坚决不变换资产以满足自己的消费需求。</strong></p>\n</li>\n<li><p>认真选择，并忠于选择。我们每天都在做选择，例如我现在选择写读后感而不是去午睡、有时候我选择赖床而不是早起读书。<strong>认真选择其实就是热爱生命，为的是更好的活着</strong>。认真选择的反面是赌博，那样做你只能终日祈祷上帝能帮帮你了。做完选择之后，必须忠于选择，就好像我选择了身体健康，那我必须每周花至少二小时的时间锻炼身体。关于选择的问题有二：<strong>逃避选择也是一种选择，选择之后却不持之以恒。</strong></p>\n</li>\n<li><p><strong>循序渐进——事物发展的规律</strong>。我们打羽毛球，必定会经历犯错、修正、学习这三个过程，然后渐渐的我们犯的错越来越少了，打的球愈发让对手难受了，这是一个循序渐进的过程。但是对于理财，很多人想打破规律，如获得财富而不犯任何一次错误、不学习不行动就能致富。你必须学会与风险或者说失败打交道，并且不断学习和调整，才能真正致富。</p>\n</li>\n<li><p>工作不能解决全部问题。首先，<strong>放眼身边获得财务自由的同事，没有一个是仅靠专注于工作达成的</strong>；其次，目前工作对于我而言其终极目的是挣钱，也就是说其实我对挣钱的热情远大于对工作的热情，但为了把工作做得更好，我暗示自己我非常热爱工作是没有问题的，<strong>而且两者并轨也较为稳妥，问题就在于我花在认识“钱”的时间太少了</strong>；最后，除非你的工作收入非常之高或者将变得非常之高，<strong>你必须关注于自己的事业</strong>（能给自己带来第二收入的“工作”），否则你增长财富的速度将非常之慢。</p>\n</li>\n<li><p>打通一切。如查理芒格和刘老师所说，<strong>你所学的一切智识必须将他们融合在一起并且能应用到实际</strong>，尤其是改善自己的生活。</p>\n</li>\n<li><p>启发性思维。<strong>承认问题在于自己要比认定问题在别人有效得多</strong>，因为改变自己比改变别人容易，其次这也能激发自己去解决问题。<strong>坚决不说“我不能”，而应该是“我如何能”</strong>，如思考我如何在不动用资产的情况下五一劳动节外出旅游。</p>\n</li>\n<li><p>内心的支撑。不管是投资、工作还是生活，你必须能从中找到乐趣，这样你才能源源不断的为之注入动力。想一想，<strong>还没赚到钱，自己就先快乐了，这是何等的幸福。同时必须明白自己想要和不想要什么，我们需要一种超现实的力量去支持自己走下去。另外，我们应该寻找和跟随自己内心的英雄，从他们身上汲取力量。</strong></p>\n</li>\n<li><p>目的性需要极强。很多时候我们显得非常之忙碌，<strong>其实是不敢直面问题，直面问题需要目的性极强，而且需要有相当的勇气，因为它开始必定有些困难，但是困难的路必定越走越容易，这是客观的规律</strong>。</p>\n</li>\n<li><p>先给予后获得。在社交中，你先对别人礼貌，别人才有可能对你礼貌。同样的，我们必须<strong>先支付给自己的资产，才能获取资产的丰厚回报</strong>。还有一定需要注意的是，我们必须对多久收回投资有个心理预期，否则就是不理性。</p>\n</li>\n<li><p><strong>不要轻视圈子的力量以及群体的智慧</strong>。慎重选择朋友，好的朋友在自己上升的同时也能福泽于你，而你在上升的同时也别忘了帮助于你的朋友。我们所处的时代让我们能迅速找到有用的智识，问题就在于你能不能理解它并把它用起来。</p>\n</li>\n</ol>\n<p>Q：接下来你打算怎么做？<br>A：以下——</p>\n<ol>\n<li>量入为出：每月开销限制在2500，其余投入货币基金；</li>\n<li>补充知识：继续补充理财相关的知识（书本和社区）；</li>\n<li>发展事业：创造第二收入，同时实践买入其他资产（股票、债券和基金等）。</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>Q：为什么读这本书？</p>","more":"<p>A：工作至今近3年，总计到手工资收入20万左右，除去给家里的4万，剩余部分按30%至50%的强制储蓄结算至少得有5万到8万左右的结余。然而事实很残酷，我现在几乎零结余。我迫切需要改善自己的财务情况，于是重读这本理财启蒙书。</p>\n<p>Q：你从这本书感悟了什么？<br>A：读书并结合自身情况，感悟以下——</p>\n<ol>\n<li><p>财富观。<strong>你拥有的财富是指在你不工作的情况下，能支撑你活多久</strong>。与其相关的其一是收入和支出，在你不工作的情况下，你的收入和你的支出持平，你就等于实现了财富自由；其二是资产与负债，资产是指不需要你为之持续付出劳动但却能把钱放到你口袋里的东西（<strong>最重要的资产是你头脑的智识</strong>，作者也称其为财商，由会计、投资策略、市场和法律等知识组成，<strong>所以必须不断的投资自己——不断的学习和调整</strong>），负债是指不断把钱从你口袋拿走的东西。<strong>对于资产，我们应坚持不对买入，而且坚决不变换资产以满足自己的消费需求。</strong></p>\n</li>\n<li><p>认真选择，并忠于选择。我们每天都在做选择，例如我现在选择写读后感而不是去午睡、有时候我选择赖床而不是早起读书。<strong>认真选择其实就是热爱生命，为的是更好的活着</strong>。认真选择的反面是赌博，那样做你只能终日祈祷上帝能帮帮你了。做完选择之后，必须忠于选择，就好像我选择了身体健康，那我必须每周花至少二小时的时间锻炼身体。关于选择的问题有二：<strong>逃避选择也是一种选择，选择之后却不持之以恒。</strong></p>\n</li>\n<li><p><strong>循序渐进——事物发展的规律</strong>。我们打羽毛球，必定会经历犯错、修正、学习这三个过程，然后渐渐的我们犯的错越来越少了，打的球愈发让对手难受了，这是一个循序渐进的过程。但是对于理财，很多人想打破规律，如获得财富而不犯任何一次错误、不学习不行动就能致富。你必须学会与风险或者说失败打交道，并且不断学习和调整，才能真正致富。</p>\n</li>\n<li><p>工作不能解决全部问题。首先，<strong>放眼身边获得财务自由的同事，没有一个是仅靠专注于工作达成的</strong>；其次，目前工作对于我而言其终极目的是挣钱，也就是说其实我对挣钱的热情远大于对工作的热情，但为了把工作做得更好，我暗示自己我非常热爱工作是没有问题的，<strong>而且两者并轨也较为稳妥，问题就在于我花在认识“钱”的时间太少了</strong>；最后，除非你的工作收入非常之高或者将变得非常之高，<strong>你必须关注于自己的事业</strong>（能给自己带来第二收入的“工作”），否则你增长财富的速度将非常之慢。</p>\n</li>\n<li><p>打通一切。如查理芒格和刘老师所说，<strong>你所学的一切智识必须将他们融合在一起并且能应用到实际</strong>，尤其是改善自己的生活。</p>\n</li>\n<li><p>启发性思维。<strong>承认问题在于自己要比认定问题在别人有效得多</strong>，因为改变自己比改变别人容易，其次这也能激发自己去解决问题。<strong>坚决不说“我不能”，而应该是“我如何能”</strong>，如思考我如何在不动用资产的情况下五一劳动节外出旅游。</p>\n</li>\n<li><p>内心的支撑。不管是投资、工作还是生活，你必须能从中找到乐趣，这样你才能源源不断的为之注入动力。想一想，<strong>还没赚到钱，自己就先快乐了，这是何等的幸福。同时必须明白自己想要和不想要什么，我们需要一种超现实的力量去支持自己走下去。另外，我们应该寻找和跟随自己内心的英雄，从他们身上汲取力量。</strong></p>\n</li>\n<li><p>目的性需要极强。很多时候我们显得非常之忙碌，<strong>其实是不敢直面问题，直面问题需要目的性极强，而且需要有相当的勇气，因为它开始必定有些困难，但是困难的路必定越走越容易，这是客观的规律</strong>。</p>\n</li>\n<li><p>先给予后获得。在社交中，你先对别人礼貌，别人才有可能对你礼貌。同样的，我们必须<strong>先支付给自己的资产，才能获取资产的丰厚回报</strong>。还有一定需要注意的是，我们必须对多久收回投资有个心理预期，否则就是不理性。</p>\n</li>\n<li><p><strong>不要轻视圈子的力量以及群体的智慧</strong>。慎重选择朋友，好的朋友在自己上升的同时也能福泽于你，而你在上升的同时也别忘了帮助于你的朋友。我们所处的时代让我们能迅速找到有用的智识，问题就在于你能不能理解它并把它用起来。</p>\n</li>\n</ol>\n<p>Q：接下来你打算怎么做？<br>A：以下——</p>\n<ol>\n<li>量入为出：每月开销限制在2500，其余投入货币基金；</li>\n<li>补充知识：继续补充理财相关的知识（书本和社区）；</li>\n<li>发展事业：创造第二收入，同时实践买入其他资产（股票、债券和基金等）。</li>\n</ol>"},{"layout":"post","title":"读《苏菲的世界》","date":"2016-02-06T03:59:00.000Z","comments":1,"_content":"\n朋友[鹏举](http://suntus.github.io/)推荐的书，非常好的一本哲学史，三言两语写一些读书笔记。难免有遗漏或偏见，谬误之处，还望指正。\n\n<!--more-->\n\n## 希腊以前的哲学\n\n先人所流传下来的神话故事，是对世界存在的最初解释。\n\n此后是自然哲学派。其一派认为事物是一成不变的，我们的感官并不可信；另一派认为事物是不断变化的，人不可能踏进同一条河流；最后一派则认为前述两者同时成立，此人是德谟克利特斯，首先他赞成事物是流动的、是不断变化的，但这种流动背后却有不变的东西——那就是原子——大自然可被切割成的最小单位。\n\n## 希腊三哲\n\n一、苏格拉底。苏格拉底和孔子一样不立文字，当下我们所认识的苏格拉底其实是其学生柏拉图笔下的苏格拉底。这老小子很可爱，他谦卑好知，常常以自己一无所知为前提向他人发问，通过下定义和发现矛盾来确定某个命题是否为真，后人称之为苏格拉底反诘。他自诩知识的助产婆，认为知识其实已存在于我们心中，只是我们没有正确的把它提取出来而已。他亦是有原则之人，敌手逼迫他诋毁自己过去的一切爱智求真，他却宁愿赴死也要把这种精神传下去。\n\n二、柏拉图。他认为现实世界是不完美的，但我们心中却存在有对于完美的印象，他称此完美为理型，现实世界只是这个理型的影子。学院最早由他创立。\n\n三、亚里士多德。与柏拉图相反，他认为现实世界是完美的、理想的世界，我们的意识不过是现实世界的影子或说投影而已。他最早为所有事物进行分类，虽未如当下这样细致，但却开创了先河。\n\n希腊三哲之后经历了几百年的后希腊时代，主要是希腊三哲的延续，如犬儒学派、斯多葛学派和学院派等。\n\n## 中世纪\n\n基督诞生于公元零年，从公元零年至公元400年间，基督教与希腊哲学不断碰撞。从公元400年到公元1400年，基督教逐渐占据主流，经历了漫长有10个世纪的中世纪，这断时期哲学的发展是基督教神学不断视图将希腊哲学融入到神学中。\n\n## 文艺复兴\n\n文艺复兴的原因是不断发展的新资产阶级不满足于教会的精神压迫，所兴起的希腊文化复兴，藉此对抗教会。这断时期涌现了许多新的学说，但却不成系统。笛卡尔不满足于混乱不一的各学说，自行建立了新的哲学体系，黑格尔称他为“现代哲学之父”。\n\n笛卡尔是典型的二元论者，他把世界一分为二，意识和物质。意识指会思考的“我”，除此之外的为物质，他把动物也归为物质，认为动物不会思考。其哲学体系的核心基础是“我思故我在”，粗浅的解释是：我不能否定自己的存在，因为当我否定、怀疑时，我就已经存在。在笛卡尔的认识里，人是唯一的二元事物，融合意识与物质的肉体为一体。他还是个虔诚的基督徒，因为既然意识与物质这两个实体存在，则必定有存在创造这两个实体，这个存在即为上帝。笛卡尔提倡以理性（意识）认识世界，在他的《方法论》中，提出了4点：怀疑一切、分而治之、从简到繁以及总体校验。此4点指导了他以及后人的研究几百年之久。\n\n文艺复兴另有一位与笛卡尔论调不同的一元论者，斯诺宾莎。他认为世界是一个完整的整体，并没有意识与物质之分，上帝是这个整体存在的原因，上帝存在于万事万物之中。\n\n## 启蒙运动\n\n与笛卡尔严格把意识和物质分开不同，启蒙运动的哲学家强调经验主义。\n\n其一是洛克。洛克提出两个问题：我们的概念从何而来？我们的经验是否可信？第二个问题实际上是对第一个问题的回答，而第二个问题的答案对于洛克是肯定的。\n\n其二是休姆。休姆提出了印象与观念之分，印象是我们对事情的直接体验，观念则是我们对于印象的回忆。例如苹果是一个复合观念，它是由许多单一的印象组成的，如苹果的外观、颜色、气味和味道等等，休姆认为任何不能分解成单一印象的观念都值得怀疑。但与此同时，休姆又认为诸如上帝是否存在等问题是不可知的，因为我们既没有直接体验到上帝存在，也没有体验到上帝不存在。另外，休姆还提出了一种习惯性期待，我们只是因为经常把球离手后掉在地上联系才一起，才称球会掉在地上为必然（球在太空离手后会悬浮）。由于内心没有任何习惯性期待，因此休姆内心没有任何成见。\n\n其三是康德。假设你带着一个有色眼镜看世界，你的所见形成你对世界的认识，同时你的眼镜也影响了你认识世界。康德认为我们有两副与生俱来的眼睛（理性），时空观和因果律。时空观体现在我们认知到时间的不断流逝和空间的变化；因果律体现在万事万物必有其因果，以及人类会不断的追求原因，例如哲学的发展就是不断的追求一些原因。与休姆相同，康德认为上帝是否存在以及世界从哪里来等问题无法回答的，但因为因果律我们势必会不断的探寻这个问题。但既然一切皆有因果，人又有何自由意志可言？康德认为只有追求理想并不断依据内心的道德法则做出抉择时，我们才有真正的自由意志可言，这种道德法则其实就是己所不欲勿施于人。康德的墓志铭是：有两样东西我愈发觉得敬畏，一个是我头顶的星空，一个是我内心的道德法则。\n\n## 浪漫主义\n\n分别讲几位。\n\n一、祁克果。祁克果认为只有自己的存在才是真正重要的，人一旦两眼一闭，这个世界于他就没有关系了；既然只有我的存在才是真正重要的，那只有对我有用的真理才是真正重要的；关于信仰，他认为问题不在于上帝是否存在，而在于每个重要的存在对这个问题的自我解释是什么。\n\n二、黑格尔。黑格尔有几个重要的论断。一个是认为理性是动态的，好比一条历史的长河，你不能说其中某一段才是真正的河，同理你不能说哲学史的某一段才是真正的理性，脱离历史背景谈问题本身就不理性。二是认为理性是渐进的，某种程度上我们可以说笛卡尔比柏拉图是进步的，因为经历了漫长的时间对前人的知识进行加工。三是辩证法，事物的发展经历正、反和合三个阶段，例如理性主义是正，经验主义是反，而康德是两者的合，而康德的观点在下一个阶段可能又变成其他观点的正，重新经历正、反、合的演变。与辩证有关的第一个，他提出一种辩证的紧张关系，例如谷子越多磨坊磨得越起劲，以及暴政势必会有反抗；第二个他提出一种否定的思考，假使任何事情为正，寻求其反，最后得出综合。四是存在的即是合理的，当然这个合理也是动态的，时间最终会确定某一件事情是否正确，我们称此为理性的动态逻辑。\n\n三、达尔文。达尔文主义提出物种的演化是因为物竞天择，新达尔文主义提出这种演化本质上是因为适应环境的基因突变被自然选择了下来。达尔文解释了物种的演变。\n\n四、马克思。马克思认为社会基础决定上层建筑，同时上层建筑又反作用于社会基础。他认为社会基础由生产条件、生产工具和生产关系组成，人类历史的演变无非生产条件的掠夺，生产工具的进步和生产关系的调整。马克思解释了历史的演变。\n\n五、弗洛伊德。弗洛伊德的研究揭示了人并非完全理性的，因为我们不时受到了潜意识的影响。潜意识是我们所压抑的一些意识，弗洛伊德用会议室捣乱者做了很好的一个类比。为什么压抑意识？这需要谈论到本我、自我和超我的观点。婴儿时期，我们饿了就想喝奶，喝不到就会哭，这种本能的需求和反应即为本我；但本我的要求不一定都能得到满足，随着逐渐长大，我们必须妥协本我需求与现实的情况，此为自我；另外，这种妥协必须满足道德法则，此为超我。弗洛伊德认为人不过是头牲口，我们只是不断在变着法儿满足本我的要求而已，让潜意识与意识的门半遮半掩，人才能最大程度做到理性。\n\n## 近现代\n\n近现代更关注的是人存在相关的哲学问题，著名有法国哲学家萨特。\n\n首先，萨特认为必定是先有我们存在，才会我有我们是谁这个问题，但人并没有一成不变的关于这个问题的答案，因此我们必须自己创造自己——回答我到底是谁。萨特说我们就像还没来得及被台词就被赶上舞台的演员，既没有旁白，也没有提示，完全靠自己决定该如何去演出这一场戏。\n其次，萨特认为人是饱受自由之苦的。我们的自由的活着，同时我们又一定会死去，生不带来死不带去，那么我们还有何自由可言呢？他认为自有在我们忠于我们的内心，并为自己的选择负责任时，才是真正的自由。\n最后，萨特认为人会习惯性虚无化，他常用咖啡店多等待15分钟的例子来说明这种虚无化。\n\n近现代对于宇宙本源的主要解释是大爆炸理论：现今宇宙是不断扩张的，我们是处于宇宙大爆炸后的扩张期，未来宇宙又将重新聚合，而后又爆炸，如此反复。而我们也不过是宇宙的一颗星辰而已，我们头顶所见的星空，可能只是几百万年前的影像而已。头顶上过去的星空，帮助我们寻找我们最初的由来。\n\n## 结尾\n\n《苏菲的世界》开篇就提出：我们是谁？世界从哪里来？人活着就一定会死去。一个真正的哲学家，好奇心是必不可少的。\n\n感谢此书，带领我走向哲学:-)\n","source":"_posts/2016-02-06-sophie-s-world.markdown","raw":"---\nlayout: post\ntitle: 读《苏菲的世界》\ndate: '2016-02-06 11:59'\ncomments: true\ncategories: ['读书笔记']  \ntags: ['哲学', '读书']\n---\n\n朋友[鹏举](http://suntus.github.io/)推荐的书，非常好的一本哲学史，三言两语写一些读书笔记。难免有遗漏或偏见，谬误之处，还望指正。\n\n<!--more-->\n\n## 希腊以前的哲学\n\n先人所流传下来的神话故事，是对世界存在的最初解释。\n\n此后是自然哲学派。其一派认为事物是一成不变的，我们的感官并不可信；另一派认为事物是不断变化的，人不可能踏进同一条河流；最后一派则认为前述两者同时成立，此人是德谟克利特斯，首先他赞成事物是流动的、是不断变化的，但这种流动背后却有不变的东西——那就是原子——大自然可被切割成的最小单位。\n\n## 希腊三哲\n\n一、苏格拉底。苏格拉底和孔子一样不立文字，当下我们所认识的苏格拉底其实是其学生柏拉图笔下的苏格拉底。这老小子很可爱，他谦卑好知，常常以自己一无所知为前提向他人发问，通过下定义和发现矛盾来确定某个命题是否为真，后人称之为苏格拉底反诘。他自诩知识的助产婆，认为知识其实已存在于我们心中，只是我们没有正确的把它提取出来而已。他亦是有原则之人，敌手逼迫他诋毁自己过去的一切爱智求真，他却宁愿赴死也要把这种精神传下去。\n\n二、柏拉图。他认为现实世界是不完美的，但我们心中却存在有对于完美的印象，他称此完美为理型，现实世界只是这个理型的影子。学院最早由他创立。\n\n三、亚里士多德。与柏拉图相反，他认为现实世界是完美的、理想的世界，我们的意识不过是现实世界的影子或说投影而已。他最早为所有事物进行分类，虽未如当下这样细致，但却开创了先河。\n\n希腊三哲之后经历了几百年的后希腊时代，主要是希腊三哲的延续，如犬儒学派、斯多葛学派和学院派等。\n\n## 中世纪\n\n基督诞生于公元零年，从公元零年至公元400年间，基督教与希腊哲学不断碰撞。从公元400年到公元1400年，基督教逐渐占据主流，经历了漫长有10个世纪的中世纪，这断时期哲学的发展是基督教神学不断视图将希腊哲学融入到神学中。\n\n## 文艺复兴\n\n文艺复兴的原因是不断发展的新资产阶级不满足于教会的精神压迫，所兴起的希腊文化复兴，藉此对抗教会。这断时期涌现了许多新的学说，但却不成系统。笛卡尔不满足于混乱不一的各学说，自行建立了新的哲学体系，黑格尔称他为“现代哲学之父”。\n\n笛卡尔是典型的二元论者，他把世界一分为二，意识和物质。意识指会思考的“我”，除此之外的为物质，他把动物也归为物质，认为动物不会思考。其哲学体系的核心基础是“我思故我在”，粗浅的解释是：我不能否定自己的存在，因为当我否定、怀疑时，我就已经存在。在笛卡尔的认识里，人是唯一的二元事物，融合意识与物质的肉体为一体。他还是个虔诚的基督徒，因为既然意识与物质这两个实体存在，则必定有存在创造这两个实体，这个存在即为上帝。笛卡尔提倡以理性（意识）认识世界，在他的《方法论》中，提出了4点：怀疑一切、分而治之、从简到繁以及总体校验。此4点指导了他以及后人的研究几百年之久。\n\n文艺复兴另有一位与笛卡尔论调不同的一元论者，斯诺宾莎。他认为世界是一个完整的整体，并没有意识与物质之分，上帝是这个整体存在的原因，上帝存在于万事万物之中。\n\n## 启蒙运动\n\n与笛卡尔严格把意识和物质分开不同，启蒙运动的哲学家强调经验主义。\n\n其一是洛克。洛克提出两个问题：我们的概念从何而来？我们的经验是否可信？第二个问题实际上是对第一个问题的回答，而第二个问题的答案对于洛克是肯定的。\n\n其二是休姆。休姆提出了印象与观念之分，印象是我们对事情的直接体验，观念则是我们对于印象的回忆。例如苹果是一个复合观念，它是由许多单一的印象组成的，如苹果的外观、颜色、气味和味道等等，休姆认为任何不能分解成单一印象的观念都值得怀疑。但与此同时，休姆又认为诸如上帝是否存在等问题是不可知的，因为我们既没有直接体验到上帝存在，也没有体验到上帝不存在。另外，休姆还提出了一种习惯性期待，我们只是因为经常把球离手后掉在地上联系才一起，才称球会掉在地上为必然（球在太空离手后会悬浮）。由于内心没有任何习惯性期待，因此休姆内心没有任何成见。\n\n其三是康德。假设你带着一个有色眼镜看世界，你的所见形成你对世界的认识，同时你的眼镜也影响了你认识世界。康德认为我们有两副与生俱来的眼睛（理性），时空观和因果律。时空观体现在我们认知到时间的不断流逝和空间的变化；因果律体现在万事万物必有其因果，以及人类会不断的追求原因，例如哲学的发展就是不断的追求一些原因。与休姆相同，康德认为上帝是否存在以及世界从哪里来等问题无法回答的，但因为因果律我们势必会不断的探寻这个问题。但既然一切皆有因果，人又有何自由意志可言？康德认为只有追求理想并不断依据内心的道德法则做出抉择时，我们才有真正的自由意志可言，这种道德法则其实就是己所不欲勿施于人。康德的墓志铭是：有两样东西我愈发觉得敬畏，一个是我头顶的星空，一个是我内心的道德法则。\n\n## 浪漫主义\n\n分别讲几位。\n\n一、祁克果。祁克果认为只有自己的存在才是真正重要的，人一旦两眼一闭，这个世界于他就没有关系了；既然只有我的存在才是真正重要的，那只有对我有用的真理才是真正重要的；关于信仰，他认为问题不在于上帝是否存在，而在于每个重要的存在对这个问题的自我解释是什么。\n\n二、黑格尔。黑格尔有几个重要的论断。一个是认为理性是动态的，好比一条历史的长河，你不能说其中某一段才是真正的河，同理你不能说哲学史的某一段才是真正的理性，脱离历史背景谈问题本身就不理性。二是认为理性是渐进的，某种程度上我们可以说笛卡尔比柏拉图是进步的，因为经历了漫长的时间对前人的知识进行加工。三是辩证法，事物的发展经历正、反和合三个阶段，例如理性主义是正，经验主义是反，而康德是两者的合，而康德的观点在下一个阶段可能又变成其他观点的正，重新经历正、反、合的演变。与辩证有关的第一个，他提出一种辩证的紧张关系，例如谷子越多磨坊磨得越起劲，以及暴政势必会有反抗；第二个他提出一种否定的思考，假使任何事情为正，寻求其反，最后得出综合。四是存在的即是合理的，当然这个合理也是动态的，时间最终会确定某一件事情是否正确，我们称此为理性的动态逻辑。\n\n三、达尔文。达尔文主义提出物种的演化是因为物竞天择，新达尔文主义提出这种演化本质上是因为适应环境的基因突变被自然选择了下来。达尔文解释了物种的演变。\n\n四、马克思。马克思认为社会基础决定上层建筑，同时上层建筑又反作用于社会基础。他认为社会基础由生产条件、生产工具和生产关系组成，人类历史的演变无非生产条件的掠夺，生产工具的进步和生产关系的调整。马克思解释了历史的演变。\n\n五、弗洛伊德。弗洛伊德的研究揭示了人并非完全理性的，因为我们不时受到了潜意识的影响。潜意识是我们所压抑的一些意识，弗洛伊德用会议室捣乱者做了很好的一个类比。为什么压抑意识？这需要谈论到本我、自我和超我的观点。婴儿时期，我们饿了就想喝奶，喝不到就会哭，这种本能的需求和反应即为本我；但本我的要求不一定都能得到满足，随着逐渐长大，我们必须妥协本我需求与现实的情况，此为自我；另外，这种妥协必须满足道德法则，此为超我。弗洛伊德认为人不过是头牲口，我们只是不断在变着法儿满足本我的要求而已，让潜意识与意识的门半遮半掩，人才能最大程度做到理性。\n\n## 近现代\n\n近现代更关注的是人存在相关的哲学问题，著名有法国哲学家萨特。\n\n首先，萨特认为必定是先有我们存在，才会我有我们是谁这个问题，但人并没有一成不变的关于这个问题的答案，因此我们必须自己创造自己——回答我到底是谁。萨特说我们就像还没来得及被台词就被赶上舞台的演员，既没有旁白，也没有提示，完全靠自己决定该如何去演出这一场戏。\n其次，萨特认为人是饱受自由之苦的。我们的自由的活着，同时我们又一定会死去，生不带来死不带去，那么我们还有何自由可言呢？他认为自有在我们忠于我们的内心，并为自己的选择负责任时，才是真正的自由。\n最后，萨特认为人会习惯性虚无化，他常用咖啡店多等待15分钟的例子来说明这种虚无化。\n\n近现代对于宇宙本源的主要解释是大爆炸理论：现今宇宙是不断扩张的，我们是处于宇宙大爆炸后的扩张期，未来宇宙又将重新聚合，而后又爆炸，如此反复。而我们也不过是宇宙的一颗星辰而已，我们头顶所见的星空，可能只是几百万年前的影像而已。头顶上过去的星空，帮助我们寻找我们最初的由来。\n\n## 结尾\n\n《苏菲的世界》开篇就提出：我们是谁？世界从哪里来？人活着就一定会死去。一个真正的哲学家，好奇心是必不可少的。\n\n感谢此书，带领我走向哲学:-)\n","slug":"sophie-s-world","published":1,"updated":"2017-04-09T14:43:01.000Z","photos":[],"link":"","_id":"cjlza6m49000cpgup3zteybbe","content":"<p>朋友<a href=\"http://suntus.github.io/\" target=\"_blank\" rel=\"noopener\">鹏举</a>推荐的书，非常好的一本哲学史，三言两语写一些读书笔记。难免有遗漏或偏见，谬误之处，还望指正。</p>\n<a id=\"more\"></a>\n<h2 id=\"希腊以前的哲学\"><a href=\"#希腊以前的哲学\" class=\"headerlink\" title=\"希腊以前的哲学\"></a>希腊以前的哲学</h2><p>先人所流传下来的神话故事，是对世界存在的最初解释。</p>\n<p>此后是自然哲学派。其一派认为事物是一成不变的，我们的感官并不可信；另一派认为事物是不断变化的，人不可能踏进同一条河流；最后一派则认为前述两者同时成立，此人是德谟克利特斯，首先他赞成事物是流动的、是不断变化的，但这种流动背后却有不变的东西——那就是原子——大自然可被切割成的最小单位。</p>\n<h2 id=\"希腊三哲\"><a href=\"#希腊三哲\" class=\"headerlink\" title=\"希腊三哲\"></a>希腊三哲</h2><p>一、苏格拉底。苏格拉底和孔子一样不立文字，当下我们所认识的苏格拉底其实是其学生柏拉图笔下的苏格拉底。这老小子很可爱，他谦卑好知，常常以自己一无所知为前提向他人发问，通过下定义和发现矛盾来确定某个命题是否为真，后人称之为苏格拉底反诘。他自诩知识的助产婆，认为知识其实已存在于我们心中，只是我们没有正确的把它提取出来而已。他亦是有原则之人，敌手逼迫他诋毁自己过去的一切爱智求真，他却宁愿赴死也要把这种精神传下去。</p>\n<p>二、柏拉图。他认为现实世界是不完美的，但我们心中却存在有对于完美的印象，他称此完美为理型，现实世界只是这个理型的影子。学院最早由他创立。</p>\n<p>三、亚里士多德。与柏拉图相反，他认为现实世界是完美的、理想的世界，我们的意识不过是现实世界的影子或说投影而已。他最早为所有事物进行分类，虽未如当下这样细致，但却开创了先河。</p>\n<p>希腊三哲之后经历了几百年的后希腊时代，主要是希腊三哲的延续，如犬儒学派、斯多葛学派和学院派等。</p>\n<h2 id=\"中世纪\"><a href=\"#中世纪\" class=\"headerlink\" title=\"中世纪\"></a>中世纪</h2><p>基督诞生于公元零年，从公元零年至公元400年间，基督教与希腊哲学不断碰撞。从公元400年到公元1400年，基督教逐渐占据主流，经历了漫长有10个世纪的中世纪，这断时期哲学的发展是基督教神学不断视图将希腊哲学融入到神学中。</p>\n<h2 id=\"文艺复兴\"><a href=\"#文艺复兴\" class=\"headerlink\" title=\"文艺复兴\"></a>文艺复兴</h2><p>文艺复兴的原因是不断发展的新资产阶级不满足于教会的精神压迫，所兴起的希腊文化复兴，藉此对抗教会。这断时期涌现了许多新的学说，但却不成系统。笛卡尔不满足于混乱不一的各学说，自行建立了新的哲学体系，黑格尔称他为“现代哲学之父”。</p>\n<p>笛卡尔是典型的二元论者，他把世界一分为二，意识和物质。意识指会思考的“我”，除此之外的为物质，他把动物也归为物质，认为动物不会思考。其哲学体系的核心基础是“我思故我在”，粗浅的解释是：我不能否定自己的存在，因为当我否定、怀疑时，我就已经存在。在笛卡尔的认识里，人是唯一的二元事物，融合意识与物质的肉体为一体。他还是个虔诚的基督徒，因为既然意识与物质这两个实体存在，则必定有存在创造这两个实体，这个存在即为上帝。笛卡尔提倡以理性（意识）认识世界，在他的《方法论》中，提出了4点：怀疑一切、分而治之、从简到繁以及总体校验。此4点指导了他以及后人的研究几百年之久。</p>\n<p>文艺复兴另有一位与笛卡尔论调不同的一元论者，斯诺宾莎。他认为世界是一个完整的整体，并没有意识与物质之分，上帝是这个整体存在的原因，上帝存在于万事万物之中。</p>\n<h2 id=\"启蒙运动\"><a href=\"#启蒙运动\" class=\"headerlink\" title=\"启蒙运动\"></a>启蒙运动</h2><p>与笛卡尔严格把意识和物质分开不同，启蒙运动的哲学家强调经验主义。</p>\n<p>其一是洛克。洛克提出两个问题：我们的概念从何而来？我们的经验是否可信？第二个问题实际上是对第一个问题的回答，而第二个问题的答案对于洛克是肯定的。</p>\n<p>其二是休姆。休姆提出了印象与观念之分，印象是我们对事情的直接体验，观念则是我们对于印象的回忆。例如苹果是一个复合观念，它是由许多单一的印象组成的，如苹果的外观、颜色、气味和味道等等，休姆认为任何不能分解成单一印象的观念都值得怀疑。但与此同时，休姆又认为诸如上帝是否存在等问题是不可知的，因为我们既没有直接体验到上帝存在，也没有体验到上帝不存在。另外，休姆还提出了一种习惯性期待，我们只是因为经常把球离手后掉在地上联系才一起，才称球会掉在地上为必然（球在太空离手后会悬浮）。由于内心没有任何习惯性期待，因此休姆内心没有任何成见。</p>\n<p>其三是康德。假设你带着一个有色眼镜看世界，你的所见形成你对世界的认识，同时你的眼镜也影响了你认识世界。康德认为我们有两副与生俱来的眼睛（理性），时空观和因果律。时空观体现在我们认知到时间的不断流逝和空间的变化；因果律体现在万事万物必有其因果，以及人类会不断的追求原因，例如哲学的发展就是不断的追求一些原因。与休姆相同，康德认为上帝是否存在以及世界从哪里来等问题无法回答的，但因为因果律我们势必会不断的探寻这个问题。但既然一切皆有因果，人又有何自由意志可言？康德认为只有追求理想并不断依据内心的道德法则做出抉择时，我们才有真正的自由意志可言，这种道德法则其实就是己所不欲勿施于人。康德的墓志铭是：有两样东西我愈发觉得敬畏，一个是我头顶的星空，一个是我内心的道德法则。</p>\n<h2 id=\"浪漫主义\"><a href=\"#浪漫主义\" class=\"headerlink\" title=\"浪漫主义\"></a>浪漫主义</h2><p>分别讲几位。</p>\n<p>一、祁克果。祁克果认为只有自己的存在才是真正重要的，人一旦两眼一闭，这个世界于他就没有关系了；既然只有我的存在才是真正重要的，那只有对我有用的真理才是真正重要的；关于信仰，他认为问题不在于上帝是否存在，而在于每个重要的存在对这个问题的自我解释是什么。</p>\n<p>二、黑格尔。黑格尔有几个重要的论断。一个是认为理性是动态的，好比一条历史的长河，你不能说其中某一段才是真正的河，同理你不能说哲学史的某一段才是真正的理性，脱离历史背景谈问题本身就不理性。二是认为理性是渐进的，某种程度上我们可以说笛卡尔比柏拉图是进步的，因为经历了漫长的时间对前人的知识进行加工。三是辩证法，事物的发展经历正、反和合三个阶段，例如理性主义是正，经验主义是反，而康德是两者的合，而康德的观点在下一个阶段可能又变成其他观点的正，重新经历正、反、合的演变。与辩证有关的第一个，他提出一种辩证的紧张关系，例如谷子越多磨坊磨得越起劲，以及暴政势必会有反抗；第二个他提出一种否定的思考，假使任何事情为正，寻求其反，最后得出综合。四是存在的即是合理的，当然这个合理也是动态的，时间最终会确定某一件事情是否正确，我们称此为理性的动态逻辑。</p>\n<p>三、达尔文。达尔文主义提出物种的演化是因为物竞天择，新达尔文主义提出这种演化本质上是因为适应环境的基因突变被自然选择了下来。达尔文解释了物种的演变。</p>\n<p>四、马克思。马克思认为社会基础决定上层建筑，同时上层建筑又反作用于社会基础。他认为社会基础由生产条件、生产工具和生产关系组成，人类历史的演变无非生产条件的掠夺，生产工具的进步和生产关系的调整。马克思解释了历史的演变。</p>\n<p>五、弗洛伊德。弗洛伊德的研究揭示了人并非完全理性的，因为我们不时受到了潜意识的影响。潜意识是我们所压抑的一些意识，弗洛伊德用会议室捣乱者做了很好的一个类比。为什么压抑意识？这需要谈论到本我、自我和超我的观点。婴儿时期，我们饿了就想喝奶，喝不到就会哭，这种本能的需求和反应即为本我；但本我的要求不一定都能得到满足，随着逐渐长大，我们必须妥协本我需求与现实的情况，此为自我；另外，这种妥协必须满足道德法则，此为超我。弗洛伊德认为人不过是头牲口，我们只是不断在变着法儿满足本我的要求而已，让潜意识与意识的门半遮半掩，人才能最大程度做到理性。</p>\n<h2 id=\"近现代\"><a href=\"#近现代\" class=\"headerlink\" title=\"近现代\"></a>近现代</h2><p>近现代更关注的是人存在相关的哲学问题，著名有法国哲学家萨特。</p>\n<p>首先，萨特认为必定是先有我们存在，才会我有我们是谁这个问题，但人并没有一成不变的关于这个问题的答案，因此我们必须自己创造自己——回答我到底是谁。萨特说我们就像还没来得及被台词就被赶上舞台的演员，既没有旁白，也没有提示，完全靠自己决定该如何去演出这一场戏。<br>其次，萨特认为人是饱受自由之苦的。我们的自由的活着，同时我们又一定会死去，生不带来死不带去，那么我们还有何自由可言呢？他认为自有在我们忠于我们的内心，并为自己的选择负责任时，才是真正的自由。<br>最后，萨特认为人会习惯性虚无化，他常用咖啡店多等待15分钟的例子来说明这种虚无化。</p>\n<p>近现代对于宇宙本源的主要解释是大爆炸理论：现今宇宙是不断扩张的，我们是处于宇宙大爆炸后的扩张期，未来宇宙又将重新聚合，而后又爆炸，如此反复。而我们也不过是宇宙的一颗星辰而已，我们头顶所见的星空，可能只是几百万年前的影像而已。头顶上过去的星空，帮助我们寻找我们最初的由来。</p>\n<h2 id=\"结尾\"><a href=\"#结尾\" class=\"headerlink\" title=\"结尾\"></a>结尾</h2><p>《苏菲的世界》开篇就提出：我们是谁？世界从哪里来？人活着就一定会死去。一个真正的哲学家，好奇心是必不可少的。</p>\n<p>感谢此书，带领我走向哲学:-)</p>\n","site":{"data":{}},"excerpt":"<p>朋友<a href=\"http://suntus.github.io/\" target=\"_blank\" rel=\"noopener\">鹏举</a>推荐的书，非常好的一本哲学史，三言两语写一些读书笔记。难免有遗漏或偏见，谬误之处，还望指正。</p>","more":"<h2 id=\"希腊以前的哲学\"><a href=\"#希腊以前的哲学\" class=\"headerlink\" title=\"希腊以前的哲学\"></a>希腊以前的哲学</h2><p>先人所流传下来的神话故事，是对世界存在的最初解释。</p>\n<p>此后是自然哲学派。其一派认为事物是一成不变的，我们的感官并不可信；另一派认为事物是不断变化的，人不可能踏进同一条河流；最后一派则认为前述两者同时成立，此人是德谟克利特斯，首先他赞成事物是流动的、是不断变化的，但这种流动背后却有不变的东西——那就是原子——大自然可被切割成的最小单位。</p>\n<h2 id=\"希腊三哲\"><a href=\"#希腊三哲\" class=\"headerlink\" title=\"希腊三哲\"></a>希腊三哲</h2><p>一、苏格拉底。苏格拉底和孔子一样不立文字，当下我们所认识的苏格拉底其实是其学生柏拉图笔下的苏格拉底。这老小子很可爱，他谦卑好知，常常以自己一无所知为前提向他人发问，通过下定义和发现矛盾来确定某个命题是否为真，后人称之为苏格拉底反诘。他自诩知识的助产婆，认为知识其实已存在于我们心中，只是我们没有正确的把它提取出来而已。他亦是有原则之人，敌手逼迫他诋毁自己过去的一切爱智求真，他却宁愿赴死也要把这种精神传下去。</p>\n<p>二、柏拉图。他认为现实世界是不完美的，但我们心中却存在有对于完美的印象，他称此完美为理型，现实世界只是这个理型的影子。学院最早由他创立。</p>\n<p>三、亚里士多德。与柏拉图相反，他认为现实世界是完美的、理想的世界，我们的意识不过是现实世界的影子或说投影而已。他最早为所有事物进行分类，虽未如当下这样细致，但却开创了先河。</p>\n<p>希腊三哲之后经历了几百年的后希腊时代，主要是希腊三哲的延续，如犬儒学派、斯多葛学派和学院派等。</p>\n<h2 id=\"中世纪\"><a href=\"#中世纪\" class=\"headerlink\" title=\"中世纪\"></a>中世纪</h2><p>基督诞生于公元零年，从公元零年至公元400年间，基督教与希腊哲学不断碰撞。从公元400年到公元1400年，基督教逐渐占据主流，经历了漫长有10个世纪的中世纪，这断时期哲学的发展是基督教神学不断视图将希腊哲学融入到神学中。</p>\n<h2 id=\"文艺复兴\"><a href=\"#文艺复兴\" class=\"headerlink\" title=\"文艺复兴\"></a>文艺复兴</h2><p>文艺复兴的原因是不断发展的新资产阶级不满足于教会的精神压迫，所兴起的希腊文化复兴，藉此对抗教会。这断时期涌现了许多新的学说，但却不成系统。笛卡尔不满足于混乱不一的各学说，自行建立了新的哲学体系，黑格尔称他为“现代哲学之父”。</p>\n<p>笛卡尔是典型的二元论者，他把世界一分为二，意识和物质。意识指会思考的“我”，除此之外的为物质，他把动物也归为物质，认为动物不会思考。其哲学体系的核心基础是“我思故我在”，粗浅的解释是：我不能否定自己的存在，因为当我否定、怀疑时，我就已经存在。在笛卡尔的认识里，人是唯一的二元事物，融合意识与物质的肉体为一体。他还是个虔诚的基督徒，因为既然意识与物质这两个实体存在，则必定有存在创造这两个实体，这个存在即为上帝。笛卡尔提倡以理性（意识）认识世界，在他的《方法论》中，提出了4点：怀疑一切、分而治之、从简到繁以及总体校验。此4点指导了他以及后人的研究几百年之久。</p>\n<p>文艺复兴另有一位与笛卡尔论调不同的一元论者，斯诺宾莎。他认为世界是一个完整的整体，并没有意识与物质之分，上帝是这个整体存在的原因，上帝存在于万事万物之中。</p>\n<h2 id=\"启蒙运动\"><a href=\"#启蒙运动\" class=\"headerlink\" title=\"启蒙运动\"></a>启蒙运动</h2><p>与笛卡尔严格把意识和物质分开不同，启蒙运动的哲学家强调经验主义。</p>\n<p>其一是洛克。洛克提出两个问题：我们的概念从何而来？我们的经验是否可信？第二个问题实际上是对第一个问题的回答，而第二个问题的答案对于洛克是肯定的。</p>\n<p>其二是休姆。休姆提出了印象与观念之分，印象是我们对事情的直接体验，观念则是我们对于印象的回忆。例如苹果是一个复合观念，它是由许多单一的印象组成的，如苹果的外观、颜色、气味和味道等等，休姆认为任何不能分解成单一印象的观念都值得怀疑。但与此同时，休姆又认为诸如上帝是否存在等问题是不可知的，因为我们既没有直接体验到上帝存在，也没有体验到上帝不存在。另外，休姆还提出了一种习惯性期待，我们只是因为经常把球离手后掉在地上联系才一起，才称球会掉在地上为必然（球在太空离手后会悬浮）。由于内心没有任何习惯性期待，因此休姆内心没有任何成见。</p>\n<p>其三是康德。假设你带着一个有色眼镜看世界，你的所见形成你对世界的认识，同时你的眼镜也影响了你认识世界。康德认为我们有两副与生俱来的眼睛（理性），时空观和因果律。时空观体现在我们认知到时间的不断流逝和空间的变化；因果律体现在万事万物必有其因果，以及人类会不断的追求原因，例如哲学的发展就是不断的追求一些原因。与休姆相同，康德认为上帝是否存在以及世界从哪里来等问题无法回答的，但因为因果律我们势必会不断的探寻这个问题。但既然一切皆有因果，人又有何自由意志可言？康德认为只有追求理想并不断依据内心的道德法则做出抉择时，我们才有真正的自由意志可言，这种道德法则其实就是己所不欲勿施于人。康德的墓志铭是：有两样东西我愈发觉得敬畏，一个是我头顶的星空，一个是我内心的道德法则。</p>\n<h2 id=\"浪漫主义\"><a href=\"#浪漫主义\" class=\"headerlink\" title=\"浪漫主义\"></a>浪漫主义</h2><p>分别讲几位。</p>\n<p>一、祁克果。祁克果认为只有自己的存在才是真正重要的，人一旦两眼一闭，这个世界于他就没有关系了；既然只有我的存在才是真正重要的，那只有对我有用的真理才是真正重要的；关于信仰，他认为问题不在于上帝是否存在，而在于每个重要的存在对这个问题的自我解释是什么。</p>\n<p>二、黑格尔。黑格尔有几个重要的论断。一个是认为理性是动态的，好比一条历史的长河，你不能说其中某一段才是真正的河，同理你不能说哲学史的某一段才是真正的理性，脱离历史背景谈问题本身就不理性。二是认为理性是渐进的，某种程度上我们可以说笛卡尔比柏拉图是进步的，因为经历了漫长的时间对前人的知识进行加工。三是辩证法，事物的发展经历正、反和合三个阶段，例如理性主义是正，经验主义是反，而康德是两者的合，而康德的观点在下一个阶段可能又变成其他观点的正，重新经历正、反、合的演变。与辩证有关的第一个，他提出一种辩证的紧张关系，例如谷子越多磨坊磨得越起劲，以及暴政势必会有反抗；第二个他提出一种否定的思考，假使任何事情为正，寻求其反，最后得出综合。四是存在的即是合理的，当然这个合理也是动态的，时间最终会确定某一件事情是否正确，我们称此为理性的动态逻辑。</p>\n<p>三、达尔文。达尔文主义提出物种的演化是因为物竞天择，新达尔文主义提出这种演化本质上是因为适应环境的基因突变被自然选择了下来。达尔文解释了物种的演变。</p>\n<p>四、马克思。马克思认为社会基础决定上层建筑，同时上层建筑又反作用于社会基础。他认为社会基础由生产条件、生产工具和生产关系组成，人类历史的演变无非生产条件的掠夺，生产工具的进步和生产关系的调整。马克思解释了历史的演变。</p>\n<p>五、弗洛伊德。弗洛伊德的研究揭示了人并非完全理性的，因为我们不时受到了潜意识的影响。潜意识是我们所压抑的一些意识，弗洛伊德用会议室捣乱者做了很好的一个类比。为什么压抑意识？这需要谈论到本我、自我和超我的观点。婴儿时期，我们饿了就想喝奶，喝不到就会哭，这种本能的需求和反应即为本我；但本我的要求不一定都能得到满足，随着逐渐长大，我们必须妥协本我需求与现实的情况，此为自我；另外，这种妥协必须满足道德法则，此为超我。弗洛伊德认为人不过是头牲口，我们只是不断在变着法儿满足本我的要求而已，让潜意识与意识的门半遮半掩，人才能最大程度做到理性。</p>\n<h2 id=\"近现代\"><a href=\"#近现代\" class=\"headerlink\" title=\"近现代\"></a>近现代</h2><p>近现代更关注的是人存在相关的哲学问题，著名有法国哲学家萨特。</p>\n<p>首先，萨特认为必定是先有我们存在，才会我有我们是谁这个问题，但人并没有一成不变的关于这个问题的答案，因此我们必须自己创造自己——回答我到底是谁。萨特说我们就像还没来得及被台词就被赶上舞台的演员，既没有旁白，也没有提示，完全靠自己决定该如何去演出这一场戏。<br>其次，萨特认为人是饱受自由之苦的。我们的自由的活着，同时我们又一定会死去，生不带来死不带去，那么我们还有何自由可言呢？他认为自有在我们忠于我们的内心，并为自己的选择负责任时，才是真正的自由。<br>最后，萨特认为人会习惯性虚无化，他常用咖啡店多等待15分钟的例子来说明这种虚无化。</p>\n<p>近现代对于宇宙本源的主要解释是大爆炸理论：现今宇宙是不断扩张的，我们是处于宇宙大爆炸后的扩张期，未来宇宙又将重新聚合，而后又爆炸，如此反复。而我们也不过是宇宙的一颗星辰而已，我们头顶所见的星空，可能只是几百万年前的影像而已。头顶上过去的星空，帮助我们寻找我们最初的由来。</p>\n<h2 id=\"结尾\"><a href=\"#结尾\" class=\"headerlink\" title=\"结尾\"></a>结尾</h2><p>《苏菲的世界》开篇就提出：我们是谁？世界从哪里来？人活着就一定会死去。一个真正的哲学家，好奇心是必不可少的。</p>\n<p>感谢此书，带领我走向哲学:-)</p>"},{"layout":"post","title":"《深入理解计算机系统》读书笔记","date":"2015-11-21T07:18:00.000Z","comments":1,"_content":"\n本文为《深入理解计算机系统》的读书笔记。\n\n<!--more-->\n\n## 第1章 计算机系统漫游\n\n### 编译系统的构成及工作过程\n\n------\n\nhello.c（源程序**文本**）↓\n\n　　　　**预处理器(cpp)**↓\n\n　　　　hello.i（被修改的源程序**文本**）↓\n\n　　　　**编译器(ccl)**↓\n\n　　　　hello.s（汇编程序**文本**）↓\n\n　　　　**汇编器(as)**↓\n\n　　　　hello.o（可重定位目标程序**二进制文件**）+printf.o（引用的库文件）↓\n\n　　　　**链接器(ld)**↓\n\nhello(可执行目标程序**二进制文件**)\n\n------\n\n<!--more-->\n\nQ：多个C文件组成的程序是怎么被编译成一个程序的？\t\nA：一个.c文件+此c文件引用的所有.h文件汇编成.o文件，最后所有.o文件再链接成可执行二进制文件\n\nQ：cpp在预处理过程将头文件的内容直接插入到程序文本中，对于多个C文件引用同一个H文件，那不是会导致重复插入？\t\nA：头文件使用如下方式定义可防止宏重复定义或重复引用头文件：\n\n```c++\n#ifndef    __SOMEFILE_H__\n#define  __SOMEFILE_H__\n...... // 一些声明语句\n#endif\n```\n\n1) 预处理三种：宏定义+引用头文件+条件编译\t\n\n2) 在预处理阶段，多C文件引用头一个H文件，CPP预处理器还是会把H文件的内容插入到C文件的，但由于#ifndef的使用，程序在运行阶段并不会出现重复定义相同宏、相同变量或相同函数的情况。\n\n### 系统的硬件组成\n\n1. 总线：传送定长字节块(word)，即字；字的字节数（即字长）是一个基本的系统参数，如4字节（32位），8字节（64位）；\n2. I/O设备：磁盘也是I/O设备，直接存储器存取（DMA）技术可以使数据不经处理器从磁盘直接到达主存；I/O设备通过一个控制器（置于I/O设备本身或主板上的芯片组）或适配器（插在主板插槽上的卡）与I/O总线相连；\n3. 主存：动态随机存取存储器（DRAM），可看成一个极大的线性字节数组；\n4. 处理器：负责解释存储在主存中的指令；核心是一个字长的存储设备（或寄存器），称为程序计数器（PC），任何时刻PC都指向主存中的一条机器语言指令（含有其地址），其次是寄存器文件和算术逻辑单元（ALU）；\n\nQ：通常所说的32位机器和64位机器是由什么决定的？\t\nA：字长，即虚拟地址的字节数或总线传输的最小单元字的字节数。\n\nQ：指令集结构和微体系结构的区别是什么？\t\nA：**TODO**\n\n### 操作系统管理硬件\n\n1. 操作系统：应用程序和硬件间的一层软件，1）防止硬件被失控的应用滥用；2）通过简单且一致的机制来控制复杂而又大相径庭的硬件设备；\n2. 进程：并发指进一个进程的指令和其他进程的指令交错运行，实现这种交错运行叫做上下文切换，由内核代码负责，如保存PC、寄存器文件以及主存的内容；\n3. 线程：多控制流并行（同时执行）；\n4. 虚拟存储器：每个进程看到的是一致的存储器，即虚拟内存空间；地址从小到大依次是：\t\n\t**程序文本(.text)**（程序二进制文件）↓\t\n\n\t**文字常量区(.rodata)**（程序用到的常量字符串）↓\t\n\n\t**已初始化数据(.data)**（已初始化的全局或静态全局变量）↓\t\n\n\t**未初始化数据(.bss)**（未初始化的全局或静态全局变量）↓\t\n\n\t**堆**（malloc伸，free缩，或结束时操作系统释放）↓\t\n\n\t**共享库**（如标准库）↓\t\n\n\t**栈**（函数参数值，局部变量值）↓\t\n\n\t**内核虚拟存储器**\n5. 文件：即字节序列，每个I/O设备都可以视为文件；\n\n总结：文件是对I/O抽象，虚拟存储器是对主存抽象，进程是对运行程序抽象，虚拟机是对操作系统抽象。\n\nQ：举例说明上文提到的虚拟存储器？\t\nA：如下\n```c++\n//main.cpp\nint a = 0;          // 全局初始化区\nchar *p1;           // 全局未初始化区\n                    // built-in type之外的类型都不会默认初始化\nint main()\n{\n  int b;            // 栈区\n  char s[] = \"abc\"; // 栈区\n  char *p2;         // 栈区\n  char *p3 = \"123456\";     // \"123456/0\" 在常量区，p3在栈区\n  static int c =0;         // 全局（静态）初始化区\n \n  p1 = (char *)malloc(10);\n  p2 = (char *)malloc(20); // 分配得来的10和20字节的区域就在堆区\n \n  strcpy(p1, \"123456\");    // \"123456/0\" 放在常量区，编译器可能会将它\n                              // 与p3所指向的\"123456\"优化成一个地方。\n  return 0;\n}\n```\n\n### 并发与并行\n\n1. Inter Core i7有4个核心，每个核心可以执行2个线程（2个控制流，超线程），总共可以并行执行8个线程（多核+超线程）；\n2. 指令级并行：处理器同时执行多条指令；\n3. 单指令、多数据：允许一条指令产生多个可以并行执行的操作，称为单指令、多数据，如浮点数加法；\n\n## 第2章 信息的表示和处理\n\n### 信息存储\n\n1. 虚拟地址空间是展示给进程的，为程序提供一个看上去统一的字节数组，实际实现要配合随机访问存储器（RAM）、磁盘、特殊硬件和操作系统；\n2. 第1章提到的“字”的字节数即虚拟地址空间地址的字节数；\n3. 大端法：human-readable，按从左到右的方式书写，左端是高位；小端法与大端法相反；对于文本不需要考虑大端还是小端法，文本具有更强的平台独立性；\n4. 布尔运算与命题逻辑运算的对应：~对应NOT，&对应AND，|对应OR，^对应异或且`(a^b)^a=b`；\n5. 掩码运算：`x&0xFF`，只保留x的低8位；\n6. 逻辑运算||、&&和!与布尔运算的区别，1）运算不等价，逻辑运算的结果是0或1而布尔运算不然；2）结束条件不同，如果第一个运算就能确定逻辑运算表达式的值运算将终止；\n7. 移位运算：左移右补k个0；逻辑右移左补k个0，算术右移左补k个最高有效位的值；**无符号右移必须是逻辑的，有符号右移默认是算术的根据编译器不同也可能是逻辑的**；Java用`>>`表示算术右移，`>>>`表示逻辑右移；在运算中比加减乘除优先级低；当移动位k大于被移动数位数w时，采用`k mod w`计算位移量；\n\n### 整数表示\n\n1. long、int在不同位级机器上位数不同，需慎用，尽量使用`intN_t`或`uintN_t`，N表示位数；另外在printf的格式化过程中也需要注意这个问题，如不同机器对`%ld`的解释是不同的，另外，`%d`表示有符号整数（取值范围为`-2^(w-1)`到`2^(w-1)-1`），`%u`表示无符号整数（取值范围为`0`到`2^w-1`）；\n2. 补码表示负整数，最高位有效值表示负值；\n3. w位有符号整数x→无符号，位级表示相同：\n\t- 负数→`x+2^w`，\n\t- 非负数→x\n4. w位无符号整数u→有符号，位级表示相同：\n\t- u小于`2^(w-1)`→u，\n\t- u不小于`2^(w-1)`→`u-2^w`\n5. T表示有符号整数x有w位，C语言中，`TMax=2^(w-1)-1`，`TMin=-TMax-1`\n6. 零扩展添加0用于无符号数，符号扩展添加最高位有效值用于有符号数，高位转地位统一使用截断；\n7. 慎用无符号数用于整数运算，有符号负数转为无符号数时将变成一个大数，可能导致不健壮程序代码溢出；\n\nQ：为什么`TMin`要这样表示？\t\nA：**TODO**\n\n### 整数运算\n\n1. 无符号加法：\n\t- 超过`2^w`则减去`2^w`；\n2. 有符号加法（与无符号加法位模式一致，但高位表示符号位）：\n\t- 超过`2^(w-1)`正溢出减去`2^w`（两个正数相加）\n\t- 小于`-2^(w-1)`负溢出加上`2^w`（两个负数相加）\n\t- 否则正常；\n3. 补码非运算：\n\t- x等于`-2^(w-1)`时值不变高位\n\t- 否则等于-x；\n4. 乘法：\n\t- `(x * y) mod 2^w`，对于有符号先按有符号计算后再转为有符号，即位级表示相同；\n5. 乘以常数：\n\t- 化为位移和加减运算；\n6. 除以2的幂：\n\t- 整数除法总是舍入到0，同号是向下取整的，异号是向上取整的；\n\t- “除以2的幂”可使用右移模拟整数除法\n\t\t- 无符号数逻辑右移等价于整数除法\n\t\t- 有符号非负数算术右移等价于整数除法\n\t\t- 有符号负数算术右移不等价于整数除法（如-5除以2的情况），加偏置的思想：y整除x时得k，否则得k+1\n\nQ：证补码非等于其补加1：`-x=~x+1`\t\nA：根据定义分如下两种情况：\n\n- 定义1：x等于-2^(w-1)时值不变，由定义立即得证\n- 定义2：否则等于-x，等效于证明`~x+x+1=0`，`~x+x`的位全为1，立即得证\n\nQ：为什么有符号负数算术右移：`(x+2^k-1) >> k`能正确舍入？\t\nA：**TODO**\n\n### 浮点数\n\n1. 二进制小数表示法的弊端，1）只能精确表示`x * 2^y`形式的数，2）对于大数需要非常多的位表示；\n2. 浮点数定义：`(-1)^s * M * 2^E`\n\t- s为符号sign，由第一位表示；\n\t- M是尾数significand，由末尾的n位小数表示的二进制小数frac（简称f）表示；\n\t- E是阶码exponet，由中间k位的小数exp（简称e）表示，负责对M加权；\n\t- 它在位上的排列是（大端法）：s | exp | frac；\n3. 浮点数分类：\n\t- 非规格化：frac的位全为0，此时`M=f`，`E=1-Bias`，`Bias=2^(k-1) - 1`；\n\t- 规格化：frac的位不全为1，此时`M=1+f`，`E=e-Bias`，`Bias=2^(k-1) - 1`；\n\t- 特殊值：frac的位全为1，当exp全为0表示无穷大，否则表示NaN；\n4. 浮点数偶数舍入\n\t- 将数字向上或向下舍入，使结果最低有效数字位是偶数，如浮点数2.5和1.5的最低有效数字位是个位数的情况下都舍入到2\n\t- 适用于二进制数，二进制0是偶数，1是奇数\n\nQ：浮点数比二进制小数编码优异的地方在哪\t\nA：**TODO**\n\nQ：为什么要这样子编码浮点数\t\nA：**TODO**\n\nQ：试举例将正整数12345做浮点数二进制表示\t\t\nA：使用4个字节32位的单精度浮点数来编码，其中阶码k=8，尾数n=23，十进制12345二进制表示为：0000,0011,0000,0011,1001\n1. 由定义可知最大非规格化数`f*2^(1-Bias)`肯定是小于1的，因此12345肯定是使用规格化数字表示；\n2. 0000,0011,0000,0011,1001 = 二进制的1.**1,0000,0011,1001** * 2^13，由定义得**1,0000,0011,1001**等于f，f求得；而13=E=e-Bias=e-128得e的十进制表示为141即二进制1000,1101\n3. 则其浮点数二进制表示为0, 1000,1101, 000,0000,0001,0000,0011,1001\n","source":"_posts/2015-11-21-computer-systems.markdown","raw":"---\nlayout: post\ntitle: 《深入理解计算机系统》读书笔记\ndate: '2015-11-21 15:18'\ncomments: true\ncategories: ['读书笔记'] \ntags: ['计算机原理']\n---\n\n本文为《深入理解计算机系统》的读书笔记。\n\n<!--more-->\n\n## 第1章 计算机系统漫游\n\n### 编译系统的构成及工作过程\n\n------\n\nhello.c（源程序**文本**）↓\n\n　　　　**预处理器(cpp)**↓\n\n　　　　hello.i（被修改的源程序**文本**）↓\n\n　　　　**编译器(ccl)**↓\n\n　　　　hello.s（汇编程序**文本**）↓\n\n　　　　**汇编器(as)**↓\n\n　　　　hello.o（可重定位目标程序**二进制文件**）+printf.o（引用的库文件）↓\n\n　　　　**链接器(ld)**↓\n\nhello(可执行目标程序**二进制文件**)\n\n------\n\n<!--more-->\n\nQ：多个C文件组成的程序是怎么被编译成一个程序的？\t\nA：一个.c文件+此c文件引用的所有.h文件汇编成.o文件，最后所有.o文件再链接成可执行二进制文件\n\nQ：cpp在预处理过程将头文件的内容直接插入到程序文本中，对于多个C文件引用同一个H文件，那不是会导致重复插入？\t\nA：头文件使用如下方式定义可防止宏重复定义或重复引用头文件：\n\n```c++\n#ifndef    __SOMEFILE_H__\n#define  __SOMEFILE_H__\n...... // 一些声明语句\n#endif\n```\n\n1) 预处理三种：宏定义+引用头文件+条件编译\t\n\n2) 在预处理阶段，多C文件引用头一个H文件，CPP预处理器还是会把H文件的内容插入到C文件的，但由于#ifndef的使用，程序在运行阶段并不会出现重复定义相同宏、相同变量或相同函数的情况。\n\n### 系统的硬件组成\n\n1. 总线：传送定长字节块(word)，即字；字的字节数（即字长）是一个基本的系统参数，如4字节（32位），8字节（64位）；\n2. I/O设备：磁盘也是I/O设备，直接存储器存取（DMA）技术可以使数据不经处理器从磁盘直接到达主存；I/O设备通过一个控制器（置于I/O设备本身或主板上的芯片组）或适配器（插在主板插槽上的卡）与I/O总线相连；\n3. 主存：动态随机存取存储器（DRAM），可看成一个极大的线性字节数组；\n4. 处理器：负责解释存储在主存中的指令；核心是一个字长的存储设备（或寄存器），称为程序计数器（PC），任何时刻PC都指向主存中的一条机器语言指令（含有其地址），其次是寄存器文件和算术逻辑单元（ALU）；\n\nQ：通常所说的32位机器和64位机器是由什么决定的？\t\nA：字长，即虚拟地址的字节数或总线传输的最小单元字的字节数。\n\nQ：指令集结构和微体系结构的区别是什么？\t\nA：**TODO**\n\n### 操作系统管理硬件\n\n1. 操作系统：应用程序和硬件间的一层软件，1）防止硬件被失控的应用滥用；2）通过简单且一致的机制来控制复杂而又大相径庭的硬件设备；\n2. 进程：并发指进一个进程的指令和其他进程的指令交错运行，实现这种交错运行叫做上下文切换，由内核代码负责，如保存PC、寄存器文件以及主存的内容；\n3. 线程：多控制流并行（同时执行）；\n4. 虚拟存储器：每个进程看到的是一致的存储器，即虚拟内存空间；地址从小到大依次是：\t\n\t**程序文本(.text)**（程序二进制文件）↓\t\n\n\t**文字常量区(.rodata)**（程序用到的常量字符串）↓\t\n\n\t**已初始化数据(.data)**（已初始化的全局或静态全局变量）↓\t\n\n\t**未初始化数据(.bss)**（未初始化的全局或静态全局变量）↓\t\n\n\t**堆**（malloc伸，free缩，或结束时操作系统释放）↓\t\n\n\t**共享库**（如标准库）↓\t\n\n\t**栈**（函数参数值，局部变量值）↓\t\n\n\t**内核虚拟存储器**\n5. 文件：即字节序列，每个I/O设备都可以视为文件；\n\n总结：文件是对I/O抽象，虚拟存储器是对主存抽象，进程是对运行程序抽象，虚拟机是对操作系统抽象。\n\nQ：举例说明上文提到的虚拟存储器？\t\nA：如下\n```c++\n//main.cpp\nint a = 0;          // 全局初始化区\nchar *p1;           // 全局未初始化区\n                    // built-in type之外的类型都不会默认初始化\nint main()\n{\n  int b;            // 栈区\n  char s[] = \"abc\"; // 栈区\n  char *p2;         // 栈区\n  char *p3 = \"123456\";     // \"123456/0\" 在常量区，p3在栈区\n  static int c =0;         // 全局（静态）初始化区\n \n  p1 = (char *)malloc(10);\n  p2 = (char *)malloc(20); // 分配得来的10和20字节的区域就在堆区\n \n  strcpy(p1, \"123456\");    // \"123456/0\" 放在常量区，编译器可能会将它\n                              // 与p3所指向的\"123456\"优化成一个地方。\n  return 0;\n}\n```\n\n### 并发与并行\n\n1. Inter Core i7有4个核心，每个核心可以执行2个线程（2个控制流，超线程），总共可以并行执行8个线程（多核+超线程）；\n2. 指令级并行：处理器同时执行多条指令；\n3. 单指令、多数据：允许一条指令产生多个可以并行执行的操作，称为单指令、多数据，如浮点数加法；\n\n## 第2章 信息的表示和处理\n\n### 信息存储\n\n1. 虚拟地址空间是展示给进程的，为程序提供一个看上去统一的字节数组，实际实现要配合随机访问存储器（RAM）、磁盘、特殊硬件和操作系统；\n2. 第1章提到的“字”的字节数即虚拟地址空间地址的字节数；\n3. 大端法：human-readable，按从左到右的方式书写，左端是高位；小端法与大端法相反；对于文本不需要考虑大端还是小端法，文本具有更强的平台独立性；\n4. 布尔运算与命题逻辑运算的对应：~对应NOT，&对应AND，|对应OR，^对应异或且`(a^b)^a=b`；\n5. 掩码运算：`x&0xFF`，只保留x的低8位；\n6. 逻辑运算||、&&和!与布尔运算的区别，1）运算不等价，逻辑运算的结果是0或1而布尔运算不然；2）结束条件不同，如果第一个运算就能确定逻辑运算表达式的值运算将终止；\n7. 移位运算：左移右补k个0；逻辑右移左补k个0，算术右移左补k个最高有效位的值；**无符号右移必须是逻辑的，有符号右移默认是算术的根据编译器不同也可能是逻辑的**；Java用`>>`表示算术右移，`>>>`表示逻辑右移；在运算中比加减乘除优先级低；当移动位k大于被移动数位数w时，采用`k mod w`计算位移量；\n\n### 整数表示\n\n1. long、int在不同位级机器上位数不同，需慎用，尽量使用`intN_t`或`uintN_t`，N表示位数；另外在printf的格式化过程中也需要注意这个问题，如不同机器对`%ld`的解释是不同的，另外，`%d`表示有符号整数（取值范围为`-2^(w-1)`到`2^(w-1)-1`），`%u`表示无符号整数（取值范围为`0`到`2^w-1`）；\n2. 补码表示负整数，最高位有效值表示负值；\n3. w位有符号整数x→无符号，位级表示相同：\n\t- 负数→`x+2^w`，\n\t- 非负数→x\n4. w位无符号整数u→有符号，位级表示相同：\n\t- u小于`2^(w-1)`→u，\n\t- u不小于`2^(w-1)`→`u-2^w`\n5. T表示有符号整数x有w位，C语言中，`TMax=2^(w-1)-1`，`TMin=-TMax-1`\n6. 零扩展添加0用于无符号数，符号扩展添加最高位有效值用于有符号数，高位转地位统一使用截断；\n7. 慎用无符号数用于整数运算，有符号负数转为无符号数时将变成一个大数，可能导致不健壮程序代码溢出；\n\nQ：为什么`TMin`要这样表示？\t\nA：**TODO**\n\n### 整数运算\n\n1. 无符号加法：\n\t- 超过`2^w`则减去`2^w`；\n2. 有符号加法（与无符号加法位模式一致，但高位表示符号位）：\n\t- 超过`2^(w-1)`正溢出减去`2^w`（两个正数相加）\n\t- 小于`-2^(w-1)`负溢出加上`2^w`（两个负数相加）\n\t- 否则正常；\n3. 补码非运算：\n\t- x等于`-2^(w-1)`时值不变高位\n\t- 否则等于-x；\n4. 乘法：\n\t- `(x * y) mod 2^w`，对于有符号先按有符号计算后再转为有符号，即位级表示相同；\n5. 乘以常数：\n\t- 化为位移和加减运算；\n6. 除以2的幂：\n\t- 整数除法总是舍入到0，同号是向下取整的，异号是向上取整的；\n\t- “除以2的幂”可使用右移模拟整数除法\n\t\t- 无符号数逻辑右移等价于整数除法\n\t\t- 有符号非负数算术右移等价于整数除法\n\t\t- 有符号负数算术右移不等价于整数除法（如-5除以2的情况），加偏置的思想：y整除x时得k，否则得k+1\n\nQ：证补码非等于其补加1：`-x=~x+1`\t\nA：根据定义分如下两种情况：\n\n- 定义1：x等于-2^(w-1)时值不变，由定义立即得证\n- 定义2：否则等于-x，等效于证明`~x+x+1=0`，`~x+x`的位全为1，立即得证\n\nQ：为什么有符号负数算术右移：`(x+2^k-1) >> k`能正确舍入？\t\nA：**TODO**\n\n### 浮点数\n\n1. 二进制小数表示法的弊端，1）只能精确表示`x * 2^y`形式的数，2）对于大数需要非常多的位表示；\n2. 浮点数定义：`(-1)^s * M * 2^E`\n\t- s为符号sign，由第一位表示；\n\t- M是尾数significand，由末尾的n位小数表示的二进制小数frac（简称f）表示；\n\t- E是阶码exponet，由中间k位的小数exp（简称e）表示，负责对M加权；\n\t- 它在位上的排列是（大端法）：s | exp | frac；\n3. 浮点数分类：\n\t- 非规格化：frac的位全为0，此时`M=f`，`E=1-Bias`，`Bias=2^(k-1) - 1`；\n\t- 规格化：frac的位不全为1，此时`M=1+f`，`E=e-Bias`，`Bias=2^(k-1) - 1`；\n\t- 特殊值：frac的位全为1，当exp全为0表示无穷大，否则表示NaN；\n4. 浮点数偶数舍入\n\t- 将数字向上或向下舍入，使结果最低有效数字位是偶数，如浮点数2.5和1.5的最低有效数字位是个位数的情况下都舍入到2\n\t- 适用于二进制数，二进制0是偶数，1是奇数\n\nQ：浮点数比二进制小数编码优异的地方在哪\t\nA：**TODO**\n\nQ：为什么要这样子编码浮点数\t\nA：**TODO**\n\nQ：试举例将正整数12345做浮点数二进制表示\t\t\nA：使用4个字节32位的单精度浮点数来编码，其中阶码k=8，尾数n=23，十进制12345二进制表示为：0000,0011,0000,0011,1001\n1. 由定义可知最大非规格化数`f*2^(1-Bias)`肯定是小于1的，因此12345肯定是使用规格化数字表示；\n2. 0000,0011,0000,0011,1001 = 二进制的1.**1,0000,0011,1001** * 2^13，由定义得**1,0000,0011,1001**等于f，f求得；而13=E=e-Bias=e-128得e的十进制表示为141即二进制1000,1101\n3. 则其浮点数二进制表示为0, 1000,1101, 000,0000,0001,0000,0011,1001\n","slug":"computer-systems","published":1,"updated":"2017-04-09T14:46:25.000Z","photos":[],"link":"","_id":"cjlza6m4b000gpgup6aoapy3w","content":"<p>本文为《深入理解计算机系统》的读书笔记。</p>\n<a id=\"more\"></a>\n<h2 id=\"第1章-计算机系统漫游\"><a href=\"#第1章-计算机系统漫游\" class=\"headerlink\" title=\"第1章 计算机系统漫游\"></a>第1章 计算机系统漫游</h2><h3 id=\"编译系统的构成及工作过程\"><a href=\"#编译系统的构成及工作过程\" class=\"headerlink\" title=\"编译系统的构成及工作过程\"></a>编译系统的构成及工作过程</h3><hr>\n<p>hello.c（源程序<strong>文本</strong>）↓</p>\n<p>　　　　<strong>预处理器(cpp)</strong>↓</p>\n<p>　　　　hello.i（被修改的源程序<strong>文本</strong>）↓</p>\n<p>　　　　<strong>编译器(ccl)</strong>↓</p>\n<p>　　　　hello.s（汇编程序<strong>文本</strong>）↓</p>\n<p>　　　　<strong>汇编器(as)</strong>↓</p>\n<p>　　　　hello.o（可重定位目标程序<strong>二进制文件</strong>）+printf.o（引用的库文件）↓</p>\n<p>　　　　<strong>链接器(ld)</strong>↓</p>\n<p>hello(可执行目标程序<strong>二进制文件</strong>)</p>\n<hr>\n<!--more-->\n<p>Q：多个C文件组成的程序是怎么被编译成一个程序的？<br>A：一个.c文件+此c文件引用的所有.h文件汇编成.o文件，最后所有.o文件再链接成可执行二进制文件</p>\n<p>Q：cpp在预处理过程将头文件的内容直接插入到程序文本中，对于多个C文件引用同一个H文件，那不是会导致重复插入？<br>A：头文件使用如下方式定义可防止宏重复定义或重复引用头文件：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span>    __SOMEFILE_H__</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span>  __SOMEFILE_H__</span></span><br><span class=\"line\">...... <span class=\"comment\">// 一些声明语句</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br></pre></td></tr></table></figure>\n<p>1) 预处理三种：宏定义+引用头文件+条件编译    </p>\n<p>2) 在预处理阶段，多C文件引用头一个H文件，CPP预处理器还是会把H文件的内容插入到C文件的，但由于#ifndef的使用，程序在运行阶段并不会出现重复定义相同宏、相同变量或相同函数的情况。</p>\n<h3 id=\"系统的硬件组成\"><a href=\"#系统的硬件组成\" class=\"headerlink\" title=\"系统的硬件组成\"></a>系统的硬件组成</h3><ol>\n<li>总线：传送定长字节块(word)，即字；字的字节数（即字长）是一个基本的系统参数，如4字节（32位），8字节（64位）；</li>\n<li>I/O设备：磁盘也是I/O设备，直接存储器存取（DMA）技术可以使数据不经处理器从磁盘直接到达主存；I/O设备通过一个控制器（置于I/O设备本身或主板上的芯片组）或适配器（插在主板插槽上的卡）与I/O总线相连；</li>\n<li>主存：动态随机存取存储器（DRAM），可看成一个极大的线性字节数组；</li>\n<li>处理器：负责解释存储在主存中的指令；核心是一个字长的存储设备（或寄存器），称为程序计数器（PC），任何时刻PC都指向主存中的一条机器语言指令（含有其地址），其次是寄存器文件和算术逻辑单元（ALU）；</li>\n</ol>\n<p>Q：通常所说的32位机器和64位机器是由什么决定的？<br>A：字长，即虚拟地址的字节数或总线传输的最小单元字的字节数。</p>\n<p>Q：指令集结构和微体系结构的区别是什么？<br>A：<strong>TODO</strong></p>\n<h3 id=\"操作系统管理硬件\"><a href=\"#操作系统管理硬件\" class=\"headerlink\" title=\"操作系统管理硬件\"></a>操作系统管理硬件</h3><ol>\n<li>操作系统：应用程序和硬件间的一层软件，1）防止硬件被失控的应用滥用；2）通过简单且一致的机制来控制复杂而又大相径庭的硬件设备；</li>\n<li>进程：并发指进一个进程的指令和其他进程的指令交错运行，实现这种交错运行叫做上下文切换，由内核代码负责，如保存PC、寄存器文件以及主存的内容；</li>\n<li>线程：多控制流并行（同时执行）；</li>\n<li><p>虚拟存储器：每个进程看到的是一致的存储器，即虚拟内存空间；地址从小到大依次是：<br> <strong>程序文本(.text)</strong>（程序二进制文件）↓    </p>\n<p> <strong>文字常量区(.rodata)</strong>（程序用到的常量字符串）↓    </p>\n<p> <strong>已初始化数据(.data)</strong>（已初始化的全局或静态全局变量）↓    </p>\n<p> <strong>未初始化数据(.bss)</strong>（未初始化的全局或静态全局变量）↓    </p>\n<p> <strong>堆</strong>（malloc伸，free缩，或结束时操作系统释放）↓    </p>\n<p> <strong>共享库</strong>（如标准库）↓    </p>\n<p> <strong>栈</strong>（函数参数值，局部变量值）↓    </p>\n<p> <strong>内核虚拟存储器</strong></p>\n</li>\n<li>文件：即字节序列，每个I/O设备都可以视为文件；</li>\n</ol>\n<p>总结：文件是对I/O抽象，虚拟存储器是对主存抽象，进程是对运行程序抽象，虚拟机是对操作系统抽象。</p>\n<p>Q：举例说明上文提到的虚拟存储器？<br>A：如下<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//main.cpp</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> a = <span class=\"number\">0</span>;          <span class=\"comment\">// 全局初始化区</span></span><br><span class=\"line\"><span class=\"keyword\">char</span> *p1;           <span class=\"comment\">// 全局未初始化区</span></span><br><span class=\"line\">                    <span class=\"comment\">// built-in type之外的类型都不会默认初始化</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> b;            <span class=\"comment\">// 栈区</span></span><br><span class=\"line\">  <span class=\"keyword\">char</span> s[] = <span class=\"string\">\"abc\"</span>; <span class=\"comment\">// 栈区</span></span><br><span class=\"line\">  <span class=\"keyword\">char</span> *p2;         <span class=\"comment\">// 栈区</span></span><br><span class=\"line\">  <span class=\"keyword\">char</span> *p3 = <span class=\"string\">\"123456\"</span>;     <span class=\"comment\">// \"123456/0\" 在常量区，p3在栈区</span></span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> c =<span class=\"number\">0</span>;         <span class=\"comment\">// 全局（静态）初始化区</span></span><br><span class=\"line\"> </span><br><span class=\"line\">  p1 = (<span class=\"keyword\">char</span> *)<span class=\"built_in\">malloc</span>(<span class=\"number\">10</span>);</span><br><span class=\"line\">  p2 = (<span class=\"keyword\">char</span> *)<span class=\"built_in\">malloc</span>(<span class=\"number\">20</span>); <span class=\"comment\">// 分配得来的10和20字节的区域就在堆区</span></span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"built_in\">strcpy</span>(p1, <span class=\"string\">\"123456\"</span>);    <span class=\"comment\">// \"123456/0\" 放在常量区，编译器可能会将它</span></span><br><span class=\"line\">                              <span class=\"comment\">// 与p3所指向的\"123456\"优化成一个地方。</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"并发与并行\"><a href=\"#并发与并行\" class=\"headerlink\" title=\"并发与并行\"></a>并发与并行</h3><ol>\n<li>Inter Core i7有4个核心，每个核心可以执行2个线程（2个控制流，超线程），总共可以并行执行8个线程（多核+超线程）；</li>\n<li>指令级并行：处理器同时执行多条指令；</li>\n<li>单指令、多数据：允许一条指令产生多个可以并行执行的操作，称为单指令、多数据，如浮点数加法；</li>\n</ol>\n<h2 id=\"第2章-信息的表示和处理\"><a href=\"#第2章-信息的表示和处理\" class=\"headerlink\" title=\"第2章 信息的表示和处理\"></a>第2章 信息的表示和处理</h2><h3 id=\"信息存储\"><a href=\"#信息存储\" class=\"headerlink\" title=\"信息存储\"></a>信息存储</h3><ol>\n<li>虚拟地址空间是展示给进程的，为程序提供一个看上去统一的字节数组，实际实现要配合随机访问存储器（RAM）、磁盘、特殊硬件和操作系统；</li>\n<li>第1章提到的“字”的字节数即虚拟地址空间地址的字节数；</li>\n<li>大端法：human-readable，按从左到右的方式书写，左端是高位；小端法与大端法相反；对于文本不需要考虑大端还是小端法，文本具有更强的平台独立性；</li>\n<li>布尔运算与命题逻辑运算的对应：~对应NOT，&amp;对应AND，|对应OR，^对应异或且<code>(a^b)^a=b</code>；</li>\n<li>掩码运算：<code>x&amp;0xFF</code>，只保留x的低8位；</li>\n<li>逻辑运算||、&amp;&amp;和!与布尔运算的区别，1）运算不等价，逻辑运算的结果是0或1而布尔运算不然；2）结束条件不同，如果第一个运算就能确定逻辑运算表达式的值运算将终止；</li>\n<li>移位运算：左移右补k个0；逻辑右移左补k个0，算术右移左补k个最高有效位的值；<strong>无符号右移必须是逻辑的，有符号右移默认是算术的根据编译器不同也可能是逻辑的</strong>；Java用<code>&gt;&gt;</code>表示算术右移，<code>&gt;&gt;&gt;</code>表示逻辑右移；在运算中比加减乘除优先级低；当移动位k大于被移动数位数w时，采用<code>k mod w</code>计算位移量；</li>\n</ol>\n<h3 id=\"整数表示\"><a href=\"#整数表示\" class=\"headerlink\" title=\"整数表示\"></a>整数表示</h3><ol>\n<li>long、int在不同位级机器上位数不同，需慎用，尽量使用<code>intN_t</code>或<code>uintN_t</code>，N表示位数；另外在printf的格式化过程中也需要注意这个问题，如不同机器对<code>%ld</code>的解释是不同的，另外，<code>%d</code>表示有符号整数（取值范围为<code>-2^(w-1)</code>到<code>2^(w-1)-1</code>），<code>%u</code>表示无符号整数（取值范围为<code>0</code>到<code>2^w-1</code>）；</li>\n<li>补码表示负整数，最高位有效值表示负值；</li>\n<li>w位有符号整数x→无符号，位级表示相同：<ul>\n<li>负数→<code>x+2^w</code>，</li>\n<li>非负数→x</li>\n</ul>\n</li>\n<li>w位无符号整数u→有符号，位级表示相同：<ul>\n<li>u小于<code>2^(w-1)</code>→u，</li>\n<li>u不小于<code>2^(w-1)</code>→<code>u-2^w</code></li>\n</ul>\n</li>\n<li>T表示有符号整数x有w位，C语言中，<code>TMax=2^(w-1)-1</code>，<code>TMin=-TMax-1</code></li>\n<li>零扩展添加0用于无符号数，符号扩展添加最高位有效值用于有符号数，高位转地位统一使用截断；</li>\n<li>慎用无符号数用于整数运算，有符号负数转为无符号数时将变成一个大数，可能导致不健壮程序代码溢出；</li>\n</ol>\n<p>Q：为什么<code>TMin</code>要这样表示？<br>A：<strong>TODO</strong></p>\n<h3 id=\"整数运算\"><a href=\"#整数运算\" class=\"headerlink\" title=\"整数运算\"></a>整数运算</h3><ol>\n<li>无符号加法：<ul>\n<li>超过<code>2^w</code>则减去<code>2^w</code>；</li>\n</ul>\n</li>\n<li>有符号加法（与无符号加法位模式一致，但高位表示符号位）：<ul>\n<li>超过<code>2^(w-1)</code>正溢出减去<code>2^w</code>（两个正数相加）</li>\n<li>小于<code>-2^(w-1)</code>负溢出加上<code>2^w</code>（两个负数相加）</li>\n<li>否则正常；</li>\n</ul>\n</li>\n<li>补码非运算：<ul>\n<li>x等于<code>-2^(w-1)</code>时值不变高位</li>\n<li>否则等于-x；</li>\n</ul>\n</li>\n<li>乘法：<ul>\n<li><code>(x * y) mod 2^w</code>，对于有符号先按有符号计算后再转为有符号，即位级表示相同；</li>\n</ul>\n</li>\n<li>乘以常数：<ul>\n<li>化为位移和加减运算；</li>\n</ul>\n</li>\n<li>除以2的幂：<ul>\n<li>整数除法总是舍入到0，同号是向下取整的，异号是向上取整的；</li>\n<li>“除以2的幂”可使用右移模拟整数除法<ul>\n<li>无符号数逻辑右移等价于整数除法</li>\n<li>有符号非负数算术右移等价于整数除法</li>\n<li>有符号负数算术右移不等价于整数除法（如-5除以2的情况），加偏置的思想：y整除x时得k，否则得k+1</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<p>Q：证补码非等于其补加1：<code>-x=~x+1</code><br>A：根据定义分如下两种情况：</p>\n<ul>\n<li>定义1：x等于-2^(w-1)时值不变，由定义立即得证</li>\n<li>定义2：否则等于-x，等效于证明<code>~x+x+1=0</code>，<code>~x+x</code>的位全为1，立即得证</li>\n</ul>\n<p>Q：为什么有符号负数算术右移：<code>(x+2^k-1) &gt;&gt; k</code>能正确舍入？<br>A：<strong>TODO</strong></p>\n<h3 id=\"浮点数\"><a href=\"#浮点数\" class=\"headerlink\" title=\"浮点数\"></a>浮点数</h3><ol>\n<li>二进制小数表示法的弊端，1）只能精确表示<code>x * 2^y</code>形式的数，2）对于大数需要非常多的位表示；</li>\n<li>浮点数定义：<code>(-1)^s * M * 2^E</code><ul>\n<li>s为符号sign，由第一位表示；</li>\n<li>M是尾数significand，由末尾的n位小数表示的二进制小数frac（简称f）表示；</li>\n<li>E是阶码exponet，由中间k位的小数exp（简称e）表示，负责对M加权；</li>\n<li>它在位上的排列是（大端法）：s | exp | frac；</li>\n</ul>\n</li>\n<li>浮点数分类：<ul>\n<li>非规格化：frac的位全为0，此时<code>M=f</code>，<code>E=1-Bias</code>，<code>Bias=2^(k-1) - 1</code>；</li>\n<li>规格化：frac的位不全为1，此时<code>M=1+f</code>，<code>E=e-Bias</code>，<code>Bias=2^(k-1) - 1</code>；</li>\n<li>特殊值：frac的位全为1，当exp全为0表示无穷大，否则表示NaN；</li>\n</ul>\n</li>\n<li>浮点数偶数舍入<ul>\n<li>将数字向上或向下舍入，使结果最低有效数字位是偶数，如浮点数2.5和1.5的最低有效数字位是个位数的情况下都舍入到2</li>\n<li>适用于二进制数，二进制0是偶数，1是奇数</li>\n</ul>\n</li>\n</ol>\n<p>Q：浮点数比二进制小数编码优异的地方在哪<br>A：<strong>TODO</strong></p>\n<p>Q：为什么要这样子编码浮点数<br>A：<strong>TODO</strong></p>\n<p>Q：试举例将正整数12345做浮点数二进制表示<br>A：使用4个字节32位的单精度浮点数来编码，其中阶码k=8，尾数n=23，十进制12345二进制表示为：0000,0011,0000,0011,1001</p>\n<ol>\n<li>由定义可知最大非规格化数<code>f*2^(1-Bias)</code>肯定是小于1的，因此12345肯定是使用规格化数字表示；</li>\n<li>0000,0011,0000,0011,1001 = 二进制的1.<strong>1,0000,0011,1001</strong> * 2^13，由定义得<strong>1,0000,0011,1001</strong>等于f，f求得；而13=E=e-Bias=e-128得e的十进制表示为141即二进制1000,1101</li>\n<li>则其浮点数二进制表示为0, 1000,1101, 000,0000,0001,0000,0011,1001</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>本文为《深入理解计算机系统》的读书笔记。</p>","more":"<h2 id=\"第1章-计算机系统漫游\"><a href=\"#第1章-计算机系统漫游\" class=\"headerlink\" title=\"第1章 计算机系统漫游\"></a>第1章 计算机系统漫游</h2><h3 id=\"编译系统的构成及工作过程\"><a href=\"#编译系统的构成及工作过程\" class=\"headerlink\" title=\"编译系统的构成及工作过程\"></a>编译系统的构成及工作过程</h3><hr>\n<p>hello.c（源程序<strong>文本</strong>）↓</p>\n<p>　　　　<strong>预处理器(cpp)</strong>↓</p>\n<p>　　　　hello.i（被修改的源程序<strong>文本</strong>）↓</p>\n<p>　　　　<strong>编译器(ccl)</strong>↓</p>\n<p>　　　　hello.s（汇编程序<strong>文本</strong>）↓</p>\n<p>　　　　<strong>汇编器(as)</strong>↓</p>\n<p>　　　　hello.o（可重定位目标程序<strong>二进制文件</strong>）+printf.o（引用的库文件）↓</p>\n<p>　　　　<strong>链接器(ld)</strong>↓</p>\n<p>hello(可执行目标程序<strong>二进制文件</strong>)</p>\n<hr>\n<!--more-->\n<p>Q：多个C文件组成的程序是怎么被编译成一个程序的？<br>A：一个.c文件+此c文件引用的所有.h文件汇编成.o文件，最后所有.o文件再链接成可执行二进制文件</p>\n<p>Q：cpp在预处理过程将头文件的内容直接插入到程序文本中，对于多个C文件引用同一个H文件，那不是会导致重复插入？<br>A：头文件使用如下方式定义可防止宏重复定义或重复引用头文件：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span>    __SOMEFILE_H__</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span>  __SOMEFILE_H__</span></span><br><span class=\"line\">...... <span class=\"comment\">// 一些声明语句</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br></pre></td></tr></table></figure>\n<p>1) 预处理三种：宏定义+引用头文件+条件编译    </p>\n<p>2) 在预处理阶段，多C文件引用头一个H文件，CPP预处理器还是会把H文件的内容插入到C文件的，但由于#ifndef的使用，程序在运行阶段并不会出现重复定义相同宏、相同变量或相同函数的情况。</p>\n<h3 id=\"系统的硬件组成\"><a href=\"#系统的硬件组成\" class=\"headerlink\" title=\"系统的硬件组成\"></a>系统的硬件组成</h3><ol>\n<li>总线：传送定长字节块(word)，即字；字的字节数（即字长）是一个基本的系统参数，如4字节（32位），8字节（64位）；</li>\n<li>I/O设备：磁盘也是I/O设备，直接存储器存取（DMA）技术可以使数据不经处理器从磁盘直接到达主存；I/O设备通过一个控制器（置于I/O设备本身或主板上的芯片组）或适配器（插在主板插槽上的卡）与I/O总线相连；</li>\n<li>主存：动态随机存取存储器（DRAM），可看成一个极大的线性字节数组；</li>\n<li>处理器：负责解释存储在主存中的指令；核心是一个字长的存储设备（或寄存器），称为程序计数器（PC），任何时刻PC都指向主存中的一条机器语言指令（含有其地址），其次是寄存器文件和算术逻辑单元（ALU）；</li>\n</ol>\n<p>Q：通常所说的32位机器和64位机器是由什么决定的？<br>A：字长，即虚拟地址的字节数或总线传输的最小单元字的字节数。</p>\n<p>Q：指令集结构和微体系结构的区别是什么？<br>A：<strong>TODO</strong></p>\n<h3 id=\"操作系统管理硬件\"><a href=\"#操作系统管理硬件\" class=\"headerlink\" title=\"操作系统管理硬件\"></a>操作系统管理硬件</h3><ol>\n<li>操作系统：应用程序和硬件间的一层软件，1）防止硬件被失控的应用滥用；2）通过简单且一致的机制来控制复杂而又大相径庭的硬件设备；</li>\n<li>进程：并发指进一个进程的指令和其他进程的指令交错运行，实现这种交错运行叫做上下文切换，由内核代码负责，如保存PC、寄存器文件以及主存的内容；</li>\n<li>线程：多控制流并行（同时执行）；</li>\n<li><p>虚拟存储器：每个进程看到的是一致的存储器，即虚拟内存空间；地址从小到大依次是：<br> <strong>程序文本(.text)</strong>（程序二进制文件）↓    </p>\n<p> <strong>文字常量区(.rodata)</strong>（程序用到的常量字符串）↓    </p>\n<p> <strong>已初始化数据(.data)</strong>（已初始化的全局或静态全局变量）↓    </p>\n<p> <strong>未初始化数据(.bss)</strong>（未初始化的全局或静态全局变量）↓    </p>\n<p> <strong>堆</strong>（malloc伸，free缩，或结束时操作系统释放）↓    </p>\n<p> <strong>共享库</strong>（如标准库）↓    </p>\n<p> <strong>栈</strong>（函数参数值，局部变量值）↓    </p>\n<p> <strong>内核虚拟存储器</strong></p>\n</li>\n<li>文件：即字节序列，每个I/O设备都可以视为文件；</li>\n</ol>\n<p>总结：文件是对I/O抽象，虚拟存储器是对主存抽象，进程是对运行程序抽象，虚拟机是对操作系统抽象。</p>\n<p>Q：举例说明上文提到的虚拟存储器？<br>A：如下<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//main.cpp</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> a = <span class=\"number\">0</span>;          <span class=\"comment\">// 全局初始化区</span></span><br><span class=\"line\"><span class=\"keyword\">char</span> *p1;           <span class=\"comment\">// 全局未初始化区</span></span><br><span class=\"line\">                    <span class=\"comment\">// built-in type之外的类型都不会默认初始化</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> b;            <span class=\"comment\">// 栈区</span></span><br><span class=\"line\">  <span class=\"keyword\">char</span> s[] = <span class=\"string\">\"abc\"</span>; <span class=\"comment\">// 栈区</span></span><br><span class=\"line\">  <span class=\"keyword\">char</span> *p2;         <span class=\"comment\">// 栈区</span></span><br><span class=\"line\">  <span class=\"keyword\">char</span> *p3 = <span class=\"string\">\"123456\"</span>;     <span class=\"comment\">// \"123456/0\" 在常量区，p3在栈区</span></span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> c =<span class=\"number\">0</span>;         <span class=\"comment\">// 全局（静态）初始化区</span></span><br><span class=\"line\"> </span><br><span class=\"line\">  p1 = (<span class=\"keyword\">char</span> *)<span class=\"built_in\">malloc</span>(<span class=\"number\">10</span>);</span><br><span class=\"line\">  p2 = (<span class=\"keyword\">char</span> *)<span class=\"built_in\">malloc</span>(<span class=\"number\">20</span>); <span class=\"comment\">// 分配得来的10和20字节的区域就在堆区</span></span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"built_in\">strcpy</span>(p1, <span class=\"string\">\"123456\"</span>);    <span class=\"comment\">// \"123456/0\" 放在常量区，编译器可能会将它</span></span><br><span class=\"line\">                              <span class=\"comment\">// 与p3所指向的\"123456\"优化成一个地方。</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"并发与并行\"><a href=\"#并发与并行\" class=\"headerlink\" title=\"并发与并行\"></a>并发与并行</h3><ol>\n<li>Inter Core i7有4个核心，每个核心可以执行2个线程（2个控制流，超线程），总共可以并行执行8个线程（多核+超线程）；</li>\n<li>指令级并行：处理器同时执行多条指令；</li>\n<li>单指令、多数据：允许一条指令产生多个可以并行执行的操作，称为单指令、多数据，如浮点数加法；</li>\n</ol>\n<h2 id=\"第2章-信息的表示和处理\"><a href=\"#第2章-信息的表示和处理\" class=\"headerlink\" title=\"第2章 信息的表示和处理\"></a>第2章 信息的表示和处理</h2><h3 id=\"信息存储\"><a href=\"#信息存储\" class=\"headerlink\" title=\"信息存储\"></a>信息存储</h3><ol>\n<li>虚拟地址空间是展示给进程的，为程序提供一个看上去统一的字节数组，实际实现要配合随机访问存储器（RAM）、磁盘、特殊硬件和操作系统；</li>\n<li>第1章提到的“字”的字节数即虚拟地址空间地址的字节数；</li>\n<li>大端法：human-readable，按从左到右的方式书写，左端是高位；小端法与大端法相反；对于文本不需要考虑大端还是小端法，文本具有更强的平台独立性；</li>\n<li>布尔运算与命题逻辑运算的对应：~对应NOT，&amp;对应AND，|对应OR，^对应异或且<code>(a^b)^a=b</code>；</li>\n<li>掩码运算：<code>x&amp;0xFF</code>，只保留x的低8位；</li>\n<li>逻辑运算||、&amp;&amp;和!与布尔运算的区别，1）运算不等价，逻辑运算的结果是0或1而布尔运算不然；2）结束条件不同，如果第一个运算就能确定逻辑运算表达式的值运算将终止；</li>\n<li>移位运算：左移右补k个0；逻辑右移左补k个0，算术右移左补k个最高有效位的值；<strong>无符号右移必须是逻辑的，有符号右移默认是算术的根据编译器不同也可能是逻辑的</strong>；Java用<code>&gt;&gt;</code>表示算术右移，<code>&gt;&gt;&gt;</code>表示逻辑右移；在运算中比加减乘除优先级低；当移动位k大于被移动数位数w时，采用<code>k mod w</code>计算位移量；</li>\n</ol>\n<h3 id=\"整数表示\"><a href=\"#整数表示\" class=\"headerlink\" title=\"整数表示\"></a>整数表示</h3><ol>\n<li>long、int在不同位级机器上位数不同，需慎用，尽量使用<code>intN_t</code>或<code>uintN_t</code>，N表示位数；另外在printf的格式化过程中也需要注意这个问题，如不同机器对<code>%ld</code>的解释是不同的，另外，<code>%d</code>表示有符号整数（取值范围为<code>-2^(w-1)</code>到<code>2^(w-1)-1</code>），<code>%u</code>表示无符号整数（取值范围为<code>0</code>到<code>2^w-1</code>）；</li>\n<li>补码表示负整数，最高位有效值表示负值；</li>\n<li>w位有符号整数x→无符号，位级表示相同：<ul>\n<li>负数→<code>x+2^w</code>，</li>\n<li>非负数→x</li>\n</ul>\n</li>\n<li>w位无符号整数u→有符号，位级表示相同：<ul>\n<li>u小于<code>2^(w-1)</code>→u，</li>\n<li>u不小于<code>2^(w-1)</code>→<code>u-2^w</code></li>\n</ul>\n</li>\n<li>T表示有符号整数x有w位，C语言中，<code>TMax=2^(w-1)-1</code>，<code>TMin=-TMax-1</code></li>\n<li>零扩展添加0用于无符号数，符号扩展添加最高位有效值用于有符号数，高位转地位统一使用截断；</li>\n<li>慎用无符号数用于整数运算，有符号负数转为无符号数时将变成一个大数，可能导致不健壮程序代码溢出；</li>\n</ol>\n<p>Q：为什么<code>TMin</code>要这样表示？<br>A：<strong>TODO</strong></p>\n<h3 id=\"整数运算\"><a href=\"#整数运算\" class=\"headerlink\" title=\"整数运算\"></a>整数运算</h3><ol>\n<li>无符号加法：<ul>\n<li>超过<code>2^w</code>则减去<code>2^w</code>；</li>\n</ul>\n</li>\n<li>有符号加法（与无符号加法位模式一致，但高位表示符号位）：<ul>\n<li>超过<code>2^(w-1)</code>正溢出减去<code>2^w</code>（两个正数相加）</li>\n<li>小于<code>-2^(w-1)</code>负溢出加上<code>2^w</code>（两个负数相加）</li>\n<li>否则正常；</li>\n</ul>\n</li>\n<li>补码非运算：<ul>\n<li>x等于<code>-2^(w-1)</code>时值不变高位</li>\n<li>否则等于-x；</li>\n</ul>\n</li>\n<li>乘法：<ul>\n<li><code>(x * y) mod 2^w</code>，对于有符号先按有符号计算后再转为有符号，即位级表示相同；</li>\n</ul>\n</li>\n<li>乘以常数：<ul>\n<li>化为位移和加减运算；</li>\n</ul>\n</li>\n<li>除以2的幂：<ul>\n<li>整数除法总是舍入到0，同号是向下取整的，异号是向上取整的；</li>\n<li>“除以2的幂”可使用右移模拟整数除法<ul>\n<li>无符号数逻辑右移等价于整数除法</li>\n<li>有符号非负数算术右移等价于整数除法</li>\n<li>有符号负数算术右移不等价于整数除法（如-5除以2的情况），加偏置的思想：y整除x时得k，否则得k+1</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<p>Q：证补码非等于其补加1：<code>-x=~x+1</code><br>A：根据定义分如下两种情况：</p>\n<ul>\n<li>定义1：x等于-2^(w-1)时值不变，由定义立即得证</li>\n<li>定义2：否则等于-x，等效于证明<code>~x+x+1=0</code>，<code>~x+x</code>的位全为1，立即得证</li>\n</ul>\n<p>Q：为什么有符号负数算术右移：<code>(x+2^k-1) &gt;&gt; k</code>能正确舍入？<br>A：<strong>TODO</strong></p>\n<h3 id=\"浮点数\"><a href=\"#浮点数\" class=\"headerlink\" title=\"浮点数\"></a>浮点数</h3><ol>\n<li>二进制小数表示法的弊端，1）只能精确表示<code>x * 2^y</code>形式的数，2）对于大数需要非常多的位表示；</li>\n<li>浮点数定义：<code>(-1)^s * M * 2^E</code><ul>\n<li>s为符号sign，由第一位表示；</li>\n<li>M是尾数significand，由末尾的n位小数表示的二进制小数frac（简称f）表示；</li>\n<li>E是阶码exponet，由中间k位的小数exp（简称e）表示，负责对M加权；</li>\n<li>它在位上的排列是（大端法）：s | exp | frac；</li>\n</ul>\n</li>\n<li>浮点数分类：<ul>\n<li>非规格化：frac的位全为0，此时<code>M=f</code>，<code>E=1-Bias</code>，<code>Bias=2^(k-1) - 1</code>；</li>\n<li>规格化：frac的位不全为1，此时<code>M=1+f</code>，<code>E=e-Bias</code>，<code>Bias=2^(k-1) - 1</code>；</li>\n<li>特殊值：frac的位全为1，当exp全为0表示无穷大，否则表示NaN；</li>\n</ul>\n</li>\n<li>浮点数偶数舍入<ul>\n<li>将数字向上或向下舍入，使结果最低有效数字位是偶数，如浮点数2.5和1.5的最低有效数字位是个位数的情况下都舍入到2</li>\n<li>适用于二进制数，二进制0是偶数，1是奇数</li>\n</ul>\n</li>\n</ol>\n<p>Q：浮点数比二进制小数编码优异的地方在哪<br>A：<strong>TODO</strong></p>\n<p>Q：为什么要这样子编码浮点数<br>A：<strong>TODO</strong></p>\n<p>Q：试举例将正整数12345做浮点数二进制表示<br>A：使用4个字节32位的单精度浮点数来编码，其中阶码k=8，尾数n=23，十进制12345二进制表示为：0000,0011,0000,0011,1001</p>\n<ol>\n<li>由定义可知最大非规格化数<code>f*2^(1-Bias)</code>肯定是小于1的，因此12345肯定是使用规格化数字表示；</li>\n<li>0000,0011,0000,0011,1001 = 二进制的1.<strong>1,0000,0011,1001</strong> * 2^13，由定义得<strong>1,0000,0011,1001</strong>等于f，f求得；而13=E=e-Bias=e-128得e的十进制表示为141即二进制1000,1101</li>\n<li>则其浮点数二进制表示为0, 1000,1101, 000,0000,0001,0000,0011,1001</li>\n</ol>"},{"layout":"post","title":"读《Advanced Linux Programing》","date":"2016-04-22T11:03:00.000Z","comments":1,"_content":"\n《Advanced Linux Programing》读书笔记。\n\n<!--more-->\n\n## 一些介绍\n\nLinux Kernel\n\n- 硬件交互；\n- 内存管理；\n- 文件管理；\n- 多进程管理；\n- 共享库载入；\n\nGNU Project\n\n- 编辑器；\n- 编译器；\n- Shell（/bin/bash，Bourne-Again SHell）；\n\n注意：\n\n1. Linux Kernel加GNU Project，构成了现在主流的Linux操作系统，所以应该称之为GNU/Linux；\n2. Linux操作系统只是UNIX的一种系统实现，其他类UNIX操作系统有FreeBSD、Solaris等；\n\n## Hello, World（快速了解）\n\n### 从文本到可执行程序\n\n```c\n/** main.c **/\n#include <stdio.h>\n\nvoid sayHello() {\n    printf(\"Hello, World\\n\");\n}\n\nint main() {\n    sayHello();\n    return 0;\n}\n```\n\nShell下运行`gcc -o main main.c`即可得到可执行文件`main`，执行`./main`即可在控制台上看到`Hello, World`的输出。那么，它的原理是什么？从`main.c`到`main`，经历了以下步骤：\n\n- main.c --> main.i --> main.s --> main.o --> main\n- 程序文本 + **预处理器(cpp)** --> 被修改的源程序文本 + **编译器(ccl)** --> 汇编文本 + **汇编器(as)** --> 可重定向目标文件（二进制） + printf.o + **链接器(ld)** --> main（可执行程序）\n\n对应到Shell下，经历了以下命令：\n\n```bash\ngcc -E main.c -o main.i\ngcc -S main.i -o main.s --> main.s\ngcc -c main.s -o main.o --> main.o\ngcc main.o -o main --> main\n\n# 上面4句等价于下面一句，gcc自动进行预处理、编译、汇编和链接\ngcc main.c -o main\n\n```\n\n`-E`进行预处理，将头文件插入C文件同时执行宏替换；`-S`用于生成汇编绘本；`-c`命令用于汇编；`-o`命令用于指定输出文件名称。\n\n### 编写可用g++编译的c程序\n\n```c\n/** main.c **/\n#include <stdio.h>\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\nvoid sayHello();\n#ifdef __cplusplus\n}\n#endif\n\nvoid sayHello() {\n    printf(\"Hello, World\\n\");\n}\n\nint main() {\n    sayHello();\n    return 0;\n}\n```\n\n### 其他常用gcc命令\n\n- `-I`指定存放头文件的路径（相对或绝对路径）；\n- `-D`定义一个宏；\n- `-O`指定优化级别；\n- `-l`指定要链接的库；\n- `-L`指定搜索动态链接库的路径；\n\n```bash\n# 生成可执行文件main\n# 从绝对路径/root/搜索头文件\n# 定义宏DEBUG\n# 定义优化级别为2（0<1<2<3，0表示不优化）\n# 链接数学库m\n# 在/usr/local/lib下查找数学库m的动态链接库\ngcc main.c -o main -I /root/ -D DEBUG=2 -O2 -lm -L/usr/local/lib\n```\n\n### 如何节省编译的工作\n\n1. 写MakeFile；\n2. 使用autoconf、automake和libtool；\n\n简单的makefile举例：\n\n```\nmain.o: main.c\n        gcc -c main.c -o main.o\n\nall: main\n\nmain: main.o\n        gcc main.o -o main\n\nclean:\n        rm main.o main\n```\n\n如何使用这个makefile：\n\n```bash\n# 编译（把all换成main效果一致）\n# 方法1：用-f指定makefile文件\nmake -f makefile all\n# 方法2：不指定makefile文件，默认会在当前文件夹寻找\n# 按顺序寻找文件GNUmakefile-->makefile-->Makefile，找不到则报错\nmake all\n\n# 清除编译结果，以下二选一\nmake clean\nmake -f makefile clean\n```\n\nmakefile的基本组成如下（**command必须以一个tab开始**）：\n\n```\n# target表示目标体，它位于冒号之前\n# dependency_files表示依赖的文件或target，它位于冒号之后\n# command表示达成这个目标所需执行命令\ntarget: dependency_files\n        command\n```\n\nmakefile里面也可定义和调用变量：\n\n```\nCC=gcc\nEXE=main\n\nmain.o: main.c\n        $(CC) -c main.c -o main.o\n\nall: $(EXE)\n\n$(EXE): main.o\n        gcc main.o -o $(EXE)\n\nclean:\n        rm main.o $(EXE)\n```\n\n也可在外部调用时传入变量（会将makefile中已存在的变量覆盖掉），命令如下：\n\n```bash\nmake EXE=mm all\nmake EXE=mm clean\n```\n\n### 使用GDB调试程序简介\n\n使用`gdb 程序名（相对或绝对路径）`进入gdb：\n2. 输入`break main`为main函数设置断点，输入`break main.c:5`为`main.c`的第5行设置断点；\n3. 输入`i b`查看当前断点；\n4. 输入`delete 1`删除第一个断点；\n5. 输入`disable 1`停用第一个断点；\n6. 输入`list main.c:5`可在gdb显示代码；\n6. 输入`r`或`run`运行，这时用户将无法再输入命令，直到运行到断点时，gdb将交回命令行控制权，这时输入`n`或`next`表示运行到下一行，`s`或`step`表示进入当前行调用的函数，输入`return`返回到上一层函数；\n7. gdb交回命令行控制权时，输入`print 参数名`可查看当前作用域内的具体参数值；\n8. 假如程序意外退出，这时输入`where`、`bt`或`backtrace`可以查看错误堆栈；\n\n### 如何查看帮助手册\n\n终端下输入`man 命令名称`（如`man printf`）将看到如下提示：\n\n```\nMan: 寻找所有匹配的手册页 (set MAN_POSIXLY_CORRECT to avoid this)\n * printf (1)\n   printf (3)\n   printf (1p)\n   printf (3p)\nMan: 您需要什么手册页？\nMan: \n```\n\n1. 数字1表示这是一个用户命令（user commands，如**echo**）；\n2. 数字2表示这是一个系统调用（system calls，如**fork**）；\n3. 数字3表示这是一个标准库（stand library，如**printf**）；\n4. 带p后缀的为POSIX标准，释义：POSIX标准定义了操作系统应该为应用程序提供的接口标准，一个POSIX兼容的操作系统编写的程序，应该可以在任何其它的POSIX操作系统（即使是来自另一个厂商）上编译执行；\n\n## 编程实践\n\n### 环境交互\n\n1. 临时文件（用于暂时存放数据），使用下述命令查看具体用途\n    - `man mkstemp`\n    - `man tmpfile`\n1. 环境变量（设置运行环境）\n    - shell下`echo $USER`或`printenv USER`打印环境变量`USER`；\n    - shell下`export USER=jayzee`设置环境变量`USER`为`jayzee`；\n    - shell下`env`查询当前用户所有环境变量；\n    - Linux下调用一个C/C++程序时，该程序继承其调用者的所有环境变量，标准库`stdlib.h`的`getenv`、`setenv`和`unsetenv`用于获取、操纵环境变量；\n1. shell下调用程序结束后，使用`echo $?`获取程序退出代码（0表示正常）；\n1. IO（输入输出流）\n    - 程序中，宏`stdin`表示输入流，对应int值0；宏`stdout`表示标准输出流，对应int值1；宏`stderr`表示错误输出流，对应int值2；\n    - `stdin`只能是buffered的，但其buffered size可以修改；\n    - `stderr`只能是unbuffered，一有错误立即输出；\n    - 当程序直接在shell调用并且直接输出到控制台时，`stdout`是line-buffered的，否则是buffered的，但其buffered size可以修改，`man setvbuf`查看标准库如何设置输入输出流；\n    - 程序写文件也是默认buffered，写完后应使用`fflush(your_file)`立即清空buffer写入到文件；\n    - shell命令`your_program > output_file.txt 2>&1`表示将`your_program`的标准输出写入到文件`output_file.txt`（`>`执行覆盖写，`>>`执行追加写），并且将错误输出流重定向到标准输出流，Linux规定文件名必须在流重定向之前；\n    - shell命令`program 2>&1 | filter`表示将标准输出使用管道过滤，Linux规定重定向必须在过滤器之前；\n1. `man getopt_long`查看`getopt.h`库如何处理程序参数（类似于`ls -l`的`-l`）；\n\n### 好的编程习惯\n\n使用断言assert：\n\n- 所有需确认值为true或非0的需使用`assert(condition)`；\n- 编译时指定`-DNDEBUG`可移除所有assert语句，所以**千万不要把程序的重要逻辑放在assert语句中**；\n\n处理系统调用失败：\n\n- 系统调用如`fork`失败时会返回非零值，这时宏`errno`会被设置，下次系统调用失败时又会覆盖这个宏的值；\n- `man strerror`查看如何使用`string.h`的`strerror`的具体字符串释义，细节如下：\n\n```\nEINTR : blocking function interrupt, like sleep, read, select\nEPERM : Permission denied\nEROFS : PATH is on a read-only file system\nENAMETOOLONG : PATH is too long\nENOENT : PATH does not exit\nENOTDIR : A component of PATH is not a directory\nEACCES : A component of PATH is not accessible\nEFAULT : PATH contains an invalid memory address.  This is probably a bug\nENOMEM : Ran out of kernel memory\n```\n\n申请内存与释放内存：\n\n- 申请内存与释放内存的语句必须成对，即有申请内存则相应的要有释放内存；\n\n### 链接程序（库：快速开发，软件复用）\n\n以下文字部分引用自[C++静态库与动态库 - 吴秦 - 博客园](http://www.cnblogs.com/skynet/p/3372855.html)，向该作者致敬。\n\n下文用到的main.c文件：\n\n```bash\n/** main.c **/\nint add(int x, int y) {\n    return x + y;\n}\n```\n\n#### 静态链接\n\n静态库的特点：\n\n- 静态库对函数库的链接是放在编译时期完成的；\n- 程序在运行时与函数库再无瓜葛，移植方便；\n- 浪费空间和资源，因为所有相关的目标文件与牵涉到的函数库被链接合成一个可执行文件；\n\n静态库的创建：\n\n- 静态库的命名规范为lib[your_library_name].a：lib为前缀，中间是静态库名，扩展名为.a；\n- 首先将代码文件编译成目标文件.o，再通过ar工具将目标文件打包.a静态库文件；\n\n```bash\n# 假定有一个math.c文件，提供加法函数int add(int x, int y)，我们现在将其打包成静态库\ngcc -c math.c -o math.o\nar -crv libmath.a math.o\n```\n\n使用静态库：\n\n- 在编译时指定静态库搜索路径（-L选项）、指定静态库名称（不需要lib前缀和.a后缀，-l选项）；\n\n```bash\n# -l为什么一定要放在末尾？它会去查找库的所有被引用的函数或宏等并插入到最终的可执行程序，放在末尾是为了这种依赖搜索在最后执行\ngcc main.c -o main -Lfilepath_of_your_static_library -lmath\n```\n\n静态库优缺点：\n\n- 优点：编译成可执行文件后与其编译时引用的静态库再无任何瓜葛；\n- 缺点：导致可执行程序体量庞大，同一个操作系统上运行的多个程序引用同一个静态库会导致内存浪费（相同的代码），导致客户的全量更新；\n\n#### 动态链接\n\n动态库的特点：\n\n- 动态库把对一些库函数的链接载入推迟到程序运行的时期；\n- 可以实现进程之间的资源共享（因此动态库也称为共享库）；\n- 将一些程序升级变得简单；\n- 甚至可以真正做到链接载入完全由程序员在程序代码中控制（显示调用）；\n\n动态库的创建：\n\n- 动态库的命名规范为lib[your_library_name].so：lib为前缀，中间是动态库名，扩展名为.so；\n- 首先将代码文件编译成目标文件.o，再通过gcc工具将目标文件打包.so动态库文件；\n    - `-fPIC`创建与地址无关的编译程序（pic，position independent code），是为了能够在多个应用程序间共享；\n    - `-shared`指定生成动态链接库；\n\n```bash\n# 假定有一个math.c文件，提供加法函数int add(int x, int y)，我们现在将其打包成动态库\ngcc -fPIC -c math.c -o math.o\ngcc -shared -o libmath.so math.o\n# 上面两条命令等价于\ngcc -fPIC -shared -o libmath.so math.c\n```\n\n使用动态库：\n\n- 在编译时指定动态库搜索路径（-L选项）、指定动态库名称（不需要lib前缀和.so后缀，-l选项）；\n\n```bash\ngcc main.c -o main -Lfilepath_of_your_static_library -lmath\n```\n\n- 注意，运行上述生成的可执行文件时，操作系统会去一些指定路径查找并载入该动态库，如查找不到将抛出找不到动态库的异常信息，这些指定路径是：\n    - 环境变量LD_LIBRARY_PATH，如`LD_LIBRARY_PATH=/usr/local/lib:/opt/lib`；\n    - /etc/ld.so.cache文件列表，需要额外操作如下：\n        + 编辑/etc/ld.so.conf文件，加入库文件所在目录的路径；\n        + 运行ldconfig ，该命令会重建/etc/ld.so.cache文件；\n    - /lib/，/usr/lib目录；\n- `-L`指定的库搜索路径下即有动态库也有静态库，则动态库具有较高优先级被链接；\n\n动态库优缺点：\n\n- 缺点：增量更新必须考虑向后兼容；\n- 优点：增量更新，避免内存浪费（同一个操作系统上运行的多个程序引用同一个动态库只需要一份共享库示例）；\n\n#### 链接检查辅助命令\n\n`nm`命令：打印出库中的涉及到的所有符号。库既可以是静态的也可以是动态的。nm列出的符号有很多，常见的有三种，\n\n- 一种是在库中被调用，但并没有在库中定义(表明需要其他库支持)，用U表示；\n- 一种是库中定义的函数，用T表示，这是最常见的；\n- 一种是所谓的弱态”符号，它们虽然在库中被定义，但是可能被其他库中的同名符号覆盖，用W表示；\n\n`ldd`命令：查看一个可执行程序依赖的共享库。\n\n## 进程\n\n本章节部分内容引用自[Linux下Fork与Exec使用 - hicjiajia - 博客园](http://www.cnblogs.com/hicjiajia/archive/2011/01/20/1940154.html)和[系统调用跟我学(3)](http://www.ibm.com/developerworks/cn/linux/kernel/syscall/part3/index.html)，向作者致敬。\n\n### 进程查看\n\n`pid`指进程id，`ppid`指父进程id。\n\n1. Linux所有**用户进程**呈树状结构，这棵用户进程树的根节点是init进程（内核启动的第一个用户级进程），init进程的`pid`为1，其ppid为0；\n2. shell下运行`ps -e -o pid,ppid,command`可查看所有用户进程的pid、ppid和command；\n3. `unistd.h`提供`getpid()`和`getppid()`获取进程的ID和父ID；\n\n### 进程创建\n\n#### system函数：执行shell命令\n\nsystem函数用于在C/C++语言中执行shell命令，其API如下：\n\n```bash\n#include <stdlib.h>\nint system(const char *command);\n```\n\n其具体实现是：\n\n1. 先执行系统调用`fork()`创建子进程；\n2. 再执行`execl(\"/bin/sh\", \"sh\". \"-c\", command, (char *) 0);`去调用shell执行command；\n\n#### fork函数，exec族函数\n\n##### fork函数：创建子进程，进程分叉\n\nfork函数API如下：\n\n```bash\n#include <unistd.h>\npid_t fork(void);\n```\n\nfork函数的特点：\n\n- fork调用之后，父进程进入`pid>0`的分支，子进程进入`pid==0`的分支；\n- fork创建的子进程是父进程的一个完整拷贝，**当且仅当fork之后的代码即将开始更新内存，真实的拷贝才会发生**（也就是上述例子并没有发生拷贝），为什么这么设计，我们会在下面讲到；\n- fork创建的子进程拥有一个新的进程pid号，子进程的ppid为调用fork函数的进程id；\n\npid_t是一个整型变量。具体示例如下：\n\n```c\n/* zombie.c */\n#include <sys/types.h>\n#include <unistd.h>\nint main() {\n    pid_t pid;\n    pid=fork();\n    if(pid<0) /* 如果出错 */\n        printf(\"error occurred!\\n\");\n    else if(pid==0) /* 如果是子进程 */\n        exit(0);\n    else /* 如果是父进程 */\n        sleep(60); /* 休眠60秒，这段时间里，父进程什么也干不了 */\n    wait(NULL); /* 收集僵尸进程 */\n}\n```\n\n##### exec函数族：对当前进程进行替换\n\nexec并不是一个具体函数，它是以下六个函数：\n\n```c\n#include <unistd.h>\nint execl(const char *path, const char *arg, ...);\nint execlp(const char *file, const char *arg, ...);\nint execle(const char *path, const char *arg, ..., char *const envp[]);\nint execv(const char *path, char *const argv[]);\nint execvp(const char *file, char *const argv[]);\nint execve(const char *path, char *const argv[], char *const envp[]);\n```\n\n其中`execl`是基函数，其他5个是它的变种（区别在于传参形式不同，带v的表示参数以数组传递，带l的表示参数以陈列的方式传递）。\n\nexec函数族特点：\n\n- 只保留当前进程的pid，其他进程相关的数据段全部废弃；对系统而言，还是同一个进程号，但其实已经是另外一个程序了，即调用exec函数族的进程已“死亡”了；\n- 上面说到，fork的数据拷贝只发生在子进程更新内存时，fork调用后立即执行exec函数族使得我们能够产生一个全新的进程（**这意味着当前进程的所有线程、文件描述符等都被释放**），与fork调用进程再无任何瓜葛；\n\n举一个具体例子如下：\n\n```c\n#include <errno.h>\n#include <stdio.h>\n#include <stdlib.h>\n\nchar command[256];\nvoid main()\n{\n   int rtn; /*子进程的返回数值*/\n   while(1) {\n       /* 从终端读取要执行的命令 */\n       printf( \">\" );\n       fgets( command, 256, stdin );\n       command[strlen(command)-1] = 0;\n       if ( fork() == 0 ) {/* 子进程执行此命令 */\n          execlp( command, NULL );\n          /* 如果exec函数返回，表明没有正常执行命令，打印错误信息*/\n          perror( command );\n          exit( errno );\n       }\n       else {/* 父进程， 等待子进程结束，并打印子进程的返回值 */\n          wait ( &rtn );\n          printf( \" child process return %d\\n\", rtn );\n       }\n   }\n}\n```\n\n### 信号处理\n\n信号是一种异步的进程通信机制，是软件层面的中断，进程接收到线程必须进行处理，有以下三种处理方式：\n\n- 使用进程对信号的静默处理；\n- 忽略该信号；\n- 使用特定的信号处理函数进行处理；\n\n上述的后两种方式需要使用`signal()`函数进行处理，举例如下：\n\n```c\n// 忽略SIGPIPE信号\nsignal ( SIGPIPE, SIG_IGN );\n// 使用PrepareExit处理SIGINT信号\nsignal ( SIGINT, (__sighandler_t ) PrepareExit );\n```\n\nLinux的信号如下：\n\n```\n信号值 默认处理动作 发出信号的原因\nSIGHUP 1 A 终端挂起或者控制进程终止\nSIGINT 2 A 键盘中断（如break键被按下）\nSIGQUIT 3 C 键盘的退出键被按下\nSIGILL 4 C 非法指令\nSIGABRT 6 C 由abort(3)发出的退出指令\nSIGFPE 8 C 浮点异常\nSIGKILL 9 AEF Kill信号\nSIGSEGV 11 C 无效的内存引用\nSIGPIPE 13 A 管道破裂: 写一个没有读端口的管道\nSIGALRM 14 A 由alarm(2)发出的信号\nSIGTERM 15 A 终止信号\nSIGUSR1 30,10,16 A 用户自定义信号1\nSIGUSR2 31,12,17 A 用户自定义信号2\nSIGCHLD 20,17,18 B 子进程结束信号\nSIGCONT 19,18,25 进程继续（曾被停止的进程）\nSIGSTOP 17,19,23 DEF 终止进程\nSIGTSTP 18,20,24 D 控制终端（tty）上按下停止键\nSIGTTIN 21,21,26 D 后台进程企图从控制终端读\nSIGTTOU 22,22,27 D 后台进程企图从控制终端写\n\n处理动作一项中的字母含义如下：\nA 缺省的动作是终止进程\nB 缺省的动作是忽略此信号，将该信号丢弃，不做处理\nC 缺省的动作是终止进程并进行内核映像转储（dump core），内核映像转储是指将进程数据在内存的映像和进程在内核结构中的部分内容以一定格式转储到文件系统，并且进程退出执行，这样做的好处是为程序员提供了方便，使得他们可以得到进程当时执行时的数据值，允许他们确定转储的原因，并且可以调试他们的程序\nD 缺省的动作是停止进程，进入停止状况以后还能重新进行下去，一般是在调试的过程中（例如ptrace系统调用）\nE 信号不能被捕获\nF 信号不能被忽略\n```\n\n**注意**：\n信号处理函数可被新产生的信号所中断，所以信号处理函数应该做尽可能少的工作；\n\n\n### 进程终止\n\n#### 信号终止\n\n1. `SIGINT`：CRTL+C产生；\n2. `SIGTERM`：shell下`kill pid`产生；\n3. `abort()`：发送一个`SIGABRT`信号给自己；\n4. `SIGKILL`：强制退出信号，shell下`kill -9 pid`产生；\n\n当进程终止时，shell调用`echo $?`可取得该进程的exit code，\n\n- 如果该进程由信号终止，exit code为128加上信号值；\n- 调用`exit(int exit_code)`函数退出，exit_code的范围需在0到128之间；\n\n如何给进程发送指定信号，\n\n- 在shell下使用`kill -s SIGNAL_NAME pid`，可以给进程pid发送SIGNAL_NAME信号；\n- 程序使用`kill(pid, SIGNAL_NAME)`函数；\n\n#### wait\n\nUnix的进程终止时，一些资源（如进程pid、进程exit code、收到的信号、占用CPU时间等）并不会被立即释放（堆栈等内存立即释放），死亡进程的父进程必须调用`wait`函数对进程进行“收尸”，即释放进程的pid和exit code等资源。\n\n`wait`函数的API定义如下：\n\n```c\npid_t wait(int *status);\n```\n\n一些说明：\n\n- `wait`函数是阻塞式的，在子进程未结束时将阻塞；\n- 如果`pid_t`为-1，表明`wait`调用失败，这是因为调用进程没有子进程导致；否则，表明收集子进程“死亡”信息成功，`pid_t`的值为“死亡”进程pid；\n- `status`是一个指针，如果这个指针为空，表明我们不关心进程的“死亡”信息细节，只是发起了回收这个动作；否则，status将包含进程“死亡”的一些信息；\n- 调用`WIFEXITED(status)`，若返回值回0表明进程异常退出（如信号导致退出），这时调用`WTERMSIG(status)`将得到使进程死亡的信号int值；否则表示程序正常退出，这时候调用`WEXITSTATUS(status)`可获取“死亡”进程的exit code（如“死亡”进程调用`exit(7)`退出，则`WEXITSTATUS(status)`的结果为7）；\n\n```c\n/* wait2.c */\n#include <sys/types.h>\n#include <sys/wait.h>\n#include <unistd.h>\n#include <stdio.h>\n#include <stdlib.h>\n\nmain()\n{\n    int status;\n    pid_t pc,pr;\n    pc=fork();\n    if(pc<0)     /* 如果出错 */\n        printf(\"error ocurred!\\n\");\n    else if(pc==0){ /* 子进程 */\n        printf(\"This is child process with pid of %d.\\n\",getpid());\n        exit(3);    /* 子进程返回3 */\n    }\n    else{       /* 父进程 */\n        pr=wait(&status);\n        if(WIFEXITED(status)){  /* 如果WIFEXITED返回非零值 */\n            printf(\"the child process %d exit normally.\\n\",pr);\n            printf(\"the return code is %d.\\n\",WEXITSTATUS(status));\n        }else           /* 如果WIFEXITED返回零，这时pr存储死亡进程pid */\n            printf(\"the child process %d exit abnormally with signal number %d.\\n\",pr,WTERMSIG(status));\n    }\n}\n```\n\n#### 僵尸进程\n\n如果子进程死亡，父进程却没有调用`wait`对其进行“收尸”，子进程就会变成一个僵尸进程，\n\n```\n$ ps -ax\n  PID TTY      STAT   TIME COMMAND\n 1177 pts/0    S      0:00 -bash\n 1577 pts/0    S      0:00 ./zombie\n 1578 pts/0    Z      0:00 [zombie <defunct>]\n 1579 pts/0    R      0:00 ps -ax\n```\n\n若STAT为Z则表明则是一个僵尸进程，关于僵尸进程，\n\n- 在父进程退出时，init进程会自动对其下的所有僵尸子进程进行清理；\n- 子进程意外死亡时，父进程会受到一个SIGCHLD信号，父进程可以注册这个信号的处理函数进行“收尸”；\n- `wait3`和`wait4`函数为异步的，可以周期调用这两个函数执行回收；\n\n## 线程\n\n### 线程创建\n\n**线程创建**：`int pthread_create(pthread_t *thread, const pthread_attr_t *attr,\nvoid *(*start_routine) (void *), void *arg);`\n\n- `pthread_create`的返回值为0表示创建线程成功；\n- `thread`是指向`pthread_t`的指针；\n- `pthread_attr_t`在下一个例子介绍；\n- `start_routine`是一个无形参且无返回值的函数指针；\n- `arg`是上面提到的函数指针所接收的参数；\n\n**线程回收**：`int pthread_join(pthread_t thread, void **retval);`\n\n- `retval`实际上是一个指向整型指针的指针，它存放的是线程调用`exit`或`pthread_exit`的退出值；\n- `When a joinable thread terminates, its memory resources (thread descriptor and stack) are not deallocated until another thread performs pthread_join on it. Therefore, pthread_join must be called  once  for each joinable thread created to avoid memory leaks.`\n- 这是一个阻塞式的方法，当监控到有线程结束时才返回；\n\n**线程退出**：`void pthread_exit(void *retval);`\n\n- `retval`实际是一个整型指针，在退出时标识线程的退出值；\n\n```c\n#include <stdio.h>\n#include <pthread.h>\n#include <unistd.h>\n\nint code = 11;\n\nvoid hello(void *args) {\n    char *str = (char *) args;\n    sleep(5);\n    printf(\"Hello, %s!\\n\", str);\n    pthread_exit(&code);\n}\n\nint main() {\n    pthread_t thread;\n    int status = pthread_create(&thread, NULL, (void *)hello, (void *) \"Jayzee\");\n    printf(\"thread create status : %d\\n\", status);\n    int *exit_code = 0;\n    status = pthread_join(thread, (void *) &exit_code);\n    printf(\"thread join status : %d\\n\", status);\n    printf(\"thread exit code : %d\\n\", *exit_code);\n    return 0;\n}\n```\n\n------\n\n下面的例子在`pthread_create`时用到了`pthread_attr_t`，必须经历下面四个过程\n\n1. 先实例化`pthread_attr_t`；\n2. 再设置`pthread_attr_t`；\n3. 在线程创建时使用该`pthread_attr_t`；\n4. 线程创建完后销毁`pthread_attr_t`；\n\n注意：\n\n1. 创建线程时设置其为detach态，意味着我们不关心它的返回值，只是进行线程相关资源回收；\n2. 也可创建线程时不指定detach态，在线程创建后可使用`int pthread_detach(pthread_t thread);`设置其为detach态；\n\n```c\n#include <stdio.h>\n#include <pthread.h>\n#include <unistd.h>\n\nint code = 11;\n\nvoid hello(void *args) {\n    char *str = (char *) args;\n    sleep(5);\n    printf(\"Hello, %s!\\n\", str);\n    pthread_exit(&code);\n}\n\nint main() {\n    pthread_t thread;\n    pthread_attr_t attr;\n    pthread_attr_init (&attr);\n    pthread_attr_setdetachstate (&attr, PTHREAD_CREATE_DETACHED);\n    int status = pthread_create (&thread, &attr, (void *)hello, (void *) \"Jayzee\");\n    pthread_attr_destroy (&attr);\n    printf(\"thread create status : %d\\n\", status);\n    return 0;\n}\n```\n\n### 线程取消\n\n```\nint pthread_setcancelstate(int state, int *oldstate);\nint pthread_setcanceltype(int type, int *oldtype);\nint pthread_cancel(pthread_t thread);\n```\n\n- `pthread_setcancelstate`在运行时设置线程的状态`state`，并取得其之前的状态`oldstate`；\n- `pthread_setcanceltype`在运行时设置线程的类型`type`，并取得其之前的类型`oldtype`；\n- `pthread_cancel`用于取消线程的执行；\n\n\n注意，\n\n1. type：`PTHREAD_CANCEL_DEFERRED`或`PTHREAD_CANCEL_ASYNCHRONOUS`\n2. state：`PTHREAD_CANCEL_ENABLE`或`PTHREAD_CANCEL_DISABLE`\n3. type和state作用于`pthread_cancel`：\n    - 当state为`PTHREAD_CANCEL_DISABLE`时，设置的type和调用`pthread_cancel`不会对线程造成任何影响；\n    - 否则，当设置的type为`PTHREAD_CANCEL_DEFERRED`时，为非阻塞取消（等待达到取消的条件，如释放锁）；当设置的type为`PTHREAD_CANCEL_ASYNCHRONOUS`时为异步取消（即线程立即被取消，但不同操作系统有可能实现不同，理应处理释放锁）；\n\n```c\n#include <stdio.h>\n#include <pthread.h>\n#include <unistd.h>\n\nint code = 11;\n\nvoid hello(void *args) {\n    pthread_setcancelstate(PTHREAD_CANCEL_ENABLE, &last_state); \n    pthread_setcanceltype(PTHREAD_CANCEL_DEFERRED, &last_type);\n    char *str = (char *) args;\n    sleep(5);\n    printf(\"Hello, %s!\\n\", str);\n    pthread_exit(&code);\n}\n\nint main() {\n    pthread_t thread;\n    int status = pthread_create(&thread, NULL, (void *)hello, (void *) \"Jayzee\");\n    printf(\"thread create status : %d\\n\", status);\n    int *exit_code = 0;\n    status = pthread_join(thread, (void *) &exit_code);\n    printf(\"thread join status : %d\\n\", status);\n    printf(\"thread exit code : %d\\n\", *exit_code);\n    pthread_cancel(thread);\n    return 0;\n}\n```\n\n### 线程特定数据\n\n```\nint pthread_key_create(pthread_key_t *key, void (*destructor)(void*));\nint pthread_setspecific(pthread_key_t key, const void *value);\nvoid *pthread_getspecific(pthread_key_t key);\n```\n\n1. 使用`pthread_key_create`创建`key`，`destructor`为线程结束时用于析构的函数指针，一个进程内的多个线程可以共用一个`key`；\n2. `pthread_setspecific`为线程设定key-value，`pthread_getspecific`根据key获得value；\n3. 当线程结束时，若`pthread_getspecific`的内容不为空，且`destructor`不为空，则`pthread_getspecific`的内容将作为`destructor`的参数来执行析构函数；\n\n```c\n#include <malloc.h>\n#include <pthread.h>\n#include <stdio.h>\n\n/* The key used to associate a log file pointer with each thread. */\nstatic pthread_key_t thread_log_key;\n\n/* Write MESSAGE to the log file for the current thread. */\nvoid write_to_thread_log (const char* message) {\n    FILE* thread_log = (FILE*) pthread_getspecific (thread_log_key);\n    fprintf (thread_log, \"%s\\n\", message);\n}\n\n/* Close the log file pointer THREAD_LOG. */\nvoid close_thread_log (void* thread_log) {\n    fclose ((FILE*) thread_log);    \n}\n\nvoid* thread_function (void* args) {\n    char thread_log_filename[20];\n    FILE* thread_log;\n    /* Generate the filename for this thread’s log file. */\n    sprintf (thread_log_filename, \"thread%d.log\", (int) pthread_self ());\n    /* Open the log file. */\n    thread_log = fopen (thread_log_filename, \"w\");\n    /* Store the file pointer in thread-specific data under thread_log_key. */\n    pthread_setspecific (thread_log_key, thread_log);\n    write_to_thread_log (\"Thread starting.\");\n    /* Do work here... */\n    return NULL;\n}\n\nint main () {\n    int i;\n    pthread_t threads[5];\n    /* Create a key to associate thread log file pointers in\n    thread-specific data. Use close_thread_log to clean up the file\n    pointers. */\n    pthread_key_create (&thread_log_key, close_thread_log);\n    /* Create threads to do the work. */\n    for (i = 0; i < 5; ++i)\n        pthread_create (&(threads[i]), NULL, thread_function, NULL);\n    /* Wait for all threads to finish. */\n    for (i = 0; i < 5; ++i)\n        pthread_join (threads[i], NULL);\n    return 0;\n}  \n```\n\n```\nvoid pthread_cleanup_push(void (*routine)(void *), void *arg);\nvoid pthread_cleanup_pop(int execute);\n```\n\n1. `pthread_cleanup_push`在线程运行时为线程压栈清理函数；\n2. `pthread_cleanup_pop`从栈弹出一个清理函数，如果`execute`不为0则执行这个清理函数；\n3. 线程结束时，所有压栈的清理函数会自动被弹出栈进行执行；\n4. 当在线程内使用longjump前，应手动调用`pthread_cleanup_pop`执行清理；\n\n### 线程同步\n\n#### 互斥锁\n\n```\nint pthread_mutex_destroy(pthread_mutex_t *mutex);\nint pthread_mutex_init(pthread_mutex_t *restrict mutex,\n    const pthread_mutexattr_t *restrict attr);\npthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER;\n```\n\n1. `pthread_mutex_destroy`销毁互斥锁，`pthread_mutex_init`创建互斥锁；\n2. `pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER;`表示定义并默认实例化一个互斥锁；\n\n```\nint pthread_mutex_lock(pthread_mutex_t *mutex);\nint pthread_mutex_trylock(pthread_mutex_t *mutex);\nint pthread_mutex_unlock(pthread_mutex_t *mutex);\n```\n\n1. `pthread_mutex_lock`为阻塞锁，`pthread_mutex_trylock`为非阻塞锁（获取不到锁）则立即返回，`pthread_mutex_unlock`为释放锁；\n\n```c\n#include <pthread.h>\n\nint main() {\n    pthread_mutexattr_t attr;\n    pthread_mutex_t mutex;\n    pthread_mutexattr_init (&attr);\n    // 带错误检查的互斥锁\n    pthread_mutexattr_setkind_np (&attr, PTHREAD_MUTEX_ERRORCHECK_NP);\n    pthread_mutex_init (&mutex, &attr);\n    pthread_mutex_lock(&mutex);\n    /** do some work **/\n    pthread_mutex_unlock(&mutex);\n    pthread_mutexattr_destroy (&attr);\n}\n```\n\n#### 信号量\n\n```\nint sem_init(sem_t *sem, int pshared, unsigned int value);\nint sem_post(sem_t *sem);\nint sem_wait(sem_t *sem);\n```\n\n1. `sem_init`实例化信号量`sem`，`pshared`为0表示进程内共享（非0为进程间共享），`value`为初始容量值（默认容量值为0）；\n2. `sem_wait`将容量值减一，`sem_wait`之后若容量值小于0则线程阻塞；`sem_post`将容量值加一；\n3. 假设容量值为负，一次`sem_post`只能唤醒一个线程；\n4. `sem_wait`和`sem_post`是线程安全的；\n\n```c\n#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <pthread.h>\n#include <unistd.h>\n#include <semaphore.h>\n\nsem_t semaphore;\n\nvoid threadfunc() {\n    int i = 0;\n    for (; i<10; i++) {\n        // 实际上不会这么使用，这里仅是展示\n        sem_wait(&semaphore);\n        printf(\"Hello from da thread!\\n\");\n        sem_post(&semaphore);\n        sleep(1);\n    }\n}\n\nint main(void) {\n    // 实例化\n    sem_init(&semaphore, 0, 1);\n    \n    pthread_t *mythread;    \n    mythread = (pthread_t *)malloc(sizeof(*mythread));\n    \n    // 启动线程\n    printf(\"Starting thread, semaphore is unlocked.\\n\");\n    pthread_create(mythread, NULL, (void*)threadfunc, NULL);\n    pthread_join(mythread, NULL);\n    \n    return 0;\n}\n```\n\n#### 条件值\n\n```\nint pthread_cond_init(pthread_cond_t *restrict cond,\n    const pthread_condattr_t *restrict attr);\npthread_cond_t cond = PTHREAD_COND_INITIALIZER;\nint pthread_cond_signal(pthread_cond_t *cond);\nint pthread_cond_wait(pthread_cond_t *restrict cond,\n   pthread_mutex_t *restrict mutex);\n```\n\n1. `pthread_cond_t cond = PTHREAD_COND_INITIALIZER;`等价于`pthread_cond_init(&pthread_cond_t, NULL);`\n2. 当调用`pthread_cond_signal`或`pthread_cond_wait`时，必须获得锁；\n3. 调用`pthread_cond_wait`时，自动释放锁，直到被`pthread_cond_signal`唤醒时，才重新自动获得锁；\n4. `pthread_cond_timedwait`可批量唤醒等待的线程；\n\n```c\n#include <stdio.h>\n#include <pthread.h>\n\npthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER;\npthread_cond_t cond = PTHREAD_COND_INITIALIZER;\nint condition = 0;\nint count = 0;\n\nint consume( void )\n{\n    while( 1 )\n    {\n        pthread_mutex_lock( &mutex );\n        while( condition == 0 )\n            pthread_cond_wait( &cond, &mutex );\n        printf( \"Consumed %d\\n\", count );\n        condition = 0;\n        pthread_cond_signal( &cond );        \n        pthread_mutex_unlock( &mutex );\n    }\n\n    return( 0 );\n}\n\nvoid* produce( void * arg )\n{\n    while( 1 )\n    {\n        pthread_mutex_lock( &mutex );\n        while( condition == 1 )\n            pthread_cond_wait( &cond, &mutex );\n        printf( \"Produced %d\\n\", count++ );\n        condition = 1;\n        pthread_cond_signal( &cond );        \n        pthread_mutex_unlock( &mutex );\n    }\n    return( 0 );\n}\n\nint main( void )\n{\n    pthread_create( NULL, NULL, &produce, NULL );\n    return consume();\n}\n```\n\n### 线程实现\n\nLinux的线程实现是系统调用`clone()`，它创建一个与父进程共用资源的子进程。\n\n## 进程间通信\n\n### 共享内存\n\n```\n#include <sys/ipc.h>\n#include <sys/shm.h>\nint shmget(key_t key, size_t size, int shmflg);\nvoid *shmat(int shmid, const void *shmaddr, int shmflg);\nint shmdt(const void *shmaddr);\nint shmctl(int shmid, int cmd, struct shmid_ds *buf);\n```\n\n1. `shmget`申请共享内存；\n2. `shmat`取得已申请的共享内存，共享内存使用者计数器加1；\n3. `shmdt`断开已申请的共享内存，共享内存使用者计数器减1，如果计时器减到0，这块共享内存会被系统标注并删除；\n4. `shmctl`对共享内存的标识信息进行设置；\n\n### 进程信号量\n\n```\n#include <sys/types.h>\n#include <sys/ipc.h>\n#include <sys/sem.h>\nint semget(key_t key, int nsems, int semflg);\nint semctl(int semid, int semnum, int cmd, ...);\nint semop(int semid, struct sembuf *sops, size_t nsops);\n```\n\n1. `semget`用于申请信号量；\n2. `semctl`用于释放或实例化信号量；\n3. `semop`用于执行wait或post；\n\n### 映射到内存\n\n```\n#include <sys/mman.h>\nvoid *mmap(void *addr, size_t length, int prot, int flags,\n    int fd, off_t offset);\n```\n\n`mmap`是一种内存映射文件的方法，即将一个文件或者其它对象映射到进程的地址空间，实现文件磁盘地址和进程虚拟地址空间中一段虚拟地址的一一对映关系。实现这样的映射关系后，进程就可以采用指针的方式读写操作这一段内存，而系统会自动回写脏页面到对应的文件磁盘上，即完成了对文件的操作而不必再调用read,write等系统调用函数。相反，内核空间对这段区域的修改也直接反映用户空间，从而可以实现不同进程间的文件共享。\n\n### 管道\n\n```\n#include <unistd.h>\nint pipe(int pipefd[2]);\n```\n\n`pipe`的一端写，由内核缓存，直到另一端将其读出。\n\n### Socket\n\n```\n#include <sys/types.h>\n#include <sys/socket.h>\nint socket(int domain, int type, int protocol);\nint close(int fd);\nint connect(int sockfd, const struct sockaddr *addr,\n    socklen_t addrlen);\nint bind(int sockfd, const struct sockaddr *addr,\n    socklen_t addrlen);\nint listen(int sockfd, int backlog);\nint accept(int sockfd, struct sockaddr *addr, socklen_t *addrlen);\n```\n\n1. `socket`创建一个socket；\n2. `close`关闭一个socket；\n3. `connect`建立两个socket的连接；\n4. `bind`将socket绑定到地址和端口；\n5. `listen`配置socket接受连接的条件；\n6. `accept`接收一个socket连接并为其创建一个socket；\n\n## 设备\n\n### 操作\n\n```\n#include <sys/types.h>\n#include <sys/stat.h>\n#include <fcntl.h>\n#include <unistd.h>\nint mknod(const char *pathname, mode_t mode, dev_t dev);\n```\n\n`mknod`用于创建一个设备。\n\n```\n#include <sys/ioctl.h>\nint ioctl(int d, unsigned long request, ...);\n```\n\n`ioctl`用于控制设备，常用于驱动编程。\n\n### 特殊设备\n\n`/dev/null`是一个内容为空的设备，将IO流定向到`/dev/null`意味着丢弃其内容；\n\n`/dev/zero`是一个无限长的文件；\n\n`/dev/random`可用于产生随机数；\n\n`/dev/tty*`是串行终端设备，如串口；\n\n`pty`是伪终端，接受键盘的输入并显示到运行它的终端界面；\n\n`pty`的实现涉及到两个概念：\n\n- `ptmx`：被连接的master主机；\n- `pts`：发起向master主机连接的slave主机`pts`，我们常用的SSH登录就意外着在master主机建立一个`pts`进程；\n\n## 常用/proc简介\n\n`/proc/cpuinfo`查看cpu信息；\n\n`/proc/meminfo`查看内存信息；\n\n`/proc/self`查看自身信息；\n\n`/proc/pid_number`查看pid为pid_number的进程信息；\n\n`/proc/loadavg`查看负载信息；\n\n`/proc/uptime`查看启动时间；\n\n`/proc/interrupts`查看中断情况；\n\n## 常用系统调用\n\n`strace`查看系统调用情况；\n\n`access`检测是否具备读写权限；\n`fcntl`操纵文件描述符；\n\n`fsync`和`fdatasync`将缓冲区的文件改动同步到实际文件；\n\n`getrlimit`取得系统的资源限定情况；\n\n`getrusage`取得系统资源使用情况；\n\n`gettimeofday`取得系统时间；\n\n`mlock`锁住一块内存；\n\n`mprotect`保护一块内存；\n\n## 用户与用户组\n\n### 用户与用户组ID\n\n每个用户名对应到一个用户ID，每个用户ID可从属于多个用户组ID。Shell下输入`id`得到如下输出：\n\n```\n# uid为0表示root用户\nuid=0(root) gid=0(root) groups=0(root),1001(nagcmd)\n```\n\n### 文件与用户（组）的关系\n\n`ls -l APL.txt`后得到如下输出：\n\n```\n-rw-r--r-- 1 Jayzee None   1237 五月 18 12:19 APL.txt\n```\n\n`-rw-r--r--`解释：\n\n- 第一个字符`-`表示这是一个文件，`d`表示这是一个文件夹；\n- 2至4字符`rw-`表示拥有者`Jayzee`的权限，顺序为：读（r）、写（w）、执行（x），可读写但不可执行；\n- 5至7字符`r--`表示所属组`None`的权限；\n- 8至10字符`r--`表示组外其他用户的权限；\n\n`man chmod`查看如何更改文件的权限；\n`man chown`查看如何更改文件的拥有者和所属组；\n\n**特殊**\n\n```\ndrwxrwxrwt   1 root root 26416 5月  18 21:53 tmp\n```\n\n只适用于文件夹：当文件夹的所属组或组外的执行（x）被设置为（t）时，表示当且仅当你是该文件夹内文件的创建者，才可以删除该文件；（正常情况下如果该文件夹内文件的权限是对于组或组外可读写，不需要是文件的创建者也可删除的），这里的`t`称为sticky bits。\n\n### 真实的用户ID和有效的用户ID\n\n定义`euid`为有效用户id（effective），`uid`为真实用户id（real）；\n\n`man 2 getuid`查看如何使用C函数获取uid；\n`man 2 geteuid`查看如何使用C函数获取euid；\n\n为什么要引入euid？\n\n1. 当用户发出对文件的操作时，Linux Kernel根据用户的euid检查用户是否具备权限；\n2. euid可被修改，uid不可被修改；\n3. euid被修改代表着用户的切换，uid不被修改表示最初登入系统的uid不变；\n\n用户登录系统时用户id发生什么变化？\n\n1. Linux的登录进程检查登入者输入的账号密码是否正确；\n2. 若正确，使用`exec`为其创建一个User Shell（pts）；\n3. Linux的登录进程设置这个User Shell的euid和uid为同一个值，即该用户的uid（只有euid为0的User Shell可设置euid和uid）；\n\n设置说明：\n\n1. 当我们设置`euid = uid`时，表示返回到最初登录用户的Shell；\n2. 当我们设置`uid = euid`时，表示Linux的登录进程将euid与uid同步，该登录用户与Linux的登录进程（root）再无联系；\n\n`su`命令的原理：\n\n1. `/bin/su`的拥有者为root，其执行项不是（x）而是（s），当文件拥有者的执行项不是（x）而是（s）时，此文件可被执行，且执行文件时调用`geteuid`函数返回的是该可执行文件拥有者的uid而不是调用者的euid；\n2. Linux利用此技术实现普通用户到root用户时，uid不变，而euid变为0；\n3. 当调用`su`时，调用者原User Shell阻塞，Kernel创建一个新User Shell给调用者使用；\n\n注：组ID也分真实和有效，与用户ID类同，故不展开叙述；\n","source":"_posts/2016-04-22-advanced-linux-programing.markdown","raw":"---\nlayout: post\ntitle: 读《Advanced Linux Programing》\ndate: '2016-04-22 19:03'\ncomments: true\ncategories: ['读书笔记']  \ntags: ['Linux', 'C/C++']\n---\n\n《Advanced Linux Programing》读书笔记。\n\n<!--more-->\n\n## 一些介绍\n\nLinux Kernel\n\n- 硬件交互；\n- 内存管理；\n- 文件管理；\n- 多进程管理；\n- 共享库载入；\n\nGNU Project\n\n- 编辑器；\n- 编译器；\n- Shell（/bin/bash，Bourne-Again SHell）；\n\n注意：\n\n1. Linux Kernel加GNU Project，构成了现在主流的Linux操作系统，所以应该称之为GNU/Linux；\n2. Linux操作系统只是UNIX的一种系统实现，其他类UNIX操作系统有FreeBSD、Solaris等；\n\n## Hello, World（快速了解）\n\n### 从文本到可执行程序\n\n```c\n/** main.c **/\n#include <stdio.h>\n\nvoid sayHello() {\n    printf(\"Hello, World\\n\");\n}\n\nint main() {\n    sayHello();\n    return 0;\n}\n```\n\nShell下运行`gcc -o main main.c`即可得到可执行文件`main`，执行`./main`即可在控制台上看到`Hello, World`的输出。那么，它的原理是什么？从`main.c`到`main`，经历了以下步骤：\n\n- main.c --> main.i --> main.s --> main.o --> main\n- 程序文本 + **预处理器(cpp)** --> 被修改的源程序文本 + **编译器(ccl)** --> 汇编文本 + **汇编器(as)** --> 可重定向目标文件（二进制） + printf.o + **链接器(ld)** --> main（可执行程序）\n\n对应到Shell下，经历了以下命令：\n\n```bash\ngcc -E main.c -o main.i\ngcc -S main.i -o main.s --> main.s\ngcc -c main.s -o main.o --> main.o\ngcc main.o -o main --> main\n\n# 上面4句等价于下面一句，gcc自动进行预处理、编译、汇编和链接\ngcc main.c -o main\n\n```\n\n`-E`进行预处理，将头文件插入C文件同时执行宏替换；`-S`用于生成汇编绘本；`-c`命令用于汇编；`-o`命令用于指定输出文件名称。\n\n### 编写可用g++编译的c程序\n\n```c\n/** main.c **/\n#include <stdio.h>\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\nvoid sayHello();\n#ifdef __cplusplus\n}\n#endif\n\nvoid sayHello() {\n    printf(\"Hello, World\\n\");\n}\n\nint main() {\n    sayHello();\n    return 0;\n}\n```\n\n### 其他常用gcc命令\n\n- `-I`指定存放头文件的路径（相对或绝对路径）；\n- `-D`定义一个宏；\n- `-O`指定优化级别；\n- `-l`指定要链接的库；\n- `-L`指定搜索动态链接库的路径；\n\n```bash\n# 生成可执行文件main\n# 从绝对路径/root/搜索头文件\n# 定义宏DEBUG\n# 定义优化级别为2（0<1<2<3，0表示不优化）\n# 链接数学库m\n# 在/usr/local/lib下查找数学库m的动态链接库\ngcc main.c -o main -I /root/ -D DEBUG=2 -O2 -lm -L/usr/local/lib\n```\n\n### 如何节省编译的工作\n\n1. 写MakeFile；\n2. 使用autoconf、automake和libtool；\n\n简单的makefile举例：\n\n```\nmain.o: main.c\n        gcc -c main.c -o main.o\n\nall: main\n\nmain: main.o\n        gcc main.o -o main\n\nclean:\n        rm main.o main\n```\n\n如何使用这个makefile：\n\n```bash\n# 编译（把all换成main效果一致）\n# 方法1：用-f指定makefile文件\nmake -f makefile all\n# 方法2：不指定makefile文件，默认会在当前文件夹寻找\n# 按顺序寻找文件GNUmakefile-->makefile-->Makefile，找不到则报错\nmake all\n\n# 清除编译结果，以下二选一\nmake clean\nmake -f makefile clean\n```\n\nmakefile的基本组成如下（**command必须以一个tab开始**）：\n\n```\n# target表示目标体，它位于冒号之前\n# dependency_files表示依赖的文件或target，它位于冒号之后\n# command表示达成这个目标所需执行命令\ntarget: dependency_files\n        command\n```\n\nmakefile里面也可定义和调用变量：\n\n```\nCC=gcc\nEXE=main\n\nmain.o: main.c\n        $(CC) -c main.c -o main.o\n\nall: $(EXE)\n\n$(EXE): main.o\n        gcc main.o -o $(EXE)\n\nclean:\n        rm main.o $(EXE)\n```\n\n也可在外部调用时传入变量（会将makefile中已存在的变量覆盖掉），命令如下：\n\n```bash\nmake EXE=mm all\nmake EXE=mm clean\n```\n\n### 使用GDB调试程序简介\n\n使用`gdb 程序名（相对或绝对路径）`进入gdb：\n2. 输入`break main`为main函数设置断点，输入`break main.c:5`为`main.c`的第5行设置断点；\n3. 输入`i b`查看当前断点；\n4. 输入`delete 1`删除第一个断点；\n5. 输入`disable 1`停用第一个断点；\n6. 输入`list main.c:5`可在gdb显示代码；\n6. 输入`r`或`run`运行，这时用户将无法再输入命令，直到运行到断点时，gdb将交回命令行控制权，这时输入`n`或`next`表示运行到下一行，`s`或`step`表示进入当前行调用的函数，输入`return`返回到上一层函数；\n7. gdb交回命令行控制权时，输入`print 参数名`可查看当前作用域内的具体参数值；\n8. 假如程序意外退出，这时输入`where`、`bt`或`backtrace`可以查看错误堆栈；\n\n### 如何查看帮助手册\n\n终端下输入`man 命令名称`（如`man printf`）将看到如下提示：\n\n```\nMan: 寻找所有匹配的手册页 (set MAN_POSIXLY_CORRECT to avoid this)\n * printf (1)\n   printf (3)\n   printf (1p)\n   printf (3p)\nMan: 您需要什么手册页？\nMan: \n```\n\n1. 数字1表示这是一个用户命令（user commands，如**echo**）；\n2. 数字2表示这是一个系统调用（system calls，如**fork**）；\n3. 数字3表示这是一个标准库（stand library，如**printf**）；\n4. 带p后缀的为POSIX标准，释义：POSIX标准定义了操作系统应该为应用程序提供的接口标准，一个POSIX兼容的操作系统编写的程序，应该可以在任何其它的POSIX操作系统（即使是来自另一个厂商）上编译执行；\n\n## 编程实践\n\n### 环境交互\n\n1. 临时文件（用于暂时存放数据），使用下述命令查看具体用途\n    - `man mkstemp`\n    - `man tmpfile`\n1. 环境变量（设置运行环境）\n    - shell下`echo $USER`或`printenv USER`打印环境变量`USER`；\n    - shell下`export USER=jayzee`设置环境变量`USER`为`jayzee`；\n    - shell下`env`查询当前用户所有环境变量；\n    - Linux下调用一个C/C++程序时，该程序继承其调用者的所有环境变量，标准库`stdlib.h`的`getenv`、`setenv`和`unsetenv`用于获取、操纵环境变量；\n1. shell下调用程序结束后，使用`echo $?`获取程序退出代码（0表示正常）；\n1. IO（输入输出流）\n    - 程序中，宏`stdin`表示输入流，对应int值0；宏`stdout`表示标准输出流，对应int值1；宏`stderr`表示错误输出流，对应int值2；\n    - `stdin`只能是buffered的，但其buffered size可以修改；\n    - `stderr`只能是unbuffered，一有错误立即输出；\n    - 当程序直接在shell调用并且直接输出到控制台时，`stdout`是line-buffered的，否则是buffered的，但其buffered size可以修改，`man setvbuf`查看标准库如何设置输入输出流；\n    - 程序写文件也是默认buffered，写完后应使用`fflush(your_file)`立即清空buffer写入到文件；\n    - shell命令`your_program > output_file.txt 2>&1`表示将`your_program`的标准输出写入到文件`output_file.txt`（`>`执行覆盖写，`>>`执行追加写），并且将错误输出流重定向到标准输出流，Linux规定文件名必须在流重定向之前；\n    - shell命令`program 2>&1 | filter`表示将标准输出使用管道过滤，Linux规定重定向必须在过滤器之前；\n1. `man getopt_long`查看`getopt.h`库如何处理程序参数（类似于`ls -l`的`-l`）；\n\n### 好的编程习惯\n\n使用断言assert：\n\n- 所有需确认值为true或非0的需使用`assert(condition)`；\n- 编译时指定`-DNDEBUG`可移除所有assert语句，所以**千万不要把程序的重要逻辑放在assert语句中**；\n\n处理系统调用失败：\n\n- 系统调用如`fork`失败时会返回非零值，这时宏`errno`会被设置，下次系统调用失败时又会覆盖这个宏的值；\n- `man strerror`查看如何使用`string.h`的`strerror`的具体字符串释义，细节如下：\n\n```\nEINTR : blocking function interrupt, like sleep, read, select\nEPERM : Permission denied\nEROFS : PATH is on a read-only file system\nENAMETOOLONG : PATH is too long\nENOENT : PATH does not exit\nENOTDIR : A component of PATH is not a directory\nEACCES : A component of PATH is not accessible\nEFAULT : PATH contains an invalid memory address.  This is probably a bug\nENOMEM : Ran out of kernel memory\n```\n\n申请内存与释放内存：\n\n- 申请内存与释放内存的语句必须成对，即有申请内存则相应的要有释放内存；\n\n### 链接程序（库：快速开发，软件复用）\n\n以下文字部分引用自[C++静态库与动态库 - 吴秦 - 博客园](http://www.cnblogs.com/skynet/p/3372855.html)，向该作者致敬。\n\n下文用到的main.c文件：\n\n```bash\n/** main.c **/\nint add(int x, int y) {\n    return x + y;\n}\n```\n\n#### 静态链接\n\n静态库的特点：\n\n- 静态库对函数库的链接是放在编译时期完成的；\n- 程序在运行时与函数库再无瓜葛，移植方便；\n- 浪费空间和资源，因为所有相关的目标文件与牵涉到的函数库被链接合成一个可执行文件；\n\n静态库的创建：\n\n- 静态库的命名规范为lib[your_library_name].a：lib为前缀，中间是静态库名，扩展名为.a；\n- 首先将代码文件编译成目标文件.o，再通过ar工具将目标文件打包.a静态库文件；\n\n```bash\n# 假定有一个math.c文件，提供加法函数int add(int x, int y)，我们现在将其打包成静态库\ngcc -c math.c -o math.o\nar -crv libmath.a math.o\n```\n\n使用静态库：\n\n- 在编译时指定静态库搜索路径（-L选项）、指定静态库名称（不需要lib前缀和.a后缀，-l选项）；\n\n```bash\n# -l为什么一定要放在末尾？它会去查找库的所有被引用的函数或宏等并插入到最终的可执行程序，放在末尾是为了这种依赖搜索在最后执行\ngcc main.c -o main -Lfilepath_of_your_static_library -lmath\n```\n\n静态库优缺点：\n\n- 优点：编译成可执行文件后与其编译时引用的静态库再无任何瓜葛；\n- 缺点：导致可执行程序体量庞大，同一个操作系统上运行的多个程序引用同一个静态库会导致内存浪费（相同的代码），导致客户的全量更新；\n\n#### 动态链接\n\n动态库的特点：\n\n- 动态库把对一些库函数的链接载入推迟到程序运行的时期；\n- 可以实现进程之间的资源共享（因此动态库也称为共享库）；\n- 将一些程序升级变得简单；\n- 甚至可以真正做到链接载入完全由程序员在程序代码中控制（显示调用）；\n\n动态库的创建：\n\n- 动态库的命名规范为lib[your_library_name].so：lib为前缀，中间是动态库名，扩展名为.so；\n- 首先将代码文件编译成目标文件.o，再通过gcc工具将目标文件打包.so动态库文件；\n    - `-fPIC`创建与地址无关的编译程序（pic，position independent code），是为了能够在多个应用程序间共享；\n    - `-shared`指定生成动态链接库；\n\n```bash\n# 假定有一个math.c文件，提供加法函数int add(int x, int y)，我们现在将其打包成动态库\ngcc -fPIC -c math.c -o math.o\ngcc -shared -o libmath.so math.o\n# 上面两条命令等价于\ngcc -fPIC -shared -o libmath.so math.c\n```\n\n使用动态库：\n\n- 在编译时指定动态库搜索路径（-L选项）、指定动态库名称（不需要lib前缀和.so后缀，-l选项）；\n\n```bash\ngcc main.c -o main -Lfilepath_of_your_static_library -lmath\n```\n\n- 注意，运行上述生成的可执行文件时，操作系统会去一些指定路径查找并载入该动态库，如查找不到将抛出找不到动态库的异常信息，这些指定路径是：\n    - 环境变量LD_LIBRARY_PATH，如`LD_LIBRARY_PATH=/usr/local/lib:/opt/lib`；\n    - /etc/ld.so.cache文件列表，需要额外操作如下：\n        + 编辑/etc/ld.so.conf文件，加入库文件所在目录的路径；\n        + 运行ldconfig ，该命令会重建/etc/ld.so.cache文件；\n    - /lib/，/usr/lib目录；\n- `-L`指定的库搜索路径下即有动态库也有静态库，则动态库具有较高优先级被链接；\n\n动态库优缺点：\n\n- 缺点：增量更新必须考虑向后兼容；\n- 优点：增量更新，避免内存浪费（同一个操作系统上运行的多个程序引用同一个动态库只需要一份共享库示例）；\n\n#### 链接检查辅助命令\n\n`nm`命令：打印出库中的涉及到的所有符号。库既可以是静态的也可以是动态的。nm列出的符号有很多，常见的有三种，\n\n- 一种是在库中被调用，但并没有在库中定义(表明需要其他库支持)，用U表示；\n- 一种是库中定义的函数，用T表示，这是最常见的；\n- 一种是所谓的弱态”符号，它们虽然在库中被定义，但是可能被其他库中的同名符号覆盖，用W表示；\n\n`ldd`命令：查看一个可执行程序依赖的共享库。\n\n## 进程\n\n本章节部分内容引用自[Linux下Fork与Exec使用 - hicjiajia - 博客园](http://www.cnblogs.com/hicjiajia/archive/2011/01/20/1940154.html)和[系统调用跟我学(3)](http://www.ibm.com/developerworks/cn/linux/kernel/syscall/part3/index.html)，向作者致敬。\n\n### 进程查看\n\n`pid`指进程id，`ppid`指父进程id。\n\n1. Linux所有**用户进程**呈树状结构，这棵用户进程树的根节点是init进程（内核启动的第一个用户级进程），init进程的`pid`为1，其ppid为0；\n2. shell下运行`ps -e -o pid,ppid,command`可查看所有用户进程的pid、ppid和command；\n3. `unistd.h`提供`getpid()`和`getppid()`获取进程的ID和父ID；\n\n### 进程创建\n\n#### system函数：执行shell命令\n\nsystem函数用于在C/C++语言中执行shell命令，其API如下：\n\n```bash\n#include <stdlib.h>\nint system(const char *command);\n```\n\n其具体实现是：\n\n1. 先执行系统调用`fork()`创建子进程；\n2. 再执行`execl(\"/bin/sh\", \"sh\". \"-c\", command, (char *) 0);`去调用shell执行command；\n\n#### fork函数，exec族函数\n\n##### fork函数：创建子进程，进程分叉\n\nfork函数API如下：\n\n```bash\n#include <unistd.h>\npid_t fork(void);\n```\n\nfork函数的特点：\n\n- fork调用之后，父进程进入`pid>0`的分支，子进程进入`pid==0`的分支；\n- fork创建的子进程是父进程的一个完整拷贝，**当且仅当fork之后的代码即将开始更新内存，真实的拷贝才会发生**（也就是上述例子并没有发生拷贝），为什么这么设计，我们会在下面讲到；\n- fork创建的子进程拥有一个新的进程pid号，子进程的ppid为调用fork函数的进程id；\n\npid_t是一个整型变量。具体示例如下：\n\n```c\n/* zombie.c */\n#include <sys/types.h>\n#include <unistd.h>\nint main() {\n    pid_t pid;\n    pid=fork();\n    if(pid<0) /* 如果出错 */\n        printf(\"error occurred!\\n\");\n    else if(pid==0) /* 如果是子进程 */\n        exit(0);\n    else /* 如果是父进程 */\n        sleep(60); /* 休眠60秒，这段时间里，父进程什么也干不了 */\n    wait(NULL); /* 收集僵尸进程 */\n}\n```\n\n##### exec函数族：对当前进程进行替换\n\nexec并不是一个具体函数，它是以下六个函数：\n\n```c\n#include <unistd.h>\nint execl(const char *path, const char *arg, ...);\nint execlp(const char *file, const char *arg, ...);\nint execle(const char *path, const char *arg, ..., char *const envp[]);\nint execv(const char *path, char *const argv[]);\nint execvp(const char *file, char *const argv[]);\nint execve(const char *path, char *const argv[], char *const envp[]);\n```\n\n其中`execl`是基函数，其他5个是它的变种（区别在于传参形式不同，带v的表示参数以数组传递，带l的表示参数以陈列的方式传递）。\n\nexec函数族特点：\n\n- 只保留当前进程的pid，其他进程相关的数据段全部废弃；对系统而言，还是同一个进程号，但其实已经是另外一个程序了，即调用exec函数族的进程已“死亡”了；\n- 上面说到，fork的数据拷贝只发生在子进程更新内存时，fork调用后立即执行exec函数族使得我们能够产生一个全新的进程（**这意味着当前进程的所有线程、文件描述符等都被释放**），与fork调用进程再无任何瓜葛；\n\n举一个具体例子如下：\n\n```c\n#include <errno.h>\n#include <stdio.h>\n#include <stdlib.h>\n\nchar command[256];\nvoid main()\n{\n   int rtn; /*子进程的返回数值*/\n   while(1) {\n       /* 从终端读取要执行的命令 */\n       printf( \">\" );\n       fgets( command, 256, stdin );\n       command[strlen(command)-1] = 0;\n       if ( fork() == 0 ) {/* 子进程执行此命令 */\n          execlp( command, NULL );\n          /* 如果exec函数返回，表明没有正常执行命令，打印错误信息*/\n          perror( command );\n          exit( errno );\n       }\n       else {/* 父进程， 等待子进程结束，并打印子进程的返回值 */\n          wait ( &rtn );\n          printf( \" child process return %d\\n\", rtn );\n       }\n   }\n}\n```\n\n### 信号处理\n\n信号是一种异步的进程通信机制，是软件层面的中断，进程接收到线程必须进行处理，有以下三种处理方式：\n\n- 使用进程对信号的静默处理；\n- 忽略该信号；\n- 使用特定的信号处理函数进行处理；\n\n上述的后两种方式需要使用`signal()`函数进行处理，举例如下：\n\n```c\n// 忽略SIGPIPE信号\nsignal ( SIGPIPE, SIG_IGN );\n// 使用PrepareExit处理SIGINT信号\nsignal ( SIGINT, (__sighandler_t ) PrepareExit );\n```\n\nLinux的信号如下：\n\n```\n信号值 默认处理动作 发出信号的原因\nSIGHUP 1 A 终端挂起或者控制进程终止\nSIGINT 2 A 键盘中断（如break键被按下）\nSIGQUIT 3 C 键盘的退出键被按下\nSIGILL 4 C 非法指令\nSIGABRT 6 C 由abort(3)发出的退出指令\nSIGFPE 8 C 浮点异常\nSIGKILL 9 AEF Kill信号\nSIGSEGV 11 C 无效的内存引用\nSIGPIPE 13 A 管道破裂: 写一个没有读端口的管道\nSIGALRM 14 A 由alarm(2)发出的信号\nSIGTERM 15 A 终止信号\nSIGUSR1 30,10,16 A 用户自定义信号1\nSIGUSR2 31,12,17 A 用户自定义信号2\nSIGCHLD 20,17,18 B 子进程结束信号\nSIGCONT 19,18,25 进程继续（曾被停止的进程）\nSIGSTOP 17,19,23 DEF 终止进程\nSIGTSTP 18,20,24 D 控制终端（tty）上按下停止键\nSIGTTIN 21,21,26 D 后台进程企图从控制终端读\nSIGTTOU 22,22,27 D 后台进程企图从控制终端写\n\n处理动作一项中的字母含义如下：\nA 缺省的动作是终止进程\nB 缺省的动作是忽略此信号，将该信号丢弃，不做处理\nC 缺省的动作是终止进程并进行内核映像转储（dump core），内核映像转储是指将进程数据在内存的映像和进程在内核结构中的部分内容以一定格式转储到文件系统，并且进程退出执行，这样做的好处是为程序员提供了方便，使得他们可以得到进程当时执行时的数据值，允许他们确定转储的原因，并且可以调试他们的程序\nD 缺省的动作是停止进程，进入停止状况以后还能重新进行下去，一般是在调试的过程中（例如ptrace系统调用）\nE 信号不能被捕获\nF 信号不能被忽略\n```\n\n**注意**：\n信号处理函数可被新产生的信号所中断，所以信号处理函数应该做尽可能少的工作；\n\n\n### 进程终止\n\n#### 信号终止\n\n1. `SIGINT`：CRTL+C产生；\n2. `SIGTERM`：shell下`kill pid`产生；\n3. `abort()`：发送一个`SIGABRT`信号给自己；\n4. `SIGKILL`：强制退出信号，shell下`kill -9 pid`产生；\n\n当进程终止时，shell调用`echo $?`可取得该进程的exit code，\n\n- 如果该进程由信号终止，exit code为128加上信号值；\n- 调用`exit(int exit_code)`函数退出，exit_code的范围需在0到128之间；\n\n如何给进程发送指定信号，\n\n- 在shell下使用`kill -s SIGNAL_NAME pid`，可以给进程pid发送SIGNAL_NAME信号；\n- 程序使用`kill(pid, SIGNAL_NAME)`函数；\n\n#### wait\n\nUnix的进程终止时，一些资源（如进程pid、进程exit code、收到的信号、占用CPU时间等）并不会被立即释放（堆栈等内存立即释放），死亡进程的父进程必须调用`wait`函数对进程进行“收尸”，即释放进程的pid和exit code等资源。\n\n`wait`函数的API定义如下：\n\n```c\npid_t wait(int *status);\n```\n\n一些说明：\n\n- `wait`函数是阻塞式的，在子进程未结束时将阻塞；\n- 如果`pid_t`为-1，表明`wait`调用失败，这是因为调用进程没有子进程导致；否则，表明收集子进程“死亡”信息成功，`pid_t`的值为“死亡”进程pid；\n- `status`是一个指针，如果这个指针为空，表明我们不关心进程的“死亡”信息细节，只是发起了回收这个动作；否则，status将包含进程“死亡”的一些信息；\n- 调用`WIFEXITED(status)`，若返回值回0表明进程异常退出（如信号导致退出），这时调用`WTERMSIG(status)`将得到使进程死亡的信号int值；否则表示程序正常退出，这时候调用`WEXITSTATUS(status)`可获取“死亡”进程的exit code（如“死亡”进程调用`exit(7)`退出，则`WEXITSTATUS(status)`的结果为7）；\n\n```c\n/* wait2.c */\n#include <sys/types.h>\n#include <sys/wait.h>\n#include <unistd.h>\n#include <stdio.h>\n#include <stdlib.h>\n\nmain()\n{\n    int status;\n    pid_t pc,pr;\n    pc=fork();\n    if(pc<0)     /* 如果出错 */\n        printf(\"error ocurred!\\n\");\n    else if(pc==0){ /* 子进程 */\n        printf(\"This is child process with pid of %d.\\n\",getpid());\n        exit(3);    /* 子进程返回3 */\n    }\n    else{       /* 父进程 */\n        pr=wait(&status);\n        if(WIFEXITED(status)){  /* 如果WIFEXITED返回非零值 */\n            printf(\"the child process %d exit normally.\\n\",pr);\n            printf(\"the return code is %d.\\n\",WEXITSTATUS(status));\n        }else           /* 如果WIFEXITED返回零，这时pr存储死亡进程pid */\n            printf(\"the child process %d exit abnormally with signal number %d.\\n\",pr,WTERMSIG(status));\n    }\n}\n```\n\n#### 僵尸进程\n\n如果子进程死亡，父进程却没有调用`wait`对其进行“收尸”，子进程就会变成一个僵尸进程，\n\n```\n$ ps -ax\n  PID TTY      STAT   TIME COMMAND\n 1177 pts/0    S      0:00 -bash\n 1577 pts/0    S      0:00 ./zombie\n 1578 pts/0    Z      0:00 [zombie <defunct>]\n 1579 pts/0    R      0:00 ps -ax\n```\n\n若STAT为Z则表明则是一个僵尸进程，关于僵尸进程，\n\n- 在父进程退出时，init进程会自动对其下的所有僵尸子进程进行清理；\n- 子进程意外死亡时，父进程会受到一个SIGCHLD信号，父进程可以注册这个信号的处理函数进行“收尸”；\n- `wait3`和`wait4`函数为异步的，可以周期调用这两个函数执行回收；\n\n## 线程\n\n### 线程创建\n\n**线程创建**：`int pthread_create(pthread_t *thread, const pthread_attr_t *attr,\nvoid *(*start_routine) (void *), void *arg);`\n\n- `pthread_create`的返回值为0表示创建线程成功；\n- `thread`是指向`pthread_t`的指针；\n- `pthread_attr_t`在下一个例子介绍；\n- `start_routine`是一个无形参且无返回值的函数指针；\n- `arg`是上面提到的函数指针所接收的参数；\n\n**线程回收**：`int pthread_join(pthread_t thread, void **retval);`\n\n- `retval`实际上是一个指向整型指针的指针，它存放的是线程调用`exit`或`pthread_exit`的退出值；\n- `When a joinable thread terminates, its memory resources (thread descriptor and stack) are not deallocated until another thread performs pthread_join on it. Therefore, pthread_join must be called  once  for each joinable thread created to avoid memory leaks.`\n- 这是一个阻塞式的方法，当监控到有线程结束时才返回；\n\n**线程退出**：`void pthread_exit(void *retval);`\n\n- `retval`实际是一个整型指针，在退出时标识线程的退出值；\n\n```c\n#include <stdio.h>\n#include <pthread.h>\n#include <unistd.h>\n\nint code = 11;\n\nvoid hello(void *args) {\n    char *str = (char *) args;\n    sleep(5);\n    printf(\"Hello, %s!\\n\", str);\n    pthread_exit(&code);\n}\n\nint main() {\n    pthread_t thread;\n    int status = pthread_create(&thread, NULL, (void *)hello, (void *) \"Jayzee\");\n    printf(\"thread create status : %d\\n\", status);\n    int *exit_code = 0;\n    status = pthread_join(thread, (void *) &exit_code);\n    printf(\"thread join status : %d\\n\", status);\n    printf(\"thread exit code : %d\\n\", *exit_code);\n    return 0;\n}\n```\n\n------\n\n下面的例子在`pthread_create`时用到了`pthread_attr_t`，必须经历下面四个过程\n\n1. 先实例化`pthread_attr_t`；\n2. 再设置`pthread_attr_t`；\n3. 在线程创建时使用该`pthread_attr_t`；\n4. 线程创建完后销毁`pthread_attr_t`；\n\n注意：\n\n1. 创建线程时设置其为detach态，意味着我们不关心它的返回值，只是进行线程相关资源回收；\n2. 也可创建线程时不指定detach态，在线程创建后可使用`int pthread_detach(pthread_t thread);`设置其为detach态；\n\n```c\n#include <stdio.h>\n#include <pthread.h>\n#include <unistd.h>\n\nint code = 11;\n\nvoid hello(void *args) {\n    char *str = (char *) args;\n    sleep(5);\n    printf(\"Hello, %s!\\n\", str);\n    pthread_exit(&code);\n}\n\nint main() {\n    pthread_t thread;\n    pthread_attr_t attr;\n    pthread_attr_init (&attr);\n    pthread_attr_setdetachstate (&attr, PTHREAD_CREATE_DETACHED);\n    int status = pthread_create (&thread, &attr, (void *)hello, (void *) \"Jayzee\");\n    pthread_attr_destroy (&attr);\n    printf(\"thread create status : %d\\n\", status);\n    return 0;\n}\n```\n\n### 线程取消\n\n```\nint pthread_setcancelstate(int state, int *oldstate);\nint pthread_setcanceltype(int type, int *oldtype);\nint pthread_cancel(pthread_t thread);\n```\n\n- `pthread_setcancelstate`在运行时设置线程的状态`state`，并取得其之前的状态`oldstate`；\n- `pthread_setcanceltype`在运行时设置线程的类型`type`，并取得其之前的类型`oldtype`；\n- `pthread_cancel`用于取消线程的执行；\n\n\n注意，\n\n1. type：`PTHREAD_CANCEL_DEFERRED`或`PTHREAD_CANCEL_ASYNCHRONOUS`\n2. state：`PTHREAD_CANCEL_ENABLE`或`PTHREAD_CANCEL_DISABLE`\n3. type和state作用于`pthread_cancel`：\n    - 当state为`PTHREAD_CANCEL_DISABLE`时，设置的type和调用`pthread_cancel`不会对线程造成任何影响；\n    - 否则，当设置的type为`PTHREAD_CANCEL_DEFERRED`时，为非阻塞取消（等待达到取消的条件，如释放锁）；当设置的type为`PTHREAD_CANCEL_ASYNCHRONOUS`时为异步取消（即线程立即被取消，但不同操作系统有可能实现不同，理应处理释放锁）；\n\n```c\n#include <stdio.h>\n#include <pthread.h>\n#include <unistd.h>\n\nint code = 11;\n\nvoid hello(void *args) {\n    pthread_setcancelstate(PTHREAD_CANCEL_ENABLE, &last_state); \n    pthread_setcanceltype(PTHREAD_CANCEL_DEFERRED, &last_type);\n    char *str = (char *) args;\n    sleep(5);\n    printf(\"Hello, %s!\\n\", str);\n    pthread_exit(&code);\n}\n\nint main() {\n    pthread_t thread;\n    int status = pthread_create(&thread, NULL, (void *)hello, (void *) \"Jayzee\");\n    printf(\"thread create status : %d\\n\", status);\n    int *exit_code = 0;\n    status = pthread_join(thread, (void *) &exit_code);\n    printf(\"thread join status : %d\\n\", status);\n    printf(\"thread exit code : %d\\n\", *exit_code);\n    pthread_cancel(thread);\n    return 0;\n}\n```\n\n### 线程特定数据\n\n```\nint pthread_key_create(pthread_key_t *key, void (*destructor)(void*));\nint pthread_setspecific(pthread_key_t key, const void *value);\nvoid *pthread_getspecific(pthread_key_t key);\n```\n\n1. 使用`pthread_key_create`创建`key`，`destructor`为线程结束时用于析构的函数指针，一个进程内的多个线程可以共用一个`key`；\n2. `pthread_setspecific`为线程设定key-value，`pthread_getspecific`根据key获得value；\n3. 当线程结束时，若`pthread_getspecific`的内容不为空，且`destructor`不为空，则`pthread_getspecific`的内容将作为`destructor`的参数来执行析构函数；\n\n```c\n#include <malloc.h>\n#include <pthread.h>\n#include <stdio.h>\n\n/* The key used to associate a log file pointer with each thread. */\nstatic pthread_key_t thread_log_key;\n\n/* Write MESSAGE to the log file for the current thread. */\nvoid write_to_thread_log (const char* message) {\n    FILE* thread_log = (FILE*) pthread_getspecific (thread_log_key);\n    fprintf (thread_log, \"%s\\n\", message);\n}\n\n/* Close the log file pointer THREAD_LOG. */\nvoid close_thread_log (void* thread_log) {\n    fclose ((FILE*) thread_log);    \n}\n\nvoid* thread_function (void* args) {\n    char thread_log_filename[20];\n    FILE* thread_log;\n    /* Generate the filename for this thread’s log file. */\n    sprintf (thread_log_filename, \"thread%d.log\", (int) pthread_self ());\n    /* Open the log file. */\n    thread_log = fopen (thread_log_filename, \"w\");\n    /* Store the file pointer in thread-specific data under thread_log_key. */\n    pthread_setspecific (thread_log_key, thread_log);\n    write_to_thread_log (\"Thread starting.\");\n    /* Do work here... */\n    return NULL;\n}\n\nint main () {\n    int i;\n    pthread_t threads[5];\n    /* Create a key to associate thread log file pointers in\n    thread-specific data. Use close_thread_log to clean up the file\n    pointers. */\n    pthread_key_create (&thread_log_key, close_thread_log);\n    /* Create threads to do the work. */\n    for (i = 0; i < 5; ++i)\n        pthread_create (&(threads[i]), NULL, thread_function, NULL);\n    /* Wait for all threads to finish. */\n    for (i = 0; i < 5; ++i)\n        pthread_join (threads[i], NULL);\n    return 0;\n}  \n```\n\n```\nvoid pthread_cleanup_push(void (*routine)(void *), void *arg);\nvoid pthread_cleanup_pop(int execute);\n```\n\n1. `pthread_cleanup_push`在线程运行时为线程压栈清理函数；\n2. `pthread_cleanup_pop`从栈弹出一个清理函数，如果`execute`不为0则执行这个清理函数；\n3. 线程结束时，所有压栈的清理函数会自动被弹出栈进行执行；\n4. 当在线程内使用longjump前，应手动调用`pthread_cleanup_pop`执行清理；\n\n### 线程同步\n\n#### 互斥锁\n\n```\nint pthread_mutex_destroy(pthread_mutex_t *mutex);\nint pthread_mutex_init(pthread_mutex_t *restrict mutex,\n    const pthread_mutexattr_t *restrict attr);\npthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER;\n```\n\n1. `pthread_mutex_destroy`销毁互斥锁，`pthread_mutex_init`创建互斥锁；\n2. `pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER;`表示定义并默认实例化一个互斥锁；\n\n```\nint pthread_mutex_lock(pthread_mutex_t *mutex);\nint pthread_mutex_trylock(pthread_mutex_t *mutex);\nint pthread_mutex_unlock(pthread_mutex_t *mutex);\n```\n\n1. `pthread_mutex_lock`为阻塞锁，`pthread_mutex_trylock`为非阻塞锁（获取不到锁）则立即返回，`pthread_mutex_unlock`为释放锁；\n\n```c\n#include <pthread.h>\n\nint main() {\n    pthread_mutexattr_t attr;\n    pthread_mutex_t mutex;\n    pthread_mutexattr_init (&attr);\n    // 带错误检查的互斥锁\n    pthread_mutexattr_setkind_np (&attr, PTHREAD_MUTEX_ERRORCHECK_NP);\n    pthread_mutex_init (&mutex, &attr);\n    pthread_mutex_lock(&mutex);\n    /** do some work **/\n    pthread_mutex_unlock(&mutex);\n    pthread_mutexattr_destroy (&attr);\n}\n```\n\n#### 信号量\n\n```\nint sem_init(sem_t *sem, int pshared, unsigned int value);\nint sem_post(sem_t *sem);\nint sem_wait(sem_t *sem);\n```\n\n1. `sem_init`实例化信号量`sem`，`pshared`为0表示进程内共享（非0为进程间共享），`value`为初始容量值（默认容量值为0）；\n2. `sem_wait`将容量值减一，`sem_wait`之后若容量值小于0则线程阻塞；`sem_post`将容量值加一；\n3. 假设容量值为负，一次`sem_post`只能唤醒一个线程；\n4. `sem_wait`和`sem_post`是线程安全的；\n\n```c\n#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <pthread.h>\n#include <unistd.h>\n#include <semaphore.h>\n\nsem_t semaphore;\n\nvoid threadfunc() {\n    int i = 0;\n    for (; i<10; i++) {\n        // 实际上不会这么使用，这里仅是展示\n        sem_wait(&semaphore);\n        printf(\"Hello from da thread!\\n\");\n        sem_post(&semaphore);\n        sleep(1);\n    }\n}\n\nint main(void) {\n    // 实例化\n    sem_init(&semaphore, 0, 1);\n    \n    pthread_t *mythread;    \n    mythread = (pthread_t *)malloc(sizeof(*mythread));\n    \n    // 启动线程\n    printf(\"Starting thread, semaphore is unlocked.\\n\");\n    pthread_create(mythread, NULL, (void*)threadfunc, NULL);\n    pthread_join(mythread, NULL);\n    \n    return 0;\n}\n```\n\n#### 条件值\n\n```\nint pthread_cond_init(pthread_cond_t *restrict cond,\n    const pthread_condattr_t *restrict attr);\npthread_cond_t cond = PTHREAD_COND_INITIALIZER;\nint pthread_cond_signal(pthread_cond_t *cond);\nint pthread_cond_wait(pthread_cond_t *restrict cond,\n   pthread_mutex_t *restrict mutex);\n```\n\n1. `pthread_cond_t cond = PTHREAD_COND_INITIALIZER;`等价于`pthread_cond_init(&pthread_cond_t, NULL);`\n2. 当调用`pthread_cond_signal`或`pthread_cond_wait`时，必须获得锁；\n3. 调用`pthread_cond_wait`时，自动释放锁，直到被`pthread_cond_signal`唤醒时，才重新自动获得锁；\n4. `pthread_cond_timedwait`可批量唤醒等待的线程；\n\n```c\n#include <stdio.h>\n#include <pthread.h>\n\npthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER;\npthread_cond_t cond = PTHREAD_COND_INITIALIZER;\nint condition = 0;\nint count = 0;\n\nint consume( void )\n{\n    while( 1 )\n    {\n        pthread_mutex_lock( &mutex );\n        while( condition == 0 )\n            pthread_cond_wait( &cond, &mutex );\n        printf( \"Consumed %d\\n\", count );\n        condition = 0;\n        pthread_cond_signal( &cond );        \n        pthread_mutex_unlock( &mutex );\n    }\n\n    return( 0 );\n}\n\nvoid* produce( void * arg )\n{\n    while( 1 )\n    {\n        pthread_mutex_lock( &mutex );\n        while( condition == 1 )\n            pthread_cond_wait( &cond, &mutex );\n        printf( \"Produced %d\\n\", count++ );\n        condition = 1;\n        pthread_cond_signal( &cond );        \n        pthread_mutex_unlock( &mutex );\n    }\n    return( 0 );\n}\n\nint main( void )\n{\n    pthread_create( NULL, NULL, &produce, NULL );\n    return consume();\n}\n```\n\n### 线程实现\n\nLinux的线程实现是系统调用`clone()`，它创建一个与父进程共用资源的子进程。\n\n## 进程间通信\n\n### 共享内存\n\n```\n#include <sys/ipc.h>\n#include <sys/shm.h>\nint shmget(key_t key, size_t size, int shmflg);\nvoid *shmat(int shmid, const void *shmaddr, int shmflg);\nint shmdt(const void *shmaddr);\nint shmctl(int shmid, int cmd, struct shmid_ds *buf);\n```\n\n1. `shmget`申请共享内存；\n2. `shmat`取得已申请的共享内存，共享内存使用者计数器加1；\n3. `shmdt`断开已申请的共享内存，共享内存使用者计数器减1，如果计时器减到0，这块共享内存会被系统标注并删除；\n4. `shmctl`对共享内存的标识信息进行设置；\n\n### 进程信号量\n\n```\n#include <sys/types.h>\n#include <sys/ipc.h>\n#include <sys/sem.h>\nint semget(key_t key, int nsems, int semflg);\nint semctl(int semid, int semnum, int cmd, ...);\nint semop(int semid, struct sembuf *sops, size_t nsops);\n```\n\n1. `semget`用于申请信号量；\n2. `semctl`用于释放或实例化信号量；\n3. `semop`用于执行wait或post；\n\n### 映射到内存\n\n```\n#include <sys/mman.h>\nvoid *mmap(void *addr, size_t length, int prot, int flags,\n    int fd, off_t offset);\n```\n\n`mmap`是一种内存映射文件的方法，即将一个文件或者其它对象映射到进程的地址空间，实现文件磁盘地址和进程虚拟地址空间中一段虚拟地址的一一对映关系。实现这样的映射关系后，进程就可以采用指针的方式读写操作这一段内存，而系统会自动回写脏页面到对应的文件磁盘上，即完成了对文件的操作而不必再调用read,write等系统调用函数。相反，内核空间对这段区域的修改也直接反映用户空间，从而可以实现不同进程间的文件共享。\n\n### 管道\n\n```\n#include <unistd.h>\nint pipe(int pipefd[2]);\n```\n\n`pipe`的一端写，由内核缓存，直到另一端将其读出。\n\n### Socket\n\n```\n#include <sys/types.h>\n#include <sys/socket.h>\nint socket(int domain, int type, int protocol);\nint close(int fd);\nint connect(int sockfd, const struct sockaddr *addr,\n    socklen_t addrlen);\nint bind(int sockfd, const struct sockaddr *addr,\n    socklen_t addrlen);\nint listen(int sockfd, int backlog);\nint accept(int sockfd, struct sockaddr *addr, socklen_t *addrlen);\n```\n\n1. `socket`创建一个socket；\n2. `close`关闭一个socket；\n3. `connect`建立两个socket的连接；\n4. `bind`将socket绑定到地址和端口；\n5. `listen`配置socket接受连接的条件；\n6. `accept`接收一个socket连接并为其创建一个socket；\n\n## 设备\n\n### 操作\n\n```\n#include <sys/types.h>\n#include <sys/stat.h>\n#include <fcntl.h>\n#include <unistd.h>\nint mknod(const char *pathname, mode_t mode, dev_t dev);\n```\n\n`mknod`用于创建一个设备。\n\n```\n#include <sys/ioctl.h>\nint ioctl(int d, unsigned long request, ...);\n```\n\n`ioctl`用于控制设备，常用于驱动编程。\n\n### 特殊设备\n\n`/dev/null`是一个内容为空的设备，将IO流定向到`/dev/null`意味着丢弃其内容；\n\n`/dev/zero`是一个无限长的文件；\n\n`/dev/random`可用于产生随机数；\n\n`/dev/tty*`是串行终端设备，如串口；\n\n`pty`是伪终端，接受键盘的输入并显示到运行它的终端界面；\n\n`pty`的实现涉及到两个概念：\n\n- `ptmx`：被连接的master主机；\n- `pts`：发起向master主机连接的slave主机`pts`，我们常用的SSH登录就意外着在master主机建立一个`pts`进程；\n\n## 常用/proc简介\n\n`/proc/cpuinfo`查看cpu信息；\n\n`/proc/meminfo`查看内存信息；\n\n`/proc/self`查看自身信息；\n\n`/proc/pid_number`查看pid为pid_number的进程信息；\n\n`/proc/loadavg`查看负载信息；\n\n`/proc/uptime`查看启动时间；\n\n`/proc/interrupts`查看中断情况；\n\n## 常用系统调用\n\n`strace`查看系统调用情况；\n\n`access`检测是否具备读写权限；\n`fcntl`操纵文件描述符；\n\n`fsync`和`fdatasync`将缓冲区的文件改动同步到实际文件；\n\n`getrlimit`取得系统的资源限定情况；\n\n`getrusage`取得系统资源使用情况；\n\n`gettimeofday`取得系统时间；\n\n`mlock`锁住一块内存；\n\n`mprotect`保护一块内存；\n\n## 用户与用户组\n\n### 用户与用户组ID\n\n每个用户名对应到一个用户ID，每个用户ID可从属于多个用户组ID。Shell下输入`id`得到如下输出：\n\n```\n# uid为0表示root用户\nuid=0(root) gid=0(root) groups=0(root),1001(nagcmd)\n```\n\n### 文件与用户（组）的关系\n\n`ls -l APL.txt`后得到如下输出：\n\n```\n-rw-r--r-- 1 Jayzee None   1237 五月 18 12:19 APL.txt\n```\n\n`-rw-r--r--`解释：\n\n- 第一个字符`-`表示这是一个文件，`d`表示这是一个文件夹；\n- 2至4字符`rw-`表示拥有者`Jayzee`的权限，顺序为：读（r）、写（w）、执行（x），可读写但不可执行；\n- 5至7字符`r--`表示所属组`None`的权限；\n- 8至10字符`r--`表示组外其他用户的权限；\n\n`man chmod`查看如何更改文件的权限；\n`man chown`查看如何更改文件的拥有者和所属组；\n\n**特殊**\n\n```\ndrwxrwxrwt   1 root root 26416 5月  18 21:53 tmp\n```\n\n只适用于文件夹：当文件夹的所属组或组外的执行（x）被设置为（t）时，表示当且仅当你是该文件夹内文件的创建者，才可以删除该文件；（正常情况下如果该文件夹内文件的权限是对于组或组外可读写，不需要是文件的创建者也可删除的），这里的`t`称为sticky bits。\n\n### 真实的用户ID和有效的用户ID\n\n定义`euid`为有效用户id（effective），`uid`为真实用户id（real）；\n\n`man 2 getuid`查看如何使用C函数获取uid；\n`man 2 geteuid`查看如何使用C函数获取euid；\n\n为什么要引入euid？\n\n1. 当用户发出对文件的操作时，Linux Kernel根据用户的euid检查用户是否具备权限；\n2. euid可被修改，uid不可被修改；\n3. euid被修改代表着用户的切换，uid不被修改表示最初登入系统的uid不变；\n\n用户登录系统时用户id发生什么变化？\n\n1. Linux的登录进程检查登入者输入的账号密码是否正确；\n2. 若正确，使用`exec`为其创建一个User Shell（pts）；\n3. Linux的登录进程设置这个User Shell的euid和uid为同一个值，即该用户的uid（只有euid为0的User Shell可设置euid和uid）；\n\n设置说明：\n\n1. 当我们设置`euid = uid`时，表示返回到最初登录用户的Shell；\n2. 当我们设置`uid = euid`时，表示Linux的登录进程将euid与uid同步，该登录用户与Linux的登录进程（root）再无联系；\n\n`su`命令的原理：\n\n1. `/bin/su`的拥有者为root，其执行项不是（x）而是（s），当文件拥有者的执行项不是（x）而是（s）时，此文件可被执行，且执行文件时调用`geteuid`函数返回的是该可执行文件拥有者的uid而不是调用者的euid；\n2. Linux利用此技术实现普通用户到root用户时，uid不变，而euid变为0；\n3. 当调用`su`时，调用者原User Shell阻塞，Kernel创建一个新User Shell给调用者使用；\n\n注：组ID也分真实和有效，与用户ID类同，故不展开叙述；\n","slug":"advanced-linux-programing","published":1,"updated":"2017-04-09T14:46:05.000Z","photos":[],"link":"","_id":"cjlza6m4d000hpgupuwkgu0pk","content":"<p>《Advanced Linux Programing》读书笔记。</p>\n<a id=\"more\"></a>\n<h2 id=\"一些介绍\"><a href=\"#一些介绍\" class=\"headerlink\" title=\"一些介绍\"></a>一些介绍</h2><p>Linux Kernel</p>\n<ul>\n<li>硬件交互；</li>\n<li>内存管理；</li>\n<li>文件管理；</li>\n<li>多进程管理；</li>\n<li>共享库载入；</li>\n</ul>\n<p>GNU Project</p>\n<ul>\n<li>编辑器；</li>\n<li>编译器；</li>\n<li>Shell（/bin/bash，Bourne-Again SHell）；</li>\n</ul>\n<p>注意：</p>\n<ol>\n<li>Linux Kernel加GNU Project，构成了现在主流的Linux操作系统，所以应该称之为GNU/Linux；</li>\n<li>Linux操作系统只是UNIX的一种系统实现，其他类UNIX操作系统有FreeBSD、Solaris等；</li>\n</ol>\n<h2 id=\"Hello-World（快速了解）\"><a href=\"#Hello-World（快速了解）\" class=\"headerlink\" title=\"Hello, World（快速了解）\"></a>Hello, World（快速了解）</h2><h3 id=\"从文本到可执行程序\"><a href=\"#从文本到可执行程序\" class=\"headerlink\" title=\"从文本到可执行程序\"></a>从文本到可执行程序</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/** main.c **/</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sayHello</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Hello, World\\n\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    sayHello();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Shell下运行<code>gcc -o main main.c</code>即可得到可执行文件<code>main</code>，执行<code>./main</code>即可在控制台上看到<code>Hello, World</code>的输出。那么，它的原理是什么？从<code>main.c</code>到<code>main</code>，经历了以下步骤：</p>\n<ul>\n<li>main.c –&gt; main.i –&gt; main.s –&gt; main.o –&gt; main</li>\n<li>程序文本 + <strong>预处理器(cpp)</strong> –&gt; 被修改的源程序文本 + <strong>编译器(ccl)</strong> –&gt; 汇编文本 + <strong>汇编器(as)</strong> –&gt; 可重定向目标文件（二进制） + printf.o + <strong>链接器(ld)</strong> –&gt; main（可执行程序）</li>\n</ul>\n<p>对应到Shell下，经历了以下命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcc -E main.c -o main.i</span><br><span class=\"line\">gcc -S main.i -o main.s --&gt; main.s</span><br><span class=\"line\">gcc -c main.s -o main.o --&gt; main.o</span><br><span class=\"line\">gcc main.o -o main --&gt; main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 上面4句等价于下面一句，gcc自动进行预处理、编译、汇编和链接</span></span><br><span class=\"line\">gcc main.c -o main</span><br></pre></td></tr></table></figure>\n<p><code>-E</code>进行预处理，将头文件插入C文件同时执行宏替换；<code>-S</code>用于生成汇编绘本；<code>-c</code>命令用于汇编；<code>-o</code>命令用于指定输出文件名称。</p>\n<h3 id=\"编写可用g-编译的c程序\"><a href=\"#编写可用g-编译的c程序\" class=\"headerlink\" title=\"编写可用g++编译的c程序\"></a>编写可用g++编译的c程序</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/** main.c **/</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> __cplusplus</span></span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"string\">\"C\"</span> &#123;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sayHello</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> __cplusplus</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sayHello</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Hello, World\\n\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    sayHello();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"其他常用gcc命令\"><a href=\"#其他常用gcc命令\" class=\"headerlink\" title=\"其他常用gcc命令\"></a>其他常用gcc命令</h3><ul>\n<li><code>-I</code>指定存放头文件的路径（相对或绝对路径）；</li>\n<li><code>-D</code>定义一个宏；</li>\n<li><code>-O</code>指定优化级别；</li>\n<li><code>-l</code>指定要链接的库；</li>\n<li><code>-L</code>指定搜索动态链接库的路径；</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 生成可执行文件main</span></span><br><span class=\"line\"><span class=\"comment\"># 从绝对路径/root/搜索头文件</span></span><br><span class=\"line\"><span class=\"comment\"># 定义宏DEBUG</span></span><br><span class=\"line\"><span class=\"comment\"># 定义优化级别为2（0&lt;1&lt;2&lt;3，0表示不优化）</span></span><br><span class=\"line\"><span class=\"comment\"># 链接数学库m</span></span><br><span class=\"line\"><span class=\"comment\"># 在/usr/local/lib下查找数学库m的动态链接库</span></span><br><span class=\"line\">gcc main.c -o main -I /root/ -D DEBUG=2 -O2 -lm -L/usr/<span class=\"built_in\">local</span>/lib</span><br></pre></td></tr></table></figure>\n<h3 id=\"如何节省编译的工作\"><a href=\"#如何节省编译的工作\" class=\"headerlink\" title=\"如何节省编译的工作\"></a>如何节省编译的工作</h3><ol>\n<li>写MakeFile；</li>\n<li>使用autoconf、automake和libtool；</li>\n</ol>\n<p>简单的makefile举例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">main.o: main.c</span><br><span class=\"line\">        gcc -c main.c -o main.o</span><br><span class=\"line\"></span><br><span class=\"line\">all: main</span><br><span class=\"line\"></span><br><span class=\"line\">main: main.o</span><br><span class=\"line\">        gcc main.o -o main</span><br><span class=\"line\"></span><br><span class=\"line\">clean:</span><br><span class=\"line\">        rm main.o main</span><br></pre></td></tr></table></figure>\n<p>如何使用这个makefile：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 编译（把all换成main效果一致）</span></span><br><span class=\"line\"><span class=\"comment\"># 方法1：用-f指定makefile文件</span></span><br><span class=\"line\">make -f makefile all</span><br><span class=\"line\"><span class=\"comment\"># 方法2：不指定makefile文件，默认会在当前文件夹寻找</span></span><br><span class=\"line\"><span class=\"comment\"># 按顺序寻找文件GNUmakefile--&gt;makefile--&gt;Makefile，找不到则报错</span></span><br><span class=\"line\">make all</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 清除编译结果，以下二选一</span></span><br><span class=\"line\">make clean</span><br><span class=\"line\">make -f makefile clean</span><br></pre></td></tr></table></figure>\n<p>makefile的基本组成如下（<strong>command必须以一个tab开始</strong>）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># target表示目标体，它位于冒号之前</span><br><span class=\"line\"># dependency_files表示依赖的文件或target，它位于冒号之后</span><br><span class=\"line\"># command表示达成这个目标所需执行命令</span><br><span class=\"line\">target: dependency_files</span><br><span class=\"line\">        command</span><br></pre></td></tr></table></figure>\n<p>makefile里面也可定义和调用变量：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CC=gcc</span><br><span class=\"line\">EXE=main</span><br><span class=\"line\"></span><br><span class=\"line\">main.o: main.c</span><br><span class=\"line\">        $(CC) -c main.c -o main.o</span><br><span class=\"line\"></span><br><span class=\"line\">all: $(EXE)</span><br><span class=\"line\"></span><br><span class=\"line\">$(EXE): main.o</span><br><span class=\"line\">        gcc main.o -o $(EXE)</span><br><span class=\"line\"></span><br><span class=\"line\">clean:</span><br><span class=\"line\">        rm main.o $(EXE)</span><br></pre></td></tr></table></figure>\n<p>也可在外部调用时传入变量（会将makefile中已存在的变量覆盖掉），命令如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make EXE=mm all</span><br><span class=\"line\">make EXE=mm clean</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用GDB调试程序简介\"><a href=\"#使用GDB调试程序简介\" class=\"headerlink\" title=\"使用GDB调试程序简介\"></a>使用GDB调试程序简介</h3><p>使用<code>gdb 程序名（相对或绝对路径）</code>进入gdb：</p>\n<ol start=\"2\">\n<li>输入<code>break main</code>为main函数设置断点，输入<code>break main.c:5</code>为<code>main.c</code>的第5行设置断点；</li>\n<li>输入<code>i b</code>查看当前断点；</li>\n<li>输入<code>delete 1</code>删除第一个断点；</li>\n<li>输入<code>disable 1</code>停用第一个断点；</li>\n<li>输入<code>list main.c:5</code>可在gdb显示代码；</li>\n<li>输入<code>r</code>或<code>run</code>运行，这时用户将无法再输入命令，直到运行到断点时，gdb将交回命令行控制权，这时输入<code>n</code>或<code>next</code>表示运行到下一行，<code>s</code>或<code>step</code>表示进入当前行调用的函数，输入<code>return</code>返回到上一层函数；</li>\n<li>gdb交回命令行控制权时，输入<code>print 参数名</code>可查看当前作用域内的具体参数值；</li>\n<li>假如程序意外退出，这时输入<code>where</code>、<code>bt</code>或<code>backtrace</code>可以查看错误堆栈；</li>\n</ol>\n<h3 id=\"如何查看帮助手册\"><a href=\"#如何查看帮助手册\" class=\"headerlink\" title=\"如何查看帮助手册\"></a>如何查看帮助手册</h3><p>终端下输入<code>man 命令名称</code>（如<code>man printf</code>）将看到如下提示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Man: 寻找所有匹配的手册页 (set MAN_POSIXLY_CORRECT to avoid this)</span><br><span class=\"line\"> * printf (1)</span><br><span class=\"line\">   printf (3)</span><br><span class=\"line\">   printf (1p)</span><br><span class=\"line\">   printf (3p)</span><br><span class=\"line\">Man: 您需要什么手册页？</span><br><span class=\"line\">Man:</span><br></pre></td></tr></table></figure>\n<ol>\n<li>数字1表示这是一个用户命令（user commands，如<strong>echo</strong>）；</li>\n<li>数字2表示这是一个系统调用（system calls，如<strong>fork</strong>）；</li>\n<li>数字3表示这是一个标准库（stand library，如<strong>printf</strong>）；</li>\n<li>带p后缀的为POSIX标准，释义：POSIX标准定义了操作系统应该为应用程序提供的接口标准，一个POSIX兼容的操作系统编写的程序，应该可以在任何其它的POSIX操作系统（即使是来自另一个厂商）上编译执行；</li>\n</ol>\n<h2 id=\"编程实践\"><a href=\"#编程实践\" class=\"headerlink\" title=\"编程实践\"></a>编程实践</h2><h3 id=\"环境交互\"><a href=\"#环境交互\" class=\"headerlink\" title=\"环境交互\"></a>环境交互</h3><ol>\n<li>临时文件（用于暂时存放数据），使用下述命令查看具体用途<ul>\n<li><code>man mkstemp</code></li>\n<li><code>man tmpfile</code></li>\n</ul>\n</li>\n<li>环境变量（设置运行环境）<ul>\n<li>shell下<code>echo $USER</code>或<code>printenv USER</code>打印环境变量<code>USER</code>；</li>\n<li>shell下<code>export USER=jayzee</code>设置环境变量<code>USER</code>为<code>jayzee</code>；</li>\n<li>shell下<code>env</code>查询当前用户所有环境变量；</li>\n<li>Linux下调用一个C/C++程序时，该程序继承其调用者的所有环境变量，标准库<code>stdlib.h</code>的<code>getenv</code>、<code>setenv</code>和<code>unsetenv</code>用于获取、操纵环境变量；</li>\n</ul>\n</li>\n<li>shell下调用程序结束后，使用<code>echo $?</code>获取程序退出代码（0表示正常）；</li>\n<li>IO（输入输出流）<ul>\n<li>程序中，宏<code>stdin</code>表示输入流，对应int值0；宏<code>stdout</code>表示标准输出流，对应int值1；宏<code>stderr</code>表示错误输出流，对应int值2；</li>\n<li><code>stdin</code>只能是buffered的，但其buffered size可以修改；</li>\n<li><code>stderr</code>只能是unbuffered，一有错误立即输出；</li>\n<li>当程序直接在shell调用并且直接输出到控制台时，<code>stdout</code>是line-buffered的，否则是buffered的，但其buffered size可以修改，<code>man setvbuf</code>查看标准库如何设置输入输出流；</li>\n<li>程序写文件也是默认buffered，写完后应使用<code>fflush(your_file)</code>立即清空buffer写入到文件；</li>\n<li>shell命令<code>your_program &gt; output_file.txt 2&gt;&amp;1</code>表示将<code>your_program</code>的标准输出写入到文件<code>output_file.txt</code>（<code>&gt;</code>执行覆盖写，<code>&gt;&gt;</code>执行追加写），并且将错误输出流重定向到标准输出流，Linux规定文件名必须在流重定向之前；</li>\n<li>shell命令<code>program 2&gt;&amp;1 | filter</code>表示将标准输出使用管道过滤，Linux规定重定向必须在过滤器之前；</li>\n</ul>\n</li>\n<li><code>man getopt_long</code>查看<code>getopt.h</code>库如何处理程序参数（类似于<code>ls -l</code>的<code>-l</code>）；</li>\n</ol>\n<h3 id=\"好的编程习惯\"><a href=\"#好的编程习惯\" class=\"headerlink\" title=\"好的编程习惯\"></a>好的编程习惯</h3><p>使用断言assert：</p>\n<ul>\n<li>所有需确认值为true或非0的需使用<code>assert(condition)</code>；</li>\n<li>编译时指定<code>-DNDEBUG</code>可移除所有assert语句，所以<strong>千万不要把程序的重要逻辑放在assert语句中</strong>；</li>\n</ul>\n<p>处理系统调用失败：</p>\n<ul>\n<li>系统调用如<code>fork</code>失败时会返回非零值，这时宏<code>errno</code>会被设置，下次系统调用失败时又会覆盖这个宏的值；</li>\n<li><code>man strerror</code>查看如何使用<code>string.h</code>的<code>strerror</code>的具体字符串释义，细节如下：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EINTR : blocking function interrupt, like sleep, read, select</span><br><span class=\"line\">EPERM : Permission denied</span><br><span class=\"line\">EROFS : PATH is on a read-only file system</span><br><span class=\"line\">ENAMETOOLONG : PATH is too long</span><br><span class=\"line\">ENOENT : PATH does not exit</span><br><span class=\"line\">ENOTDIR : A component of PATH is not a directory</span><br><span class=\"line\">EACCES : A component of PATH is not accessible</span><br><span class=\"line\">EFAULT : PATH contains an invalid memory address.  This is probably a bug</span><br><span class=\"line\">ENOMEM : Ran out of kernel memory</span><br></pre></td></tr></table></figure>\n<p>申请内存与释放内存：</p>\n<ul>\n<li>申请内存与释放内存的语句必须成对，即有申请内存则相应的要有释放内存；</li>\n</ul>\n<h3 id=\"链接程序（库：快速开发，软件复用）\"><a href=\"#链接程序（库：快速开发，软件复用）\" class=\"headerlink\" title=\"链接程序（库：快速开发，软件复用）\"></a>链接程序（库：快速开发，软件复用）</h3><p>以下文字部分引用自<a href=\"http://www.cnblogs.com/skynet/p/3372855.html\" target=\"_blank\" rel=\"noopener\">C++静态库与动态库 - 吴秦 - 博客园</a>，向该作者致敬。</p>\n<p>下文用到的main.c文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/** main.c **/</span><br><span class=\"line\">int add(int x, int y) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> x + y;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"静态链接\"><a href=\"#静态链接\" class=\"headerlink\" title=\"静态链接\"></a>静态链接</h4><p>静态库的特点：</p>\n<ul>\n<li>静态库对函数库的链接是放在编译时期完成的；</li>\n<li>程序在运行时与函数库再无瓜葛，移植方便；</li>\n<li>浪费空间和资源，因为所有相关的目标文件与牵涉到的函数库被链接合成一个可执行文件；</li>\n</ul>\n<p>静态库的创建：</p>\n<ul>\n<li>静态库的命名规范为lib[your_library_name].a：lib为前缀，中间是静态库名，扩展名为.a；</li>\n<li>首先将代码文件编译成目标文件.o，再通过ar工具将目标文件打包.a静态库文件；</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 假定有一个math.c文件，提供加法函数int add(int x, int y)，我们现在将其打包成静态库</span></span><br><span class=\"line\">gcc -c math.c -o math.o</span><br><span class=\"line\">ar -crv libmath.a math.o</span><br></pre></td></tr></table></figure>\n<p>使用静态库：</p>\n<ul>\n<li>在编译时指定静态库搜索路径（-L选项）、指定静态库名称（不需要lib前缀和.a后缀，-l选项）；</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -l为什么一定要放在末尾？它会去查找库的所有被引用的函数或宏等并插入到最终的可执行程序，放在末尾是为了这种依赖搜索在最后执行</span></span><br><span class=\"line\">gcc main.c -o main -Lfilepath_of_your_static_library -lmath</span><br></pre></td></tr></table></figure>\n<p>静态库优缺点：</p>\n<ul>\n<li>优点：编译成可执行文件后与其编译时引用的静态库再无任何瓜葛；</li>\n<li>缺点：导致可执行程序体量庞大，同一个操作系统上运行的多个程序引用同一个静态库会导致内存浪费（相同的代码），导致客户的全量更新；</li>\n</ul>\n<h4 id=\"动态链接\"><a href=\"#动态链接\" class=\"headerlink\" title=\"动态链接\"></a>动态链接</h4><p>动态库的特点：</p>\n<ul>\n<li>动态库把对一些库函数的链接载入推迟到程序运行的时期；</li>\n<li>可以实现进程之间的资源共享（因此动态库也称为共享库）；</li>\n<li>将一些程序升级变得简单；</li>\n<li>甚至可以真正做到链接载入完全由程序员在程序代码中控制（显示调用）；</li>\n</ul>\n<p>动态库的创建：</p>\n<ul>\n<li>动态库的命名规范为lib[your_library_name].so：lib为前缀，中间是动态库名，扩展名为.so；</li>\n<li>首先将代码文件编译成目标文件.o，再通过gcc工具将目标文件打包.so动态库文件；<ul>\n<li><code>-fPIC</code>创建与地址无关的编译程序（pic，position independent code），是为了能够在多个应用程序间共享；</li>\n<li><code>-shared</code>指定生成动态链接库；</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 假定有一个math.c文件，提供加法函数int add(int x, int y)，我们现在将其打包成动态库</span></span><br><span class=\"line\">gcc -fPIC -c math.c -o math.o</span><br><span class=\"line\">gcc -shared -o libmath.so math.o</span><br><span class=\"line\"><span class=\"comment\"># 上面两条命令等价于</span></span><br><span class=\"line\">gcc -fPIC -shared -o libmath.so math.c</span><br></pre></td></tr></table></figure>\n<p>使用动态库：</p>\n<ul>\n<li>在编译时指定动态库搜索路径（-L选项）、指定动态库名称（不需要lib前缀和.so后缀，-l选项）；</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcc main.c -o main -Lfilepath_of_your_static_library -lmath</span><br></pre></td></tr></table></figure>\n<ul>\n<li>注意，运行上述生成的可执行文件时，操作系统会去一些指定路径查找并载入该动态库，如查找不到将抛出找不到动态库的异常信息，这些指定路径是：<ul>\n<li>环境变量LD_LIBRARY_PATH，如<code>LD_LIBRARY_PATH=/usr/local/lib:/opt/lib</code>；</li>\n<li>/etc/ld.so.cache文件列表，需要额外操作如下：<ul>\n<li>编辑/etc/ld.so.conf文件，加入库文件所在目录的路径；</li>\n<li>运行ldconfig ，该命令会重建/etc/ld.so.cache文件；</li>\n</ul>\n</li>\n<li>/lib/，/usr/lib目录；</li>\n</ul>\n</li>\n<li><code>-L</code>指定的库搜索路径下即有动态库也有静态库，则动态库具有较高优先级被链接；</li>\n</ul>\n<p>动态库优缺点：</p>\n<ul>\n<li>缺点：增量更新必须考虑向后兼容；</li>\n<li>优点：增量更新，避免内存浪费（同一个操作系统上运行的多个程序引用同一个动态库只需要一份共享库示例）；</li>\n</ul>\n<h4 id=\"链接检查辅助命令\"><a href=\"#链接检查辅助命令\" class=\"headerlink\" title=\"链接检查辅助命令\"></a>链接检查辅助命令</h4><p><code>nm</code>命令：打印出库中的涉及到的所有符号。库既可以是静态的也可以是动态的。nm列出的符号有很多，常见的有三种，</p>\n<ul>\n<li>一种是在库中被调用，但并没有在库中定义(表明需要其他库支持)，用U表示；</li>\n<li>一种是库中定义的函数，用T表示，这是最常见的；</li>\n<li>一种是所谓的弱态”符号，它们虽然在库中被定义，但是可能被其他库中的同名符号覆盖，用W表示；</li>\n</ul>\n<p><code>ldd</code>命令：查看一个可执行程序依赖的共享库。</p>\n<h2 id=\"进程\"><a href=\"#进程\" class=\"headerlink\" title=\"进程\"></a>进程</h2><p>本章节部分内容引用自<a href=\"http://www.cnblogs.com/hicjiajia/archive/2011/01/20/1940154.html\" target=\"_blank\" rel=\"noopener\">Linux下Fork与Exec使用 - hicjiajia - 博客园</a>和<a href=\"http://www.ibm.com/developerworks/cn/linux/kernel/syscall/part3/index.html\" target=\"_blank\" rel=\"noopener\">系统调用跟我学(3)</a>，向作者致敬。</p>\n<h3 id=\"进程查看\"><a href=\"#进程查看\" class=\"headerlink\" title=\"进程查看\"></a>进程查看</h3><p><code>pid</code>指进程id，<code>ppid</code>指父进程id。</p>\n<ol>\n<li>Linux所有<strong>用户进程</strong>呈树状结构，这棵用户进程树的根节点是init进程（内核启动的第一个用户级进程），init进程的<code>pid</code>为1，其ppid为0；</li>\n<li>shell下运行<code>ps -e -o pid,ppid,command</code>可查看所有用户进程的pid、ppid和command；</li>\n<li><code>unistd.h</code>提供<code>getpid()</code>和<code>getppid()</code>获取进程的ID和父ID；</li>\n</ol>\n<h3 id=\"进程创建\"><a href=\"#进程创建\" class=\"headerlink\" title=\"进程创建\"></a>进程创建</h3><h4 id=\"system函数：执行shell命令\"><a href=\"#system函数：执行shell命令\" class=\"headerlink\" title=\"system函数：执行shell命令\"></a>system函数：执行shell命令</h4><p>system函数用于在C/C++语言中执行shell命令，其API如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#include &lt;stdlib.h&gt;</span></span><br><span class=\"line\">int system(const char *<span class=\"built_in\">command</span>);</span><br></pre></td></tr></table></figure>\n<p>其具体实现是：</p>\n<ol>\n<li>先执行系统调用<code>fork()</code>创建子进程；</li>\n<li>再执行<code>execl(&quot;/bin/sh&quot;, &quot;sh&quot;. &quot;-c&quot;, command, (char *) 0);</code>去调用shell执行command；</li>\n</ol>\n<h4 id=\"fork函数，exec族函数\"><a href=\"#fork函数，exec族函数\" class=\"headerlink\" title=\"fork函数，exec族函数\"></a>fork函数，exec族函数</h4><h5 id=\"fork函数：创建子进程，进程分叉\"><a href=\"#fork函数：创建子进程，进程分叉\" class=\"headerlink\" title=\"fork函数：创建子进程，进程分叉\"></a>fork函数：创建子进程，进程分叉</h5><p>fork函数API如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#include &lt;unistd.h&gt;</span></span><br><span class=\"line\">pid_t fork(void);</span><br></pre></td></tr></table></figure>\n<p>fork函数的特点：</p>\n<ul>\n<li>fork调用之后，父进程进入<code>pid&gt;0</code>的分支，子进程进入<code>pid==0</code>的分支；</li>\n<li>fork创建的子进程是父进程的一个完整拷贝，<strong>当且仅当fork之后的代码即将开始更新内存，真实的拷贝才会发生</strong>（也就是上述例子并没有发生拷贝），为什么这么设计，我们会在下面讲到；</li>\n<li>fork创建的子进程拥有一个新的进程pid号，子进程的ppid为调用fork函数的进程id；</li>\n</ul>\n<p>pid_t是一个整型变量。具体示例如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* zombie.c */</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/types.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">pid_t</span> pid;</span><br><span class=\"line\">    pid=fork();</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(pid&lt;<span class=\"number\">0</span>) <span class=\"comment\">/* 如果出错 */</span></span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"error occurred!\\n\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(pid==<span class=\"number\">0</span>) <span class=\"comment\">/* 如果是子进程 */</span></span><br><span class=\"line\">        <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"comment\">/* 如果是父进程 */</span></span><br><span class=\"line\">        sleep(<span class=\"number\">60</span>); <span class=\"comment\">/* 休眠60秒，这段时间里，父进程什么也干不了 */</span></span><br><span class=\"line\">    wait(<span class=\"literal\">NULL</span>); <span class=\"comment\">/* 收集僵尸进程 */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"exec函数族：对当前进程进行替换\"><a href=\"#exec函数族：对当前进程进行替换\" class=\"headerlink\" title=\"exec函数族：对当前进程进行替换\"></a>exec函数族：对当前进程进行替换</h5><p>exec并不是一个具体函数，它是以下六个函数：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">execl</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *path, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *arg, ...)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">execlp</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *file, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *arg, ...)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">execle</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *path, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *arg, ..., <span class=\"keyword\">char</span> *<span class=\"keyword\">const</span> envp[])</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">execv</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *path, <span class=\"keyword\">char</span> *<span class=\"keyword\">const</span> argv[])</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">execvp</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *file, <span class=\"keyword\">char</span> *<span class=\"keyword\">const</span> argv[])</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">execve</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *path, <span class=\"keyword\">char</span> *<span class=\"keyword\">const</span> argv[], <span class=\"keyword\">char</span> *<span class=\"keyword\">const</span> envp[])</span></span>;</span><br></pre></td></tr></table></figure>\n<p>其中<code>execl</code>是基函数，其他5个是它的变种（区别在于传参形式不同，带v的表示参数以数组传递，带l的表示参数以陈列的方式传递）。</p>\n<p>exec函数族特点：</p>\n<ul>\n<li>只保留当前进程的pid，其他进程相关的数据段全部废弃；对系统而言，还是同一个进程号，但其实已经是另外一个程序了，即调用exec函数族的进程已“死亡”了；</li>\n<li>上面说到，fork的数据拷贝只发生在子进程更新内存时，fork调用后立即执行exec函数族使得我们能够产生一个全新的进程（<strong>这意味着当前进程的所有线程、文件描述符等都被释放</strong>），与fork调用进程再无任何瓜葛；</li>\n</ul>\n<p>举一个具体例子如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;errno.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">char</span> command[<span class=\"number\">256</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">int</span> rtn; <span class=\"comment\">/*子进程的返回数值*/</span></span><br><span class=\"line\">   <span class=\"keyword\">while</span>(<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">       <span class=\"comment\">/* 从终端读取要执行的命令 */</span></span><br><span class=\"line\">       <span class=\"built_in\">printf</span>( <span class=\"string\">\"&gt;\"</span> );</span><br><span class=\"line\">       fgets( command, <span class=\"number\">256</span>, <span class=\"built_in\">stdin</span> );</span><br><span class=\"line\">       command[<span class=\"built_in\">strlen</span>(command)<span class=\"number\">-1</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">       <span class=\"keyword\">if</span> ( fork() == <span class=\"number\">0</span> ) &#123;<span class=\"comment\">/* 子进程执行此命令 */</span></span><br><span class=\"line\">          execlp( command, <span class=\"literal\">NULL</span> );</span><br><span class=\"line\">          <span class=\"comment\">/* 如果exec函数返回，表明没有正常执行命令，打印错误信息*/</span></span><br><span class=\"line\">          perror( command );</span><br><span class=\"line\">          <span class=\"built_in\">exit</span>( errno );</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">else</span> &#123;<span class=\"comment\">/* 父进程， 等待子进程结束，并打印子进程的返回值 */</span></span><br><span class=\"line\">          wait ( &amp;rtn );</span><br><span class=\"line\">          <span class=\"built_in\">printf</span>( <span class=\"string\">\" child process return %d\\n\"</span>, rtn );</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"信号处理\"><a href=\"#信号处理\" class=\"headerlink\" title=\"信号处理\"></a>信号处理</h3><p>信号是一种异步的进程通信机制，是软件层面的中断，进程接收到线程必须进行处理，有以下三种处理方式：</p>\n<ul>\n<li>使用进程对信号的静默处理；</li>\n<li>忽略该信号；</li>\n<li>使用特定的信号处理函数进行处理；</li>\n</ul>\n<p>上述的后两种方式需要使用<code>signal()</code>函数进行处理，举例如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 忽略SIGPIPE信号</span></span><br><span class=\"line\">signal ( SIGPIPE, SIG_IGN );</span><br><span class=\"line\"><span class=\"comment\">// 使用PrepareExit处理SIGINT信号</span></span><br><span class=\"line\">signal ( SIGINT, (<span class=\"keyword\">__sighandler_t</span> ) PrepareExit );</span><br></pre></td></tr></table></figure>\n<p>Linux的信号如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">信号值 默认处理动作 发出信号的原因</span><br><span class=\"line\">SIGHUP 1 A 终端挂起或者控制进程终止</span><br><span class=\"line\">SIGINT 2 A 键盘中断（如break键被按下）</span><br><span class=\"line\">SIGQUIT 3 C 键盘的退出键被按下</span><br><span class=\"line\">SIGILL 4 C 非法指令</span><br><span class=\"line\">SIGABRT 6 C 由abort(3)发出的退出指令</span><br><span class=\"line\">SIGFPE 8 C 浮点异常</span><br><span class=\"line\">SIGKILL 9 AEF Kill信号</span><br><span class=\"line\">SIGSEGV 11 C 无效的内存引用</span><br><span class=\"line\">SIGPIPE 13 A 管道破裂: 写一个没有读端口的管道</span><br><span class=\"line\">SIGALRM 14 A 由alarm(2)发出的信号</span><br><span class=\"line\">SIGTERM 15 A 终止信号</span><br><span class=\"line\">SIGUSR1 30,10,16 A 用户自定义信号1</span><br><span class=\"line\">SIGUSR2 31,12,17 A 用户自定义信号2</span><br><span class=\"line\">SIGCHLD 20,17,18 B 子进程结束信号</span><br><span class=\"line\">SIGCONT 19,18,25 进程继续（曾被停止的进程）</span><br><span class=\"line\">SIGSTOP 17,19,23 DEF 终止进程</span><br><span class=\"line\">SIGTSTP 18,20,24 D 控制终端（tty）上按下停止键</span><br><span class=\"line\">SIGTTIN 21,21,26 D 后台进程企图从控制终端读</span><br><span class=\"line\">SIGTTOU 22,22,27 D 后台进程企图从控制终端写</span><br><span class=\"line\"></span><br><span class=\"line\">处理动作一项中的字母含义如下：</span><br><span class=\"line\">A 缺省的动作是终止进程</span><br><span class=\"line\">B 缺省的动作是忽略此信号，将该信号丢弃，不做处理</span><br><span class=\"line\">C 缺省的动作是终止进程并进行内核映像转储（dump core），内核映像转储是指将进程数据在内存的映像和进程在内核结构中的部分内容以一定格式转储到文件系统，并且进程退出执行，这样做的好处是为程序员提供了方便，使得他们可以得到进程当时执行时的数据值，允许他们确定转储的原因，并且可以调试他们的程序</span><br><span class=\"line\">D 缺省的动作是停止进程，进入停止状况以后还能重新进行下去，一般是在调试的过程中（例如ptrace系统调用）</span><br><span class=\"line\">E 信号不能被捕获</span><br><span class=\"line\">F 信号不能被忽略</span><br></pre></td></tr></table></figure>\n<p><strong>注意</strong>：<br>信号处理函数可被新产生的信号所中断，所以信号处理函数应该做尽可能少的工作；</p>\n<h3 id=\"进程终止\"><a href=\"#进程终止\" class=\"headerlink\" title=\"进程终止\"></a>进程终止</h3><h4 id=\"信号终止\"><a href=\"#信号终止\" class=\"headerlink\" title=\"信号终止\"></a>信号终止</h4><ol>\n<li><code>SIGINT</code>：CRTL+C产生；</li>\n<li><code>SIGTERM</code>：shell下<code>kill pid</code>产生；</li>\n<li><code>abort()</code>：发送一个<code>SIGABRT</code>信号给自己；</li>\n<li><code>SIGKILL</code>：强制退出信号，shell下<code>kill -9 pid</code>产生；</li>\n</ol>\n<p>当进程终止时，shell调用<code>echo $?</code>可取得该进程的exit code，</p>\n<ul>\n<li>如果该进程由信号终止，exit code为128加上信号值；</li>\n<li>调用<code>exit(int exit_code)</code>函数退出，exit_code的范围需在0到128之间；</li>\n</ul>\n<p>如何给进程发送指定信号，</p>\n<ul>\n<li>在shell下使用<code>kill -s SIGNAL_NAME pid</code>，可以给进程pid发送SIGNAL_NAME信号；</li>\n<li>程序使用<code>kill(pid, SIGNAL_NAME)</code>函数；</li>\n</ul>\n<h4 id=\"wait\"><a href=\"#wait\" class=\"headerlink\" title=\"wait\"></a>wait</h4><p>Unix的进程终止时，一些资源（如进程pid、进程exit code、收到的信号、占用CPU时间等）并不会被立即释放（堆栈等内存立即释放），死亡进程的父进程必须调用<code>wait</code>函数对进程进行“收尸”，即释放进程的pid和exit code等资源。</p>\n<p><code>wait</code>函数的API定义如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">pid_t</span> wait(<span class=\"keyword\">int</span> *status);</span><br></pre></td></tr></table></figure>\n<p>一些说明：</p>\n<ul>\n<li><code>wait</code>函数是阻塞式的，在子进程未结束时将阻塞；</li>\n<li>如果<code>pid_t</code>为-1，表明<code>wait</code>调用失败，这是因为调用进程没有子进程导致；否则，表明收集子进程“死亡”信息成功，<code>pid_t</code>的值为“死亡”进程pid；</li>\n<li><code>status</code>是一个指针，如果这个指针为空，表明我们不关心进程的“死亡”信息细节，只是发起了回收这个动作；否则，status将包含进程“死亡”的一些信息；</li>\n<li>调用<code>WIFEXITED(status)</code>，若返回值回0表明进程异常退出（如信号导致退出），这时调用<code>WTERMSIG(status)</code>将得到使进程死亡的信号int值；否则表示程序正常退出，这时候调用<code>WEXITSTATUS(status)</code>可获取“死亡”进程的exit code（如“死亡”进程调用<code>exit(7)</code>退出，则<code>WEXITSTATUS(status)</code>的结果为7）；</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* wait2.c */</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/types.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/wait.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> status;</span><br><span class=\"line\">    <span class=\"keyword\">pid_t</span> pc,pr;</span><br><span class=\"line\">    pc=fork();</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(pc&lt;<span class=\"number\">0</span>)     <span class=\"comment\">/* 如果出错 */</span></span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"error ocurred!\\n\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(pc==<span class=\"number\">0</span>)&#123; <span class=\"comment\">/* 子进程 */</span></span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"This is child process with pid of %d.\\n\"</span>,getpid());</span><br><span class=\"line\">        <span class=\"built_in\">exit</span>(<span class=\"number\">3</span>);    <span class=\"comment\">/* 子进程返回3 */</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span>&#123;       <span class=\"comment\">/* 父进程 */</span></span><br><span class=\"line\">        pr=wait(&amp;status);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(WIFEXITED(status))&#123;  <span class=\"comment\">/* 如果WIFEXITED返回非零值 */</span></span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">\"the child process %d exit normally.\\n\"</span>,pr);</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">\"the return code is %d.\\n\"</span>,WEXITSTATUS(status));</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>           <span class=\"comment\">/* 如果WIFEXITED返回零，这时pr存储死亡进程pid */</span></span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">\"the child process %d exit abnormally with signal number %d.\\n\"</span>,pr,WTERMSIG(status));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"僵尸进程\"><a href=\"#僵尸进程\" class=\"headerlink\" title=\"僵尸进程\"></a>僵尸进程</h4><p>如果子进程死亡，父进程却没有调用<code>wait</code>对其进行“收尸”，子进程就会变成一个僵尸进程，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ps -ax</span><br><span class=\"line\">  PID TTY      STAT   TIME COMMAND</span><br><span class=\"line\"> 1177 pts/0    S      0:00 -bash</span><br><span class=\"line\"> 1577 pts/0    S      0:00 ./zombie</span><br><span class=\"line\"> 1578 pts/0    Z      0:00 [zombie &lt;defunct&gt;]</span><br><span class=\"line\"> 1579 pts/0    R      0:00 ps -ax</span><br></pre></td></tr></table></figure>\n<p>若STAT为Z则表明则是一个僵尸进程，关于僵尸进程，</p>\n<ul>\n<li>在父进程退出时，init进程会自动对其下的所有僵尸子进程进行清理；</li>\n<li>子进程意外死亡时，父进程会受到一个SIGCHLD信号，父进程可以注册这个信号的处理函数进行“收尸”；</li>\n<li><code>wait3</code>和<code>wait4</code>函数为异步的，可以周期调用这两个函数执行回收；</li>\n</ul>\n<h2 id=\"线程\"><a href=\"#线程\" class=\"headerlink\" title=\"线程\"></a>线程</h2><h3 id=\"线程创建\"><a href=\"#线程创建\" class=\"headerlink\" title=\"线程创建\"></a>线程创建</h3><p><strong>线程创建</strong>：<code>int pthread_create(pthread_t *thread, const pthread_attr_t *attr,\nvoid *(*start_routine) (void *), void *arg);</code></p>\n<ul>\n<li><code>pthread_create</code>的返回值为0表示创建线程成功；</li>\n<li><code>thread</code>是指向<code>pthread_t</code>的指针；</li>\n<li><code>pthread_attr_t</code>在下一个例子介绍；</li>\n<li><code>start_routine</code>是一个无形参且无返回值的函数指针；</li>\n<li><code>arg</code>是上面提到的函数指针所接收的参数；</li>\n</ul>\n<p><strong>线程回收</strong>：<code>int pthread_join(pthread_t thread, void **retval);</code></p>\n<ul>\n<li><code>retval</code>实际上是一个指向整型指针的指针，它存放的是线程调用<code>exit</code>或<code>pthread_exit</code>的退出值；</li>\n<li><code>When a joinable thread terminates, its memory resources (thread descriptor and stack) are not deallocated until another thread performs pthread_join on it. Therefore, pthread_join must be called  once  for each joinable thread created to avoid memory leaks.</code></li>\n<li>这是一个阻塞式的方法，当监控到有线程结束时才返回；</li>\n</ul>\n<p><strong>线程退出</strong>：<code>void pthread_exit(void *retval);</code></p>\n<ul>\n<li><code>retval</code>实际是一个整型指针，在退出时标识线程的退出值；</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;pthread.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> code = <span class=\"number\">11</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">hello</span><span class=\"params\">(<span class=\"keyword\">void</span> *args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> *str = (<span class=\"keyword\">char</span> *) args;</span><br><span class=\"line\">    sleep(<span class=\"number\">5</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Hello, %s!\\n\"</span>, str);</span><br><span class=\"line\">    pthread_exit(&amp;code);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">pthread_t</span> thread;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> status = pthread_create(&amp;thread, <span class=\"literal\">NULL</span>, (<span class=\"keyword\">void</span> *)hello, (<span class=\"keyword\">void</span> *) <span class=\"string\">\"Jayzee\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"thread create status : %d\\n\"</span>, status);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> *exit_code = <span class=\"number\">0</span>;</span><br><span class=\"line\">    status = pthread_join(thread, (<span class=\"keyword\">void</span> *) &amp;exit_code);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"thread join status : %d\\n\"</span>, status);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"thread exit code : %d\\n\"</span>, *exit_code);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<p>下面的例子在<code>pthread_create</code>时用到了<code>pthread_attr_t</code>，必须经历下面四个过程</p>\n<ol>\n<li>先实例化<code>pthread_attr_t</code>；</li>\n<li>再设置<code>pthread_attr_t</code>；</li>\n<li>在线程创建时使用该<code>pthread_attr_t</code>；</li>\n<li>线程创建完后销毁<code>pthread_attr_t</code>；</li>\n</ol>\n<p>注意：</p>\n<ol>\n<li>创建线程时设置其为detach态，意味着我们不关心它的返回值，只是进行线程相关资源回收；</li>\n<li>也可创建线程时不指定detach态，在线程创建后可使用<code>int pthread_detach(pthread_t thread);</code>设置其为detach态；</li>\n</ol>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;pthread.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> code = <span class=\"number\">11</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">hello</span><span class=\"params\">(<span class=\"keyword\">void</span> *args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> *str = (<span class=\"keyword\">char</span> *) args;</span><br><span class=\"line\">    sleep(<span class=\"number\">5</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Hello, %s!\\n\"</span>, str);</span><br><span class=\"line\">    pthread_exit(&amp;code);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">pthread_t</span> thread;</span><br><span class=\"line\">    <span class=\"keyword\">pthread_attr_t</span> attr;</span><br><span class=\"line\">    pthread_attr_init (&amp;attr);</span><br><span class=\"line\">    pthread_attr_setdetachstate (&amp;attr, PTHREAD_CREATE_DETACHED);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> status = pthread_create (&amp;thread, &amp;attr, (<span class=\"keyword\">void</span> *)hello, (<span class=\"keyword\">void</span> *) <span class=\"string\">\"Jayzee\"</span>);</span><br><span class=\"line\">    pthread_attr_destroy (&amp;attr);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"thread create status : %d\\n\"</span>, status);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"线程取消\"><a href=\"#线程取消\" class=\"headerlink\" title=\"线程取消\"></a>线程取消</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int pthread_setcancelstate(int state, int *oldstate);</span><br><span class=\"line\">int pthread_setcanceltype(int type, int *oldtype);</span><br><span class=\"line\">int pthread_cancel(pthread_t thread);</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>pthread_setcancelstate</code>在运行时设置线程的状态<code>state</code>，并取得其之前的状态<code>oldstate</code>；</li>\n<li><code>pthread_setcanceltype</code>在运行时设置线程的类型<code>type</code>，并取得其之前的类型<code>oldtype</code>；</li>\n<li><code>pthread_cancel</code>用于取消线程的执行；</li>\n</ul>\n<p>注意，</p>\n<ol>\n<li>type：<code>PTHREAD_CANCEL_DEFERRED</code>或<code>PTHREAD_CANCEL_ASYNCHRONOUS</code></li>\n<li>state：<code>PTHREAD_CANCEL_ENABLE</code>或<code>PTHREAD_CANCEL_DISABLE</code></li>\n<li>type和state作用于<code>pthread_cancel</code>：<ul>\n<li>当state为<code>PTHREAD_CANCEL_DISABLE</code>时，设置的type和调用<code>pthread_cancel</code>不会对线程造成任何影响；</li>\n<li>否则，当设置的type为<code>PTHREAD_CANCEL_DEFERRED</code>时，为非阻塞取消（等待达到取消的条件，如释放锁）；当设置的type为<code>PTHREAD_CANCEL_ASYNCHRONOUS</code>时为异步取消（即线程立即被取消，但不同操作系统有可能实现不同，理应处理释放锁）；</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;pthread.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> code = <span class=\"number\">11</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">hello</span><span class=\"params\">(<span class=\"keyword\">void</span> *args)</span> </span>&#123;</span><br><span class=\"line\">    pthread_setcancelstate(PTHREAD_CANCEL_ENABLE, &amp;last_state); </span><br><span class=\"line\">    pthread_setcanceltype(PTHREAD_CANCEL_DEFERRED, &amp;last_type);</span><br><span class=\"line\">    <span class=\"keyword\">char</span> *str = (<span class=\"keyword\">char</span> *) args;</span><br><span class=\"line\">    sleep(<span class=\"number\">5</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Hello, %s!\\n\"</span>, str);</span><br><span class=\"line\">    pthread_exit(&amp;code);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">pthread_t</span> thread;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> status = pthread_create(&amp;thread, <span class=\"literal\">NULL</span>, (<span class=\"keyword\">void</span> *)hello, (<span class=\"keyword\">void</span> *) <span class=\"string\">\"Jayzee\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"thread create status : %d\\n\"</span>, status);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> *exit_code = <span class=\"number\">0</span>;</span><br><span class=\"line\">    status = pthread_join(thread, (<span class=\"keyword\">void</span> *) &amp;exit_code);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"thread join status : %d\\n\"</span>, status);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"thread exit code : %d\\n\"</span>, *exit_code);</span><br><span class=\"line\">    pthread_cancel(thread);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"线程特定数据\"><a href=\"#线程特定数据\" class=\"headerlink\" title=\"线程特定数据\"></a>线程特定数据</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int pthread_key_create(pthread_key_t *key, void (*destructor)(void*));</span><br><span class=\"line\">int pthread_setspecific(pthread_key_t key, const void *value);</span><br><span class=\"line\">void *pthread_getspecific(pthread_key_t key);</span><br></pre></td></tr></table></figure>\n<ol>\n<li>使用<code>pthread_key_create</code>创建<code>key</code>，<code>destructor</code>为线程结束时用于析构的函数指针，一个进程内的多个线程可以共用一个<code>key</code>；</li>\n<li><code>pthread_setspecific</code>为线程设定key-value，<code>pthread_getspecific</code>根据key获得value；</li>\n<li>当线程结束时，若<code>pthread_getspecific</code>的内容不为空，且<code>destructor</code>不为空，则<code>pthread_getspecific</code>的内容将作为<code>destructor</code>的参数来执行析构函数；</li>\n</ol>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;malloc.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;pthread.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* The key used to associate a log file pointer with each thread. */</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">pthread_key_t</span> thread_log_key;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Write MESSAGE to the log file for the current thread. */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">write_to_thread_log</span> <span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* message)</span> </span>&#123;</span><br><span class=\"line\">    FILE* thread_log = (FILE*) pthread_getspecific (thread_log_key);</span><br><span class=\"line\">    <span class=\"built_in\">fprintf</span> (thread_log, <span class=\"string\">\"%s\\n\"</span>, message);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Close the log file pointer THREAD_LOG. */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">close_thread_log</span> <span class=\"params\">(<span class=\"keyword\">void</span>* thread_log)</span> </span>&#123;</span><br><span class=\"line\">    fclose ((FILE*) thread_log);    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span>* <span class=\"title\">thread_function</span> <span class=\"params\">(<span class=\"keyword\">void</span>* args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> thread_log_filename[<span class=\"number\">20</span>];</span><br><span class=\"line\">    FILE* thread_log;</span><br><span class=\"line\">    <span class=\"comment\">/* Generate the filename for this thread’s log file. */</span></span><br><span class=\"line\">    <span class=\"built_in\">sprintf</span> (thread_log_filename, <span class=\"string\">\"thread%d.log\"</span>, (<span class=\"keyword\">int</span>) pthread_self ());</span><br><span class=\"line\">    <span class=\"comment\">/* Open the log file. */</span></span><br><span class=\"line\">    thread_log = fopen (thread_log_filename, <span class=\"string\">\"w\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">/* Store the file pointer in thread-specific data under thread_log_key. */</span></span><br><span class=\"line\">    pthread_setspecific (thread_log_key, thread_log);</span><br><span class=\"line\">    write_to_thread_log (<span class=\"string\">\"Thread starting.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">/* Do work here... */</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i;</span><br><span class=\"line\">    <span class=\"keyword\">pthread_t</span> threads[<span class=\"number\">5</span>];</span><br><span class=\"line\">    <span class=\"comment\">/* Create a key to associate thread log file pointers in</span></span><br><span class=\"line\"><span class=\"comment\">    thread-specific data. Use close_thread_log to clean up the file</span></span><br><span class=\"line\"><span class=\"comment\">    pointers. */</span></span><br><span class=\"line\">    pthread_key_create (&amp;thread_log_key, close_thread_log);</span><br><span class=\"line\">    <span class=\"comment\">/* Create threads to do the work. */</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; ++i)</span><br><span class=\"line\">        pthread_create (&amp;(threads[i]), <span class=\"literal\">NULL</span>, thread_function, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">    <span class=\"comment\">/* Wait for all threads to finish. */</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; ++i)</span><br><span class=\"line\">        pthread_join (threads[i], <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void pthread_cleanup_push(void (*routine)(void *), void *arg);</span><br><span class=\"line\">void pthread_cleanup_pop(int execute);</span><br></pre></td></tr></table></figure>\n<ol>\n<li><code>pthread_cleanup_push</code>在线程运行时为线程压栈清理函数；</li>\n<li><code>pthread_cleanup_pop</code>从栈弹出一个清理函数，如果<code>execute</code>不为0则执行这个清理函数；</li>\n<li>线程结束时，所有压栈的清理函数会自动被弹出栈进行执行；</li>\n<li>当在线程内使用longjump前，应手动调用<code>pthread_cleanup_pop</code>执行清理；</li>\n</ol>\n<h3 id=\"线程同步\"><a href=\"#线程同步\" class=\"headerlink\" title=\"线程同步\"></a>线程同步</h3><h4 id=\"互斥锁\"><a href=\"#互斥锁\" class=\"headerlink\" title=\"互斥锁\"></a>互斥锁</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int pthread_mutex_destroy(pthread_mutex_t *mutex);</span><br><span class=\"line\">int pthread_mutex_init(pthread_mutex_t *restrict mutex,</span><br><span class=\"line\">    const pthread_mutexattr_t *restrict attr);</span><br><span class=\"line\">pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER;</span><br></pre></td></tr></table></figure>\n<ol>\n<li><code>pthread_mutex_destroy</code>销毁互斥锁，<code>pthread_mutex_init</code>创建互斥锁；</li>\n<li><code>pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER;</code>表示定义并默认实例化一个互斥锁；</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int pthread_mutex_lock(pthread_mutex_t *mutex);</span><br><span class=\"line\">int pthread_mutex_trylock(pthread_mutex_t *mutex);</span><br><span class=\"line\">int pthread_mutex_unlock(pthread_mutex_t *mutex);</span><br></pre></td></tr></table></figure>\n<ol>\n<li><code>pthread_mutex_lock</code>为阻塞锁，<code>pthread_mutex_trylock</code>为非阻塞锁（获取不到锁）则立即返回，<code>pthread_mutex_unlock</code>为释放锁；</li>\n</ol>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;pthread.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">pthread_mutexattr_t</span> attr;</span><br><span class=\"line\">    <span class=\"keyword\">pthread_mutex_t</span> mutex;</span><br><span class=\"line\">    pthread_mutexattr_init (&amp;attr);</span><br><span class=\"line\">    <span class=\"comment\">// 带错误检查的互斥锁</span></span><br><span class=\"line\">    pthread_mutexattr_setkind_np (&amp;attr, PTHREAD_MUTEX_ERRORCHECK_NP);</span><br><span class=\"line\">    pthread_mutex_init (&amp;mutex, &amp;attr);</span><br><span class=\"line\">    pthread_mutex_lock(&amp;mutex);</span><br><span class=\"line\">    <span class=\"comment\">/** do some work **/</span></span><br><span class=\"line\">    pthread_mutex_unlock(&amp;mutex);</span><br><span class=\"line\">    pthread_mutexattr_destroy (&amp;attr);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"信号量\"><a href=\"#信号量\" class=\"headerlink\" title=\"信号量\"></a>信号量</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int sem_init(sem_t *sem, int pshared, unsigned int value);</span><br><span class=\"line\">int sem_post(sem_t *sem);</span><br><span class=\"line\">int sem_wait(sem_t *sem);</span><br></pre></td></tr></table></figure>\n<ol>\n<li><code>sem_init</code>实例化信号量<code>sem</code>，<code>pshared</code>为0表示进程内共享（非0为进程间共享），<code>value</code>为初始容量值（默认容量值为0）；</li>\n<li><code>sem_wait</code>将容量值减一，<code>sem_wait</code>之后若容量值小于0则线程阻塞；<code>sem_post</code>将容量值加一；</li>\n<li>假设容量值为负，一次<code>sem_post</code>只能唤醒一个线程；</li>\n<li><code>sem_wait</code>和<code>sem_post</code>是线程安全的；</li>\n</ol>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;pthread.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;semaphore.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">sem_t</span> semaphore;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">threadfunc</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (; i&lt;<span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 实际上不会这么使用，这里仅是展示</span></span><br><span class=\"line\">        sem_wait(&amp;semaphore);</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"Hello from da thread!\\n\"</span>);</span><br><span class=\"line\">        sem_post(&amp;semaphore);</span><br><span class=\"line\">        sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 实例化</span></span><br><span class=\"line\">    sem_init(&amp;semaphore, <span class=\"number\">0</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">pthread_t</span> *mythread;    </span><br><span class=\"line\">    mythread = (<span class=\"keyword\">pthread_t</span> *)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(*mythread));</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 启动线程</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Starting thread, semaphore is unlocked.\\n\"</span>);</span><br><span class=\"line\">    pthread_create(mythread, <span class=\"literal\">NULL</span>, (<span class=\"keyword\">void</span>*)threadfunc, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">    pthread_join(mythread, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"条件值\"><a href=\"#条件值\" class=\"headerlink\" title=\"条件值\"></a>条件值</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int pthread_cond_init(pthread_cond_t *restrict cond,</span><br><span class=\"line\">    const pthread_condattr_t *restrict attr);</span><br><span class=\"line\">pthread_cond_t cond = PTHREAD_COND_INITIALIZER;</span><br><span class=\"line\">int pthread_cond_signal(pthread_cond_t *cond);</span><br><span class=\"line\">int pthread_cond_wait(pthread_cond_t *restrict cond,</span><br><span class=\"line\">   pthread_mutex_t *restrict mutex);</span><br></pre></td></tr></table></figure>\n<ol>\n<li><code>pthread_cond_t cond = PTHREAD_COND_INITIALIZER;</code>等价于<code>pthread_cond_init(&amp;pthread_cond_t, NULL);</code></li>\n<li>当调用<code>pthread_cond_signal</code>或<code>pthread_cond_wait</code>时，必须获得锁；</li>\n<li>调用<code>pthread_cond_wait</code>时，自动释放锁，直到被<code>pthread_cond_signal</code>唤醒时，才重新自动获得锁；</li>\n<li><code>pthread_cond_timedwait</code>可批量唤醒等待的线程；</li>\n</ol>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;pthread.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">pthread_mutex_t</span> mutex = PTHREAD_MUTEX_INITIALIZER;</span><br><span class=\"line\"><span class=\"keyword\">pthread_cond_t</span> cond = PTHREAD_COND_INITIALIZER;</span><br><span class=\"line\"><span class=\"keyword\">int</span> condition = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">consume</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>( <span class=\"number\">1</span> )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        pthread_mutex_lock( &amp;mutex );</span><br><span class=\"line\">        <span class=\"keyword\">while</span>( condition == <span class=\"number\">0</span> )</span><br><span class=\"line\">            pthread_cond_wait( &amp;cond, &amp;mutex );</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>( <span class=\"string\">\"Consumed %d\\n\"</span>, count );</span><br><span class=\"line\">        condition = <span class=\"number\">0</span>;</span><br><span class=\"line\">        pthread_cond_signal( &amp;cond );        </span><br><span class=\"line\">        pthread_mutex_unlock( &amp;mutex );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span>( <span class=\"number\">0</span> );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span>* <span class=\"title\">produce</span><span class=\"params\">( <span class=\"keyword\">void</span> * arg )</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>( <span class=\"number\">1</span> )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        pthread_mutex_lock( &amp;mutex );</span><br><span class=\"line\">        <span class=\"keyword\">while</span>( condition == <span class=\"number\">1</span> )</span><br><span class=\"line\">            pthread_cond_wait( &amp;cond, &amp;mutex );</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>( <span class=\"string\">\"Produced %d\\n\"</span>, count++ );</span><br><span class=\"line\">        condition = <span class=\"number\">1</span>;</span><br><span class=\"line\">        pthread_cond_signal( &amp;cond );        </span><br><span class=\"line\">        pthread_mutex_unlock( &amp;mutex );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>( <span class=\"number\">0</span> );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    pthread_create( <span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>, &amp;produce, <span class=\"literal\">NULL</span> );</span><br><span class=\"line\">    <span class=\"keyword\">return</span> consume();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"线程实现\"><a href=\"#线程实现\" class=\"headerlink\" title=\"线程实现\"></a>线程实现</h3><p>Linux的线程实现是系统调用<code>clone()</code>，它创建一个与父进程共用资源的子进程。</p>\n<h2 id=\"进程间通信\"><a href=\"#进程间通信\" class=\"headerlink\" title=\"进程间通信\"></a>进程间通信</h2><h3 id=\"共享内存\"><a href=\"#共享内存\" class=\"headerlink\" title=\"共享内存\"></a>共享内存</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;sys/ipc.h&gt;</span><br><span class=\"line\">#include &lt;sys/shm.h&gt;</span><br><span class=\"line\">int shmget(key_t key, size_t size, int shmflg);</span><br><span class=\"line\">void *shmat(int shmid, const void *shmaddr, int shmflg);</span><br><span class=\"line\">int shmdt(const void *shmaddr);</span><br><span class=\"line\">int shmctl(int shmid, int cmd, struct shmid_ds *buf);</span><br></pre></td></tr></table></figure>\n<ol>\n<li><code>shmget</code>申请共享内存；</li>\n<li><code>shmat</code>取得已申请的共享内存，共享内存使用者计数器加1；</li>\n<li><code>shmdt</code>断开已申请的共享内存，共享内存使用者计数器减1，如果计时器减到0，这块共享内存会被系统标注并删除；</li>\n<li><code>shmctl</code>对共享内存的标识信息进行设置；</li>\n</ol>\n<h3 id=\"进程信号量\"><a href=\"#进程信号量\" class=\"headerlink\" title=\"进程信号量\"></a>进程信号量</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;sys/types.h&gt;</span><br><span class=\"line\">#include &lt;sys/ipc.h&gt;</span><br><span class=\"line\">#include &lt;sys/sem.h&gt;</span><br><span class=\"line\">int semget(key_t key, int nsems, int semflg);</span><br><span class=\"line\">int semctl(int semid, int semnum, int cmd, ...);</span><br><span class=\"line\">int semop(int semid, struct sembuf *sops, size_t nsops);</span><br></pre></td></tr></table></figure>\n<ol>\n<li><code>semget</code>用于申请信号量；</li>\n<li><code>semctl</code>用于释放或实例化信号量；</li>\n<li><code>semop</code>用于执行wait或post；</li>\n</ol>\n<h3 id=\"映射到内存\"><a href=\"#映射到内存\" class=\"headerlink\" title=\"映射到内存\"></a>映射到内存</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;sys/mman.h&gt;</span><br><span class=\"line\">void *mmap(void *addr, size_t length, int prot, int flags,</span><br><span class=\"line\">    int fd, off_t offset);</span><br></pre></td></tr></table></figure>\n<p><code>mmap</code>是一种内存映射文件的方法，即将一个文件或者其它对象映射到进程的地址空间，实现文件磁盘地址和进程虚拟地址空间中一段虚拟地址的一一对映关系。实现这样的映射关系后，进程就可以采用指针的方式读写操作这一段内存，而系统会自动回写脏页面到对应的文件磁盘上，即完成了对文件的操作而不必再调用read,write等系统调用函数。相反，内核空间对这段区域的修改也直接反映用户空间，从而可以实现不同进程间的文件共享。</p>\n<h3 id=\"管道\"><a href=\"#管道\" class=\"headerlink\" title=\"管道\"></a>管道</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;unistd.h&gt;</span><br><span class=\"line\">int pipe(int pipefd[2]);</span><br></pre></td></tr></table></figure>\n<p><code>pipe</code>的一端写，由内核缓存，直到另一端将其读出。</p>\n<h3 id=\"Socket\"><a href=\"#Socket\" class=\"headerlink\" title=\"Socket\"></a>Socket</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;sys/types.h&gt;</span><br><span class=\"line\">#include &lt;sys/socket.h&gt;</span><br><span class=\"line\">int socket(int domain, int type, int protocol);</span><br><span class=\"line\">int close(int fd);</span><br><span class=\"line\">int connect(int sockfd, const struct sockaddr *addr,</span><br><span class=\"line\">    socklen_t addrlen);</span><br><span class=\"line\">int bind(int sockfd, const struct sockaddr *addr,</span><br><span class=\"line\">    socklen_t addrlen);</span><br><span class=\"line\">int listen(int sockfd, int backlog);</span><br><span class=\"line\">int accept(int sockfd, struct sockaddr *addr, socklen_t *addrlen);</span><br></pre></td></tr></table></figure>\n<ol>\n<li><code>socket</code>创建一个socket；</li>\n<li><code>close</code>关闭一个socket；</li>\n<li><code>connect</code>建立两个socket的连接；</li>\n<li><code>bind</code>将socket绑定到地址和端口；</li>\n<li><code>listen</code>配置socket接受连接的条件；</li>\n<li><code>accept</code>接收一个socket连接并为其创建一个socket；</li>\n</ol>\n<h2 id=\"设备\"><a href=\"#设备\" class=\"headerlink\" title=\"设备\"></a>设备</h2><h3 id=\"操作\"><a href=\"#操作\" class=\"headerlink\" title=\"操作\"></a>操作</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;sys/types.h&gt;</span><br><span class=\"line\">#include &lt;sys/stat.h&gt;</span><br><span class=\"line\">#include &lt;fcntl.h&gt;</span><br><span class=\"line\">#include &lt;unistd.h&gt;</span><br><span class=\"line\">int mknod(const char *pathname, mode_t mode, dev_t dev);</span><br></pre></td></tr></table></figure>\n<p><code>mknod</code>用于创建一个设备。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;sys/ioctl.h&gt;</span><br><span class=\"line\">int ioctl(int d, unsigned long request, ...);</span><br></pre></td></tr></table></figure>\n<p><code>ioctl</code>用于控制设备，常用于驱动编程。</p>\n<h3 id=\"特殊设备\"><a href=\"#特殊设备\" class=\"headerlink\" title=\"特殊设备\"></a>特殊设备</h3><p><code>/dev/null</code>是一个内容为空的设备，将IO流定向到<code>/dev/null</code>意味着丢弃其内容；</p>\n<p><code>/dev/zero</code>是一个无限长的文件；</p>\n<p><code>/dev/random</code>可用于产生随机数；</p>\n<p><code>/dev/tty*</code>是串行终端设备，如串口；</p>\n<p><code>pty</code>是伪终端，接受键盘的输入并显示到运行它的终端界面；</p>\n<p><code>pty</code>的实现涉及到两个概念：</p>\n<ul>\n<li><code>ptmx</code>：被连接的master主机；</li>\n<li><code>pts</code>：发起向master主机连接的slave主机<code>pts</code>，我们常用的SSH登录就意外着在master主机建立一个<code>pts</code>进程；</li>\n</ul>\n<h2 id=\"常用-proc简介\"><a href=\"#常用-proc简介\" class=\"headerlink\" title=\"常用/proc简介\"></a>常用/proc简介</h2><p><code>/proc/cpuinfo</code>查看cpu信息；</p>\n<p><code>/proc/meminfo</code>查看内存信息；</p>\n<p><code>/proc/self</code>查看自身信息；</p>\n<p><code>/proc/pid_number</code>查看pid为pid_number的进程信息；</p>\n<p><code>/proc/loadavg</code>查看负载信息；</p>\n<p><code>/proc/uptime</code>查看启动时间；</p>\n<p><code>/proc/interrupts</code>查看中断情况；</p>\n<h2 id=\"常用系统调用\"><a href=\"#常用系统调用\" class=\"headerlink\" title=\"常用系统调用\"></a>常用系统调用</h2><p><code>strace</code>查看系统调用情况；</p>\n<p><code>access</code>检测是否具备读写权限；<br><code>fcntl</code>操纵文件描述符；</p>\n<p><code>fsync</code>和<code>fdatasync</code>将缓冲区的文件改动同步到实际文件；</p>\n<p><code>getrlimit</code>取得系统的资源限定情况；</p>\n<p><code>getrusage</code>取得系统资源使用情况；</p>\n<p><code>gettimeofday</code>取得系统时间；</p>\n<p><code>mlock</code>锁住一块内存；</p>\n<p><code>mprotect</code>保护一块内存；</p>\n<h2 id=\"用户与用户组\"><a href=\"#用户与用户组\" class=\"headerlink\" title=\"用户与用户组\"></a>用户与用户组</h2><h3 id=\"用户与用户组ID\"><a href=\"#用户与用户组ID\" class=\"headerlink\" title=\"用户与用户组ID\"></a>用户与用户组ID</h3><p>每个用户名对应到一个用户ID，每个用户ID可从属于多个用户组ID。Shell下输入<code>id</code>得到如下输出：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># uid为0表示root用户</span><br><span class=\"line\">uid=0(root) gid=0(root) groups=0(root),1001(nagcmd)</span><br></pre></td></tr></table></figure>\n<h3 id=\"文件与用户（组）的关系\"><a href=\"#文件与用户（组）的关系\" class=\"headerlink\" title=\"文件与用户（组）的关系\"></a>文件与用户（组）的关系</h3><p><code>ls -l APL.txt</code>后得到如下输出：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-rw-r--r-- 1 Jayzee None   1237 五月 18 12:19 APL.txt</span><br></pre></td></tr></table></figure>\n<p><code>-rw-r--r--</code>解释：</p>\n<ul>\n<li>第一个字符<code>-</code>表示这是一个文件，<code>d</code>表示这是一个文件夹；</li>\n<li>2至4字符<code>rw-</code>表示拥有者<code>Jayzee</code>的权限，顺序为：读（r）、写（w）、执行（x），可读写但不可执行；</li>\n<li>5至7字符<code>r--</code>表示所属组<code>None</code>的权限；</li>\n<li>8至10字符<code>r--</code>表示组外其他用户的权限；</li>\n</ul>\n<p><code>man chmod</code>查看如何更改文件的权限；<br><code>man chown</code>查看如何更改文件的拥有者和所属组；</p>\n<p><strong>特殊</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">drwxrwxrwt   1 root root 26416 5月  18 21:53 tmp</span><br></pre></td></tr></table></figure>\n<p>只适用于文件夹：当文件夹的所属组或组外的执行（x）被设置为（t）时，表示当且仅当你是该文件夹内文件的创建者，才可以删除该文件；（正常情况下如果该文件夹内文件的权限是对于组或组外可读写，不需要是文件的创建者也可删除的），这里的<code>t</code>称为sticky bits。</p>\n<h3 id=\"真实的用户ID和有效的用户ID\"><a href=\"#真实的用户ID和有效的用户ID\" class=\"headerlink\" title=\"真实的用户ID和有效的用户ID\"></a>真实的用户ID和有效的用户ID</h3><p>定义<code>euid</code>为有效用户id（effective），<code>uid</code>为真实用户id（real）；</p>\n<p><code>man 2 getuid</code>查看如何使用C函数获取uid；<br><code>man 2 geteuid</code>查看如何使用C函数获取euid；</p>\n<p>为什么要引入euid？</p>\n<ol>\n<li>当用户发出对文件的操作时，Linux Kernel根据用户的euid检查用户是否具备权限；</li>\n<li>euid可被修改，uid不可被修改；</li>\n<li>euid被修改代表着用户的切换，uid不被修改表示最初登入系统的uid不变；</li>\n</ol>\n<p>用户登录系统时用户id发生什么变化？</p>\n<ol>\n<li>Linux的登录进程检查登入者输入的账号密码是否正确；</li>\n<li>若正确，使用<code>exec</code>为其创建一个User Shell（pts）；</li>\n<li>Linux的登录进程设置这个User Shell的euid和uid为同一个值，即该用户的uid（只有euid为0的User Shell可设置euid和uid）；</li>\n</ol>\n<p>设置说明：</p>\n<ol>\n<li>当我们设置<code>euid = uid</code>时，表示返回到最初登录用户的Shell；</li>\n<li>当我们设置<code>uid = euid</code>时，表示Linux的登录进程将euid与uid同步，该登录用户与Linux的登录进程（root）再无联系；</li>\n</ol>\n<p><code>su</code>命令的原理：</p>\n<ol>\n<li><code>/bin/su</code>的拥有者为root，其执行项不是（x）而是（s），当文件拥有者的执行项不是（x）而是（s）时，此文件可被执行，且执行文件时调用<code>geteuid</code>函数返回的是该可执行文件拥有者的uid而不是调用者的euid；</li>\n<li>Linux利用此技术实现普通用户到root用户时，uid不变，而euid变为0；</li>\n<li>当调用<code>su</code>时，调用者原User Shell阻塞，Kernel创建一个新User Shell给调用者使用；</li>\n</ol>\n<p>注：组ID也分真实和有效，与用户ID类同，故不展开叙述；</p>\n","site":{"data":{}},"excerpt":"<p>《Advanced Linux Programing》读书笔记。</p>","more":"<h2 id=\"一些介绍\"><a href=\"#一些介绍\" class=\"headerlink\" title=\"一些介绍\"></a>一些介绍</h2><p>Linux Kernel</p>\n<ul>\n<li>硬件交互；</li>\n<li>内存管理；</li>\n<li>文件管理；</li>\n<li>多进程管理；</li>\n<li>共享库载入；</li>\n</ul>\n<p>GNU Project</p>\n<ul>\n<li>编辑器；</li>\n<li>编译器；</li>\n<li>Shell（/bin/bash，Bourne-Again SHell）；</li>\n</ul>\n<p>注意：</p>\n<ol>\n<li>Linux Kernel加GNU Project，构成了现在主流的Linux操作系统，所以应该称之为GNU/Linux；</li>\n<li>Linux操作系统只是UNIX的一种系统实现，其他类UNIX操作系统有FreeBSD、Solaris等；</li>\n</ol>\n<h2 id=\"Hello-World（快速了解）\"><a href=\"#Hello-World（快速了解）\" class=\"headerlink\" title=\"Hello, World（快速了解）\"></a>Hello, World（快速了解）</h2><h3 id=\"从文本到可执行程序\"><a href=\"#从文本到可执行程序\" class=\"headerlink\" title=\"从文本到可执行程序\"></a>从文本到可执行程序</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/** main.c **/</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sayHello</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Hello, World\\n\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    sayHello();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Shell下运行<code>gcc -o main main.c</code>即可得到可执行文件<code>main</code>，执行<code>./main</code>即可在控制台上看到<code>Hello, World</code>的输出。那么，它的原理是什么？从<code>main.c</code>到<code>main</code>，经历了以下步骤：</p>\n<ul>\n<li>main.c –&gt; main.i –&gt; main.s –&gt; main.o –&gt; main</li>\n<li>程序文本 + <strong>预处理器(cpp)</strong> –&gt; 被修改的源程序文本 + <strong>编译器(ccl)</strong> –&gt; 汇编文本 + <strong>汇编器(as)</strong> –&gt; 可重定向目标文件（二进制） + printf.o + <strong>链接器(ld)</strong> –&gt; main（可执行程序）</li>\n</ul>\n<p>对应到Shell下，经历了以下命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcc -E main.c -o main.i</span><br><span class=\"line\">gcc -S main.i -o main.s --&gt; main.s</span><br><span class=\"line\">gcc -c main.s -o main.o --&gt; main.o</span><br><span class=\"line\">gcc main.o -o main --&gt; main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 上面4句等价于下面一句，gcc自动进行预处理、编译、汇编和链接</span></span><br><span class=\"line\">gcc main.c -o main</span><br></pre></td></tr></table></figure>\n<p><code>-E</code>进行预处理，将头文件插入C文件同时执行宏替换；<code>-S</code>用于生成汇编绘本；<code>-c</code>命令用于汇编；<code>-o</code>命令用于指定输出文件名称。</p>\n<h3 id=\"编写可用g-编译的c程序\"><a href=\"#编写可用g-编译的c程序\" class=\"headerlink\" title=\"编写可用g++编译的c程序\"></a>编写可用g++编译的c程序</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/** main.c **/</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> __cplusplus</span></span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"string\">\"C\"</span> &#123;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sayHello</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> __cplusplus</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sayHello</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Hello, World\\n\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    sayHello();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"其他常用gcc命令\"><a href=\"#其他常用gcc命令\" class=\"headerlink\" title=\"其他常用gcc命令\"></a>其他常用gcc命令</h3><ul>\n<li><code>-I</code>指定存放头文件的路径（相对或绝对路径）；</li>\n<li><code>-D</code>定义一个宏；</li>\n<li><code>-O</code>指定优化级别；</li>\n<li><code>-l</code>指定要链接的库；</li>\n<li><code>-L</code>指定搜索动态链接库的路径；</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 生成可执行文件main</span></span><br><span class=\"line\"><span class=\"comment\"># 从绝对路径/root/搜索头文件</span></span><br><span class=\"line\"><span class=\"comment\"># 定义宏DEBUG</span></span><br><span class=\"line\"><span class=\"comment\"># 定义优化级别为2（0&lt;1&lt;2&lt;3，0表示不优化）</span></span><br><span class=\"line\"><span class=\"comment\"># 链接数学库m</span></span><br><span class=\"line\"><span class=\"comment\"># 在/usr/local/lib下查找数学库m的动态链接库</span></span><br><span class=\"line\">gcc main.c -o main -I /root/ -D DEBUG=2 -O2 -lm -L/usr/<span class=\"built_in\">local</span>/lib</span><br></pre></td></tr></table></figure>\n<h3 id=\"如何节省编译的工作\"><a href=\"#如何节省编译的工作\" class=\"headerlink\" title=\"如何节省编译的工作\"></a>如何节省编译的工作</h3><ol>\n<li>写MakeFile；</li>\n<li>使用autoconf、automake和libtool；</li>\n</ol>\n<p>简单的makefile举例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">main.o: main.c</span><br><span class=\"line\">        gcc -c main.c -o main.o</span><br><span class=\"line\"></span><br><span class=\"line\">all: main</span><br><span class=\"line\"></span><br><span class=\"line\">main: main.o</span><br><span class=\"line\">        gcc main.o -o main</span><br><span class=\"line\"></span><br><span class=\"line\">clean:</span><br><span class=\"line\">        rm main.o main</span><br></pre></td></tr></table></figure>\n<p>如何使用这个makefile：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 编译（把all换成main效果一致）</span></span><br><span class=\"line\"><span class=\"comment\"># 方法1：用-f指定makefile文件</span></span><br><span class=\"line\">make -f makefile all</span><br><span class=\"line\"><span class=\"comment\"># 方法2：不指定makefile文件，默认会在当前文件夹寻找</span></span><br><span class=\"line\"><span class=\"comment\"># 按顺序寻找文件GNUmakefile--&gt;makefile--&gt;Makefile，找不到则报错</span></span><br><span class=\"line\">make all</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 清除编译结果，以下二选一</span></span><br><span class=\"line\">make clean</span><br><span class=\"line\">make -f makefile clean</span><br></pre></td></tr></table></figure>\n<p>makefile的基本组成如下（<strong>command必须以一个tab开始</strong>）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># target表示目标体，它位于冒号之前</span><br><span class=\"line\"># dependency_files表示依赖的文件或target，它位于冒号之后</span><br><span class=\"line\"># command表示达成这个目标所需执行命令</span><br><span class=\"line\">target: dependency_files</span><br><span class=\"line\">        command</span><br></pre></td></tr></table></figure>\n<p>makefile里面也可定义和调用变量：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CC=gcc</span><br><span class=\"line\">EXE=main</span><br><span class=\"line\"></span><br><span class=\"line\">main.o: main.c</span><br><span class=\"line\">        $(CC) -c main.c -o main.o</span><br><span class=\"line\"></span><br><span class=\"line\">all: $(EXE)</span><br><span class=\"line\"></span><br><span class=\"line\">$(EXE): main.o</span><br><span class=\"line\">        gcc main.o -o $(EXE)</span><br><span class=\"line\"></span><br><span class=\"line\">clean:</span><br><span class=\"line\">        rm main.o $(EXE)</span><br></pre></td></tr></table></figure>\n<p>也可在外部调用时传入变量（会将makefile中已存在的变量覆盖掉），命令如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make EXE=mm all</span><br><span class=\"line\">make EXE=mm clean</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用GDB调试程序简介\"><a href=\"#使用GDB调试程序简介\" class=\"headerlink\" title=\"使用GDB调试程序简介\"></a>使用GDB调试程序简介</h3><p>使用<code>gdb 程序名（相对或绝对路径）</code>进入gdb：</p>\n<ol start=\"2\">\n<li>输入<code>break main</code>为main函数设置断点，输入<code>break main.c:5</code>为<code>main.c</code>的第5行设置断点；</li>\n<li>输入<code>i b</code>查看当前断点；</li>\n<li>输入<code>delete 1</code>删除第一个断点；</li>\n<li>输入<code>disable 1</code>停用第一个断点；</li>\n<li>输入<code>list main.c:5</code>可在gdb显示代码；</li>\n<li>输入<code>r</code>或<code>run</code>运行，这时用户将无法再输入命令，直到运行到断点时，gdb将交回命令行控制权，这时输入<code>n</code>或<code>next</code>表示运行到下一行，<code>s</code>或<code>step</code>表示进入当前行调用的函数，输入<code>return</code>返回到上一层函数；</li>\n<li>gdb交回命令行控制权时，输入<code>print 参数名</code>可查看当前作用域内的具体参数值；</li>\n<li>假如程序意外退出，这时输入<code>where</code>、<code>bt</code>或<code>backtrace</code>可以查看错误堆栈；</li>\n</ol>\n<h3 id=\"如何查看帮助手册\"><a href=\"#如何查看帮助手册\" class=\"headerlink\" title=\"如何查看帮助手册\"></a>如何查看帮助手册</h3><p>终端下输入<code>man 命令名称</code>（如<code>man printf</code>）将看到如下提示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Man: 寻找所有匹配的手册页 (set MAN_POSIXLY_CORRECT to avoid this)</span><br><span class=\"line\"> * printf (1)</span><br><span class=\"line\">   printf (3)</span><br><span class=\"line\">   printf (1p)</span><br><span class=\"line\">   printf (3p)</span><br><span class=\"line\">Man: 您需要什么手册页？</span><br><span class=\"line\">Man:</span><br></pre></td></tr></table></figure>\n<ol>\n<li>数字1表示这是一个用户命令（user commands，如<strong>echo</strong>）；</li>\n<li>数字2表示这是一个系统调用（system calls，如<strong>fork</strong>）；</li>\n<li>数字3表示这是一个标准库（stand library，如<strong>printf</strong>）；</li>\n<li>带p后缀的为POSIX标准，释义：POSIX标准定义了操作系统应该为应用程序提供的接口标准，一个POSIX兼容的操作系统编写的程序，应该可以在任何其它的POSIX操作系统（即使是来自另一个厂商）上编译执行；</li>\n</ol>\n<h2 id=\"编程实践\"><a href=\"#编程实践\" class=\"headerlink\" title=\"编程实践\"></a>编程实践</h2><h3 id=\"环境交互\"><a href=\"#环境交互\" class=\"headerlink\" title=\"环境交互\"></a>环境交互</h3><ol>\n<li>临时文件（用于暂时存放数据），使用下述命令查看具体用途<ul>\n<li><code>man mkstemp</code></li>\n<li><code>man tmpfile</code></li>\n</ul>\n</li>\n<li>环境变量（设置运行环境）<ul>\n<li>shell下<code>echo $USER</code>或<code>printenv USER</code>打印环境变量<code>USER</code>；</li>\n<li>shell下<code>export USER=jayzee</code>设置环境变量<code>USER</code>为<code>jayzee</code>；</li>\n<li>shell下<code>env</code>查询当前用户所有环境变量；</li>\n<li>Linux下调用一个C/C++程序时，该程序继承其调用者的所有环境变量，标准库<code>stdlib.h</code>的<code>getenv</code>、<code>setenv</code>和<code>unsetenv</code>用于获取、操纵环境变量；</li>\n</ul>\n</li>\n<li>shell下调用程序结束后，使用<code>echo $?</code>获取程序退出代码（0表示正常）；</li>\n<li>IO（输入输出流）<ul>\n<li>程序中，宏<code>stdin</code>表示输入流，对应int值0；宏<code>stdout</code>表示标准输出流，对应int值1；宏<code>stderr</code>表示错误输出流，对应int值2；</li>\n<li><code>stdin</code>只能是buffered的，但其buffered size可以修改；</li>\n<li><code>stderr</code>只能是unbuffered，一有错误立即输出；</li>\n<li>当程序直接在shell调用并且直接输出到控制台时，<code>stdout</code>是line-buffered的，否则是buffered的，但其buffered size可以修改，<code>man setvbuf</code>查看标准库如何设置输入输出流；</li>\n<li>程序写文件也是默认buffered，写完后应使用<code>fflush(your_file)</code>立即清空buffer写入到文件；</li>\n<li>shell命令<code>your_program &gt; output_file.txt 2&gt;&amp;1</code>表示将<code>your_program</code>的标准输出写入到文件<code>output_file.txt</code>（<code>&gt;</code>执行覆盖写，<code>&gt;&gt;</code>执行追加写），并且将错误输出流重定向到标准输出流，Linux规定文件名必须在流重定向之前；</li>\n<li>shell命令<code>program 2&gt;&amp;1 | filter</code>表示将标准输出使用管道过滤，Linux规定重定向必须在过滤器之前；</li>\n</ul>\n</li>\n<li><code>man getopt_long</code>查看<code>getopt.h</code>库如何处理程序参数（类似于<code>ls -l</code>的<code>-l</code>）；</li>\n</ol>\n<h3 id=\"好的编程习惯\"><a href=\"#好的编程习惯\" class=\"headerlink\" title=\"好的编程习惯\"></a>好的编程习惯</h3><p>使用断言assert：</p>\n<ul>\n<li>所有需确认值为true或非0的需使用<code>assert(condition)</code>；</li>\n<li>编译时指定<code>-DNDEBUG</code>可移除所有assert语句，所以<strong>千万不要把程序的重要逻辑放在assert语句中</strong>；</li>\n</ul>\n<p>处理系统调用失败：</p>\n<ul>\n<li>系统调用如<code>fork</code>失败时会返回非零值，这时宏<code>errno</code>会被设置，下次系统调用失败时又会覆盖这个宏的值；</li>\n<li><code>man strerror</code>查看如何使用<code>string.h</code>的<code>strerror</code>的具体字符串释义，细节如下：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EINTR : blocking function interrupt, like sleep, read, select</span><br><span class=\"line\">EPERM : Permission denied</span><br><span class=\"line\">EROFS : PATH is on a read-only file system</span><br><span class=\"line\">ENAMETOOLONG : PATH is too long</span><br><span class=\"line\">ENOENT : PATH does not exit</span><br><span class=\"line\">ENOTDIR : A component of PATH is not a directory</span><br><span class=\"line\">EACCES : A component of PATH is not accessible</span><br><span class=\"line\">EFAULT : PATH contains an invalid memory address.  This is probably a bug</span><br><span class=\"line\">ENOMEM : Ran out of kernel memory</span><br></pre></td></tr></table></figure>\n<p>申请内存与释放内存：</p>\n<ul>\n<li>申请内存与释放内存的语句必须成对，即有申请内存则相应的要有释放内存；</li>\n</ul>\n<h3 id=\"链接程序（库：快速开发，软件复用）\"><a href=\"#链接程序（库：快速开发，软件复用）\" class=\"headerlink\" title=\"链接程序（库：快速开发，软件复用）\"></a>链接程序（库：快速开发，软件复用）</h3><p>以下文字部分引用自<a href=\"http://www.cnblogs.com/skynet/p/3372855.html\" target=\"_blank\" rel=\"noopener\">C++静态库与动态库 - 吴秦 - 博客园</a>，向该作者致敬。</p>\n<p>下文用到的main.c文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/** main.c **/</span><br><span class=\"line\">int add(int x, int y) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> x + y;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"静态链接\"><a href=\"#静态链接\" class=\"headerlink\" title=\"静态链接\"></a>静态链接</h4><p>静态库的特点：</p>\n<ul>\n<li>静态库对函数库的链接是放在编译时期完成的；</li>\n<li>程序在运行时与函数库再无瓜葛，移植方便；</li>\n<li>浪费空间和资源，因为所有相关的目标文件与牵涉到的函数库被链接合成一个可执行文件；</li>\n</ul>\n<p>静态库的创建：</p>\n<ul>\n<li>静态库的命名规范为lib[your_library_name].a：lib为前缀，中间是静态库名，扩展名为.a；</li>\n<li>首先将代码文件编译成目标文件.o，再通过ar工具将目标文件打包.a静态库文件；</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 假定有一个math.c文件，提供加法函数int add(int x, int y)，我们现在将其打包成静态库</span></span><br><span class=\"line\">gcc -c math.c -o math.o</span><br><span class=\"line\">ar -crv libmath.a math.o</span><br></pre></td></tr></table></figure>\n<p>使用静态库：</p>\n<ul>\n<li>在编译时指定静态库搜索路径（-L选项）、指定静态库名称（不需要lib前缀和.a后缀，-l选项）；</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -l为什么一定要放在末尾？它会去查找库的所有被引用的函数或宏等并插入到最终的可执行程序，放在末尾是为了这种依赖搜索在最后执行</span></span><br><span class=\"line\">gcc main.c -o main -Lfilepath_of_your_static_library -lmath</span><br></pre></td></tr></table></figure>\n<p>静态库优缺点：</p>\n<ul>\n<li>优点：编译成可执行文件后与其编译时引用的静态库再无任何瓜葛；</li>\n<li>缺点：导致可执行程序体量庞大，同一个操作系统上运行的多个程序引用同一个静态库会导致内存浪费（相同的代码），导致客户的全量更新；</li>\n</ul>\n<h4 id=\"动态链接\"><a href=\"#动态链接\" class=\"headerlink\" title=\"动态链接\"></a>动态链接</h4><p>动态库的特点：</p>\n<ul>\n<li>动态库把对一些库函数的链接载入推迟到程序运行的时期；</li>\n<li>可以实现进程之间的资源共享（因此动态库也称为共享库）；</li>\n<li>将一些程序升级变得简单；</li>\n<li>甚至可以真正做到链接载入完全由程序员在程序代码中控制（显示调用）；</li>\n</ul>\n<p>动态库的创建：</p>\n<ul>\n<li>动态库的命名规范为lib[your_library_name].so：lib为前缀，中间是动态库名，扩展名为.so；</li>\n<li>首先将代码文件编译成目标文件.o，再通过gcc工具将目标文件打包.so动态库文件；<ul>\n<li><code>-fPIC</code>创建与地址无关的编译程序（pic，position independent code），是为了能够在多个应用程序间共享；</li>\n<li><code>-shared</code>指定生成动态链接库；</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 假定有一个math.c文件，提供加法函数int add(int x, int y)，我们现在将其打包成动态库</span></span><br><span class=\"line\">gcc -fPIC -c math.c -o math.o</span><br><span class=\"line\">gcc -shared -o libmath.so math.o</span><br><span class=\"line\"><span class=\"comment\"># 上面两条命令等价于</span></span><br><span class=\"line\">gcc -fPIC -shared -o libmath.so math.c</span><br></pre></td></tr></table></figure>\n<p>使用动态库：</p>\n<ul>\n<li>在编译时指定动态库搜索路径（-L选项）、指定动态库名称（不需要lib前缀和.so后缀，-l选项）；</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcc main.c -o main -Lfilepath_of_your_static_library -lmath</span><br></pre></td></tr></table></figure>\n<ul>\n<li>注意，运行上述生成的可执行文件时，操作系统会去一些指定路径查找并载入该动态库，如查找不到将抛出找不到动态库的异常信息，这些指定路径是：<ul>\n<li>环境变量LD_LIBRARY_PATH，如<code>LD_LIBRARY_PATH=/usr/local/lib:/opt/lib</code>；</li>\n<li>/etc/ld.so.cache文件列表，需要额外操作如下：<ul>\n<li>编辑/etc/ld.so.conf文件，加入库文件所在目录的路径；</li>\n<li>运行ldconfig ，该命令会重建/etc/ld.so.cache文件；</li>\n</ul>\n</li>\n<li>/lib/，/usr/lib目录；</li>\n</ul>\n</li>\n<li><code>-L</code>指定的库搜索路径下即有动态库也有静态库，则动态库具有较高优先级被链接；</li>\n</ul>\n<p>动态库优缺点：</p>\n<ul>\n<li>缺点：增量更新必须考虑向后兼容；</li>\n<li>优点：增量更新，避免内存浪费（同一个操作系统上运行的多个程序引用同一个动态库只需要一份共享库示例）；</li>\n</ul>\n<h4 id=\"链接检查辅助命令\"><a href=\"#链接检查辅助命令\" class=\"headerlink\" title=\"链接检查辅助命令\"></a>链接检查辅助命令</h4><p><code>nm</code>命令：打印出库中的涉及到的所有符号。库既可以是静态的也可以是动态的。nm列出的符号有很多，常见的有三种，</p>\n<ul>\n<li>一种是在库中被调用，但并没有在库中定义(表明需要其他库支持)，用U表示；</li>\n<li>一种是库中定义的函数，用T表示，这是最常见的；</li>\n<li>一种是所谓的弱态”符号，它们虽然在库中被定义，但是可能被其他库中的同名符号覆盖，用W表示；</li>\n</ul>\n<p><code>ldd</code>命令：查看一个可执行程序依赖的共享库。</p>\n<h2 id=\"进程\"><a href=\"#进程\" class=\"headerlink\" title=\"进程\"></a>进程</h2><p>本章节部分内容引用自<a href=\"http://www.cnblogs.com/hicjiajia/archive/2011/01/20/1940154.html\" target=\"_blank\" rel=\"noopener\">Linux下Fork与Exec使用 - hicjiajia - 博客园</a>和<a href=\"http://www.ibm.com/developerworks/cn/linux/kernel/syscall/part3/index.html\" target=\"_blank\" rel=\"noopener\">系统调用跟我学(3)</a>，向作者致敬。</p>\n<h3 id=\"进程查看\"><a href=\"#进程查看\" class=\"headerlink\" title=\"进程查看\"></a>进程查看</h3><p><code>pid</code>指进程id，<code>ppid</code>指父进程id。</p>\n<ol>\n<li>Linux所有<strong>用户进程</strong>呈树状结构，这棵用户进程树的根节点是init进程（内核启动的第一个用户级进程），init进程的<code>pid</code>为1，其ppid为0；</li>\n<li>shell下运行<code>ps -e -o pid,ppid,command</code>可查看所有用户进程的pid、ppid和command；</li>\n<li><code>unistd.h</code>提供<code>getpid()</code>和<code>getppid()</code>获取进程的ID和父ID；</li>\n</ol>\n<h3 id=\"进程创建\"><a href=\"#进程创建\" class=\"headerlink\" title=\"进程创建\"></a>进程创建</h3><h4 id=\"system函数：执行shell命令\"><a href=\"#system函数：执行shell命令\" class=\"headerlink\" title=\"system函数：执行shell命令\"></a>system函数：执行shell命令</h4><p>system函数用于在C/C++语言中执行shell命令，其API如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#include &lt;stdlib.h&gt;</span></span><br><span class=\"line\">int system(const char *<span class=\"built_in\">command</span>);</span><br></pre></td></tr></table></figure>\n<p>其具体实现是：</p>\n<ol>\n<li>先执行系统调用<code>fork()</code>创建子进程；</li>\n<li>再执行<code>execl(&quot;/bin/sh&quot;, &quot;sh&quot;. &quot;-c&quot;, command, (char *) 0);</code>去调用shell执行command；</li>\n</ol>\n<h4 id=\"fork函数，exec族函数\"><a href=\"#fork函数，exec族函数\" class=\"headerlink\" title=\"fork函数，exec族函数\"></a>fork函数，exec族函数</h4><h5 id=\"fork函数：创建子进程，进程分叉\"><a href=\"#fork函数：创建子进程，进程分叉\" class=\"headerlink\" title=\"fork函数：创建子进程，进程分叉\"></a>fork函数：创建子进程，进程分叉</h5><p>fork函数API如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#include &lt;unistd.h&gt;</span></span><br><span class=\"line\">pid_t fork(void);</span><br></pre></td></tr></table></figure>\n<p>fork函数的特点：</p>\n<ul>\n<li>fork调用之后，父进程进入<code>pid&gt;0</code>的分支，子进程进入<code>pid==0</code>的分支；</li>\n<li>fork创建的子进程是父进程的一个完整拷贝，<strong>当且仅当fork之后的代码即将开始更新内存，真实的拷贝才会发生</strong>（也就是上述例子并没有发生拷贝），为什么这么设计，我们会在下面讲到；</li>\n<li>fork创建的子进程拥有一个新的进程pid号，子进程的ppid为调用fork函数的进程id；</li>\n</ul>\n<p>pid_t是一个整型变量。具体示例如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* zombie.c */</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/types.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">pid_t</span> pid;</span><br><span class=\"line\">    pid=fork();</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(pid&lt;<span class=\"number\">0</span>) <span class=\"comment\">/* 如果出错 */</span></span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"error occurred!\\n\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(pid==<span class=\"number\">0</span>) <span class=\"comment\">/* 如果是子进程 */</span></span><br><span class=\"line\">        <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"comment\">/* 如果是父进程 */</span></span><br><span class=\"line\">        sleep(<span class=\"number\">60</span>); <span class=\"comment\">/* 休眠60秒，这段时间里，父进程什么也干不了 */</span></span><br><span class=\"line\">    wait(<span class=\"literal\">NULL</span>); <span class=\"comment\">/* 收集僵尸进程 */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"exec函数族：对当前进程进行替换\"><a href=\"#exec函数族：对当前进程进行替换\" class=\"headerlink\" title=\"exec函数族：对当前进程进行替换\"></a>exec函数族：对当前进程进行替换</h5><p>exec并不是一个具体函数，它是以下六个函数：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">execl</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *path, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *arg, ...)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">execlp</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *file, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *arg, ...)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">execle</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *path, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *arg, ..., <span class=\"keyword\">char</span> *<span class=\"keyword\">const</span> envp[])</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">execv</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *path, <span class=\"keyword\">char</span> *<span class=\"keyword\">const</span> argv[])</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">execvp</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *file, <span class=\"keyword\">char</span> *<span class=\"keyword\">const</span> argv[])</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">execve</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *path, <span class=\"keyword\">char</span> *<span class=\"keyword\">const</span> argv[], <span class=\"keyword\">char</span> *<span class=\"keyword\">const</span> envp[])</span></span>;</span><br></pre></td></tr></table></figure>\n<p>其中<code>execl</code>是基函数，其他5个是它的变种（区别在于传参形式不同，带v的表示参数以数组传递，带l的表示参数以陈列的方式传递）。</p>\n<p>exec函数族特点：</p>\n<ul>\n<li>只保留当前进程的pid，其他进程相关的数据段全部废弃；对系统而言，还是同一个进程号，但其实已经是另外一个程序了，即调用exec函数族的进程已“死亡”了；</li>\n<li>上面说到，fork的数据拷贝只发生在子进程更新内存时，fork调用后立即执行exec函数族使得我们能够产生一个全新的进程（<strong>这意味着当前进程的所有线程、文件描述符等都被释放</strong>），与fork调用进程再无任何瓜葛；</li>\n</ul>\n<p>举一个具体例子如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;errno.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">char</span> command[<span class=\"number\">256</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">int</span> rtn; <span class=\"comment\">/*子进程的返回数值*/</span></span><br><span class=\"line\">   <span class=\"keyword\">while</span>(<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">       <span class=\"comment\">/* 从终端读取要执行的命令 */</span></span><br><span class=\"line\">       <span class=\"built_in\">printf</span>( <span class=\"string\">\"&gt;\"</span> );</span><br><span class=\"line\">       fgets( command, <span class=\"number\">256</span>, <span class=\"built_in\">stdin</span> );</span><br><span class=\"line\">       command[<span class=\"built_in\">strlen</span>(command)<span class=\"number\">-1</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">       <span class=\"keyword\">if</span> ( fork() == <span class=\"number\">0</span> ) &#123;<span class=\"comment\">/* 子进程执行此命令 */</span></span><br><span class=\"line\">          execlp( command, <span class=\"literal\">NULL</span> );</span><br><span class=\"line\">          <span class=\"comment\">/* 如果exec函数返回，表明没有正常执行命令，打印错误信息*/</span></span><br><span class=\"line\">          perror( command );</span><br><span class=\"line\">          <span class=\"built_in\">exit</span>( errno );</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">else</span> &#123;<span class=\"comment\">/* 父进程， 等待子进程结束，并打印子进程的返回值 */</span></span><br><span class=\"line\">          wait ( &amp;rtn );</span><br><span class=\"line\">          <span class=\"built_in\">printf</span>( <span class=\"string\">\" child process return %d\\n\"</span>, rtn );</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"信号处理\"><a href=\"#信号处理\" class=\"headerlink\" title=\"信号处理\"></a>信号处理</h3><p>信号是一种异步的进程通信机制，是软件层面的中断，进程接收到线程必须进行处理，有以下三种处理方式：</p>\n<ul>\n<li>使用进程对信号的静默处理；</li>\n<li>忽略该信号；</li>\n<li>使用特定的信号处理函数进行处理；</li>\n</ul>\n<p>上述的后两种方式需要使用<code>signal()</code>函数进行处理，举例如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 忽略SIGPIPE信号</span></span><br><span class=\"line\">signal ( SIGPIPE, SIG_IGN );</span><br><span class=\"line\"><span class=\"comment\">// 使用PrepareExit处理SIGINT信号</span></span><br><span class=\"line\">signal ( SIGINT, (<span class=\"keyword\">__sighandler_t</span> ) PrepareExit );</span><br></pre></td></tr></table></figure>\n<p>Linux的信号如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">信号值 默认处理动作 发出信号的原因</span><br><span class=\"line\">SIGHUP 1 A 终端挂起或者控制进程终止</span><br><span class=\"line\">SIGINT 2 A 键盘中断（如break键被按下）</span><br><span class=\"line\">SIGQUIT 3 C 键盘的退出键被按下</span><br><span class=\"line\">SIGILL 4 C 非法指令</span><br><span class=\"line\">SIGABRT 6 C 由abort(3)发出的退出指令</span><br><span class=\"line\">SIGFPE 8 C 浮点异常</span><br><span class=\"line\">SIGKILL 9 AEF Kill信号</span><br><span class=\"line\">SIGSEGV 11 C 无效的内存引用</span><br><span class=\"line\">SIGPIPE 13 A 管道破裂: 写一个没有读端口的管道</span><br><span class=\"line\">SIGALRM 14 A 由alarm(2)发出的信号</span><br><span class=\"line\">SIGTERM 15 A 终止信号</span><br><span class=\"line\">SIGUSR1 30,10,16 A 用户自定义信号1</span><br><span class=\"line\">SIGUSR2 31,12,17 A 用户自定义信号2</span><br><span class=\"line\">SIGCHLD 20,17,18 B 子进程结束信号</span><br><span class=\"line\">SIGCONT 19,18,25 进程继续（曾被停止的进程）</span><br><span class=\"line\">SIGSTOP 17,19,23 DEF 终止进程</span><br><span class=\"line\">SIGTSTP 18,20,24 D 控制终端（tty）上按下停止键</span><br><span class=\"line\">SIGTTIN 21,21,26 D 后台进程企图从控制终端读</span><br><span class=\"line\">SIGTTOU 22,22,27 D 后台进程企图从控制终端写</span><br><span class=\"line\"></span><br><span class=\"line\">处理动作一项中的字母含义如下：</span><br><span class=\"line\">A 缺省的动作是终止进程</span><br><span class=\"line\">B 缺省的动作是忽略此信号，将该信号丢弃，不做处理</span><br><span class=\"line\">C 缺省的动作是终止进程并进行内核映像转储（dump core），内核映像转储是指将进程数据在内存的映像和进程在内核结构中的部分内容以一定格式转储到文件系统，并且进程退出执行，这样做的好处是为程序员提供了方便，使得他们可以得到进程当时执行时的数据值，允许他们确定转储的原因，并且可以调试他们的程序</span><br><span class=\"line\">D 缺省的动作是停止进程，进入停止状况以后还能重新进行下去，一般是在调试的过程中（例如ptrace系统调用）</span><br><span class=\"line\">E 信号不能被捕获</span><br><span class=\"line\">F 信号不能被忽略</span><br></pre></td></tr></table></figure>\n<p><strong>注意</strong>：<br>信号处理函数可被新产生的信号所中断，所以信号处理函数应该做尽可能少的工作；</p>\n<h3 id=\"进程终止\"><a href=\"#进程终止\" class=\"headerlink\" title=\"进程终止\"></a>进程终止</h3><h4 id=\"信号终止\"><a href=\"#信号终止\" class=\"headerlink\" title=\"信号终止\"></a>信号终止</h4><ol>\n<li><code>SIGINT</code>：CRTL+C产生；</li>\n<li><code>SIGTERM</code>：shell下<code>kill pid</code>产生；</li>\n<li><code>abort()</code>：发送一个<code>SIGABRT</code>信号给自己；</li>\n<li><code>SIGKILL</code>：强制退出信号，shell下<code>kill -9 pid</code>产生；</li>\n</ol>\n<p>当进程终止时，shell调用<code>echo $?</code>可取得该进程的exit code，</p>\n<ul>\n<li>如果该进程由信号终止，exit code为128加上信号值；</li>\n<li>调用<code>exit(int exit_code)</code>函数退出，exit_code的范围需在0到128之间；</li>\n</ul>\n<p>如何给进程发送指定信号，</p>\n<ul>\n<li>在shell下使用<code>kill -s SIGNAL_NAME pid</code>，可以给进程pid发送SIGNAL_NAME信号；</li>\n<li>程序使用<code>kill(pid, SIGNAL_NAME)</code>函数；</li>\n</ul>\n<h4 id=\"wait\"><a href=\"#wait\" class=\"headerlink\" title=\"wait\"></a>wait</h4><p>Unix的进程终止时，一些资源（如进程pid、进程exit code、收到的信号、占用CPU时间等）并不会被立即释放（堆栈等内存立即释放），死亡进程的父进程必须调用<code>wait</code>函数对进程进行“收尸”，即释放进程的pid和exit code等资源。</p>\n<p><code>wait</code>函数的API定义如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">pid_t</span> wait(<span class=\"keyword\">int</span> *status);</span><br></pre></td></tr></table></figure>\n<p>一些说明：</p>\n<ul>\n<li><code>wait</code>函数是阻塞式的，在子进程未结束时将阻塞；</li>\n<li>如果<code>pid_t</code>为-1，表明<code>wait</code>调用失败，这是因为调用进程没有子进程导致；否则，表明收集子进程“死亡”信息成功，<code>pid_t</code>的值为“死亡”进程pid；</li>\n<li><code>status</code>是一个指针，如果这个指针为空，表明我们不关心进程的“死亡”信息细节，只是发起了回收这个动作；否则，status将包含进程“死亡”的一些信息；</li>\n<li>调用<code>WIFEXITED(status)</code>，若返回值回0表明进程异常退出（如信号导致退出），这时调用<code>WTERMSIG(status)</code>将得到使进程死亡的信号int值；否则表示程序正常退出，这时候调用<code>WEXITSTATUS(status)</code>可获取“死亡”进程的exit code（如“死亡”进程调用<code>exit(7)</code>退出，则<code>WEXITSTATUS(status)</code>的结果为7）；</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* wait2.c */</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/types.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/wait.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> status;</span><br><span class=\"line\">    <span class=\"keyword\">pid_t</span> pc,pr;</span><br><span class=\"line\">    pc=fork();</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(pc&lt;<span class=\"number\">0</span>)     <span class=\"comment\">/* 如果出错 */</span></span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"error ocurred!\\n\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(pc==<span class=\"number\">0</span>)&#123; <span class=\"comment\">/* 子进程 */</span></span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"This is child process with pid of %d.\\n\"</span>,getpid());</span><br><span class=\"line\">        <span class=\"built_in\">exit</span>(<span class=\"number\">3</span>);    <span class=\"comment\">/* 子进程返回3 */</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span>&#123;       <span class=\"comment\">/* 父进程 */</span></span><br><span class=\"line\">        pr=wait(&amp;status);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(WIFEXITED(status))&#123;  <span class=\"comment\">/* 如果WIFEXITED返回非零值 */</span></span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">\"the child process %d exit normally.\\n\"</span>,pr);</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">\"the return code is %d.\\n\"</span>,WEXITSTATUS(status));</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>           <span class=\"comment\">/* 如果WIFEXITED返回零，这时pr存储死亡进程pid */</span></span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">\"the child process %d exit abnormally with signal number %d.\\n\"</span>,pr,WTERMSIG(status));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"僵尸进程\"><a href=\"#僵尸进程\" class=\"headerlink\" title=\"僵尸进程\"></a>僵尸进程</h4><p>如果子进程死亡，父进程却没有调用<code>wait</code>对其进行“收尸”，子进程就会变成一个僵尸进程，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ps -ax</span><br><span class=\"line\">  PID TTY      STAT   TIME COMMAND</span><br><span class=\"line\"> 1177 pts/0    S      0:00 -bash</span><br><span class=\"line\"> 1577 pts/0    S      0:00 ./zombie</span><br><span class=\"line\"> 1578 pts/0    Z      0:00 [zombie &lt;defunct&gt;]</span><br><span class=\"line\"> 1579 pts/0    R      0:00 ps -ax</span><br></pre></td></tr></table></figure>\n<p>若STAT为Z则表明则是一个僵尸进程，关于僵尸进程，</p>\n<ul>\n<li>在父进程退出时，init进程会自动对其下的所有僵尸子进程进行清理；</li>\n<li>子进程意外死亡时，父进程会受到一个SIGCHLD信号，父进程可以注册这个信号的处理函数进行“收尸”；</li>\n<li><code>wait3</code>和<code>wait4</code>函数为异步的，可以周期调用这两个函数执行回收；</li>\n</ul>\n<h2 id=\"线程\"><a href=\"#线程\" class=\"headerlink\" title=\"线程\"></a>线程</h2><h3 id=\"线程创建\"><a href=\"#线程创建\" class=\"headerlink\" title=\"线程创建\"></a>线程创建</h3><p><strong>线程创建</strong>：<code>int pthread_create(pthread_t *thread, const pthread_attr_t *attr,\nvoid *(*start_routine) (void *), void *arg);</code></p>\n<ul>\n<li><code>pthread_create</code>的返回值为0表示创建线程成功；</li>\n<li><code>thread</code>是指向<code>pthread_t</code>的指针；</li>\n<li><code>pthread_attr_t</code>在下一个例子介绍；</li>\n<li><code>start_routine</code>是一个无形参且无返回值的函数指针；</li>\n<li><code>arg</code>是上面提到的函数指针所接收的参数；</li>\n</ul>\n<p><strong>线程回收</strong>：<code>int pthread_join(pthread_t thread, void **retval);</code></p>\n<ul>\n<li><code>retval</code>实际上是一个指向整型指针的指针，它存放的是线程调用<code>exit</code>或<code>pthread_exit</code>的退出值；</li>\n<li><code>When a joinable thread terminates, its memory resources (thread descriptor and stack) are not deallocated until another thread performs pthread_join on it. Therefore, pthread_join must be called  once  for each joinable thread created to avoid memory leaks.</code></li>\n<li>这是一个阻塞式的方法，当监控到有线程结束时才返回；</li>\n</ul>\n<p><strong>线程退出</strong>：<code>void pthread_exit(void *retval);</code></p>\n<ul>\n<li><code>retval</code>实际是一个整型指针，在退出时标识线程的退出值；</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;pthread.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> code = <span class=\"number\">11</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">hello</span><span class=\"params\">(<span class=\"keyword\">void</span> *args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> *str = (<span class=\"keyword\">char</span> *) args;</span><br><span class=\"line\">    sleep(<span class=\"number\">5</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Hello, %s!\\n\"</span>, str);</span><br><span class=\"line\">    pthread_exit(&amp;code);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">pthread_t</span> thread;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> status = pthread_create(&amp;thread, <span class=\"literal\">NULL</span>, (<span class=\"keyword\">void</span> *)hello, (<span class=\"keyword\">void</span> *) <span class=\"string\">\"Jayzee\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"thread create status : %d\\n\"</span>, status);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> *exit_code = <span class=\"number\">0</span>;</span><br><span class=\"line\">    status = pthread_join(thread, (<span class=\"keyword\">void</span> *) &amp;exit_code);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"thread join status : %d\\n\"</span>, status);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"thread exit code : %d\\n\"</span>, *exit_code);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<p>下面的例子在<code>pthread_create</code>时用到了<code>pthread_attr_t</code>，必须经历下面四个过程</p>\n<ol>\n<li>先实例化<code>pthread_attr_t</code>；</li>\n<li>再设置<code>pthread_attr_t</code>；</li>\n<li>在线程创建时使用该<code>pthread_attr_t</code>；</li>\n<li>线程创建完后销毁<code>pthread_attr_t</code>；</li>\n</ol>\n<p>注意：</p>\n<ol>\n<li>创建线程时设置其为detach态，意味着我们不关心它的返回值，只是进行线程相关资源回收；</li>\n<li>也可创建线程时不指定detach态，在线程创建后可使用<code>int pthread_detach(pthread_t thread);</code>设置其为detach态；</li>\n</ol>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;pthread.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> code = <span class=\"number\">11</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">hello</span><span class=\"params\">(<span class=\"keyword\">void</span> *args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> *str = (<span class=\"keyword\">char</span> *) args;</span><br><span class=\"line\">    sleep(<span class=\"number\">5</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Hello, %s!\\n\"</span>, str);</span><br><span class=\"line\">    pthread_exit(&amp;code);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">pthread_t</span> thread;</span><br><span class=\"line\">    <span class=\"keyword\">pthread_attr_t</span> attr;</span><br><span class=\"line\">    pthread_attr_init (&amp;attr);</span><br><span class=\"line\">    pthread_attr_setdetachstate (&amp;attr, PTHREAD_CREATE_DETACHED);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> status = pthread_create (&amp;thread, &amp;attr, (<span class=\"keyword\">void</span> *)hello, (<span class=\"keyword\">void</span> *) <span class=\"string\">\"Jayzee\"</span>);</span><br><span class=\"line\">    pthread_attr_destroy (&amp;attr);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"thread create status : %d\\n\"</span>, status);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"线程取消\"><a href=\"#线程取消\" class=\"headerlink\" title=\"线程取消\"></a>线程取消</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int pthread_setcancelstate(int state, int *oldstate);</span><br><span class=\"line\">int pthread_setcanceltype(int type, int *oldtype);</span><br><span class=\"line\">int pthread_cancel(pthread_t thread);</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>pthread_setcancelstate</code>在运行时设置线程的状态<code>state</code>，并取得其之前的状态<code>oldstate</code>；</li>\n<li><code>pthread_setcanceltype</code>在运行时设置线程的类型<code>type</code>，并取得其之前的类型<code>oldtype</code>；</li>\n<li><code>pthread_cancel</code>用于取消线程的执行；</li>\n</ul>\n<p>注意，</p>\n<ol>\n<li>type：<code>PTHREAD_CANCEL_DEFERRED</code>或<code>PTHREAD_CANCEL_ASYNCHRONOUS</code></li>\n<li>state：<code>PTHREAD_CANCEL_ENABLE</code>或<code>PTHREAD_CANCEL_DISABLE</code></li>\n<li>type和state作用于<code>pthread_cancel</code>：<ul>\n<li>当state为<code>PTHREAD_CANCEL_DISABLE</code>时，设置的type和调用<code>pthread_cancel</code>不会对线程造成任何影响；</li>\n<li>否则，当设置的type为<code>PTHREAD_CANCEL_DEFERRED</code>时，为非阻塞取消（等待达到取消的条件，如释放锁）；当设置的type为<code>PTHREAD_CANCEL_ASYNCHRONOUS</code>时为异步取消（即线程立即被取消，但不同操作系统有可能实现不同，理应处理释放锁）；</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;pthread.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> code = <span class=\"number\">11</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">hello</span><span class=\"params\">(<span class=\"keyword\">void</span> *args)</span> </span>&#123;</span><br><span class=\"line\">    pthread_setcancelstate(PTHREAD_CANCEL_ENABLE, &amp;last_state); </span><br><span class=\"line\">    pthread_setcanceltype(PTHREAD_CANCEL_DEFERRED, &amp;last_type);</span><br><span class=\"line\">    <span class=\"keyword\">char</span> *str = (<span class=\"keyword\">char</span> *) args;</span><br><span class=\"line\">    sleep(<span class=\"number\">5</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Hello, %s!\\n\"</span>, str);</span><br><span class=\"line\">    pthread_exit(&amp;code);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">pthread_t</span> thread;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> status = pthread_create(&amp;thread, <span class=\"literal\">NULL</span>, (<span class=\"keyword\">void</span> *)hello, (<span class=\"keyword\">void</span> *) <span class=\"string\">\"Jayzee\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"thread create status : %d\\n\"</span>, status);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> *exit_code = <span class=\"number\">0</span>;</span><br><span class=\"line\">    status = pthread_join(thread, (<span class=\"keyword\">void</span> *) &amp;exit_code);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"thread join status : %d\\n\"</span>, status);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"thread exit code : %d\\n\"</span>, *exit_code);</span><br><span class=\"line\">    pthread_cancel(thread);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"线程特定数据\"><a href=\"#线程特定数据\" class=\"headerlink\" title=\"线程特定数据\"></a>线程特定数据</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int pthread_key_create(pthread_key_t *key, void (*destructor)(void*));</span><br><span class=\"line\">int pthread_setspecific(pthread_key_t key, const void *value);</span><br><span class=\"line\">void *pthread_getspecific(pthread_key_t key);</span><br></pre></td></tr></table></figure>\n<ol>\n<li>使用<code>pthread_key_create</code>创建<code>key</code>，<code>destructor</code>为线程结束时用于析构的函数指针，一个进程内的多个线程可以共用一个<code>key</code>；</li>\n<li><code>pthread_setspecific</code>为线程设定key-value，<code>pthread_getspecific</code>根据key获得value；</li>\n<li>当线程结束时，若<code>pthread_getspecific</code>的内容不为空，且<code>destructor</code>不为空，则<code>pthread_getspecific</code>的内容将作为<code>destructor</code>的参数来执行析构函数；</li>\n</ol>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;malloc.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;pthread.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* The key used to associate a log file pointer with each thread. */</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">pthread_key_t</span> thread_log_key;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Write MESSAGE to the log file for the current thread. */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">write_to_thread_log</span> <span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* message)</span> </span>&#123;</span><br><span class=\"line\">    FILE* thread_log = (FILE*) pthread_getspecific (thread_log_key);</span><br><span class=\"line\">    <span class=\"built_in\">fprintf</span> (thread_log, <span class=\"string\">\"%s\\n\"</span>, message);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Close the log file pointer THREAD_LOG. */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">close_thread_log</span> <span class=\"params\">(<span class=\"keyword\">void</span>* thread_log)</span> </span>&#123;</span><br><span class=\"line\">    fclose ((FILE*) thread_log);    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span>* <span class=\"title\">thread_function</span> <span class=\"params\">(<span class=\"keyword\">void</span>* args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> thread_log_filename[<span class=\"number\">20</span>];</span><br><span class=\"line\">    FILE* thread_log;</span><br><span class=\"line\">    <span class=\"comment\">/* Generate the filename for this thread’s log file. */</span></span><br><span class=\"line\">    <span class=\"built_in\">sprintf</span> (thread_log_filename, <span class=\"string\">\"thread%d.log\"</span>, (<span class=\"keyword\">int</span>) pthread_self ());</span><br><span class=\"line\">    <span class=\"comment\">/* Open the log file. */</span></span><br><span class=\"line\">    thread_log = fopen (thread_log_filename, <span class=\"string\">\"w\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">/* Store the file pointer in thread-specific data under thread_log_key. */</span></span><br><span class=\"line\">    pthread_setspecific (thread_log_key, thread_log);</span><br><span class=\"line\">    write_to_thread_log (<span class=\"string\">\"Thread starting.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">/* Do work here... */</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i;</span><br><span class=\"line\">    <span class=\"keyword\">pthread_t</span> threads[<span class=\"number\">5</span>];</span><br><span class=\"line\">    <span class=\"comment\">/* Create a key to associate thread log file pointers in</span></span><br><span class=\"line\"><span class=\"comment\">    thread-specific data. Use close_thread_log to clean up the file</span></span><br><span class=\"line\"><span class=\"comment\">    pointers. */</span></span><br><span class=\"line\">    pthread_key_create (&amp;thread_log_key, close_thread_log);</span><br><span class=\"line\">    <span class=\"comment\">/* Create threads to do the work. */</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; ++i)</span><br><span class=\"line\">        pthread_create (&amp;(threads[i]), <span class=\"literal\">NULL</span>, thread_function, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">    <span class=\"comment\">/* Wait for all threads to finish. */</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; ++i)</span><br><span class=\"line\">        pthread_join (threads[i], <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void pthread_cleanup_push(void (*routine)(void *), void *arg);</span><br><span class=\"line\">void pthread_cleanup_pop(int execute);</span><br></pre></td></tr></table></figure>\n<ol>\n<li><code>pthread_cleanup_push</code>在线程运行时为线程压栈清理函数；</li>\n<li><code>pthread_cleanup_pop</code>从栈弹出一个清理函数，如果<code>execute</code>不为0则执行这个清理函数；</li>\n<li>线程结束时，所有压栈的清理函数会自动被弹出栈进行执行；</li>\n<li>当在线程内使用longjump前，应手动调用<code>pthread_cleanup_pop</code>执行清理；</li>\n</ol>\n<h3 id=\"线程同步\"><a href=\"#线程同步\" class=\"headerlink\" title=\"线程同步\"></a>线程同步</h3><h4 id=\"互斥锁\"><a href=\"#互斥锁\" class=\"headerlink\" title=\"互斥锁\"></a>互斥锁</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int pthread_mutex_destroy(pthread_mutex_t *mutex);</span><br><span class=\"line\">int pthread_mutex_init(pthread_mutex_t *restrict mutex,</span><br><span class=\"line\">    const pthread_mutexattr_t *restrict attr);</span><br><span class=\"line\">pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER;</span><br></pre></td></tr></table></figure>\n<ol>\n<li><code>pthread_mutex_destroy</code>销毁互斥锁，<code>pthread_mutex_init</code>创建互斥锁；</li>\n<li><code>pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER;</code>表示定义并默认实例化一个互斥锁；</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int pthread_mutex_lock(pthread_mutex_t *mutex);</span><br><span class=\"line\">int pthread_mutex_trylock(pthread_mutex_t *mutex);</span><br><span class=\"line\">int pthread_mutex_unlock(pthread_mutex_t *mutex);</span><br></pre></td></tr></table></figure>\n<ol>\n<li><code>pthread_mutex_lock</code>为阻塞锁，<code>pthread_mutex_trylock</code>为非阻塞锁（获取不到锁）则立即返回，<code>pthread_mutex_unlock</code>为释放锁；</li>\n</ol>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;pthread.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">pthread_mutexattr_t</span> attr;</span><br><span class=\"line\">    <span class=\"keyword\">pthread_mutex_t</span> mutex;</span><br><span class=\"line\">    pthread_mutexattr_init (&amp;attr);</span><br><span class=\"line\">    <span class=\"comment\">// 带错误检查的互斥锁</span></span><br><span class=\"line\">    pthread_mutexattr_setkind_np (&amp;attr, PTHREAD_MUTEX_ERRORCHECK_NP);</span><br><span class=\"line\">    pthread_mutex_init (&amp;mutex, &amp;attr);</span><br><span class=\"line\">    pthread_mutex_lock(&amp;mutex);</span><br><span class=\"line\">    <span class=\"comment\">/** do some work **/</span></span><br><span class=\"line\">    pthread_mutex_unlock(&amp;mutex);</span><br><span class=\"line\">    pthread_mutexattr_destroy (&amp;attr);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"信号量\"><a href=\"#信号量\" class=\"headerlink\" title=\"信号量\"></a>信号量</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int sem_init(sem_t *sem, int pshared, unsigned int value);</span><br><span class=\"line\">int sem_post(sem_t *sem);</span><br><span class=\"line\">int sem_wait(sem_t *sem);</span><br></pre></td></tr></table></figure>\n<ol>\n<li><code>sem_init</code>实例化信号量<code>sem</code>，<code>pshared</code>为0表示进程内共享（非0为进程间共享），<code>value</code>为初始容量值（默认容量值为0）；</li>\n<li><code>sem_wait</code>将容量值减一，<code>sem_wait</code>之后若容量值小于0则线程阻塞；<code>sem_post</code>将容量值加一；</li>\n<li>假设容量值为负，一次<code>sem_post</code>只能唤醒一个线程；</li>\n<li><code>sem_wait</code>和<code>sem_post</code>是线程安全的；</li>\n</ol>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;pthread.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;semaphore.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">sem_t</span> semaphore;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">threadfunc</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (; i&lt;<span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 实际上不会这么使用，这里仅是展示</span></span><br><span class=\"line\">        sem_wait(&amp;semaphore);</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"Hello from da thread!\\n\"</span>);</span><br><span class=\"line\">        sem_post(&amp;semaphore);</span><br><span class=\"line\">        sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 实例化</span></span><br><span class=\"line\">    sem_init(&amp;semaphore, <span class=\"number\">0</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">pthread_t</span> *mythread;    </span><br><span class=\"line\">    mythread = (<span class=\"keyword\">pthread_t</span> *)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(*mythread));</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 启动线程</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Starting thread, semaphore is unlocked.\\n\"</span>);</span><br><span class=\"line\">    pthread_create(mythread, <span class=\"literal\">NULL</span>, (<span class=\"keyword\">void</span>*)threadfunc, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">    pthread_join(mythread, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"条件值\"><a href=\"#条件值\" class=\"headerlink\" title=\"条件值\"></a>条件值</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int pthread_cond_init(pthread_cond_t *restrict cond,</span><br><span class=\"line\">    const pthread_condattr_t *restrict attr);</span><br><span class=\"line\">pthread_cond_t cond = PTHREAD_COND_INITIALIZER;</span><br><span class=\"line\">int pthread_cond_signal(pthread_cond_t *cond);</span><br><span class=\"line\">int pthread_cond_wait(pthread_cond_t *restrict cond,</span><br><span class=\"line\">   pthread_mutex_t *restrict mutex);</span><br></pre></td></tr></table></figure>\n<ol>\n<li><code>pthread_cond_t cond = PTHREAD_COND_INITIALIZER;</code>等价于<code>pthread_cond_init(&amp;pthread_cond_t, NULL);</code></li>\n<li>当调用<code>pthread_cond_signal</code>或<code>pthread_cond_wait</code>时，必须获得锁；</li>\n<li>调用<code>pthread_cond_wait</code>时，自动释放锁，直到被<code>pthread_cond_signal</code>唤醒时，才重新自动获得锁；</li>\n<li><code>pthread_cond_timedwait</code>可批量唤醒等待的线程；</li>\n</ol>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;pthread.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">pthread_mutex_t</span> mutex = PTHREAD_MUTEX_INITIALIZER;</span><br><span class=\"line\"><span class=\"keyword\">pthread_cond_t</span> cond = PTHREAD_COND_INITIALIZER;</span><br><span class=\"line\"><span class=\"keyword\">int</span> condition = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">consume</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>( <span class=\"number\">1</span> )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        pthread_mutex_lock( &amp;mutex );</span><br><span class=\"line\">        <span class=\"keyword\">while</span>( condition == <span class=\"number\">0</span> )</span><br><span class=\"line\">            pthread_cond_wait( &amp;cond, &amp;mutex );</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>( <span class=\"string\">\"Consumed %d\\n\"</span>, count );</span><br><span class=\"line\">        condition = <span class=\"number\">0</span>;</span><br><span class=\"line\">        pthread_cond_signal( &amp;cond );        </span><br><span class=\"line\">        pthread_mutex_unlock( &amp;mutex );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span>( <span class=\"number\">0</span> );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span>* <span class=\"title\">produce</span><span class=\"params\">( <span class=\"keyword\">void</span> * arg )</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>( <span class=\"number\">1</span> )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        pthread_mutex_lock( &amp;mutex );</span><br><span class=\"line\">        <span class=\"keyword\">while</span>( condition == <span class=\"number\">1</span> )</span><br><span class=\"line\">            pthread_cond_wait( &amp;cond, &amp;mutex );</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>( <span class=\"string\">\"Produced %d\\n\"</span>, count++ );</span><br><span class=\"line\">        condition = <span class=\"number\">1</span>;</span><br><span class=\"line\">        pthread_cond_signal( &amp;cond );        </span><br><span class=\"line\">        pthread_mutex_unlock( &amp;mutex );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>( <span class=\"number\">0</span> );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    pthread_create( <span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>, &amp;produce, <span class=\"literal\">NULL</span> );</span><br><span class=\"line\">    <span class=\"keyword\">return</span> consume();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"线程实现\"><a href=\"#线程实现\" class=\"headerlink\" title=\"线程实现\"></a>线程实现</h3><p>Linux的线程实现是系统调用<code>clone()</code>，它创建一个与父进程共用资源的子进程。</p>\n<h2 id=\"进程间通信\"><a href=\"#进程间通信\" class=\"headerlink\" title=\"进程间通信\"></a>进程间通信</h2><h3 id=\"共享内存\"><a href=\"#共享内存\" class=\"headerlink\" title=\"共享内存\"></a>共享内存</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;sys/ipc.h&gt;</span><br><span class=\"line\">#include &lt;sys/shm.h&gt;</span><br><span class=\"line\">int shmget(key_t key, size_t size, int shmflg);</span><br><span class=\"line\">void *shmat(int shmid, const void *shmaddr, int shmflg);</span><br><span class=\"line\">int shmdt(const void *shmaddr);</span><br><span class=\"line\">int shmctl(int shmid, int cmd, struct shmid_ds *buf);</span><br></pre></td></tr></table></figure>\n<ol>\n<li><code>shmget</code>申请共享内存；</li>\n<li><code>shmat</code>取得已申请的共享内存，共享内存使用者计数器加1；</li>\n<li><code>shmdt</code>断开已申请的共享内存，共享内存使用者计数器减1，如果计时器减到0，这块共享内存会被系统标注并删除；</li>\n<li><code>shmctl</code>对共享内存的标识信息进行设置；</li>\n</ol>\n<h3 id=\"进程信号量\"><a href=\"#进程信号量\" class=\"headerlink\" title=\"进程信号量\"></a>进程信号量</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;sys/types.h&gt;</span><br><span class=\"line\">#include &lt;sys/ipc.h&gt;</span><br><span class=\"line\">#include &lt;sys/sem.h&gt;</span><br><span class=\"line\">int semget(key_t key, int nsems, int semflg);</span><br><span class=\"line\">int semctl(int semid, int semnum, int cmd, ...);</span><br><span class=\"line\">int semop(int semid, struct sembuf *sops, size_t nsops);</span><br></pre></td></tr></table></figure>\n<ol>\n<li><code>semget</code>用于申请信号量；</li>\n<li><code>semctl</code>用于释放或实例化信号量；</li>\n<li><code>semop</code>用于执行wait或post；</li>\n</ol>\n<h3 id=\"映射到内存\"><a href=\"#映射到内存\" class=\"headerlink\" title=\"映射到内存\"></a>映射到内存</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;sys/mman.h&gt;</span><br><span class=\"line\">void *mmap(void *addr, size_t length, int prot, int flags,</span><br><span class=\"line\">    int fd, off_t offset);</span><br></pre></td></tr></table></figure>\n<p><code>mmap</code>是一种内存映射文件的方法，即将一个文件或者其它对象映射到进程的地址空间，实现文件磁盘地址和进程虚拟地址空间中一段虚拟地址的一一对映关系。实现这样的映射关系后，进程就可以采用指针的方式读写操作这一段内存，而系统会自动回写脏页面到对应的文件磁盘上，即完成了对文件的操作而不必再调用read,write等系统调用函数。相反，内核空间对这段区域的修改也直接反映用户空间，从而可以实现不同进程间的文件共享。</p>\n<h3 id=\"管道\"><a href=\"#管道\" class=\"headerlink\" title=\"管道\"></a>管道</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;unistd.h&gt;</span><br><span class=\"line\">int pipe(int pipefd[2]);</span><br></pre></td></tr></table></figure>\n<p><code>pipe</code>的一端写，由内核缓存，直到另一端将其读出。</p>\n<h3 id=\"Socket\"><a href=\"#Socket\" class=\"headerlink\" title=\"Socket\"></a>Socket</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;sys/types.h&gt;</span><br><span class=\"line\">#include &lt;sys/socket.h&gt;</span><br><span class=\"line\">int socket(int domain, int type, int protocol);</span><br><span class=\"line\">int close(int fd);</span><br><span class=\"line\">int connect(int sockfd, const struct sockaddr *addr,</span><br><span class=\"line\">    socklen_t addrlen);</span><br><span class=\"line\">int bind(int sockfd, const struct sockaddr *addr,</span><br><span class=\"line\">    socklen_t addrlen);</span><br><span class=\"line\">int listen(int sockfd, int backlog);</span><br><span class=\"line\">int accept(int sockfd, struct sockaddr *addr, socklen_t *addrlen);</span><br></pre></td></tr></table></figure>\n<ol>\n<li><code>socket</code>创建一个socket；</li>\n<li><code>close</code>关闭一个socket；</li>\n<li><code>connect</code>建立两个socket的连接；</li>\n<li><code>bind</code>将socket绑定到地址和端口；</li>\n<li><code>listen</code>配置socket接受连接的条件；</li>\n<li><code>accept</code>接收一个socket连接并为其创建一个socket；</li>\n</ol>\n<h2 id=\"设备\"><a href=\"#设备\" class=\"headerlink\" title=\"设备\"></a>设备</h2><h3 id=\"操作\"><a href=\"#操作\" class=\"headerlink\" title=\"操作\"></a>操作</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;sys/types.h&gt;</span><br><span class=\"line\">#include &lt;sys/stat.h&gt;</span><br><span class=\"line\">#include &lt;fcntl.h&gt;</span><br><span class=\"line\">#include &lt;unistd.h&gt;</span><br><span class=\"line\">int mknod(const char *pathname, mode_t mode, dev_t dev);</span><br></pre></td></tr></table></figure>\n<p><code>mknod</code>用于创建一个设备。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;sys/ioctl.h&gt;</span><br><span class=\"line\">int ioctl(int d, unsigned long request, ...);</span><br></pre></td></tr></table></figure>\n<p><code>ioctl</code>用于控制设备，常用于驱动编程。</p>\n<h3 id=\"特殊设备\"><a href=\"#特殊设备\" class=\"headerlink\" title=\"特殊设备\"></a>特殊设备</h3><p><code>/dev/null</code>是一个内容为空的设备，将IO流定向到<code>/dev/null</code>意味着丢弃其内容；</p>\n<p><code>/dev/zero</code>是一个无限长的文件；</p>\n<p><code>/dev/random</code>可用于产生随机数；</p>\n<p><code>/dev/tty*</code>是串行终端设备，如串口；</p>\n<p><code>pty</code>是伪终端，接受键盘的输入并显示到运行它的终端界面；</p>\n<p><code>pty</code>的实现涉及到两个概念：</p>\n<ul>\n<li><code>ptmx</code>：被连接的master主机；</li>\n<li><code>pts</code>：发起向master主机连接的slave主机<code>pts</code>，我们常用的SSH登录就意外着在master主机建立一个<code>pts</code>进程；</li>\n</ul>\n<h2 id=\"常用-proc简介\"><a href=\"#常用-proc简介\" class=\"headerlink\" title=\"常用/proc简介\"></a>常用/proc简介</h2><p><code>/proc/cpuinfo</code>查看cpu信息；</p>\n<p><code>/proc/meminfo</code>查看内存信息；</p>\n<p><code>/proc/self</code>查看自身信息；</p>\n<p><code>/proc/pid_number</code>查看pid为pid_number的进程信息；</p>\n<p><code>/proc/loadavg</code>查看负载信息；</p>\n<p><code>/proc/uptime</code>查看启动时间；</p>\n<p><code>/proc/interrupts</code>查看中断情况；</p>\n<h2 id=\"常用系统调用\"><a href=\"#常用系统调用\" class=\"headerlink\" title=\"常用系统调用\"></a>常用系统调用</h2><p><code>strace</code>查看系统调用情况；</p>\n<p><code>access</code>检测是否具备读写权限；<br><code>fcntl</code>操纵文件描述符；</p>\n<p><code>fsync</code>和<code>fdatasync</code>将缓冲区的文件改动同步到实际文件；</p>\n<p><code>getrlimit</code>取得系统的资源限定情况；</p>\n<p><code>getrusage</code>取得系统资源使用情况；</p>\n<p><code>gettimeofday</code>取得系统时间；</p>\n<p><code>mlock</code>锁住一块内存；</p>\n<p><code>mprotect</code>保护一块内存；</p>\n<h2 id=\"用户与用户组\"><a href=\"#用户与用户组\" class=\"headerlink\" title=\"用户与用户组\"></a>用户与用户组</h2><h3 id=\"用户与用户组ID\"><a href=\"#用户与用户组ID\" class=\"headerlink\" title=\"用户与用户组ID\"></a>用户与用户组ID</h3><p>每个用户名对应到一个用户ID，每个用户ID可从属于多个用户组ID。Shell下输入<code>id</code>得到如下输出：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># uid为0表示root用户</span><br><span class=\"line\">uid=0(root) gid=0(root) groups=0(root),1001(nagcmd)</span><br></pre></td></tr></table></figure>\n<h3 id=\"文件与用户（组）的关系\"><a href=\"#文件与用户（组）的关系\" class=\"headerlink\" title=\"文件与用户（组）的关系\"></a>文件与用户（组）的关系</h3><p><code>ls -l APL.txt</code>后得到如下输出：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-rw-r--r-- 1 Jayzee None   1237 五月 18 12:19 APL.txt</span><br></pre></td></tr></table></figure>\n<p><code>-rw-r--r--</code>解释：</p>\n<ul>\n<li>第一个字符<code>-</code>表示这是一个文件，<code>d</code>表示这是一个文件夹；</li>\n<li>2至4字符<code>rw-</code>表示拥有者<code>Jayzee</code>的权限，顺序为：读（r）、写（w）、执行（x），可读写但不可执行；</li>\n<li>5至7字符<code>r--</code>表示所属组<code>None</code>的权限；</li>\n<li>8至10字符<code>r--</code>表示组外其他用户的权限；</li>\n</ul>\n<p><code>man chmod</code>查看如何更改文件的权限；<br><code>man chown</code>查看如何更改文件的拥有者和所属组；</p>\n<p><strong>特殊</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">drwxrwxrwt   1 root root 26416 5月  18 21:53 tmp</span><br></pre></td></tr></table></figure>\n<p>只适用于文件夹：当文件夹的所属组或组外的执行（x）被设置为（t）时，表示当且仅当你是该文件夹内文件的创建者，才可以删除该文件；（正常情况下如果该文件夹内文件的权限是对于组或组外可读写，不需要是文件的创建者也可删除的），这里的<code>t</code>称为sticky bits。</p>\n<h3 id=\"真实的用户ID和有效的用户ID\"><a href=\"#真实的用户ID和有效的用户ID\" class=\"headerlink\" title=\"真实的用户ID和有效的用户ID\"></a>真实的用户ID和有效的用户ID</h3><p>定义<code>euid</code>为有效用户id（effective），<code>uid</code>为真实用户id（real）；</p>\n<p><code>man 2 getuid</code>查看如何使用C函数获取uid；<br><code>man 2 geteuid</code>查看如何使用C函数获取euid；</p>\n<p>为什么要引入euid？</p>\n<ol>\n<li>当用户发出对文件的操作时，Linux Kernel根据用户的euid检查用户是否具备权限；</li>\n<li>euid可被修改，uid不可被修改；</li>\n<li>euid被修改代表着用户的切换，uid不被修改表示最初登入系统的uid不变；</li>\n</ol>\n<p>用户登录系统时用户id发生什么变化？</p>\n<ol>\n<li>Linux的登录进程检查登入者输入的账号密码是否正确；</li>\n<li>若正确，使用<code>exec</code>为其创建一个User Shell（pts）；</li>\n<li>Linux的登录进程设置这个User Shell的euid和uid为同一个值，即该用户的uid（只有euid为0的User Shell可设置euid和uid）；</li>\n</ol>\n<p>设置说明：</p>\n<ol>\n<li>当我们设置<code>euid = uid</code>时，表示返回到最初登录用户的Shell；</li>\n<li>当我们设置<code>uid = euid</code>时，表示Linux的登录进程将euid与uid同步，该登录用户与Linux的登录进程（root）再无联系；</li>\n</ol>\n<p><code>su</code>命令的原理：</p>\n<ol>\n<li><code>/bin/su</code>的拥有者为root，其执行项不是（x）而是（s），当文件拥有者的执行项不是（x）而是（s）时，此文件可被执行，且执行文件时调用<code>geteuid</code>函数返回的是该可执行文件拥有者的uid而不是调用者的euid；</li>\n<li>Linux利用此技术实现普通用户到root用户时，uid不变，而euid变为0；</li>\n<li>当调用<code>su</code>时，调用者原User Shell阻塞，Kernel创建一个新User Shell给调用者使用；</li>\n</ol>\n<p>注：组ID也分真实和有效，与用户ID类同，故不展开叙述；</p>"},{"layout":"post","title":"读《小狗钱钱》","date":"2016-04-16T06:05:00.000Z","comments":1,"_content":"\n《小狗钱钱》读书笔记。\n\n<!--more-->\n\n## 小狗钱钱1\n\n### 财富观\n\n1. **一个人要想过更幸福、更满意的生活，就得对自身进行改变**。这和钱无关，金钱本身不会使人幸福也不会带来不幸。然而，实际上**贫穷更容易产生不幸**，例如你很难看到一个风餐露宿的乞丐过得非常幸福。\n2. **钱不是生命中最重要的东西，可是一旦我们缺钱，钱就会变得特别重要**。\n3. 大多数人在使用信用卡的时候，比用现金花的钱要多得多。在你大额负债时，禁用你的信用卡。\n\n<!--more-->\n\n4. 我们应尽可能少的偿还贷款，虽然为此将偿付更多的利息，**前提是你的投资回报率高于房贷利率**。\n5. 消费贷款是不明智的，聪明的做法是只支出之前积攒起来的财富。而且每次消费前总是问自己，**这真的有必要吗？**\n6. **大部分人没有会下金蛋的鹅，你必须选择多少的收入用于你的鹅，多少用于零花，多少用于短期梦想**。\n7. 你干的活最多只占报酬的一半，另外一半是因为你的想法和实施这个想法的勇气。\n8. 做有钱人的很好的理由：**你可以做一个有能力帮助别人的人**，而别人也会相信你，愿意接受你的帮助。\n9. **获得金钱的咒语**\n    - 确定自己希望获得财务上的成功；\n    - 自信，有想法，做自己喜欢做的事；\n    - 把钱分成日常开销、梦想目标和金鹅账户三部分；\n    - 进行明智的投资；\n    - 享受生活；\n10. **关于投资**\n    - 应该把钱投资在安全的地方；\n    - 我的钱应该下很多金蛋；\n    - 我们的投资应该简单明白；\n    - 基金应该至少有10年历史；\n    - 应该选择大型的跨国股票基金；\n    - 对基金的走势图进行比较；\n    - 72定理：72除以投资年化率为资金翻一倍所需时间，72除以通胀率是你的资金贬值一半所需的时间；\n    - 逢低买进；\n11. 决定一件东西价值多少的唯一因素就是，**你愿意为它支付多少钱**。\n\n### 梦想的力量\n\n1. **你必须要有短期或者长期的梦想**，并将该梦想具象化，如使用图像和声音。\n2. **最重要的是，你真的有这个愿望，否则你遇到困难就放弃了**。你真的发自内心想要实现这个梦想吗？\n\n### 如何实现梦想\n\n#### 长板理论\n\n1. **尝试为人解决难题，以及把精力集中在你知道、会做、拥有的事情上**，不去想或是忧虑自己做不到的。\n2. 人总是有那么多紧急的事要做，以至于没有时间关注重要的事情。**你必须每天不间断的去做对你的未来意义重大的事情**，你将为此获得丰厚的回报。\n\n#### 自信\n\n1. **你能否挣到钱的决定因素是你的自信程度**。如果你一直怀疑自己，那么你将一事无成。\n2. 记录“成功日记”是培养自信的一种非常好的方式。把任何你觉得有成就感的事情记录下来。\n3. 当你记成功日记时，**你会对自身，对世界，还有对成功的规律做更深入的思考，你就会越来越多地了解自己和自己的愿望，这会使你有能力去理解别人**。\n4. **我越回想起我所克服过的那些困难，就越发对自己充满信心**。\n\n#### 坚持\n\n1. **并非困难使我们放弃，而是因为我们放弃，才显得如此困难**。长跑的人都有这样的体会：当我们快跑不下去的时候再坚持那么一会，就又能再跑上一段路。面对困难亦是如此，难走的路将越走越容易。\n2. **你应该能在自己遇到困难的时候，仍然能坚持自己的意愿**。\n3. 如果你没有做今天这件事情，你就永远不会知道，给自己一些压力之后，你能做到些什么。**一个人觉得最引以为自豪的事情，往往是那些做起来最艰难的事情**。\n\n#### 决心\n\n1. “**在你展翅飞翔之前，就必须知道自己能到达目的地**”。如果你选择做一件事情，那么你必须相信它能做成；如果你决定拥有一个梦想，那么你必须相信它能实现。\n2. **做或者不做，而不是试试看**。试试看意味着还没开始就给自己留下了放弃的后路，你必须义无反顾，即使做了未必成功。\n3. \n\n#### 执行\n\n1. 当你决定做一件事情的时候，你必须在72小时内完成它，否则你很可能就永远不会再做了。\n2. **谈论疼痛只会让你更疼痛**，终日想于事无补的事情就是在浪费时间浪费精力。\n3. **如果你选择的是一个大目标，那你必须付出比平时更多的努力**。\n\n## 小狗钱钱2的7条准则\n\n1. 友好亲和\n    - 我有一个强烈的愿望，希望其他人能够像我一样生活美好而幸福\n    - 我不会伤害任何人，我克制自己，不介入任何争端\n    - 我谦虚有礼，尊重他人，我并不是永远正确\n2. 勇于承担\n    - 遇事我能自我抉择，我能自行判断对某种情况应该作何反应\n    - 我不受不公平之事的影响，而是将注意力集中在我能做的事情. 我知道的知识和我拥有的东西之上\n    - 我把责任推脱给他人的同时，也把相应的权利转交给了对方\n3. 善待他人\n    - 我只称赞他人，如果确实无法称赞他们，那最好什么都不说\n    - 我尽量不批评他人，如果不得不批评，也要用非常礼貌和友善的方式\n    - 我将注意力集中在他人的优点和闪光点上\n4. 帮助给予\n    - 我祝愿自己遇到过的所有人都能一切顺利\n    - 我送给某人礼物，因为我想表达自己的对他的好感\n    - 最美好的事情莫过于帮助他人，我总是在想自己能够帮助谁，没有什么比这更令人快乐\n5. 感恩之心\n    - 我总是心怀感恩，哪怕是对看似寻常的事情\n    - 即使我遇到了困难，我还是会关注值得感激的事物\n    - 我对身边的人都充满感激之情，享受和他们共度的美好时光\n6. 勤学不辍\n    - 如果我骄傲自满，那无异于说自己不必再学任何东西了。因此我因该保持谦恭好学的态度\n    - 我不仅要阅读好的书籍. 写成功日志和知识笔记，还要尽可能多地向他人学习\n    - 我不拿自己和别人比较，而是尽我所能做到最好\n7. 值得信赖\n    - 我能否成功总是取决于自己身培养出的习惯\n    - 如果我是一个非常自律的人，我就能比那些虽有天赋但却懒惰散漫的人获得更多的成功\n    - 我总是很守时，我信守对他人作出的承诺\n\n## 接下来我该做什么\n\n1. 将我的梦想清单具象化；\n2. 在我的日记加多成功日记一栏；\n3. 按“鹅”、“梦想”和“零花”来分配我的收入；\n4. 学习基金投资；\n5. 每天践行一条我学习到的准则。\n","source":"_posts/2016-04-16-little-dog-money.markdown","raw":"---\nlayout: post\ntitle: 读《小狗钱钱》\ndate: '2016-04-16 14:05'\ncomments: true\ncategories: ['读书笔记']  \ntags: ['财商', '读书']\n---\n\n《小狗钱钱》读书笔记。\n\n<!--more-->\n\n## 小狗钱钱1\n\n### 财富观\n\n1. **一个人要想过更幸福、更满意的生活，就得对自身进行改变**。这和钱无关，金钱本身不会使人幸福也不会带来不幸。然而，实际上**贫穷更容易产生不幸**，例如你很难看到一个风餐露宿的乞丐过得非常幸福。\n2. **钱不是生命中最重要的东西，可是一旦我们缺钱，钱就会变得特别重要**。\n3. 大多数人在使用信用卡的时候，比用现金花的钱要多得多。在你大额负债时，禁用你的信用卡。\n\n<!--more-->\n\n4. 我们应尽可能少的偿还贷款，虽然为此将偿付更多的利息，**前提是你的投资回报率高于房贷利率**。\n5. 消费贷款是不明智的，聪明的做法是只支出之前积攒起来的财富。而且每次消费前总是问自己，**这真的有必要吗？**\n6. **大部分人没有会下金蛋的鹅，你必须选择多少的收入用于你的鹅，多少用于零花，多少用于短期梦想**。\n7. 你干的活最多只占报酬的一半，另外一半是因为你的想法和实施这个想法的勇气。\n8. 做有钱人的很好的理由：**你可以做一个有能力帮助别人的人**，而别人也会相信你，愿意接受你的帮助。\n9. **获得金钱的咒语**\n    - 确定自己希望获得财务上的成功；\n    - 自信，有想法，做自己喜欢做的事；\n    - 把钱分成日常开销、梦想目标和金鹅账户三部分；\n    - 进行明智的投资；\n    - 享受生活；\n10. **关于投资**\n    - 应该把钱投资在安全的地方；\n    - 我的钱应该下很多金蛋；\n    - 我们的投资应该简单明白；\n    - 基金应该至少有10年历史；\n    - 应该选择大型的跨国股票基金；\n    - 对基金的走势图进行比较；\n    - 72定理：72除以投资年化率为资金翻一倍所需时间，72除以通胀率是你的资金贬值一半所需的时间；\n    - 逢低买进；\n11. 决定一件东西价值多少的唯一因素就是，**你愿意为它支付多少钱**。\n\n### 梦想的力量\n\n1. **你必须要有短期或者长期的梦想**，并将该梦想具象化，如使用图像和声音。\n2. **最重要的是，你真的有这个愿望，否则你遇到困难就放弃了**。你真的发自内心想要实现这个梦想吗？\n\n### 如何实现梦想\n\n#### 长板理论\n\n1. **尝试为人解决难题，以及把精力集中在你知道、会做、拥有的事情上**，不去想或是忧虑自己做不到的。\n2. 人总是有那么多紧急的事要做，以至于没有时间关注重要的事情。**你必须每天不间断的去做对你的未来意义重大的事情**，你将为此获得丰厚的回报。\n\n#### 自信\n\n1. **你能否挣到钱的决定因素是你的自信程度**。如果你一直怀疑自己，那么你将一事无成。\n2. 记录“成功日记”是培养自信的一种非常好的方式。把任何你觉得有成就感的事情记录下来。\n3. 当你记成功日记时，**你会对自身，对世界，还有对成功的规律做更深入的思考，你就会越来越多地了解自己和自己的愿望，这会使你有能力去理解别人**。\n4. **我越回想起我所克服过的那些困难，就越发对自己充满信心**。\n\n#### 坚持\n\n1. **并非困难使我们放弃，而是因为我们放弃，才显得如此困难**。长跑的人都有这样的体会：当我们快跑不下去的时候再坚持那么一会，就又能再跑上一段路。面对困难亦是如此，难走的路将越走越容易。\n2. **你应该能在自己遇到困难的时候，仍然能坚持自己的意愿**。\n3. 如果你没有做今天这件事情，你就永远不会知道，给自己一些压力之后，你能做到些什么。**一个人觉得最引以为自豪的事情，往往是那些做起来最艰难的事情**。\n\n#### 决心\n\n1. “**在你展翅飞翔之前，就必须知道自己能到达目的地**”。如果你选择做一件事情，那么你必须相信它能做成；如果你决定拥有一个梦想，那么你必须相信它能实现。\n2. **做或者不做，而不是试试看**。试试看意味着还没开始就给自己留下了放弃的后路，你必须义无反顾，即使做了未必成功。\n3. \n\n#### 执行\n\n1. 当你决定做一件事情的时候，你必须在72小时内完成它，否则你很可能就永远不会再做了。\n2. **谈论疼痛只会让你更疼痛**，终日想于事无补的事情就是在浪费时间浪费精力。\n3. **如果你选择的是一个大目标，那你必须付出比平时更多的努力**。\n\n## 小狗钱钱2的7条准则\n\n1. 友好亲和\n    - 我有一个强烈的愿望，希望其他人能够像我一样生活美好而幸福\n    - 我不会伤害任何人，我克制自己，不介入任何争端\n    - 我谦虚有礼，尊重他人，我并不是永远正确\n2. 勇于承担\n    - 遇事我能自我抉择，我能自行判断对某种情况应该作何反应\n    - 我不受不公平之事的影响，而是将注意力集中在我能做的事情. 我知道的知识和我拥有的东西之上\n    - 我把责任推脱给他人的同时，也把相应的权利转交给了对方\n3. 善待他人\n    - 我只称赞他人，如果确实无法称赞他们，那最好什么都不说\n    - 我尽量不批评他人，如果不得不批评，也要用非常礼貌和友善的方式\n    - 我将注意力集中在他人的优点和闪光点上\n4. 帮助给予\n    - 我祝愿自己遇到过的所有人都能一切顺利\n    - 我送给某人礼物，因为我想表达自己的对他的好感\n    - 最美好的事情莫过于帮助他人，我总是在想自己能够帮助谁，没有什么比这更令人快乐\n5. 感恩之心\n    - 我总是心怀感恩，哪怕是对看似寻常的事情\n    - 即使我遇到了困难，我还是会关注值得感激的事物\n    - 我对身边的人都充满感激之情，享受和他们共度的美好时光\n6. 勤学不辍\n    - 如果我骄傲自满，那无异于说自己不必再学任何东西了。因此我因该保持谦恭好学的态度\n    - 我不仅要阅读好的书籍. 写成功日志和知识笔记，还要尽可能多地向他人学习\n    - 我不拿自己和别人比较，而是尽我所能做到最好\n7. 值得信赖\n    - 我能否成功总是取决于自己身培养出的习惯\n    - 如果我是一个非常自律的人，我就能比那些虽有天赋但却懒惰散漫的人获得更多的成功\n    - 我总是很守时，我信守对他人作出的承诺\n\n## 接下来我该做什么\n\n1. 将我的梦想清单具象化；\n2. 在我的日记加多成功日记一栏；\n3. 按“鹅”、“梦想”和“零花”来分配我的收入；\n4. 学习基金投资；\n5. 每天践行一条我学习到的准则。\n","slug":"little-dog-money","published":1,"updated":"2017-04-09T14:42:40.000Z","photos":[],"link":"","_id":"cjlza6m4g000lpguphzclw872","content":"<p>《小狗钱钱》读书笔记。</p>\n<a id=\"more\"></a>\n<h2 id=\"小狗钱钱1\"><a href=\"#小狗钱钱1\" class=\"headerlink\" title=\"小狗钱钱1\"></a>小狗钱钱1</h2><h3 id=\"财富观\"><a href=\"#财富观\" class=\"headerlink\" title=\"财富观\"></a>财富观</h3><ol>\n<li><strong>一个人要想过更幸福、更满意的生活，就得对自身进行改变</strong>。这和钱无关，金钱本身不会使人幸福也不会带来不幸。然而，实际上<strong>贫穷更容易产生不幸</strong>，例如你很难看到一个风餐露宿的乞丐过得非常幸福。</li>\n<li><strong>钱不是生命中最重要的东西，可是一旦我们缺钱，钱就会变得特别重要</strong>。</li>\n<li>大多数人在使用信用卡的时候，比用现金花的钱要多得多。在你大额负债时，禁用你的信用卡。</li>\n</ol>\n<!--more-->\n<ol start=\"4\">\n<li>我们应尽可能少的偿还贷款，虽然为此将偿付更多的利息，<strong>前提是你的投资回报率高于房贷利率</strong>。</li>\n<li>消费贷款是不明智的，聪明的做法是只支出之前积攒起来的财富。而且每次消费前总是问自己，<strong>这真的有必要吗？</strong></li>\n<li><strong>大部分人没有会下金蛋的鹅，你必须选择多少的收入用于你的鹅，多少用于零花，多少用于短期梦想</strong>。</li>\n<li>你干的活最多只占报酬的一半，另外一半是因为你的想法和实施这个想法的勇气。</li>\n<li>做有钱人的很好的理由：<strong>你可以做一个有能力帮助别人的人</strong>，而别人也会相信你，愿意接受你的帮助。</li>\n<li><strong>获得金钱的咒语</strong><ul>\n<li>确定自己希望获得财务上的成功；</li>\n<li>自信，有想法，做自己喜欢做的事；</li>\n<li>把钱分成日常开销、梦想目标和金鹅账户三部分；</li>\n<li>进行明智的投资；</li>\n<li>享受生活；</li>\n</ul>\n</li>\n<li><strong>关于投资</strong><ul>\n<li>应该把钱投资在安全的地方；</li>\n<li>我的钱应该下很多金蛋；</li>\n<li>我们的投资应该简单明白；</li>\n<li>基金应该至少有10年历史；</li>\n<li>应该选择大型的跨国股票基金；</li>\n<li>对基金的走势图进行比较；</li>\n<li>72定理：72除以投资年化率为资金翻一倍所需时间，72除以通胀率是你的资金贬值一半所需的时间；</li>\n<li>逢低买进；</li>\n</ul>\n</li>\n<li>决定一件东西价值多少的唯一因素就是，<strong>你愿意为它支付多少钱</strong>。</li>\n</ol>\n<h3 id=\"梦想的力量\"><a href=\"#梦想的力量\" class=\"headerlink\" title=\"梦想的力量\"></a>梦想的力量</h3><ol>\n<li><strong>你必须要有短期或者长期的梦想</strong>，并将该梦想具象化，如使用图像和声音。</li>\n<li><strong>最重要的是，你真的有这个愿望，否则你遇到困难就放弃了</strong>。你真的发自内心想要实现这个梦想吗？</li>\n</ol>\n<h3 id=\"如何实现梦想\"><a href=\"#如何实现梦想\" class=\"headerlink\" title=\"如何实现梦想\"></a>如何实现梦想</h3><h4 id=\"长板理论\"><a href=\"#长板理论\" class=\"headerlink\" title=\"长板理论\"></a>长板理论</h4><ol>\n<li><strong>尝试为人解决难题，以及把精力集中在你知道、会做、拥有的事情上</strong>，不去想或是忧虑自己做不到的。</li>\n<li>人总是有那么多紧急的事要做，以至于没有时间关注重要的事情。<strong>你必须每天不间断的去做对你的未来意义重大的事情</strong>，你将为此获得丰厚的回报。</li>\n</ol>\n<h4 id=\"自信\"><a href=\"#自信\" class=\"headerlink\" title=\"自信\"></a>自信</h4><ol>\n<li><strong>你能否挣到钱的决定因素是你的自信程度</strong>。如果你一直怀疑自己，那么你将一事无成。</li>\n<li>记录“成功日记”是培养自信的一种非常好的方式。把任何你觉得有成就感的事情记录下来。</li>\n<li>当你记成功日记时，<strong>你会对自身，对世界，还有对成功的规律做更深入的思考，你就会越来越多地了解自己和自己的愿望，这会使你有能力去理解别人</strong>。</li>\n<li><strong>我越回想起我所克服过的那些困难，就越发对自己充满信心</strong>。</li>\n</ol>\n<h4 id=\"坚持\"><a href=\"#坚持\" class=\"headerlink\" title=\"坚持\"></a>坚持</h4><ol>\n<li><strong>并非困难使我们放弃，而是因为我们放弃，才显得如此困难</strong>。长跑的人都有这样的体会：当我们快跑不下去的时候再坚持那么一会，就又能再跑上一段路。面对困难亦是如此，难走的路将越走越容易。</li>\n<li><strong>你应该能在自己遇到困难的时候，仍然能坚持自己的意愿</strong>。</li>\n<li>如果你没有做今天这件事情，你就永远不会知道，给自己一些压力之后，你能做到些什么。<strong>一个人觉得最引以为自豪的事情，往往是那些做起来最艰难的事情</strong>。</li>\n</ol>\n<h4 id=\"决心\"><a href=\"#决心\" class=\"headerlink\" title=\"决心\"></a>决心</h4><ol>\n<li>“<strong>在你展翅飞翔之前，就必须知道自己能到达目的地</strong>”。如果你选择做一件事情，那么你必须相信它能做成；如果你决定拥有一个梦想，那么你必须相信它能实现。</li>\n<li><strong>做或者不做，而不是试试看</strong>。试试看意味着还没开始就给自己留下了放弃的后路，你必须义无反顾，即使做了未必成功。</li>\n<li></li>\n</ol>\n<h4 id=\"执行\"><a href=\"#执行\" class=\"headerlink\" title=\"执行\"></a>执行</h4><ol>\n<li>当你决定做一件事情的时候，你必须在72小时内完成它，否则你很可能就永远不会再做了。</li>\n<li><strong>谈论疼痛只会让你更疼痛</strong>，终日想于事无补的事情就是在浪费时间浪费精力。</li>\n<li><strong>如果你选择的是一个大目标，那你必须付出比平时更多的努力</strong>。</li>\n</ol>\n<h2 id=\"小狗钱钱2的7条准则\"><a href=\"#小狗钱钱2的7条准则\" class=\"headerlink\" title=\"小狗钱钱2的7条准则\"></a>小狗钱钱2的7条准则</h2><ol>\n<li>友好亲和<ul>\n<li>我有一个强烈的愿望，希望其他人能够像我一样生活美好而幸福</li>\n<li>我不会伤害任何人，我克制自己，不介入任何争端</li>\n<li>我谦虚有礼，尊重他人，我并不是永远正确</li>\n</ul>\n</li>\n<li>勇于承担<ul>\n<li>遇事我能自我抉择，我能自行判断对某种情况应该作何反应</li>\n<li>我不受不公平之事的影响，而是将注意力集中在我能做的事情. 我知道的知识和我拥有的东西之上</li>\n<li>我把责任推脱给他人的同时，也把相应的权利转交给了对方</li>\n</ul>\n</li>\n<li>善待他人<ul>\n<li>我只称赞他人，如果确实无法称赞他们，那最好什么都不说</li>\n<li>我尽量不批评他人，如果不得不批评，也要用非常礼貌和友善的方式</li>\n<li>我将注意力集中在他人的优点和闪光点上</li>\n</ul>\n</li>\n<li>帮助给予<ul>\n<li>我祝愿自己遇到过的所有人都能一切顺利</li>\n<li>我送给某人礼物，因为我想表达自己的对他的好感</li>\n<li>最美好的事情莫过于帮助他人，我总是在想自己能够帮助谁，没有什么比这更令人快乐</li>\n</ul>\n</li>\n<li>感恩之心<ul>\n<li>我总是心怀感恩，哪怕是对看似寻常的事情</li>\n<li>即使我遇到了困难，我还是会关注值得感激的事物</li>\n<li>我对身边的人都充满感激之情，享受和他们共度的美好时光</li>\n</ul>\n</li>\n<li>勤学不辍<ul>\n<li>如果我骄傲自满，那无异于说自己不必再学任何东西了。因此我因该保持谦恭好学的态度</li>\n<li>我不仅要阅读好的书籍. 写成功日志和知识笔记，还要尽可能多地向他人学习</li>\n<li>我不拿自己和别人比较，而是尽我所能做到最好</li>\n</ul>\n</li>\n<li>值得信赖<ul>\n<li>我能否成功总是取决于自己身培养出的习惯</li>\n<li>如果我是一个非常自律的人，我就能比那些虽有天赋但却懒惰散漫的人获得更多的成功</li>\n<li>我总是很守时，我信守对他人作出的承诺</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"接下来我该做什么\"><a href=\"#接下来我该做什么\" class=\"headerlink\" title=\"接下来我该做什么\"></a>接下来我该做什么</h2><ol>\n<li>将我的梦想清单具象化；</li>\n<li>在我的日记加多成功日记一栏；</li>\n<li>按“鹅”、“梦想”和“零花”来分配我的收入；</li>\n<li>学习基金投资；</li>\n<li>每天践行一条我学习到的准则。</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>《小狗钱钱》读书笔记。</p>","more":"<h2 id=\"小狗钱钱1\"><a href=\"#小狗钱钱1\" class=\"headerlink\" title=\"小狗钱钱1\"></a>小狗钱钱1</h2><h3 id=\"财富观\"><a href=\"#财富观\" class=\"headerlink\" title=\"财富观\"></a>财富观</h3><ol>\n<li><strong>一个人要想过更幸福、更满意的生活，就得对自身进行改变</strong>。这和钱无关，金钱本身不会使人幸福也不会带来不幸。然而，实际上<strong>贫穷更容易产生不幸</strong>，例如你很难看到一个风餐露宿的乞丐过得非常幸福。</li>\n<li><strong>钱不是生命中最重要的东西，可是一旦我们缺钱，钱就会变得特别重要</strong>。</li>\n<li>大多数人在使用信用卡的时候，比用现金花的钱要多得多。在你大额负债时，禁用你的信用卡。</li>\n</ol>\n<!--more-->\n<ol start=\"4\">\n<li>我们应尽可能少的偿还贷款，虽然为此将偿付更多的利息，<strong>前提是你的投资回报率高于房贷利率</strong>。</li>\n<li>消费贷款是不明智的，聪明的做法是只支出之前积攒起来的财富。而且每次消费前总是问自己，<strong>这真的有必要吗？</strong></li>\n<li><strong>大部分人没有会下金蛋的鹅，你必须选择多少的收入用于你的鹅，多少用于零花，多少用于短期梦想</strong>。</li>\n<li>你干的活最多只占报酬的一半，另外一半是因为你的想法和实施这个想法的勇气。</li>\n<li>做有钱人的很好的理由：<strong>你可以做一个有能力帮助别人的人</strong>，而别人也会相信你，愿意接受你的帮助。</li>\n<li><strong>获得金钱的咒语</strong><ul>\n<li>确定自己希望获得财务上的成功；</li>\n<li>自信，有想法，做自己喜欢做的事；</li>\n<li>把钱分成日常开销、梦想目标和金鹅账户三部分；</li>\n<li>进行明智的投资；</li>\n<li>享受生活；</li>\n</ul>\n</li>\n<li><strong>关于投资</strong><ul>\n<li>应该把钱投资在安全的地方；</li>\n<li>我的钱应该下很多金蛋；</li>\n<li>我们的投资应该简单明白；</li>\n<li>基金应该至少有10年历史；</li>\n<li>应该选择大型的跨国股票基金；</li>\n<li>对基金的走势图进行比较；</li>\n<li>72定理：72除以投资年化率为资金翻一倍所需时间，72除以通胀率是你的资金贬值一半所需的时间；</li>\n<li>逢低买进；</li>\n</ul>\n</li>\n<li>决定一件东西价值多少的唯一因素就是，<strong>你愿意为它支付多少钱</strong>。</li>\n</ol>\n<h3 id=\"梦想的力量\"><a href=\"#梦想的力量\" class=\"headerlink\" title=\"梦想的力量\"></a>梦想的力量</h3><ol>\n<li><strong>你必须要有短期或者长期的梦想</strong>，并将该梦想具象化，如使用图像和声音。</li>\n<li><strong>最重要的是，你真的有这个愿望，否则你遇到困难就放弃了</strong>。你真的发自内心想要实现这个梦想吗？</li>\n</ol>\n<h3 id=\"如何实现梦想\"><a href=\"#如何实现梦想\" class=\"headerlink\" title=\"如何实现梦想\"></a>如何实现梦想</h3><h4 id=\"长板理论\"><a href=\"#长板理论\" class=\"headerlink\" title=\"长板理论\"></a>长板理论</h4><ol>\n<li><strong>尝试为人解决难题，以及把精力集中在你知道、会做、拥有的事情上</strong>，不去想或是忧虑自己做不到的。</li>\n<li>人总是有那么多紧急的事要做，以至于没有时间关注重要的事情。<strong>你必须每天不间断的去做对你的未来意义重大的事情</strong>，你将为此获得丰厚的回报。</li>\n</ol>\n<h4 id=\"自信\"><a href=\"#自信\" class=\"headerlink\" title=\"自信\"></a>自信</h4><ol>\n<li><strong>你能否挣到钱的决定因素是你的自信程度</strong>。如果你一直怀疑自己，那么你将一事无成。</li>\n<li>记录“成功日记”是培养自信的一种非常好的方式。把任何你觉得有成就感的事情记录下来。</li>\n<li>当你记成功日记时，<strong>你会对自身，对世界，还有对成功的规律做更深入的思考，你就会越来越多地了解自己和自己的愿望，这会使你有能力去理解别人</strong>。</li>\n<li><strong>我越回想起我所克服过的那些困难，就越发对自己充满信心</strong>。</li>\n</ol>\n<h4 id=\"坚持\"><a href=\"#坚持\" class=\"headerlink\" title=\"坚持\"></a>坚持</h4><ol>\n<li><strong>并非困难使我们放弃，而是因为我们放弃，才显得如此困难</strong>。长跑的人都有这样的体会：当我们快跑不下去的时候再坚持那么一会，就又能再跑上一段路。面对困难亦是如此，难走的路将越走越容易。</li>\n<li><strong>你应该能在自己遇到困难的时候，仍然能坚持自己的意愿</strong>。</li>\n<li>如果你没有做今天这件事情，你就永远不会知道，给自己一些压力之后，你能做到些什么。<strong>一个人觉得最引以为自豪的事情，往往是那些做起来最艰难的事情</strong>。</li>\n</ol>\n<h4 id=\"决心\"><a href=\"#决心\" class=\"headerlink\" title=\"决心\"></a>决心</h4><ol>\n<li>“<strong>在你展翅飞翔之前，就必须知道自己能到达目的地</strong>”。如果你选择做一件事情，那么你必须相信它能做成；如果你决定拥有一个梦想，那么你必须相信它能实现。</li>\n<li><strong>做或者不做，而不是试试看</strong>。试试看意味着还没开始就给自己留下了放弃的后路，你必须义无反顾，即使做了未必成功。</li>\n<li></li>\n</ol>\n<h4 id=\"执行\"><a href=\"#执行\" class=\"headerlink\" title=\"执行\"></a>执行</h4><ol>\n<li>当你决定做一件事情的时候，你必须在72小时内完成它，否则你很可能就永远不会再做了。</li>\n<li><strong>谈论疼痛只会让你更疼痛</strong>，终日想于事无补的事情就是在浪费时间浪费精力。</li>\n<li><strong>如果你选择的是一个大目标，那你必须付出比平时更多的努力</strong>。</li>\n</ol>\n<h2 id=\"小狗钱钱2的7条准则\"><a href=\"#小狗钱钱2的7条准则\" class=\"headerlink\" title=\"小狗钱钱2的7条准则\"></a>小狗钱钱2的7条准则</h2><ol>\n<li>友好亲和<ul>\n<li>我有一个强烈的愿望，希望其他人能够像我一样生活美好而幸福</li>\n<li>我不会伤害任何人，我克制自己，不介入任何争端</li>\n<li>我谦虚有礼，尊重他人，我并不是永远正确</li>\n</ul>\n</li>\n<li>勇于承担<ul>\n<li>遇事我能自我抉择，我能自行判断对某种情况应该作何反应</li>\n<li>我不受不公平之事的影响，而是将注意力集中在我能做的事情. 我知道的知识和我拥有的东西之上</li>\n<li>我把责任推脱给他人的同时，也把相应的权利转交给了对方</li>\n</ul>\n</li>\n<li>善待他人<ul>\n<li>我只称赞他人，如果确实无法称赞他们，那最好什么都不说</li>\n<li>我尽量不批评他人，如果不得不批评，也要用非常礼貌和友善的方式</li>\n<li>我将注意力集中在他人的优点和闪光点上</li>\n</ul>\n</li>\n<li>帮助给予<ul>\n<li>我祝愿自己遇到过的所有人都能一切顺利</li>\n<li>我送给某人礼物，因为我想表达自己的对他的好感</li>\n<li>最美好的事情莫过于帮助他人，我总是在想自己能够帮助谁，没有什么比这更令人快乐</li>\n</ul>\n</li>\n<li>感恩之心<ul>\n<li>我总是心怀感恩，哪怕是对看似寻常的事情</li>\n<li>即使我遇到了困难，我还是会关注值得感激的事物</li>\n<li>我对身边的人都充满感激之情，享受和他们共度的美好时光</li>\n</ul>\n</li>\n<li>勤学不辍<ul>\n<li>如果我骄傲自满，那无异于说自己不必再学任何东西了。因此我因该保持谦恭好学的态度</li>\n<li>我不仅要阅读好的书籍. 写成功日志和知识笔记，还要尽可能多地向他人学习</li>\n<li>我不拿自己和别人比较，而是尽我所能做到最好</li>\n</ul>\n</li>\n<li>值得信赖<ul>\n<li>我能否成功总是取决于自己身培养出的习惯</li>\n<li>如果我是一个非常自律的人，我就能比那些虽有天赋但却懒惰散漫的人获得更多的成功</li>\n<li>我总是很守时，我信守对他人作出的承诺</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"接下来我该做什么\"><a href=\"#接下来我该做什么\" class=\"headerlink\" title=\"接下来我该做什么\"></a>接下来我该做什么</h2><ol>\n<li>将我的梦想清单具象化；</li>\n<li>在我的日记加多成功日记一栏；</li>\n<li>按“鹅”、“梦想”和“零花”来分配我的收入；</li>\n<li>学习基金投资；</li>\n<li>每天践行一条我学习到的准则。</li>\n</ol>"},{"layout":"post","title":"SVN嵌套权限管理","date":"2016-05-05T05:48:00.000Z","comments":1,"_content":"\n公司有一个ExtJS+Java的云平台项目，该项目模块化得较好，一个包就是一个模块。\n\n<!--more-->\n\n该项目需要多人协作，同时又要让协作者不能获取到全部模块（防止代码泄露）。以往我的做法是分子项目然后使用BeyondCompare作合并，但这样太费时费力了，后来发现SVN能完美达成我的需求。\n\n介绍我的SVN的authz（Linux环境）配置如下：\n\n```\n[groups]\nadmin = jayzee,luzhiquan,hwq\nuser = yifei,shenkai,linjie,cjm\n# gx-desk\n[myproject:/gx-desk]\n@admin = rw\n@user = r\n## gx-desk src\n[myproject:/gx-desk/src]\n@user = rw\n[myproject:/gx-desk/src/main/resources]\n@user = r\n[myproject:/gx-desk/src/main/resources/com]\n@user = rw\n## gx-desk WebContent\n[myproject:/gx-desk/WebContent]\n@user = rw\n[myproject:/gx-desk/WebContent/.sencha]\n@user = r\n[myproject:/gx-desk/WebContent/Chart]\n@user = r\n[myproject:/gx-desk/WebContent/app/App.js]\n@user = r\n[myproject:/gx-desk/WebContent/app/view/infomanage]\n@user =\nlinjie = rw\n```\n\n1. SVN的权限具有继承关系，上例中，`/gx-desk`为项目的根，它设置admin用户可读写，而普通用户可读不可写；\n2. `/gx-desk/src`继承了上一级的权限，其下方的`@user = rw`表示我们将`/gx-desk/src`的权限重写为可读写；\n3. 其他的以此类推，基于此我们就可以实现嵌套的内存管理啦！\n\n注：\n`@user = `表示不可读和不可写；\n","source":"_posts/2016-05-05-svn-that-i-used.markdown","raw":"---\nlayout: post\ntitle: SVN嵌套权限管理\ndate: '2016-05-05 13:48'\ncomments: true\ncategories: ['编程实践']  \ntags: ['SVN']\n---\n\n公司有一个ExtJS+Java的云平台项目，该项目模块化得较好，一个包就是一个模块。\n\n<!--more-->\n\n该项目需要多人协作，同时又要让协作者不能获取到全部模块（防止代码泄露）。以往我的做法是分子项目然后使用BeyondCompare作合并，但这样太费时费力了，后来发现SVN能完美达成我的需求。\n\n介绍我的SVN的authz（Linux环境）配置如下：\n\n```\n[groups]\nadmin = jayzee,luzhiquan,hwq\nuser = yifei,shenkai,linjie,cjm\n# gx-desk\n[myproject:/gx-desk]\n@admin = rw\n@user = r\n## gx-desk src\n[myproject:/gx-desk/src]\n@user = rw\n[myproject:/gx-desk/src/main/resources]\n@user = r\n[myproject:/gx-desk/src/main/resources/com]\n@user = rw\n## gx-desk WebContent\n[myproject:/gx-desk/WebContent]\n@user = rw\n[myproject:/gx-desk/WebContent/.sencha]\n@user = r\n[myproject:/gx-desk/WebContent/Chart]\n@user = r\n[myproject:/gx-desk/WebContent/app/App.js]\n@user = r\n[myproject:/gx-desk/WebContent/app/view/infomanage]\n@user =\nlinjie = rw\n```\n\n1. SVN的权限具有继承关系，上例中，`/gx-desk`为项目的根，它设置admin用户可读写，而普通用户可读不可写；\n2. `/gx-desk/src`继承了上一级的权限，其下方的`@user = rw`表示我们将`/gx-desk/src`的权限重写为可读写；\n3. 其他的以此类推，基于此我们就可以实现嵌套的内存管理啦！\n\n注：\n`@user = `表示不可读和不可写；\n","slug":"svn-that-i-used","published":1,"updated":"2017-04-09T14:42:10.000Z","photos":[],"link":"","_id":"cjlza6m4h000npgupdcq2a372","content":"<p>公司有一个ExtJS+Java的云平台项目，该项目模块化得较好，一个包就是一个模块。</p>\n<a id=\"more\"></a>\n<p>该项目需要多人协作，同时又要让协作者不能获取到全部模块（防止代码泄露）。以往我的做法是分子项目然后使用BeyondCompare作合并，但这样太费时费力了，后来发现SVN能完美达成我的需求。</p>\n<p>介绍我的SVN的authz（Linux环境）配置如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[groups]</span><br><span class=\"line\">admin = jayzee,luzhiquan,hwq</span><br><span class=\"line\">user = yifei,shenkai,linjie,cjm</span><br><span class=\"line\"># gx-desk</span><br><span class=\"line\">[myproject:/gx-desk]</span><br><span class=\"line\">@admin = rw</span><br><span class=\"line\">@user = r</span><br><span class=\"line\">## gx-desk src</span><br><span class=\"line\">[myproject:/gx-desk/src]</span><br><span class=\"line\">@user = rw</span><br><span class=\"line\">[myproject:/gx-desk/src/main/resources]</span><br><span class=\"line\">@user = r</span><br><span class=\"line\">[myproject:/gx-desk/src/main/resources/com]</span><br><span class=\"line\">@user = rw</span><br><span class=\"line\">## gx-desk WebContent</span><br><span class=\"line\">[myproject:/gx-desk/WebContent]</span><br><span class=\"line\">@user = rw</span><br><span class=\"line\">[myproject:/gx-desk/WebContent/.sencha]</span><br><span class=\"line\">@user = r</span><br><span class=\"line\">[myproject:/gx-desk/WebContent/Chart]</span><br><span class=\"line\">@user = r</span><br><span class=\"line\">[myproject:/gx-desk/WebContent/app/App.js]</span><br><span class=\"line\">@user = r</span><br><span class=\"line\">[myproject:/gx-desk/WebContent/app/view/infomanage]</span><br><span class=\"line\">@user =</span><br><span class=\"line\">linjie = rw</span><br></pre></td></tr></table></figure>\n<ol>\n<li>SVN的权限具有继承关系，上例中，<code>/gx-desk</code>为项目的根，它设置admin用户可读写，而普通用户可读不可写；</li>\n<li><code>/gx-desk/src</code>继承了上一级的权限，其下方的<code>@user = rw</code>表示我们将<code>/gx-desk/src</code>的权限重写为可读写；</li>\n<li>其他的以此类推，基于此我们就可以实现嵌套的内存管理啦！</li>\n</ol>\n<p>注：<br><code>@user =</code>表示不可读和不可写；</p>\n","site":{"data":{}},"excerpt":"<p>公司有一个ExtJS+Java的云平台项目，该项目模块化得较好，一个包就是一个模块。</p>","more":"<p>该项目需要多人协作，同时又要让协作者不能获取到全部模块（防止代码泄露）。以往我的做法是分子项目然后使用BeyondCompare作合并，但这样太费时费力了，后来发现SVN能完美达成我的需求。</p>\n<p>介绍我的SVN的authz（Linux环境）配置如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[groups]</span><br><span class=\"line\">admin = jayzee,luzhiquan,hwq</span><br><span class=\"line\">user = yifei,shenkai,linjie,cjm</span><br><span class=\"line\"># gx-desk</span><br><span class=\"line\">[myproject:/gx-desk]</span><br><span class=\"line\">@admin = rw</span><br><span class=\"line\">@user = r</span><br><span class=\"line\">## gx-desk src</span><br><span class=\"line\">[myproject:/gx-desk/src]</span><br><span class=\"line\">@user = rw</span><br><span class=\"line\">[myproject:/gx-desk/src/main/resources]</span><br><span class=\"line\">@user = r</span><br><span class=\"line\">[myproject:/gx-desk/src/main/resources/com]</span><br><span class=\"line\">@user = rw</span><br><span class=\"line\">## gx-desk WebContent</span><br><span class=\"line\">[myproject:/gx-desk/WebContent]</span><br><span class=\"line\">@user = rw</span><br><span class=\"line\">[myproject:/gx-desk/WebContent/.sencha]</span><br><span class=\"line\">@user = r</span><br><span class=\"line\">[myproject:/gx-desk/WebContent/Chart]</span><br><span class=\"line\">@user = r</span><br><span class=\"line\">[myproject:/gx-desk/WebContent/app/App.js]</span><br><span class=\"line\">@user = r</span><br><span class=\"line\">[myproject:/gx-desk/WebContent/app/view/infomanage]</span><br><span class=\"line\">@user =</span><br><span class=\"line\">linjie = rw</span><br></pre></td></tr></table></figure>\n<ol>\n<li>SVN的权限具有继承关系，上例中，<code>/gx-desk</code>为项目的根，它设置admin用户可读写，而普通用户可读不可写；</li>\n<li><code>/gx-desk/src</code>继承了上一级的权限，其下方的<code>@user = rw</code>表示我们将<code>/gx-desk/src</code>的权限重写为可读写；</li>\n<li>其他的以此类推，基于此我们就可以实现嵌套的内存管理啦！</li>\n</ol>\n<p>注：<br><code>@user =</code>表示不可读和不可写；</p>"},{"layout":"post","title":"记录一次华为云主机被入侵","date":"2016-05-09T04:34:00.000Z","comments":1,"_content":"\n华为工作人员打电话给我，说扫描到我的6379端口呈开放状态，6379端口开放到公网有被攻击的风险。于是，我登录华为云主机，打算检查下我的iptables。可是，使用ssh竟然登录不上……\n\n<!--more-->\n\n好在华为云主机还提供了web登录的方式，于是我以root用户登录到了华为云主机。登录后，我立即发现不对，我的非root用户怎么全都不见了？于是做了如下检查：\n\n1. 检查iptables，**立即发现异常**，我上一次调试时清除了全部防火墙规则，立马恢复防火墙设置；\n2. 检查/etc/passwd，，**立即发现异常**，发现除了root用户以外的非root用户全部被删除了，我的云主机被入侵了；\n2. 检查所有/var/logs/*.log（按更新时间检查），没有发现任何异常；\n3. 检查root用户的command history，没有发现任何异常；\n4. 检查root用户的.bash_history，没有发现任何异常；\n5. 使用`last -f wtmp`检查登录历史，没发现任何异常；\n6. 检查crontab，没有发现任何异常；\n7. 检查是否有异常进程（进程UID为0），没有发现任何异常；\n8. 检查ssh的authorized_keys，**立即发现异常**，里面竟然有入侵者机器的ssh公钥；\n\n可是，为何我的机器会被入侵而且在/var/log下没有任何痕迹呢？对方如何入侵的呢？当时并没有对redis产生怀疑。于是请教了下专业做运维的同学，他了解了我的一些情况后，告诉我可能是redis的原因。我一查redis，发现原先的key-value全丢失了，我的redis被作为攻击中介，注入了几条lua语言为value的key。为了安全请见，我决定还是备份数据，重装操作系统。\n\n总结，\n1. 必须严格设置iptables，粗心差点酿成大祸；\n2. 关注乌云发布的网络漏洞；\n","source":"_posts/2016-05-09-after-my-machine-was-attacked.markdown","raw":"---\nlayout: post\ntitle: 记录一次华为云主机被入侵\ndate: '2016-05-09 12:34'\ncomments: true\ncategories: ['编程实践']  \ntags: ['信息安全']\n---\n\n华为工作人员打电话给我，说扫描到我的6379端口呈开放状态，6379端口开放到公网有被攻击的风险。于是，我登录华为云主机，打算检查下我的iptables。可是，使用ssh竟然登录不上……\n\n<!--more-->\n\n好在华为云主机还提供了web登录的方式，于是我以root用户登录到了华为云主机。登录后，我立即发现不对，我的非root用户怎么全都不见了？于是做了如下检查：\n\n1. 检查iptables，**立即发现异常**，我上一次调试时清除了全部防火墙规则，立马恢复防火墙设置；\n2. 检查/etc/passwd，，**立即发现异常**，发现除了root用户以外的非root用户全部被删除了，我的云主机被入侵了；\n2. 检查所有/var/logs/*.log（按更新时间检查），没有发现任何异常；\n3. 检查root用户的command history，没有发现任何异常；\n4. 检查root用户的.bash_history，没有发现任何异常；\n5. 使用`last -f wtmp`检查登录历史，没发现任何异常；\n6. 检查crontab，没有发现任何异常；\n7. 检查是否有异常进程（进程UID为0），没有发现任何异常；\n8. 检查ssh的authorized_keys，**立即发现异常**，里面竟然有入侵者机器的ssh公钥；\n\n可是，为何我的机器会被入侵而且在/var/log下没有任何痕迹呢？对方如何入侵的呢？当时并没有对redis产生怀疑。于是请教了下专业做运维的同学，他了解了我的一些情况后，告诉我可能是redis的原因。我一查redis，发现原先的key-value全丢失了，我的redis被作为攻击中介，注入了几条lua语言为value的key。为了安全请见，我决定还是备份数据，重装操作系统。\n\n总结，\n1. 必须严格设置iptables，粗心差点酿成大祸；\n2. 关注乌云发布的网络漏洞；\n","slug":"after-my-machine-was-attacked","published":1,"updated":"2017-04-09T14:42:17.000Z","photos":[],"link":"","_id":"cjlza6m4k000spgupw877aqfv","content":"<p>华为工作人员打电话给我，说扫描到我的6379端口呈开放状态，6379端口开放到公网有被攻击的风险。于是，我登录华为云主机，打算检查下我的iptables。可是，使用ssh竟然登录不上……</p>\n<a id=\"more\"></a>\n<p>好在华为云主机还提供了web登录的方式，于是我以root用户登录到了华为云主机。登录后，我立即发现不对，我的非root用户怎么全都不见了？于是做了如下检查：</p>\n<ol>\n<li>检查iptables，<strong>立即发现异常</strong>，我上一次调试时清除了全部防火墙规则，立马恢复防火墙设置；</li>\n<li>检查/etc/passwd，，<strong>立即发现异常</strong>，发现除了root用户以外的非root用户全部被删除了，我的云主机被入侵了；</li>\n<li>检查所有/var/logs/*.log（按更新时间检查），没有发现任何异常；</li>\n<li>检查root用户的command history，没有发现任何异常；</li>\n<li>检查root用户的.bash_history，没有发现任何异常；</li>\n<li>使用<code>last -f wtmp</code>检查登录历史，没发现任何异常；</li>\n<li>检查crontab，没有发现任何异常；</li>\n<li>检查是否有异常进程（进程UID为0），没有发现任何异常；</li>\n<li>检查ssh的authorized_keys，<strong>立即发现异常</strong>，里面竟然有入侵者机器的ssh公钥；</li>\n</ol>\n<p>可是，为何我的机器会被入侵而且在/var/log下没有任何痕迹呢？对方如何入侵的呢？当时并没有对redis产生怀疑。于是请教了下专业做运维的同学，他了解了我的一些情况后，告诉我可能是redis的原因。我一查redis，发现原先的key-value全丢失了，我的redis被作为攻击中介，注入了几条lua语言为value的key。为了安全请见，我决定还是备份数据，重装操作系统。</p>\n<p>总结，</p>\n<ol>\n<li>必须严格设置iptables，粗心差点酿成大祸；</li>\n<li>关注乌云发布的网络漏洞；</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>华为工作人员打电话给我，说扫描到我的6379端口呈开放状态，6379端口开放到公网有被攻击的风险。于是，我登录华为云主机，打算检查下我的iptables。可是，使用ssh竟然登录不上……</p>","more":"<p>好在华为云主机还提供了web登录的方式，于是我以root用户登录到了华为云主机。登录后，我立即发现不对，我的非root用户怎么全都不见了？于是做了如下检查：</p>\n<ol>\n<li>检查iptables，<strong>立即发现异常</strong>，我上一次调试时清除了全部防火墙规则，立马恢复防火墙设置；</li>\n<li>检查/etc/passwd，，<strong>立即发现异常</strong>，发现除了root用户以外的非root用户全部被删除了，我的云主机被入侵了；</li>\n<li>检查所有/var/logs/*.log（按更新时间检查），没有发现任何异常；</li>\n<li>检查root用户的command history，没有发现任何异常；</li>\n<li>检查root用户的.bash_history，没有发现任何异常；</li>\n<li>使用<code>last -f wtmp</code>检查登录历史，没发现任何异常；</li>\n<li>检查crontab，没有发现任何异常；</li>\n<li>检查是否有异常进程（进程UID为0），没有发现任何异常；</li>\n<li>检查ssh的authorized_keys，<strong>立即发现异常</strong>，里面竟然有入侵者机器的ssh公钥；</li>\n</ol>\n<p>可是，为何我的机器会被入侵而且在/var/log下没有任何痕迹呢？对方如何入侵的呢？当时并没有对redis产生怀疑。于是请教了下专业做运维的同学，他了解了我的一些情况后，告诉我可能是redis的原因。我一查redis，发现原先的key-value全丢失了，我的redis被作为攻击中介，注入了几条lua语言为value的key。为了安全请见，我决定还是备份数据，重装操作系统。</p>\n<p>总结，</p>\n<ol>\n<li>必须严格设置iptables，粗心差点酿成大祸；</li>\n<li>关注乌云发布的网络漏洞；</li>\n</ol>"},{"layout":"post","title":"LVM用到的一些特性","date":"2016-05-09T09:25:00.000Z","comments":1,"_content":"\n我选用LVM的目的是，\n\n<!--more-->\n\n1. 可以将多个物理盘组装成一个逻辑盘（你只需读写一个盘）；\n2. 可实现动态扩容；\n\n## 初始安装时的配置\n\n笔者已有的两个空闲物理分区为：\n1. /dev/xvde1 250G\n2. /dev/xvde2 250G\n\n创建vg、pv和lv：\n\n```bash\n## 将物理分区设置为pv\npvcreate /dev/xvde2\n## 创建vg，同时将pv添加进vg\nvgcreate gx /dev/xvde2\n## 创建lv，并指定其容量大小\nlvcreate -n lv1 -l 100%FREE gx\n## 格式化lv为ext4\nmkfs.ext4 /dev/gx/lv1\n```\n\n如何使用lv呢？编辑`/etc/fstab`，加入：\n\n```\n/dev/gx/lv1      /media/disk    ext4    defaults,noatime,nodiratime 0       0\n```\n\n重启操作系统后，你将看到lv被挂载到`/media/disk`，它的大小为250G左右。那么，如何实现动态扩容呢？\n\n```bash\n## 将物理分区设置为pv\npvcreate /dev/xvde1\n## 扩容vg\nvgextend gx /dev/xvde1\n## 扩容lv\nlvextend -l +100%FREE /dev/gx/lv1\n## 通知文件系统更新\nresize2fs /dev/gx/lv1\n```\n\n执行完上述命令后，`/media/disk`将变为500G左右。\n\n## 重装系统后的配置\n\n由于lvm的所有信息都是写在pv的metadata，重装系统后依然有效，重装后执行，\n\n```bash\n## 扫描pv\npvscan\n## 扫描lv\nlvscan\n## 扫描vg\nvgscan\n## 通知操作系统激活vg\nvgchange -a y\n```\n\n编辑`/etc/fstab`，加入：\n\n```\n/dev/gx/lv1      /media/disk    ext4    defaults,noatime,nodiratime 0       0\n```\n","source":"_posts/2016-05-09-lvm-that-i-used.markdown","raw":"---\nlayout: post\ntitle: LVM用到的一些特性\ndate: '2016-05-09 17:25'\ncomments: true\ncategories: ['编程实践']  \ntags: ['LVM']\n---\n\n我选用LVM的目的是，\n\n<!--more-->\n\n1. 可以将多个物理盘组装成一个逻辑盘（你只需读写一个盘）；\n2. 可实现动态扩容；\n\n## 初始安装时的配置\n\n笔者已有的两个空闲物理分区为：\n1. /dev/xvde1 250G\n2. /dev/xvde2 250G\n\n创建vg、pv和lv：\n\n```bash\n## 将物理分区设置为pv\npvcreate /dev/xvde2\n## 创建vg，同时将pv添加进vg\nvgcreate gx /dev/xvde2\n## 创建lv，并指定其容量大小\nlvcreate -n lv1 -l 100%FREE gx\n## 格式化lv为ext4\nmkfs.ext4 /dev/gx/lv1\n```\n\n如何使用lv呢？编辑`/etc/fstab`，加入：\n\n```\n/dev/gx/lv1      /media/disk    ext4    defaults,noatime,nodiratime 0       0\n```\n\n重启操作系统后，你将看到lv被挂载到`/media/disk`，它的大小为250G左右。那么，如何实现动态扩容呢？\n\n```bash\n## 将物理分区设置为pv\npvcreate /dev/xvde1\n## 扩容vg\nvgextend gx /dev/xvde1\n## 扩容lv\nlvextend -l +100%FREE /dev/gx/lv1\n## 通知文件系统更新\nresize2fs /dev/gx/lv1\n```\n\n执行完上述命令后，`/media/disk`将变为500G左右。\n\n## 重装系统后的配置\n\n由于lvm的所有信息都是写在pv的metadata，重装系统后依然有效，重装后执行，\n\n```bash\n## 扫描pv\npvscan\n## 扫描lv\nlvscan\n## 扫描vg\nvgscan\n## 通知操作系统激活vg\nvgchange -a y\n```\n\n编辑`/etc/fstab`，加入：\n\n```\n/dev/gx/lv1      /media/disk    ext4    defaults,noatime,nodiratime 0       0\n```\n","slug":"lvm-that-i-used","published":1,"updated":"2017-04-09T14:42:06.000Z","photos":[],"link":"","_id":"cjlza6m4m000vpgup8w6tpaw3","content":"<p>我选用LVM的目的是，</p>\n<a id=\"more\"></a>\n<ol>\n<li>可以将多个物理盘组装成一个逻辑盘（你只需读写一个盘）；</li>\n<li>可实现动态扩容；</li>\n</ol>\n<h2 id=\"初始安装时的配置\"><a href=\"#初始安装时的配置\" class=\"headerlink\" title=\"初始安装时的配置\"></a>初始安装时的配置</h2><p>笔者已有的两个空闲物理分区为：</p>\n<ol>\n<li>/dev/xvde1 250G</li>\n<li>/dev/xvde2 250G</li>\n</ol>\n<p>创建vg、pv和lv：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## 将物理分区设置为pv</span></span><br><span class=\"line\">pvcreate /dev/xvde2</span><br><span class=\"line\"><span class=\"comment\">## 创建vg，同时将pv添加进vg</span></span><br><span class=\"line\">vgcreate gx /dev/xvde2</span><br><span class=\"line\"><span class=\"comment\">## 创建lv，并指定其容量大小</span></span><br><span class=\"line\">lvcreate -n lv1 -l 100%FREE gx</span><br><span class=\"line\"><span class=\"comment\">## 格式化lv为ext4</span></span><br><span class=\"line\">mkfs.ext4 /dev/gx/lv1</span><br></pre></td></tr></table></figure>\n<p>如何使用lv呢？编辑<code>/etc/fstab</code>，加入：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/dev/gx/lv1      /media/disk    ext4    defaults,noatime,nodiratime 0       0</span><br></pre></td></tr></table></figure>\n<p>重启操作系统后，你将看到lv被挂载到<code>/media/disk</code>，它的大小为250G左右。那么，如何实现动态扩容呢？</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## 将物理分区设置为pv</span></span><br><span class=\"line\">pvcreate /dev/xvde1</span><br><span class=\"line\"><span class=\"comment\">## 扩容vg</span></span><br><span class=\"line\">vgextend gx /dev/xvde1</span><br><span class=\"line\"><span class=\"comment\">## 扩容lv</span></span><br><span class=\"line\">lvextend -l +100%FREE /dev/gx/lv1</span><br><span class=\"line\"><span class=\"comment\">## 通知文件系统更新</span></span><br><span class=\"line\">resize2fs /dev/gx/lv1</span><br></pre></td></tr></table></figure>\n<p>执行完上述命令后，<code>/media/disk</code>将变为500G左右。</p>\n<h2 id=\"重装系统后的配置\"><a href=\"#重装系统后的配置\" class=\"headerlink\" title=\"重装系统后的配置\"></a>重装系统后的配置</h2><p>由于lvm的所有信息都是写在pv的metadata，重装系统后依然有效，重装后执行，</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## 扫描pv</span></span><br><span class=\"line\">pvscan</span><br><span class=\"line\"><span class=\"comment\">## 扫描lv</span></span><br><span class=\"line\">lvscan</span><br><span class=\"line\"><span class=\"comment\">## 扫描vg</span></span><br><span class=\"line\">vgscan</span><br><span class=\"line\"><span class=\"comment\">## 通知操作系统激活vg</span></span><br><span class=\"line\">vgchange -a y</span><br></pre></td></tr></table></figure>\n<p>编辑<code>/etc/fstab</code>，加入：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/dev/gx/lv1      /media/disk    ext4    defaults,noatime,nodiratime 0       0</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>我选用LVM的目的是，</p>","more":"<ol>\n<li>可以将多个物理盘组装成一个逻辑盘（你只需读写一个盘）；</li>\n<li>可实现动态扩容；</li>\n</ol>\n<h2 id=\"初始安装时的配置\"><a href=\"#初始安装时的配置\" class=\"headerlink\" title=\"初始安装时的配置\"></a>初始安装时的配置</h2><p>笔者已有的两个空闲物理分区为：</p>\n<ol>\n<li>/dev/xvde1 250G</li>\n<li>/dev/xvde2 250G</li>\n</ol>\n<p>创建vg、pv和lv：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## 将物理分区设置为pv</span></span><br><span class=\"line\">pvcreate /dev/xvde2</span><br><span class=\"line\"><span class=\"comment\">## 创建vg，同时将pv添加进vg</span></span><br><span class=\"line\">vgcreate gx /dev/xvde2</span><br><span class=\"line\"><span class=\"comment\">## 创建lv，并指定其容量大小</span></span><br><span class=\"line\">lvcreate -n lv1 -l 100%FREE gx</span><br><span class=\"line\"><span class=\"comment\">## 格式化lv为ext4</span></span><br><span class=\"line\">mkfs.ext4 /dev/gx/lv1</span><br></pre></td></tr></table></figure>\n<p>如何使用lv呢？编辑<code>/etc/fstab</code>，加入：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/dev/gx/lv1      /media/disk    ext4    defaults,noatime,nodiratime 0       0</span><br></pre></td></tr></table></figure>\n<p>重启操作系统后，你将看到lv被挂载到<code>/media/disk</code>，它的大小为250G左右。那么，如何实现动态扩容呢？</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## 将物理分区设置为pv</span></span><br><span class=\"line\">pvcreate /dev/xvde1</span><br><span class=\"line\"><span class=\"comment\">## 扩容vg</span></span><br><span class=\"line\">vgextend gx /dev/xvde1</span><br><span class=\"line\"><span class=\"comment\">## 扩容lv</span></span><br><span class=\"line\">lvextend -l +100%FREE /dev/gx/lv1</span><br><span class=\"line\"><span class=\"comment\">## 通知文件系统更新</span></span><br><span class=\"line\">resize2fs /dev/gx/lv1</span><br></pre></td></tr></table></figure>\n<p>执行完上述命令后，<code>/media/disk</code>将变为500G左右。</p>\n<h2 id=\"重装系统后的配置\"><a href=\"#重装系统后的配置\" class=\"headerlink\" title=\"重装系统后的配置\"></a>重装系统后的配置</h2><p>由于lvm的所有信息都是写在pv的metadata，重装系统后依然有效，重装后执行，</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## 扫描pv</span></span><br><span class=\"line\">pvscan</span><br><span class=\"line\"><span class=\"comment\">## 扫描lv</span></span><br><span class=\"line\">lvscan</span><br><span class=\"line\"><span class=\"comment\">## 扫描vg</span></span><br><span class=\"line\">vgscan</span><br><span class=\"line\"><span class=\"comment\">## 通知操作系统激活vg</span></span><br><span class=\"line\">vgchange -a y</span><br></pre></td></tr></table></figure>\n<p>编辑<code>/etc/fstab</code>，加入：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/dev/gx/lv1      /media/disk    ext4    defaults,noatime,nodiratime 0       0</span><br></pre></td></tr></table></figure>"},{"layout":"post","title":"2015年3月至2016年3月工作总结","date":"2016-05-11T13:16:00.000Z","comments":1,"_content":"\n软件研发和软件开发是有区别的。\n\n<!--more-->\n\n研发需要技术攻关，它更关注的是软件的基础设施建设（如解决什么样的问题、选用怎样的技术解决问题、整体软件如何架构）；开发需要解决实际问题，最终把产品实现出来（如通信程序如何实现）。过去一年，我的主要工作是云平台的开发，其中包含自己开发以及相互协作去开发，我把这两者各开一个章节来讲，最后再加一章“未来规划”作为结束。\n\n一、具体开发\n\n具体开发过程中，总结起来无外乎刘老师常说的一句话：大处落墨，小处着笔。\n\n（一）“大处落墨”在具体开发中等同于软件架构。\n\n一个糟糕的软件架构花费的人力成本将非常之高。必须先弄清楚软件的模块有哪些，它们相互间的联系是什么，相互间的影响是什么。没有架构的开发意味着完全靠试错来发现和解决问题，最终形成的也是一个脆弱的产品，随时可能会崩溃，维护之前陈森填写的程序就有此感觉。\n\n（二）“小处着笔”在具体开发中等同于实现及验证。\n\n首先，在大框架已经清楚的情况下，如何确保每一行代码不会出错？这时候必须引入编码规范以及代码复查。编码规范迫使你遵循一个良好的编程习惯，不犯下一些低级的错误；代码复查（人力以及机器）可以发现并报告软件可能存在的质量问题。\n其次，在所有代码都完成的情况下，如何确保它真的是对的？这时候必须引入测试。但是一共有多少情况需要验证？这个问题反馈到具体开发就是必须充分考虑所有可能的情况并逐一进行验证。\n\n二、相互协作\n\n主要谈谈实际协作的一些体会。\n\n（一）理解、下放、处理和验证需求。\n首先，理解来自上游的需求，我也曾犯下许多错误。例如：不清楚为什么要这样做然后自己想当然，遗漏一些细节而后偏离主题，确认需求的过程中没有主线思维导致表述不清引发歧义。\n\n其次，对于下放需求，一是必须交代清楚为什么要这么做，在不明白背景的情况下什么错误都可能发生；二是必须清楚下游的能力所在，清楚谁适合做什么以及如何让他做到。\n紧接着，处理需求一定要有时间限制，而且这个时间绝不能给的刚刚好让执行者舒舒服服，否则执行者本身不会有大的进步，企业人力成本也将非常之高（员工的工作产出一定是大于他的工资收入的）。\n\n最后，必须对需求完成情况加以验证，而且最好是执行者本身具备这种验证能力。\n\n（二）如何让错误产生价值。\n\n犯了错误的当下再去责备已没有任何意义，而是应该想办法去解决问题。错误的积极意义在于如何不犯同类型的错误，以及从此少犯错误。相同类型的错误要予以批评，新的错误要做出反思。\n\n（三）改变一个人非常之难。\n\n我曾想要去改变DYF使他变得更积极却发现于事无补，但当我转而想如何提升他的能力来做更多事情，事情变得简单多了。\n\n（四）与同事协作，职责一定要分明。\n\n刚开始与LZQ协助确实有不少苦恼，因为我俩的职责没有一个明确的界定，经常遇到一个问题是到底这个事情归谁管？虽然后面我知道刘老师以及林总可以帮我做这个界定，但长远来讲必须把我俩各自的工作定义清楚才行。\n\n（五）给予的重要性。\n\n一味的向下索取将导致非常糟糕的结果：下游人员没有进步，失去工作激情，甚至离职。必须在管理的过程去给予一些东西：让对方学习新的东西，做更难的事情，传授一些做事情的基本方法，授课培训等。只有这样，当你真正需要他满负荷运行的时候才能调动得起来。\n\n三、未来规划\n\n拳头产品（云平台）必须花心思去打磨好（站在软件的角度）。云平台的下一个里程碑是今年年底做到：稳定、安全、交互便捷、简洁美。稳定指程序不会崩溃，安全指能承受得起外部的攻击，交互便捷指如何让使用者更容易得到他想要的信息，简洁美则是要有统一的美化标准。\n\n另外，研发才是软件团队的真正核心竞争力，而且研发也能给我带来更多乐趣。接下来我想尽可能的朝研发靠拢，这也意味着我要学习更多和承受更多。但是要兼顾一个事情，我必须学习和思考如何把下面的人带好，使他们都成为比我还优秀的开发者。\n","source":"_posts/2016-05-11-2015-work-summary.markdown","raw":"---\nlayout: post\ntitle: 2015年3月至2016年3月工作总结\ndate: '2016-05-11 21:16'\ncomments: true\ncategories: ['一些感悟']  \ntags: ['贯行']\n---\n\n软件研发和软件开发是有区别的。\n\n<!--more-->\n\n研发需要技术攻关，它更关注的是软件的基础设施建设（如解决什么样的问题、选用怎样的技术解决问题、整体软件如何架构）；开发需要解决实际问题，最终把产品实现出来（如通信程序如何实现）。过去一年，我的主要工作是云平台的开发，其中包含自己开发以及相互协作去开发，我把这两者各开一个章节来讲，最后再加一章“未来规划”作为结束。\n\n一、具体开发\n\n具体开发过程中，总结起来无外乎刘老师常说的一句话：大处落墨，小处着笔。\n\n（一）“大处落墨”在具体开发中等同于软件架构。\n\n一个糟糕的软件架构花费的人力成本将非常之高。必须先弄清楚软件的模块有哪些，它们相互间的联系是什么，相互间的影响是什么。没有架构的开发意味着完全靠试错来发现和解决问题，最终形成的也是一个脆弱的产品，随时可能会崩溃，维护之前陈森填写的程序就有此感觉。\n\n（二）“小处着笔”在具体开发中等同于实现及验证。\n\n首先，在大框架已经清楚的情况下，如何确保每一行代码不会出错？这时候必须引入编码规范以及代码复查。编码规范迫使你遵循一个良好的编程习惯，不犯下一些低级的错误；代码复查（人力以及机器）可以发现并报告软件可能存在的质量问题。\n其次，在所有代码都完成的情况下，如何确保它真的是对的？这时候必须引入测试。但是一共有多少情况需要验证？这个问题反馈到具体开发就是必须充分考虑所有可能的情况并逐一进行验证。\n\n二、相互协作\n\n主要谈谈实际协作的一些体会。\n\n（一）理解、下放、处理和验证需求。\n首先，理解来自上游的需求，我也曾犯下许多错误。例如：不清楚为什么要这样做然后自己想当然，遗漏一些细节而后偏离主题，确认需求的过程中没有主线思维导致表述不清引发歧义。\n\n其次，对于下放需求，一是必须交代清楚为什么要这么做，在不明白背景的情况下什么错误都可能发生；二是必须清楚下游的能力所在，清楚谁适合做什么以及如何让他做到。\n紧接着，处理需求一定要有时间限制，而且这个时间绝不能给的刚刚好让执行者舒舒服服，否则执行者本身不会有大的进步，企业人力成本也将非常之高（员工的工作产出一定是大于他的工资收入的）。\n\n最后，必须对需求完成情况加以验证，而且最好是执行者本身具备这种验证能力。\n\n（二）如何让错误产生价值。\n\n犯了错误的当下再去责备已没有任何意义，而是应该想办法去解决问题。错误的积极意义在于如何不犯同类型的错误，以及从此少犯错误。相同类型的错误要予以批评，新的错误要做出反思。\n\n（三）改变一个人非常之难。\n\n我曾想要去改变DYF使他变得更积极却发现于事无补，但当我转而想如何提升他的能力来做更多事情，事情变得简单多了。\n\n（四）与同事协作，职责一定要分明。\n\n刚开始与LZQ协助确实有不少苦恼，因为我俩的职责没有一个明确的界定，经常遇到一个问题是到底这个事情归谁管？虽然后面我知道刘老师以及林总可以帮我做这个界定，但长远来讲必须把我俩各自的工作定义清楚才行。\n\n（五）给予的重要性。\n\n一味的向下索取将导致非常糟糕的结果：下游人员没有进步，失去工作激情，甚至离职。必须在管理的过程去给予一些东西：让对方学习新的东西，做更难的事情，传授一些做事情的基本方法，授课培训等。只有这样，当你真正需要他满负荷运行的时候才能调动得起来。\n\n三、未来规划\n\n拳头产品（云平台）必须花心思去打磨好（站在软件的角度）。云平台的下一个里程碑是今年年底做到：稳定、安全、交互便捷、简洁美。稳定指程序不会崩溃，安全指能承受得起外部的攻击，交互便捷指如何让使用者更容易得到他想要的信息，简洁美则是要有统一的美化标准。\n\n另外，研发才是软件团队的真正核心竞争力，而且研发也能给我带来更多乐趣。接下来我想尽可能的朝研发靠拢，这也意味着我要学习更多和承受更多。但是要兼顾一个事情，我必须学习和思考如何把下面的人带好，使他们都成为比我还优秀的开发者。\n","slug":"2015-work-summary","published":1,"updated":"2017-04-09T14:42:01.000Z","photos":[],"link":"","_id":"cjlza6m4n000ypgupo1yq9drx","content":"<p>软件研发和软件开发是有区别的。</p>\n<a id=\"more\"></a>\n<p>研发需要技术攻关，它更关注的是软件的基础设施建设（如解决什么样的问题、选用怎样的技术解决问题、整体软件如何架构）；开发需要解决实际问题，最终把产品实现出来（如通信程序如何实现）。过去一年，我的主要工作是云平台的开发，其中包含自己开发以及相互协作去开发，我把这两者各开一个章节来讲，最后再加一章“未来规划”作为结束。</p>\n<p>一、具体开发</p>\n<p>具体开发过程中，总结起来无外乎刘老师常说的一句话：大处落墨，小处着笔。</p>\n<p>（一）“大处落墨”在具体开发中等同于软件架构。</p>\n<p>一个糟糕的软件架构花费的人力成本将非常之高。必须先弄清楚软件的模块有哪些，它们相互间的联系是什么，相互间的影响是什么。没有架构的开发意味着完全靠试错来发现和解决问题，最终形成的也是一个脆弱的产品，随时可能会崩溃，维护之前陈森填写的程序就有此感觉。</p>\n<p>（二）“小处着笔”在具体开发中等同于实现及验证。</p>\n<p>首先，在大框架已经清楚的情况下，如何确保每一行代码不会出错？这时候必须引入编码规范以及代码复查。编码规范迫使你遵循一个良好的编程习惯，不犯下一些低级的错误；代码复查（人力以及机器）可以发现并报告软件可能存在的质量问题。<br>其次，在所有代码都完成的情况下，如何确保它真的是对的？这时候必须引入测试。但是一共有多少情况需要验证？这个问题反馈到具体开发就是必须充分考虑所有可能的情况并逐一进行验证。</p>\n<p>二、相互协作</p>\n<p>主要谈谈实际协作的一些体会。</p>\n<p>（一）理解、下放、处理和验证需求。<br>首先，理解来自上游的需求，我也曾犯下许多错误。例如：不清楚为什么要这样做然后自己想当然，遗漏一些细节而后偏离主题，确认需求的过程中没有主线思维导致表述不清引发歧义。</p>\n<p>其次，对于下放需求，一是必须交代清楚为什么要这么做，在不明白背景的情况下什么错误都可能发生；二是必须清楚下游的能力所在，清楚谁适合做什么以及如何让他做到。<br>紧接着，处理需求一定要有时间限制，而且这个时间绝不能给的刚刚好让执行者舒舒服服，否则执行者本身不会有大的进步，企业人力成本也将非常之高（员工的工作产出一定是大于他的工资收入的）。</p>\n<p>最后，必须对需求完成情况加以验证，而且最好是执行者本身具备这种验证能力。</p>\n<p>（二）如何让错误产生价值。</p>\n<p>犯了错误的当下再去责备已没有任何意义，而是应该想办法去解决问题。错误的积极意义在于如何不犯同类型的错误，以及从此少犯错误。相同类型的错误要予以批评，新的错误要做出反思。</p>\n<p>（三）改变一个人非常之难。</p>\n<p>我曾想要去改变DYF使他变得更积极却发现于事无补，但当我转而想如何提升他的能力来做更多事情，事情变得简单多了。</p>\n<p>（四）与同事协作，职责一定要分明。</p>\n<p>刚开始与LZQ协助确实有不少苦恼，因为我俩的职责没有一个明确的界定，经常遇到一个问题是到底这个事情归谁管？虽然后面我知道刘老师以及林总可以帮我做这个界定，但长远来讲必须把我俩各自的工作定义清楚才行。</p>\n<p>（五）给予的重要性。</p>\n<p>一味的向下索取将导致非常糟糕的结果：下游人员没有进步，失去工作激情，甚至离职。必须在管理的过程去给予一些东西：让对方学习新的东西，做更难的事情，传授一些做事情的基本方法，授课培训等。只有这样，当你真正需要他满负荷运行的时候才能调动得起来。</p>\n<p>三、未来规划</p>\n<p>拳头产品（云平台）必须花心思去打磨好（站在软件的角度）。云平台的下一个里程碑是今年年底做到：稳定、安全、交互便捷、简洁美。稳定指程序不会崩溃，安全指能承受得起外部的攻击，交互便捷指如何让使用者更容易得到他想要的信息，简洁美则是要有统一的美化标准。</p>\n<p>另外，研发才是软件团队的真正核心竞争力，而且研发也能给我带来更多乐趣。接下来我想尽可能的朝研发靠拢，这也意味着我要学习更多和承受更多。但是要兼顾一个事情，我必须学习和思考如何把下面的人带好，使他们都成为比我还优秀的开发者。</p>\n","site":{"data":{}},"excerpt":"<p>软件研发和软件开发是有区别的。</p>","more":"<p>研发需要技术攻关，它更关注的是软件的基础设施建设（如解决什么样的问题、选用怎样的技术解决问题、整体软件如何架构）；开发需要解决实际问题，最终把产品实现出来（如通信程序如何实现）。过去一年，我的主要工作是云平台的开发，其中包含自己开发以及相互协作去开发，我把这两者各开一个章节来讲，最后再加一章“未来规划”作为结束。</p>\n<p>一、具体开发</p>\n<p>具体开发过程中，总结起来无外乎刘老师常说的一句话：大处落墨，小处着笔。</p>\n<p>（一）“大处落墨”在具体开发中等同于软件架构。</p>\n<p>一个糟糕的软件架构花费的人力成本将非常之高。必须先弄清楚软件的模块有哪些，它们相互间的联系是什么，相互间的影响是什么。没有架构的开发意味着完全靠试错来发现和解决问题，最终形成的也是一个脆弱的产品，随时可能会崩溃，维护之前陈森填写的程序就有此感觉。</p>\n<p>（二）“小处着笔”在具体开发中等同于实现及验证。</p>\n<p>首先，在大框架已经清楚的情况下，如何确保每一行代码不会出错？这时候必须引入编码规范以及代码复查。编码规范迫使你遵循一个良好的编程习惯，不犯下一些低级的错误；代码复查（人力以及机器）可以发现并报告软件可能存在的质量问题。<br>其次，在所有代码都完成的情况下，如何确保它真的是对的？这时候必须引入测试。但是一共有多少情况需要验证？这个问题反馈到具体开发就是必须充分考虑所有可能的情况并逐一进行验证。</p>\n<p>二、相互协作</p>\n<p>主要谈谈实际协作的一些体会。</p>\n<p>（一）理解、下放、处理和验证需求。<br>首先，理解来自上游的需求，我也曾犯下许多错误。例如：不清楚为什么要这样做然后自己想当然，遗漏一些细节而后偏离主题，确认需求的过程中没有主线思维导致表述不清引发歧义。</p>\n<p>其次，对于下放需求，一是必须交代清楚为什么要这么做，在不明白背景的情况下什么错误都可能发生；二是必须清楚下游的能力所在，清楚谁适合做什么以及如何让他做到。<br>紧接着，处理需求一定要有时间限制，而且这个时间绝不能给的刚刚好让执行者舒舒服服，否则执行者本身不会有大的进步，企业人力成本也将非常之高（员工的工作产出一定是大于他的工资收入的）。</p>\n<p>最后，必须对需求完成情况加以验证，而且最好是执行者本身具备这种验证能力。</p>\n<p>（二）如何让错误产生价值。</p>\n<p>犯了错误的当下再去责备已没有任何意义，而是应该想办法去解决问题。错误的积极意义在于如何不犯同类型的错误，以及从此少犯错误。相同类型的错误要予以批评，新的错误要做出反思。</p>\n<p>（三）改变一个人非常之难。</p>\n<p>我曾想要去改变DYF使他变得更积极却发现于事无补，但当我转而想如何提升他的能力来做更多事情，事情变得简单多了。</p>\n<p>（四）与同事协作，职责一定要分明。</p>\n<p>刚开始与LZQ协助确实有不少苦恼，因为我俩的职责没有一个明确的界定，经常遇到一个问题是到底这个事情归谁管？虽然后面我知道刘老师以及林总可以帮我做这个界定，但长远来讲必须把我俩各自的工作定义清楚才行。</p>\n<p>（五）给予的重要性。</p>\n<p>一味的向下索取将导致非常糟糕的结果：下游人员没有进步，失去工作激情，甚至离职。必须在管理的过程去给予一些东西：让对方学习新的东西，做更难的事情，传授一些做事情的基本方法，授课培训等。只有这样，当你真正需要他满负荷运行的时候才能调动得起来。</p>\n<p>三、未来规划</p>\n<p>拳头产品（云平台）必须花心思去打磨好（站在软件的角度）。云平台的下一个里程碑是今年年底做到：稳定、安全、交互便捷、简洁美。稳定指程序不会崩溃，安全指能承受得起外部的攻击，交互便捷指如何让使用者更容易得到他想要的信息，简洁美则是要有统一的美化标准。</p>\n<p>另外，研发才是软件团队的真正核心竞争力，而且研发也能给我带来更多乐趣。接下来我想尽可能的朝研发靠拢，这也意味着我要学习更多和承受更多。但是要兼顾一个事情，我必须学习和思考如何把下面的人带好，使他们都成为比我还优秀的开发者。</p>"},{"layout":"post","title":"HBase增量备份数据","date":"2016-05-11T13:19:00.000Z","comments":1,"_content":"\nHBase如何增量备份数据呢？\n\n<!--more-->\n\n## 传统的Export不支持自定义rowkey增量数据导出\n\n导出语法：\n\n```\nhbase org.apache.hadoop.hbase.mapreduce.Export your_hbase_table_name your_hdfs_file_path\n```\n\n下面简单介绍如何实现自定义rowkey增量导出HBase数据。\n\n<!--more-->\n\n## 运行环境\n\n笔者的hadoop+hbase环境如下：\n\n$ `hadoop version`\n\n```\nHadoop 2.6.0-cdh5.4.3\nSubversion http://github.com/cloudera/hadoop -r 4cd9f51a3f1ef748d45b8d77d0f211ad44296d4b\nCompiled by jenkins on 2015-06-25T02:34Z\nCompiled with protoc 2.5.0\nFrom source with checksum 4acea6ac185376e0b48b33695e88e7a7\nThis command was run using /opt/cloudera/parcels/CDH-5.4.3-1.cdh5.4.3.p0.6/jars/hadoop-common-2.6.0-cdh5.4.3.jar\n```\n\n$ `hbase version`\n\n```\nJava HotSpot(TM) 64-Bit Server VM warning: Using incremental CMS is deprecated and will likely be removed in a future release\n16/06/04 13:13:30 INFO util.VersionInfo: HBase 1.0.0-cdh5.4.3\n16/06/04 13:13:30 INFO util.VersionInfo: Source code repository file:///data/jenkins/workspace/generic-package-ubuntu64-12-04/CDH5.4.3-Packaging-HBase-2015-06-24_19-16-53/hbase-1.0.0+cdh5.4.3+159-1.cdh5.4.3.p0.9~precise revision=Unknown\n16/06/04 13:13:30 INFO util.VersionInfo: Compiled by jenkins on Wed Jun 24 19:32:40 PDT 2015\n16/06/04 13:13:30 INFO util.VersionInfo: From source with checksum d5809febb1e487265280a25f5c74202e\n```\n\n## 如何定制自己的Export实现自定义rowkey增量数据导出\n\n首先，你需要找到源码org.apache.hadoop.hbase.mapreduce.Export.java，修改它为你想要的，并将其上传到具备hadoop+hbase环境的机器上；\n\n紧接着，运行如下语句：\n\n```bash\n# 编译并打包\nexport HADOOP_CLASSPATH=$(hbase classpath)\nhadoop com.sun.tools.javac.Main Export.java\njar cf Export.jar Export.class\n# 准备好hdfs路径\nsu\nsu hdfs -c 'hdfs dfs -mkdir /backup'\nsu hdfs -c 'hdfs dfs -mkdir /backup/20160512'\nsu hdfs -c 'hdfs dfs -ls  /'\n# 使用jar包\n## 兼容传统Export\nhadoop jar Export.jar Export group_hour /backup/20160512/group_hour\n## 实现了自定义rowkey解析\nhadoop jar Export.jar Export -D hbase.mapreduce.scan.row.start=1,9,2016-05-01 -D hbase.mapreduce.scan.row.stop=1,9,2015-05-02 group_hour /backup/20160512/group_hour_rowkey\n```\n\n上述命令执行成功后，就可执行`hdfs dfs -get your_hdfs_filepath your_filesystem_filepath`取得你的导出数据啦！\n\n笔者修改后的Export.java如下：\n\n```java\n/**\n *\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport java.io.IOException;\nimport java.text.DateFormat;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\n\nimport com.sun.security.auth.module.UnixSystem;\n\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.apache.hadoop.hbase.classification.InterfaceAudience;\nimport org.apache.hadoop.hbase.classification.InterfaceStability;\nimport org.apache.hadoop.conf.Configuration;\nimport org.apache.hadoop.fs.Path;\nimport org.apache.hadoop.hbase.HBaseConfiguration;\nimport org.apache.hadoop.hbase.client.Result;\nimport org.apache.hadoop.hbase.client.Scan;\nimport org.apache.hadoop.hbase.filter.CompareFilter.CompareOp;\nimport org.apache.hadoop.hbase.filter.Filter;\nimport org.apache.hadoop.hbase.filter.IncompatibleFilterException;\nimport org.apache.hadoop.hbase.filter.PrefixFilter;\nimport org.apache.hadoop.hbase.filter.RegexStringComparator;\nimport org.apache.hadoop.hbase.filter.RowFilter;\nimport org.apache.hadoop.hbase.io.ImmutableBytesWritable;\nimport org.apache.hadoop.hbase.mapreduce.IdentityTableMapper;\nimport org.apache.hadoop.hbase.mapreduce.TableInputFormat;\nimport org.apache.hadoop.hbase.util.Bytes;\nimport org.apache.hadoop.mapreduce.Job;\nimport org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;\nimport org.apache.hadoop.mapreduce.lib.output.SequenceFileOutputFormat;\nimport org.apache.hadoop.util.GenericOptionsParser;\n\n/**\n * Export an HBase table. Writes content to sequence files up in HDFS. Use\n * {@link Import} to read it back in again.\n */\n@InterfaceAudience.Public\n@InterfaceStability.Stable\npublic class Export {\n    private static final Log LOG = LogFactory.getLog(Export.class);\n    final static String NAME = \"export\";\n    final static String RAW_SCAN = \"hbase.mapreduce.include.deleted.rows\";\n    final static String EXPORT_BATCHING = \"hbase.export.scanner.batch\";\n    final static DateFormat format = new SimpleDateFormat(\"yyyy-MM-dd\");\n\n    /**\n     * Sets up the actual job.\n     *\n     * @param conf\n     *            The current configuration.\n     * @param args\n     *            The command line parameters.\n     * @return The newly created job.\n     * @throws IOException\n     *             When setting up the job fails.\n     */\n    public static Job createSubmittableJob(Configuration conf, String[] args)\n            throws IOException {\n        String tableName = args[0];\n        Path outputDir = new Path(args[1]);\n        Job job = new Job(conf, NAME + \"_\" + tableName);\n        job.setJobName(NAME + \"_\" + tableName);\n        job.setJarByClass(Export.class);\n        job.setUser(\"hdfs\");\n        // Set optional scan parameters\n        Scan s = getConfiguredScanForJob(conf, args);\n        IdentityTableMapper.initJob(tableName, s, IdentityTableMapper.class,\n                job);\n        // No reducers. Just write straight to output files.\n        job.setNumReduceTasks(0);\n        job.setOutputFormatClass(SequenceFileOutputFormat.class);\n        job.setOutputKeyClass(ImmutableBytesWritable.class);\n        job.setOutputValueClass(Result.class);\n        FileOutputFormat.setOutputPath(job, outputDir); // job conf doesn't\n                                                        // contain the conf so\n                                                        // doesn't have a\n                                                        // default fs.\n        return job;\n    }\n\n    private static Scan getConfiguredScanForJob(Configuration conf,\n            String[] args) throws IOException {\n        Scan s = new Scan();\n        // Optional arguments.\n        // Set Scan Versions\n        int versions = args.length > 2 ? Integer.parseInt(args[2]) : 1;\n        s.setMaxVersions(versions);\n        // Set Scan Range\n        long startTime = args.length > 3 ? Long.parseLong(args[3]) : 0L;\n        long endTime = args.length > 4 ? Long.parseLong(args[4])\n                : Long.MAX_VALUE;\n        s.setTimeRange(startTime, endTime);\n        // Set cache blocks\n        s.setCacheBlocks(false);\n        // set Start and Stop row\n        if (conf.get(TableInputFormat.SCAN_ROW_START) != null) {\n            String rowStart[] = conf.get(TableInputFormat.SCAN_ROW_START).split(\",\");\n            Short companyID = Short.valueOf(rowStart[0]);\n            Short deviceID = Short.valueOf(rowStart[1]);\n            Long insertTime = 0l;\n            try {\n                insertTime = format.parse(rowStart[2]).getTime();\n            } catch (ParseException e) {\n                // ignore\n            }\n            s.setStartRow(Bytes.add(Bytes.toBytes(companyID),\n                    Bytes.toBytes(deviceID), Bytes.toBytes(insertTime)));\n        }\n        if (conf.get(TableInputFormat.SCAN_ROW_STOP) != null) {\n            String rowStop[] = conf.get(TableInputFormat.SCAN_ROW_STOP).split(\",\");\n            Short companyID = Short.valueOf(rowStop[0]);\n            Short deviceID = Short.valueOf(rowStop[1]);\n            Long insertTime = 0l;\n            try {\n                insertTime = format.parse(rowStop[2]).getTime();\n            } catch (ParseException e) {\n                // ignore\n            }\n            s.setStopRow(Bytes.add(Bytes.toBytes(companyID),\n                    Bytes.toBytes(deviceID), Bytes.toBytes(insertTime)));\n        }\n        // Set Scan Column Family\n        boolean raw = Boolean.parseBoolean(conf.get(RAW_SCAN));\n        if (raw) {\n            s.setRaw(raw);\n        }\n\n        if (conf.get(TableInputFormat.SCAN_COLUMN_FAMILY) != null) {\n            s.addFamily(Bytes.toBytes(conf\n                    .get(TableInputFormat.SCAN_COLUMN_FAMILY)));\n        }\n        // Set RowFilter or Prefix Filter if applicable.\n        Filter exportFilter = getExportFilter(args);\n        if (exportFilter != null) {\n            LOG.info(\"Setting Scan Filter for Export.\");\n            s.setFilter(exportFilter);\n        }\n\n        int batching = conf.getInt(EXPORT_BATCHING, -1);\n        if (batching != -1) {\n            try {\n                s.setBatch(batching);\n            } catch (IncompatibleFilterException e) {\n                LOG.error(\"Batching could not be set\", e);\n            }\n        }\n        StringBuffer sb = new StringBuffer(\"versions=\" + versions + \", starttime=\" + startTime\n                + \", endtime=\" + endTime + \", keepDeletedCells=\" + raw);\n        if (conf.get(TableInputFormat.SCAN_ROW_START) != null) {\n            sb.append(\", startRow=\" + conf.get(TableInputFormat.SCAN_ROW_START));\n            sb.append(\", stopRow=\" + conf.get(TableInputFormat.SCAN_ROW_STOP));\n        }\n        LOG.info(sb.toString());\n        return s;\n    }\n\n    private static Filter getExportFilter(String[] args) {\n        Filter exportFilter = null;\n        String filterCriteria = (args.length > 5) ? args[5] : null;\n        if (filterCriteria == null)\n            return null;\n        if (filterCriteria.startsWith(\"^\")) {\n            String regexPattern = filterCriteria.substring(1,\n                    filterCriteria.length());\n            exportFilter = new RowFilter(CompareOp.EQUAL,\n                    new RegexStringComparator(regexPattern));\n        } else {\n            exportFilter = new PrefixFilter(Bytes.toBytes(filterCriteria));\n        }\n        return exportFilter;\n    }\n\n    /*\n     * @param errorMsg Error message. Can be null.\n     */\n    private static void usage(final String errorMsg) {\n        if (errorMsg != null && errorMsg.length() > 0) {\n            System.err.println(\"ERROR: \" + errorMsg);\n        }\n        System.err\n                .println(\"Usage: Export [-D <property=value>]* <tablename> <outputdir> [<versions> \"\n                        + \"[<starttime> [<endtime>]] [^[regex pattern] or [Prefix] to filter]]\\n\");\n        System.err\n                .println(\"  Note: -D properties will be applied to the conf used. \");\n        System.err.println(\"  For example: \");\n        System.err\n                .println(\"   -D mapreduce.output.fileoutputformat.compress=true\");\n        System.err\n                .println(\"   -D mapreduce.output.fileoutputformat.compress.codec=org.apache.hadoop.io.compress.GzipCodec\");\n        System.err\n                .println(\"   -D mapreduce.output.fileoutputformat.compress.type=BLOCK\");\n        System.err\n                .println(\"  Additionally, the following SCAN properties can be specified\");\n        System.err.println(\"  to control/limit what is exported..\");\n        System.err.println(\"   -D \" + TableInputFormat.SCAN_COLUMN_FAMILY\n                + \"=<familyName>\");\n        System.err.println(\"   -D \" + RAW_SCAN + \"=true\");\n        System.err.println(\"   -D \" + TableInputFormat.SCAN_ROW_START\n                + \"=<CompanyID(Short),DeviceID(Short),yyyy-MM-dd(String)>\");\n        System.err.println(\"   -D \" + TableInputFormat.SCAN_ROW_STOP\n                + \"=<CompanyID(Short),DeviceID(Short),yyyy-MM-dd(String)>\");\n        System.err\n                .println(\"For performance consider the following properties:\\n\"\n                        + \"   -Dhbase.client.scanner.caching=100\\n\"\n                        + \"   -Dmapreduce.map.speculative=false\\n\"\n                        + \"   -Dmapreduce.reduce.speculative=false\");\n        System.err\n                .println(\"For tables with very wide rows consider setting the batch size as below:\\n\"\n                        + \"   -D\" + EXPORT_BATCHING + \"=10\");\n    }\n\n    /**\n     * Main entry point.\n     *\n     * @param args\n     *            The command line parameters.\n     * @throws Exception\n     *             When running the job fails.\n     */\n    public static void main(String[] args) throws Exception {\n        System.setProperty(\"HADOOP_USER_NAME\", \"hdfs\");\n        UnixSystem us = new UnixSystem();\n        System.out.println(\"Unix Username : \" + us.getUsername());\n        // -----------------------------------------------------\n        Configuration conf = HBaseConfiguration.create();\n        String[] otherArgs = new GenericOptionsParser(conf, args)\n                .getRemainingArgs();\n        if (otherArgs.length < 2) {\n            usage(\"Wrong number of arguments: \" + otherArgs.length);\n            System.exit(-1);\n        }\n        // Check StartRow And StopRow\n        String rowStart = conf.get(TableInputFormat.SCAN_ROW_START);\n        String rowStop = conf.get(TableInputFormat.SCAN_ROW_STOP);\n        if(rowStart == null && rowStop == null) {\n            // do nothing\n        } else {\n            if(rowStart != null && rowStop != null) {\n                // check rowStart\n                String strToCheck[] = rowStart.split(\",\");\n                try {\n                    Short.valueOf(strToCheck[0]);\n                    Short.valueOf(strToCheck[1]);\n                } catch (Exception e) {\n                    usage(\"String parsed to Short error ! Wrong argument of \" + TableInputFormat.SCAN_ROW_START + \" : \" + rowStart);\n                    System.exit(-1);\n                }\n                try {\n                    format.parse(strToCheck[2]);\n                } catch (Exception e) {\n                    usage(\"yyyy-MM-dd String parsed to Date error ! Wrong argument of \" + TableInputFormat.SCAN_ROW_START + \" : \" + rowStart);\n                    System.exit(-1);\n                }\n                // check rowStop\n                strToCheck = rowStop.split(\",\");\n                try {\n                    Short.valueOf(strToCheck[0]);\n                    Short.valueOf(strToCheck[1]);\n                } catch (Exception e) {\n                    usage(\"String parsed to Short error ! Wrong argument of \" + TableInputFormat.SCAN_ROW_STOP + \" : \" + rowStop);\n                    System.exit(-1);\n                }\n                try {\n                    format.parse(strToCheck[2]);\n                } catch (Exception e) {\n                    usage(\"yyyy-MM-dd String parsed to Date error ! Wrong argument of \" + TableInputFormat.SCAN_ROW_STOP + \" : \" + rowStop);\n                    System.exit(-1);\n                }\n            } else {\n                usage(TableInputFormat.SCAN_ROW_START + \" and \" + TableInputFormat.SCAN_ROW_STOP + \" must both not be null.\");\n                System.exit(-1);\n            }\n        }\n        Job job = createSubmittableJob(conf, otherArgs);\n        System.exit(job.waitForCompletion(true) ? 0 : 1);\n    }\n}\n\n```\n","source":"_posts/2016-05-11-hbase-incremental-backup.markdown","raw":"---\nlayout: post\ntitle: HBase增量备份数据\ndate: '2016-05-11 21:19'\ncomments: true\ncategories: ['编程实践']  \ntags: ['HBase', 'Hadoop']\n---\n\nHBase如何增量备份数据呢？\n\n<!--more-->\n\n## 传统的Export不支持自定义rowkey增量数据导出\n\n导出语法：\n\n```\nhbase org.apache.hadoop.hbase.mapreduce.Export your_hbase_table_name your_hdfs_file_path\n```\n\n下面简单介绍如何实现自定义rowkey增量导出HBase数据。\n\n<!--more-->\n\n## 运行环境\n\n笔者的hadoop+hbase环境如下：\n\n$ `hadoop version`\n\n```\nHadoop 2.6.0-cdh5.4.3\nSubversion http://github.com/cloudera/hadoop -r 4cd9f51a3f1ef748d45b8d77d0f211ad44296d4b\nCompiled by jenkins on 2015-06-25T02:34Z\nCompiled with protoc 2.5.0\nFrom source with checksum 4acea6ac185376e0b48b33695e88e7a7\nThis command was run using /opt/cloudera/parcels/CDH-5.4.3-1.cdh5.4.3.p0.6/jars/hadoop-common-2.6.0-cdh5.4.3.jar\n```\n\n$ `hbase version`\n\n```\nJava HotSpot(TM) 64-Bit Server VM warning: Using incremental CMS is deprecated and will likely be removed in a future release\n16/06/04 13:13:30 INFO util.VersionInfo: HBase 1.0.0-cdh5.4.3\n16/06/04 13:13:30 INFO util.VersionInfo: Source code repository file:///data/jenkins/workspace/generic-package-ubuntu64-12-04/CDH5.4.3-Packaging-HBase-2015-06-24_19-16-53/hbase-1.0.0+cdh5.4.3+159-1.cdh5.4.3.p0.9~precise revision=Unknown\n16/06/04 13:13:30 INFO util.VersionInfo: Compiled by jenkins on Wed Jun 24 19:32:40 PDT 2015\n16/06/04 13:13:30 INFO util.VersionInfo: From source with checksum d5809febb1e487265280a25f5c74202e\n```\n\n## 如何定制自己的Export实现自定义rowkey增量数据导出\n\n首先，你需要找到源码org.apache.hadoop.hbase.mapreduce.Export.java，修改它为你想要的，并将其上传到具备hadoop+hbase环境的机器上；\n\n紧接着，运行如下语句：\n\n```bash\n# 编译并打包\nexport HADOOP_CLASSPATH=$(hbase classpath)\nhadoop com.sun.tools.javac.Main Export.java\njar cf Export.jar Export.class\n# 准备好hdfs路径\nsu\nsu hdfs -c 'hdfs dfs -mkdir /backup'\nsu hdfs -c 'hdfs dfs -mkdir /backup/20160512'\nsu hdfs -c 'hdfs dfs -ls  /'\n# 使用jar包\n## 兼容传统Export\nhadoop jar Export.jar Export group_hour /backup/20160512/group_hour\n## 实现了自定义rowkey解析\nhadoop jar Export.jar Export -D hbase.mapreduce.scan.row.start=1,9,2016-05-01 -D hbase.mapreduce.scan.row.stop=1,9,2015-05-02 group_hour /backup/20160512/group_hour_rowkey\n```\n\n上述命令执行成功后，就可执行`hdfs dfs -get your_hdfs_filepath your_filesystem_filepath`取得你的导出数据啦！\n\n笔者修改后的Export.java如下：\n\n```java\n/**\n *\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport java.io.IOException;\nimport java.text.DateFormat;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\n\nimport com.sun.security.auth.module.UnixSystem;\n\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.apache.hadoop.hbase.classification.InterfaceAudience;\nimport org.apache.hadoop.hbase.classification.InterfaceStability;\nimport org.apache.hadoop.conf.Configuration;\nimport org.apache.hadoop.fs.Path;\nimport org.apache.hadoop.hbase.HBaseConfiguration;\nimport org.apache.hadoop.hbase.client.Result;\nimport org.apache.hadoop.hbase.client.Scan;\nimport org.apache.hadoop.hbase.filter.CompareFilter.CompareOp;\nimport org.apache.hadoop.hbase.filter.Filter;\nimport org.apache.hadoop.hbase.filter.IncompatibleFilterException;\nimport org.apache.hadoop.hbase.filter.PrefixFilter;\nimport org.apache.hadoop.hbase.filter.RegexStringComparator;\nimport org.apache.hadoop.hbase.filter.RowFilter;\nimport org.apache.hadoop.hbase.io.ImmutableBytesWritable;\nimport org.apache.hadoop.hbase.mapreduce.IdentityTableMapper;\nimport org.apache.hadoop.hbase.mapreduce.TableInputFormat;\nimport org.apache.hadoop.hbase.util.Bytes;\nimport org.apache.hadoop.mapreduce.Job;\nimport org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;\nimport org.apache.hadoop.mapreduce.lib.output.SequenceFileOutputFormat;\nimport org.apache.hadoop.util.GenericOptionsParser;\n\n/**\n * Export an HBase table. Writes content to sequence files up in HDFS. Use\n * {@link Import} to read it back in again.\n */\n@InterfaceAudience.Public\n@InterfaceStability.Stable\npublic class Export {\n    private static final Log LOG = LogFactory.getLog(Export.class);\n    final static String NAME = \"export\";\n    final static String RAW_SCAN = \"hbase.mapreduce.include.deleted.rows\";\n    final static String EXPORT_BATCHING = \"hbase.export.scanner.batch\";\n    final static DateFormat format = new SimpleDateFormat(\"yyyy-MM-dd\");\n\n    /**\n     * Sets up the actual job.\n     *\n     * @param conf\n     *            The current configuration.\n     * @param args\n     *            The command line parameters.\n     * @return The newly created job.\n     * @throws IOException\n     *             When setting up the job fails.\n     */\n    public static Job createSubmittableJob(Configuration conf, String[] args)\n            throws IOException {\n        String tableName = args[0];\n        Path outputDir = new Path(args[1]);\n        Job job = new Job(conf, NAME + \"_\" + tableName);\n        job.setJobName(NAME + \"_\" + tableName);\n        job.setJarByClass(Export.class);\n        job.setUser(\"hdfs\");\n        // Set optional scan parameters\n        Scan s = getConfiguredScanForJob(conf, args);\n        IdentityTableMapper.initJob(tableName, s, IdentityTableMapper.class,\n                job);\n        // No reducers. Just write straight to output files.\n        job.setNumReduceTasks(0);\n        job.setOutputFormatClass(SequenceFileOutputFormat.class);\n        job.setOutputKeyClass(ImmutableBytesWritable.class);\n        job.setOutputValueClass(Result.class);\n        FileOutputFormat.setOutputPath(job, outputDir); // job conf doesn't\n                                                        // contain the conf so\n                                                        // doesn't have a\n                                                        // default fs.\n        return job;\n    }\n\n    private static Scan getConfiguredScanForJob(Configuration conf,\n            String[] args) throws IOException {\n        Scan s = new Scan();\n        // Optional arguments.\n        // Set Scan Versions\n        int versions = args.length > 2 ? Integer.parseInt(args[2]) : 1;\n        s.setMaxVersions(versions);\n        // Set Scan Range\n        long startTime = args.length > 3 ? Long.parseLong(args[3]) : 0L;\n        long endTime = args.length > 4 ? Long.parseLong(args[4])\n                : Long.MAX_VALUE;\n        s.setTimeRange(startTime, endTime);\n        // Set cache blocks\n        s.setCacheBlocks(false);\n        // set Start and Stop row\n        if (conf.get(TableInputFormat.SCAN_ROW_START) != null) {\n            String rowStart[] = conf.get(TableInputFormat.SCAN_ROW_START).split(\",\");\n            Short companyID = Short.valueOf(rowStart[0]);\n            Short deviceID = Short.valueOf(rowStart[1]);\n            Long insertTime = 0l;\n            try {\n                insertTime = format.parse(rowStart[2]).getTime();\n            } catch (ParseException e) {\n                // ignore\n            }\n            s.setStartRow(Bytes.add(Bytes.toBytes(companyID),\n                    Bytes.toBytes(deviceID), Bytes.toBytes(insertTime)));\n        }\n        if (conf.get(TableInputFormat.SCAN_ROW_STOP) != null) {\n            String rowStop[] = conf.get(TableInputFormat.SCAN_ROW_STOP).split(\",\");\n            Short companyID = Short.valueOf(rowStop[0]);\n            Short deviceID = Short.valueOf(rowStop[1]);\n            Long insertTime = 0l;\n            try {\n                insertTime = format.parse(rowStop[2]).getTime();\n            } catch (ParseException e) {\n                // ignore\n            }\n            s.setStopRow(Bytes.add(Bytes.toBytes(companyID),\n                    Bytes.toBytes(deviceID), Bytes.toBytes(insertTime)));\n        }\n        // Set Scan Column Family\n        boolean raw = Boolean.parseBoolean(conf.get(RAW_SCAN));\n        if (raw) {\n            s.setRaw(raw);\n        }\n\n        if (conf.get(TableInputFormat.SCAN_COLUMN_FAMILY) != null) {\n            s.addFamily(Bytes.toBytes(conf\n                    .get(TableInputFormat.SCAN_COLUMN_FAMILY)));\n        }\n        // Set RowFilter or Prefix Filter if applicable.\n        Filter exportFilter = getExportFilter(args);\n        if (exportFilter != null) {\n            LOG.info(\"Setting Scan Filter for Export.\");\n            s.setFilter(exportFilter);\n        }\n\n        int batching = conf.getInt(EXPORT_BATCHING, -1);\n        if (batching != -1) {\n            try {\n                s.setBatch(batching);\n            } catch (IncompatibleFilterException e) {\n                LOG.error(\"Batching could not be set\", e);\n            }\n        }\n        StringBuffer sb = new StringBuffer(\"versions=\" + versions + \", starttime=\" + startTime\n                + \", endtime=\" + endTime + \", keepDeletedCells=\" + raw);\n        if (conf.get(TableInputFormat.SCAN_ROW_START) != null) {\n            sb.append(\", startRow=\" + conf.get(TableInputFormat.SCAN_ROW_START));\n            sb.append(\", stopRow=\" + conf.get(TableInputFormat.SCAN_ROW_STOP));\n        }\n        LOG.info(sb.toString());\n        return s;\n    }\n\n    private static Filter getExportFilter(String[] args) {\n        Filter exportFilter = null;\n        String filterCriteria = (args.length > 5) ? args[5] : null;\n        if (filterCriteria == null)\n            return null;\n        if (filterCriteria.startsWith(\"^\")) {\n            String regexPattern = filterCriteria.substring(1,\n                    filterCriteria.length());\n            exportFilter = new RowFilter(CompareOp.EQUAL,\n                    new RegexStringComparator(regexPattern));\n        } else {\n            exportFilter = new PrefixFilter(Bytes.toBytes(filterCriteria));\n        }\n        return exportFilter;\n    }\n\n    /*\n     * @param errorMsg Error message. Can be null.\n     */\n    private static void usage(final String errorMsg) {\n        if (errorMsg != null && errorMsg.length() > 0) {\n            System.err.println(\"ERROR: \" + errorMsg);\n        }\n        System.err\n                .println(\"Usage: Export [-D <property=value>]* <tablename> <outputdir> [<versions> \"\n                        + \"[<starttime> [<endtime>]] [^[regex pattern] or [Prefix] to filter]]\\n\");\n        System.err\n                .println(\"  Note: -D properties will be applied to the conf used. \");\n        System.err.println(\"  For example: \");\n        System.err\n                .println(\"   -D mapreduce.output.fileoutputformat.compress=true\");\n        System.err\n                .println(\"   -D mapreduce.output.fileoutputformat.compress.codec=org.apache.hadoop.io.compress.GzipCodec\");\n        System.err\n                .println(\"   -D mapreduce.output.fileoutputformat.compress.type=BLOCK\");\n        System.err\n                .println(\"  Additionally, the following SCAN properties can be specified\");\n        System.err.println(\"  to control/limit what is exported..\");\n        System.err.println(\"   -D \" + TableInputFormat.SCAN_COLUMN_FAMILY\n                + \"=<familyName>\");\n        System.err.println(\"   -D \" + RAW_SCAN + \"=true\");\n        System.err.println(\"   -D \" + TableInputFormat.SCAN_ROW_START\n                + \"=<CompanyID(Short),DeviceID(Short),yyyy-MM-dd(String)>\");\n        System.err.println(\"   -D \" + TableInputFormat.SCAN_ROW_STOP\n                + \"=<CompanyID(Short),DeviceID(Short),yyyy-MM-dd(String)>\");\n        System.err\n                .println(\"For performance consider the following properties:\\n\"\n                        + \"   -Dhbase.client.scanner.caching=100\\n\"\n                        + \"   -Dmapreduce.map.speculative=false\\n\"\n                        + \"   -Dmapreduce.reduce.speculative=false\");\n        System.err\n                .println(\"For tables with very wide rows consider setting the batch size as below:\\n\"\n                        + \"   -D\" + EXPORT_BATCHING + \"=10\");\n    }\n\n    /**\n     * Main entry point.\n     *\n     * @param args\n     *            The command line parameters.\n     * @throws Exception\n     *             When running the job fails.\n     */\n    public static void main(String[] args) throws Exception {\n        System.setProperty(\"HADOOP_USER_NAME\", \"hdfs\");\n        UnixSystem us = new UnixSystem();\n        System.out.println(\"Unix Username : \" + us.getUsername());\n        // -----------------------------------------------------\n        Configuration conf = HBaseConfiguration.create();\n        String[] otherArgs = new GenericOptionsParser(conf, args)\n                .getRemainingArgs();\n        if (otherArgs.length < 2) {\n            usage(\"Wrong number of arguments: \" + otherArgs.length);\n            System.exit(-1);\n        }\n        // Check StartRow And StopRow\n        String rowStart = conf.get(TableInputFormat.SCAN_ROW_START);\n        String rowStop = conf.get(TableInputFormat.SCAN_ROW_STOP);\n        if(rowStart == null && rowStop == null) {\n            // do nothing\n        } else {\n            if(rowStart != null && rowStop != null) {\n                // check rowStart\n                String strToCheck[] = rowStart.split(\",\");\n                try {\n                    Short.valueOf(strToCheck[0]);\n                    Short.valueOf(strToCheck[1]);\n                } catch (Exception e) {\n                    usage(\"String parsed to Short error ! Wrong argument of \" + TableInputFormat.SCAN_ROW_START + \" : \" + rowStart);\n                    System.exit(-1);\n                }\n                try {\n                    format.parse(strToCheck[2]);\n                } catch (Exception e) {\n                    usage(\"yyyy-MM-dd String parsed to Date error ! Wrong argument of \" + TableInputFormat.SCAN_ROW_START + \" : \" + rowStart);\n                    System.exit(-1);\n                }\n                // check rowStop\n                strToCheck = rowStop.split(\",\");\n                try {\n                    Short.valueOf(strToCheck[0]);\n                    Short.valueOf(strToCheck[1]);\n                } catch (Exception e) {\n                    usage(\"String parsed to Short error ! Wrong argument of \" + TableInputFormat.SCAN_ROW_STOP + \" : \" + rowStop);\n                    System.exit(-1);\n                }\n                try {\n                    format.parse(strToCheck[2]);\n                } catch (Exception e) {\n                    usage(\"yyyy-MM-dd String parsed to Date error ! Wrong argument of \" + TableInputFormat.SCAN_ROW_STOP + \" : \" + rowStop);\n                    System.exit(-1);\n                }\n            } else {\n                usage(TableInputFormat.SCAN_ROW_START + \" and \" + TableInputFormat.SCAN_ROW_STOP + \" must both not be null.\");\n                System.exit(-1);\n            }\n        }\n        Job job = createSubmittableJob(conf, otherArgs);\n        System.exit(job.waitForCompletion(true) ? 0 : 1);\n    }\n}\n\n```\n","slug":"hbase-incremental-backup","published":1,"updated":"2017-04-09T14:41:52.000Z","photos":[],"link":"","_id":"cjlza6m4p0012pgup3tdwapob","content":"<p>HBase如何增量备份数据呢？</p>\n<a id=\"more\"></a>\n<h2 id=\"传统的Export不支持自定义rowkey增量数据导出\"><a href=\"#传统的Export不支持自定义rowkey增量数据导出\" class=\"headerlink\" title=\"传统的Export不支持自定义rowkey增量数据导出\"></a>传统的Export不支持自定义rowkey增量数据导出</h2><p>导出语法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hbase org.apache.hadoop.hbase.mapreduce.Export your_hbase_table_name your_hdfs_file_path</span><br></pre></td></tr></table></figure>\n<p>下面简单介绍如何实现自定义rowkey增量导出HBase数据。</p>\n<!--more-->\n<h2 id=\"运行环境\"><a href=\"#运行环境\" class=\"headerlink\" title=\"运行环境\"></a>运行环境</h2><p>笔者的hadoop+hbase环境如下：</p>\n<p>$ <code>hadoop version</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hadoop 2.6.0-cdh5.4.3</span><br><span class=\"line\">Subversion http://github.com/cloudera/hadoop -r 4cd9f51a3f1ef748d45b8d77d0f211ad44296d4b</span><br><span class=\"line\">Compiled by jenkins on 2015-06-25T02:34Z</span><br><span class=\"line\">Compiled with protoc 2.5.0</span><br><span class=\"line\">From source with checksum 4acea6ac185376e0b48b33695e88e7a7</span><br><span class=\"line\">This command was run using /opt/cloudera/parcels/CDH-5.4.3-1.cdh5.4.3.p0.6/jars/hadoop-common-2.6.0-cdh5.4.3.jar</span><br></pre></td></tr></table></figure>\n<p>$ <code>hbase version</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Java HotSpot(TM) 64-Bit Server VM warning: Using incremental CMS is deprecated and will likely be removed in a future release</span><br><span class=\"line\">16/06/04 13:13:30 INFO util.VersionInfo: HBase 1.0.0-cdh5.4.3</span><br><span class=\"line\">16/06/04 13:13:30 INFO util.VersionInfo: Source code repository file:///data/jenkins/workspace/generic-package-ubuntu64-12-04/CDH5.4.3-Packaging-HBase-2015-06-24_19-16-53/hbase-1.0.0+cdh5.4.3+159-1.cdh5.4.3.p0.9~precise revision=Unknown</span><br><span class=\"line\">16/06/04 13:13:30 INFO util.VersionInfo: Compiled by jenkins on Wed Jun 24 19:32:40 PDT 2015</span><br><span class=\"line\">16/06/04 13:13:30 INFO util.VersionInfo: From source with checksum d5809febb1e487265280a25f5c74202e</span><br></pre></td></tr></table></figure>\n<h2 id=\"如何定制自己的Export实现自定义rowkey增量数据导出\"><a href=\"#如何定制自己的Export实现自定义rowkey增量数据导出\" class=\"headerlink\" title=\"如何定制自己的Export实现自定义rowkey增量数据导出\"></a>如何定制自己的Export实现自定义rowkey增量数据导出</h2><p>首先，你需要找到源码org.apache.hadoop.hbase.mapreduce.Export.java，修改它为你想要的，并将其上传到具备hadoop+hbase环境的机器上；</p>\n<p>紧接着，运行如下语句：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 编译并打包</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> HADOOP_CLASSPATH=$(hbase classpath)</span><br><span class=\"line\">hadoop com.sun.tools.javac.Main Export.java</span><br><span class=\"line\">jar cf Export.jar Export.class</span><br><span class=\"line\"><span class=\"comment\"># 准备好hdfs路径</span></span><br><span class=\"line\">su</span><br><span class=\"line\">su hdfs -c <span class=\"string\">'hdfs dfs -mkdir /backup'</span></span><br><span class=\"line\">su hdfs -c <span class=\"string\">'hdfs dfs -mkdir /backup/20160512'</span></span><br><span class=\"line\">su hdfs -c <span class=\"string\">'hdfs dfs -ls  /'</span></span><br><span class=\"line\"><span class=\"comment\"># 使用jar包</span></span><br><span class=\"line\"><span class=\"comment\">## 兼容传统Export</span></span><br><span class=\"line\">hadoop jar Export.jar Export group_hour /backup/20160512/group_hour</span><br><span class=\"line\"><span class=\"comment\">## 实现了自定义rowkey解析</span></span><br><span class=\"line\">hadoop jar Export.jar Export -D hbase.mapreduce.scan.row.start=1,9,2016-05-01 -D hbase.mapreduce.scan.row.stop=1,9,2015-05-02 group_hour /backup/20160512/group_hour_rowkey</span><br></pre></td></tr></table></figure>\n<p>上述命令执行成功后，就可执行<code>hdfs dfs -get your_hdfs_filepath your_filesystem_filepath</code>取得你的导出数据啦！</p>\n<p>笔者修改后的Export.java如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Licensed to the Apache Software Foundation (ASF) under one</span></span><br><span class=\"line\"><span class=\"comment\"> * or more contributor license agreements.  See the NOTICE file</span></span><br><span class=\"line\"><span class=\"comment\"> * distributed with this work for additional information</span></span><br><span class=\"line\"><span class=\"comment\"> * regarding copyright ownership.  The ASF licenses this file</span></span><br><span class=\"line\"><span class=\"comment\"> * to you under the Apache License, Version 2.0 (the</span></span><br><span class=\"line\"><span class=\"comment\"> * \"License\"); you may not use this file except in compliance</span></span><br><span class=\"line\"><span class=\"comment\"> * with the License.  You may obtain a copy of the License at</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *     http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Unless required by applicable law or agreed to in writing, software</span></span><br><span class=\"line\"><span class=\"comment\"> * distributed under the License is distributed on an \"AS IS\" BASIS,</span></span><br><span class=\"line\"><span class=\"comment\"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class=\"line\"><span class=\"comment\"> * See the License for the specific language governing permissions and</span></span><br><span class=\"line\"><span class=\"comment\"> * limitations under the License.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.text.DateFormat;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.text.ParseException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.text.SimpleDateFormat;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.sun.security.auth.<span class=\"keyword\">module</span>.UnixSystem;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.logging.Log;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.logging.LogFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.hbase.classification.InterfaceAudience;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.hbase.classification.InterfaceStability;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.fs.Path;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.hbase.HBaseConfiguration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.hbase.client.Result;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.hbase.client.Scan;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.hbase.filter.CompareFilter.CompareOp;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.hbase.filter.Filter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.hbase.filter.IncompatibleFilterException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.hbase.filter.PrefixFilter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.hbase.filter.RegexStringComparator;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.hbase.filter.RowFilter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.hbase.io.ImmutableBytesWritable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.hbase.mapreduce.IdentityTableMapper;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.hbase.mapreduce.TableInputFormat;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.hbase.util.Bytes;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.mapreduce.Job;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.mapreduce.lib.output.SequenceFileOutputFormat;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.util.GenericOptionsParser;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Export an HBase table. Writes content to sequence files up in HDFS. Use</span></span><br><span class=\"line\"><span class=\"comment\"> * &#123;<span class=\"doctag\">@link</span> Import&#125; to read it back in again.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@InterfaceAudience</span>.Public</span><br><span class=\"line\"><span class=\"meta\">@InterfaceStability</span>.Stable</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Export</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Log LOG = LogFactory.getLog(Export.class);</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> String NAME = <span class=\"string\">\"export\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> String RAW_SCAN = <span class=\"string\">\"hbase.mapreduce.include.deleted.rows\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> String EXPORT_BATCHING = <span class=\"string\">\"hbase.export.scanner.batch\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> DateFormat format = <span class=\"keyword\">new</span> SimpleDateFormat(<span class=\"string\">\"yyyy-MM-dd\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Sets up the actual job.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> conf</span></span><br><span class=\"line\"><span class=\"comment\">     *            The current configuration.</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> args</span></span><br><span class=\"line\"><span class=\"comment\">     *            The command line parameters.</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> The newly created job.</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> IOException</span></span><br><span class=\"line\"><span class=\"comment\">     *             When setting up the job fails.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Job <span class=\"title\">createSubmittableJob</span><span class=\"params\">(Configuration conf, String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">            <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        String tableName = args[<span class=\"number\">0</span>];</span><br><span class=\"line\">        Path outputDir = <span class=\"keyword\">new</span> Path(args[<span class=\"number\">1</span>]);</span><br><span class=\"line\">        Job job = <span class=\"keyword\">new</span> Job(conf, NAME + <span class=\"string\">\"_\"</span> + tableName);</span><br><span class=\"line\">        job.setJobName(NAME + <span class=\"string\">\"_\"</span> + tableName);</span><br><span class=\"line\">        job.setJarByClass(Export.class);</span><br><span class=\"line\">        job.setUser(<span class=\"string\">\"hdfs\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">// Set optional scan parameters</span></span><br><span class=\"line\">        Scan s = getConfiguredScanForJob(conf, args);</span><br><span class=\"line\">        IdentityTableMapper.initJob(tableName, s, IdentityTableMapper.class,</span><br><span class=\"line\">                job);</span><br><span class=\"line\">        <span class=\"comment\">// No reducers. Just write straight to output files.</span></span><br><span class=\"line\">        job.setNumReduceTasks(<span class=\"number\">0</span>);</span><br><span class=\"line\">        job.setOutputFormatClass(SequenceFileOutputFormat.class);</span><br><span class=\"line\">        job.setOutputKeyClass(ImmutableBytesWritable.class);</span><br><span class=\"line\">        job.setOutputValueClass(Result.class);</span><br><span class=\"line\">        FileOutputFormat.setOutputPath(job, outputDir); <span class=\"comment\">// job conf doesn't</span></span><br><span class=\"line\">                                                        <span class=\"comment\">// contain the conf so</span></span><br><span class=\"line\">                                                        <span class=\"comment\">// doesn't have a</span></span><br><span class=\"line\">                                                        <span class=\"comment\">// default fs.</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> job;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Scan <span class=\"title\">getConfiguredScanForJob</span><span class=\"params\">(Configuration conf,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">            String[] args)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        Scan s = <span class=\"keyword\">new</span> Scan();</span><br><span class=\"line\">        <span class=\"comment\">// Optional arguments.</span></span><br><span class=\"line\">        <span class=\"comment\">// Set Scan Versions</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> versions = args.length &gt; <span class=\"number\">2</span> ? Integer.parseInt(args[<span class=\"number\">2</span>]) : <span class=\"number\">1</span>;</span><br><span class=\"line\">        s.setMaxVersions(versions);</span><br><span class=\"line\">        <span class=\"comment\">// Set Scan Range</span></span><br><span class=\"line\">        <span class=\"keyword\">long</span> startTime = args.length &gt; <span class=\"number\">3</span> ? Long.parseLong(args[<span class=\"number\">3</span>]) : <span class=\"number\">0L</span>;</span><br><span class=\"line\">        <span class=\"keyword\">long</span> endTime = args.length &gt; <span class=\"number\">4</span> ? Long.parseLong(args[<span class=\"number\">4</span>])</span><br><span class=\"line\">                : Long.MAX_VALUE;</span><br><span class=\"line\">        s.setTimeRange(startTime, endTime);</span><br><span class=\"line\">        <span class=\"comment\">// Set cache blocks</span></span><br><span class=\"line\">        s.setCacheBlocks(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">        <span class=\"comment\">// set Start and Stop row</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (conf.get(TableInputFormat.SCAN_ROW_START) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            String rowStart[] = conf.get(TableInputFormat.SCAN_ROW_START).split(<span class=\"string\">\",\"</span>);</span><br><span class=\"line\">            Short companyID = Short.valueOf(rowStart[<span class=\"number\">0</span>]);</span><br><span class=\"line\">            Short deviceID = Short.valueOf(rowStart[<span class=\"number\">1</span>]);</span><br><span class=\"line\">            Long insertTime = <span class=\"number\">0l</span>;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                insertTime = format.parse(rowStart[<span class=\"number\">2</span>]).getTime();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (ParseException e) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// ignore</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            s.setStartRow(Bytes.add(Bytes.toBytes(companyID),</span><br><span class=\"line\">                    Bytes.toBytes(deviceID), Bytes.toBytes(insertTime)));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (conf.get(TableInputFormat.SCAN_ROW_STOP) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            String rowStop[] = conf.get(TableInputFormat.SCAN_ROW_STOP).split(<span class=\"string\">\",\"</span>);</span><br><span class=\"line\">            Short companyID = Short.valueOf(rowStop[<span class=\"number\">0</span>]);</span><br><span class=\"line\">            Short deviceID = Short.valueOf(rowStop[<span class=\"number\">1</span>]);</span><br><span class=\"line\">            Long insertTime = <span class=\"number\">0l</span>;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                insertTime = format.parse(rowStop[<span class=\"number\">2</span>]).getTime();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (ParseException e) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// ignore</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            s.setStopRow(Bytes.add(Bytes.toBytes(companyID),</span><br><span class=\"line\">                    Bytes.toBytes(deviceID), Bytes.toBytes(insertTime)));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// Set Scan Column Family</span></span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> raw = Boolean.parseBoolean(conf.get(RAW_SCAN));</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (raw) &#123;</span><br><span class=\"line\">            s.setRaw(raw);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (conf.get(TableInputFormat.SCAN_COLUMN_FAMILY) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            s.addFamily(Bytes.toBytes(conf</span><br><span class=\"line\">                    .get(TableInputFormat.SCAN_COLUMN_FAMILY)));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// Set RowFilter or Prefix Filter if applicable.</span></span><br><span class=\"line\">        Filter exportFilter = getExportFilter(args);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (exportFilter != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            LOG.info(<span class=\"string\">\"Setting Scan Filter for Export.\"</span>);</span><br><span class=\"line\">            s.setFilter(exportFilter);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> batching = conf.getInt(EXPORT_BATCHING, -<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (batching != -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                s.setBatch(batching);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (IncompatibleFilterException e) &#123;</span><br><span class=\"line\">                LOG.error(<span class=\"string\">\"Batching could not be set\"</span>, e);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        StringBuffer sb = <span class=\"keyword\">new</span> StringBuffer(<span class=\"string\">\"versions=\"</span> + versions + <span class=\"string\">\", starttime=\"</span> + startTime</span><br><span class=\"line\">                + <span class=\"string\">\", endtime=\"</span> + endTime + <span class=\"string\">\", keepDeletedCells=\"</span> + raw);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (conf.get(TableInputFormat.SCAN_ROW_START) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            sb.append(<span class=\"string\">\", startRow=\"</span> + conf.get(TableInputFormat.SCAN_ROW_START));</span><br><span class=\"line\">            sb.append(<span class=\"string\">\", stopRow=\"</span> + conf.get(TableInputFormat.SCAN_ROW_STOP));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        LOG.info(sb.toString());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Filter <span class=\"title\">getExportFilter</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Filter exportFilter = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        String filterCriteria = (args.length &gt; <span class=\"number\">5</span>) ? args[<span class=\"number\">5</span>] : <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (filterCriteria == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (filterCriteria.startsWith(<span class=\"string\">\"^\"</span>)) &#123;</span><br><span class=\"line\">            String regexPattern = filterCriteria.substring(<span class=\"number\">1</span>,</span><br><span class=\"line\">                    filterCriteria.length());</span><br><span class=\"line\">            exportFilter = <span class=\"keyword\">new</span> RowFilter(CompareOp.EQUAL,</span><br><span class=\"line\">                    <span class=\"keyword\">new</span> RegexStringComparator(regexPattern));</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            exportFilter = <span class=\"keyword\">new</span> PrefixFilter(Bytes.toBytes(filterCriteria));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> exportFilter;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * @param errorMsg Error message. Can be null.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">usage</span><span class=\"params\">(<span class=\"keyword\">final</span> String errorMsg)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (errorMsg != <span class=\"keyword\">null</span> &amp;&amp; errorMsg.length() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            System.err.println(<span class=\"string\">\"ERROR: \"</span> + errorMsg);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.err</span><br><span class=\"line\">                .println(<span class=\"string\">\"Usage: Export [-D &lt;property=value&gt;]* &lt;tablename&gt; &lt;outputdir&gt; [&lt;versions&gt; \"</span></span><br><span class=\"line\">                        + <span class=\"string\">\"[&lt;starttime&gt; [&lt;endtime&gt;]] [^[regex pattern] or [Prefix] to filter]]\\n\"</span>);</span><br><span class=\"line\">        System.err</span><br><span class=\"line\">                .println(<span class=\"string\">\"  Note: -D properties will be applied to the conf used. \"</span>);</span><br><span class=\"line\">        System.err.println(<span class=\"string\">\"  For example: \"</span>);</span><br><span class=\"line\">        System.err</span><br><span class=\"line\">                .println(<span class=\"string\">\"   -D mapreduce.output.fileoutputformat.compress=true\"</span>);</span><br><span class=\"line\">        System.err</span><br><span class=\"line\">                .println(<span class=\"string\">\"   -D mapreduce.output.fileoutputformat.compress.codec=org.apache.hadoop.io.compress.GzipCodec\"</span>);</span><br><span class=\"line\">        System.err</span><br><span class=\"line\">                .println(<span class=\"string\">\"   -D mapreduce.output.fileoutputformat.compress.type=BLOCK\"</span>);</span><br><span class=\"line\">        System.err</span><br><span class=\"line\">                .println(<span class=\"string\">\"  Additionally, the following SCAN properties can be specified\"</span>);</span><br><span class=\"line\">        System.err.println(<span class=\"string\">\"  to control/limit what is exported..\"</span>);</span><br><span class=\"line\">        System.err.println(<span class=\"string\">\"   -D \"</span> + TableInputFormat.SCAN_COLUMN_FAMILY</span><br><span class=\"line\">                + <span class=\"string\">\"=&lt;familyName&gt;\"</span>);</span><br><span class=\"line\">        System.err.println(<span class=\"string\">\"   -D \"</span> + RAW_SCAN + <span class=\"string\">\"=true\"</span>);</span><br><span class=\"line\">        System.err.println(<span class=\"string\">\"   -D \"</span> + TableInputFormat.SCAN_ROW_START</span><br><span class=\"line\">                + <span class=\"string\">\"=&lt;CompanyID(Short),DeviceID(Short),yyyy-MM-dd(String)&gt;\"</span>);</span><br><span class=\"line\">        System.err.println(<span class=\"string\">\"   -D \"</span> + TableInputFormat.SCAN_ROW_STOP</span><br><span class=\"line\">                + <span class=\"string\">\"=&lt;CompanyID(Short),DeviceID(Short),yyyy-MM-dd(String)&gt;\"</span>);</span><br><span class=\"line\">        System.err</span><br><span class=\"line\">                .println(<span class=\"string\">\"For performance consider the following properties:\\n\"</span></span><br><span class=\"line\">                        + <span class=\"string\">\"   -Dhbase.client.scanner.caching=100\\n\"</span></span><br><span class=\"line\">                        + <span class=\"string\">\"   -Dmapreduce.map.speculative=false\\n\"</span></span><br><span class=\"line\">                        + <span class=\"string\">\"   -Dmapreduce.reduce.speculative=false\"</span>);</span><br><span class=\"line\">        System.err</span><br><span class=\"line\">                .println(<span class=\"string\">\"For tables with very wide rows consider setting the batch size as below:\\n\"</span></span><br><span class=\"line\">                        + <span class=\"string\">\"   -D\"</span> + EXPORT_BATCHING + <span class=\"string\">\"=10\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Main entry point.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> args</span></span><br><span class=\"line\"><span class=\"comment\">     *            The command line parameters.</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> Exception</span></span><br><span class=\"line\"><span class=\"comment\">     *             When running the job fails.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        System.setProperty(<span class=\"string\">\"HADOOP_USER_NAME\"</span>, <span class=\"string\">\"hdfs\"</span>);</span><br><span class=\"line\">        UnixSystem us = <span class=\"keyword\">new</span> UnixSystem();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Unix Username : \"</span> + us.getUsername());</span><br><span class=\"line\">        <span class=\"comment\">// -----------------------------------------------------</span></span><br><span class=\"line\">        Configuration conf = HBaseConfiguration.create();</span><br><span class=\"line\">        String[] otherArgs = <span class=\"keyword\">new</span> GenericOptionsParser(conf, args)</span><br><span class=\"line\">                .getRemainingArgs();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (otherArgs.length &lt; <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">            usage(<span class=\"string\">\"Wrong number of arguments: \"</span> + otherArgs.length);</span><br><span class=\"line\">            System.exit(-<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// Check StartRow And StopRow</span></span><br><span class=\"line\">        String rowStart = conf.get(TableInputFormat.SCAN_ROW_START);</span><br><span class=\"line\">        String rowStop = conf.get(TableInputFormat.SCAN_ROW_STOP);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(rowStart == <span class=\"keyword\">null</span> &amp;&amp; rowStop == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// do nothing</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(rowStart != <span class=\"keyword\">null</span> &amp;&amp; rowStop != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// check rowStart</span></span><br><span class=\"line\">                String strToCheck[] = rowStart.split(<span class=\"string\">\",\"</span>);</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    Short.valueOf(strToCheck[<span class=\"number\">0</span>]);</span><br><span class=\"line\">                    Short.valueOf(strToCheck[<span class=\"number\">1</span>]);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                    usage(<span class=\"string\">\"String parsed to Short error ! Wrong argument of \"</span> + TableInputFormat.SCAN_ROW_START + <span class=\"string\">\" : \"</span> + rowStart);</span><br><span class=\"line\">                    System.exit(-<span class=\"number\">1</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    format.parse(strToCheck[<span class=\"number\">2</span>]);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                    usage(<span class=\"string\">\"yyyy-MM-dd String parsed to Date error ! Wrong argument of \"</span> + TableInputFormat.SCAN_ROW_START + <span class=\"string\">\" : \"</span> + rowStart);</span><br><span class=\"line\">                    System.exit(-<span class=\"number\">1</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">// check rowStop</span></span><br><span class=\"line\">                strToCheck = rowStop.split(<span class=\"string\">\",\"</span>);</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    Short.valueOf(strToCheck[<span class=\"number\">0</span>]);</span><br><span class=\"line\">                    Short.valueOf(strToCheck[<span class=\"number\">1</span>]);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                    usage(<span class=\"string\">\"String parsed to Short error ! Wrong argument of \"</span> + TableInputFormat.SCAN_ROW_STOP + <span class=\"string\">\" : \"</span> + rowStop);</span><br><span class=\"line\">                    System.exit(-<span class=\"number\">1</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    format.parse(strToCheck[<span class=\"number\">2</span>]);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                    usage(<span class=\"string\">\"yyyy-MM-dd String parsed to Date error ! Wrong argument of \"</span> + TableInputFormat.SCAN_ROW_STOP + <span class=\"string\">\" : \"</span> + rowStop);</span><br><span class=\"line\">                    System.exit(-<span class=\"number\">1</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                usage(TableInputFormat.SCAN_ROW_START + <span class=\"string\">\" and \"</span> + TableInputFormat.SCAN_ROW_STOP + <span class=\"string\">\" must both not be null.\"</span>);</span><br><span class=\"line\">                System.exit(-<span class=\"number\">1</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Job job = createSubmittableJob(conf, otherArgs);</span><br><span class=\"line\">        System.exit(job.waitForCompletion(<span class=\"keyword\">true</span>) ? <span class=\"number\">0</span> : <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>HBase如何增量备份数据呢？</p>","more":"<h2 id=\"传统的Export不支持自定义rowkey增量数据导出\"><a href=\"#传统的Export不支持自定义rowkey增量数据导出\" class=\"headerlink\" title=\"传统的Export不支持自定义rowkey增量数据导出\"></a>传统的Export不支持自定义rowkey增量数据导出</h2><p>导出语法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hbase org.apache.hadoop.hbase.mapreduce.Export your_hbase_table_name your_hdfs_file_path</span><br></pre></td></tr></table></figure>\n<p>下面简单介绍如何实现自定义rowkey增量导出HBase数据。</p>\n<!--more-->\n<h2 id=\"运行环境\"><a href=\"#运行环境\" class=\"headerlink\" title=\"运行环境\"></a>运行环境</h2><p>笔者的hadoop+hbase环境如下：</p>\n<p>$ <code>hadoop version</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hadoop 2.6.0-cdh5.4.3</span><br><span class=\"line\">Subversion http://github.com/cloudera/hadoop -r 4cd9f51a3f1ef748d45b8d77d0f211ad44296d4b</span><br><span class=\"line\">Compiled by jenkins on 2015-06-25T02:34Z</span><br><span class=\"line\">Compiled with protoc 2.5.0</span><br><span class=\"line\">From source with checksum 4acea6ac185376e0b48b33695e88e7a7</span><br><span class=\"line\">This command was run using /opt/cloudera/parcels/CDH-5.4.3-1.cdh5.4.3.p0.6/jars/hadoop-common-2.6.0-cdh5.4.3.jar</span><br></pre></td></tr></table></figure>\n<p>$ <code>hbase version</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Java HotSpot(TM) 64-Bit Server VM warning: Using incremental CMS is deprecated and will likely be removed in a future release</span><br><span class=\"line\">16/06/04 13:13:30 INFO util.VersionInfo: HBase 1.0.0-cdh5.4.3</span><br><span class=\"line\">16/06/04 13:13:30 INFO util.VersionInfo: Source code repository file:///data/jenkins/workspace/generic-package-ubuntu64-12-04/CDH5.4.3-Packaging-HBase-2015-06-24_19-16-53/hbase-1.0.0+cdh5.4.3+159-1.cdh5.4.3.p0.9~precise revision=Unknown</span><br><span class=\"line\">16/06/04 13:13:30 INFO util.VersionInfo: Compiled by jenkins on Wed Jun 24 19:32:40 PDT 2015</span><br><span class=\"line\">16/06/04 13:13:30 INFO util.VersionInfo: From source with checksum d5809febb1e487265280a25f5c74202e</span><br></pre></td></tr></table></figure>\n<h2 id=\"如何定制自己的Export实现自定义rowkey增量数据导出\"><a href=\"#如何定制自己的Export实现自定义rowkey增量数据导出\" class=\"headerlink\" title=\"如何定制自己的Export实现自定义rowkey增量数据导出\"></a>如何定制自己的Export实现自定义rowkey增量数据导出</h2><p>首先，你需要找到源码org.apache.hadoop.hbase.mapreduce.Export.java，修改它为你想要的，并将其上传到具备hadoop+hbase环境的机器上；</p>\n<p>紧接着，运行如下语句：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 编译并打包</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> HADOOP_CLASSPATH=$(hbase classpath)</span><br><span class=\"line\">hadoop com.sun.tools.javac.Main Export.java</span><br><span class=\"line\">jar cf Export.jar Export.class</span><br><span class=\"line\"><span class=\"comment\"># 准备好hdfs路径</span></span><br><span class=\"line\">su</span><br><span class=\"line\">su hdfs -c <span class=\"string\">'hdfs dfs -mkdir /backup'</span></span><br><span class=\"line\">su hdfs -c <span class=\"string\">'hdfs dfs -mkdir /backup/20160512'</span></span><br><span class=\"line\">su hdfs -c <span class=\"string\">'hdfs dfs -ls  /'</span></span><br><span class=\"line\"><span class=\"comment\"># 使用jar包</span></span><br><span class=\"line\"><span class=\"comment\">## 兼容传统Export</span></span><br><span class=\"line\">hadoop jar Export.jar Export group_hour /backup/20160512/group_hour</span><br><span class=\"line\"><span class=\"comment\">## 实现了自定义rowkey解析</span></span><br><span class=\"line\">hadoop jar Export.jar Export -D hbase.mapreduce.scan.row.start=1,9,2016-05-01 -D hbase.mapreduce.scan.row.stop=1,9,2015-05-02 group_hour /backup/20160512/group_hour_rowkey</span><br></pre></td></tr></table></figure>\n<p>上述命令执行成功后，就可执行<code>hdfs dfs -get your_hdfs_filepath your_filesystem_filepath</code>取得你的导出数据啦！</p>\n<p>笔者修改后的Export.java如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Licensed to the Apache Software Foundation (ASF) under one</span></span><br><span class=\"line\"><span class=\"comment\"> * or more contributor license agreements.  See the NOTICE file</span></span><br><span class=\"line\"><span class=\"comment\"> * distributed with this work for additional information</span></span><br><span class=\"line\"><span class=\"comment\"> * regarding copyright ownership.  The ASF licenses this file</span></span><br><span class=\"line\"><span class=\"comment\"> * to you under the Apache License, Version 2.0 (the</span></span><br><span class=\"line\"><span class=\"comment\"> * \"License\"); you may not use this file except in compliance</span></span><br><span class=\"line\"><span class=\"comment\"> * with the License.  You may obtain a copy of the License at</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *     http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Unless required by applicable law or agreed to in writing, software</span></span><br><span class=\"line\"><span class=\"comment\"> * distributed under the License is distributed on an \"AS IS\" BASIS,</span></span><br><span class=\"line\"><span class=\"comment\"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class=\"line\"><span class=\"comment\"> * See the License for the specific language governing permissions and</span></span><br><span class=\"line\"><span class=\"comment\"> * limitations under the License.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.text.DateFormat;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.text.ParseException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.text.SimpleDateFormat;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.sun.security.auth.<span class=\"keyword\">module</span>.UnixSystem;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.logging.Log;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.logging.LogFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.hbase.classification.InterfaceAudience;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.hbase.classification.InterfaceStability;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.fs.Path;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.hbase.HBaseConfiguration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.hbase.client.Result;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.hbase.client.Scan;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.hbase.filter.CompareFilter.CompareOp;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.hbase.filter.Filter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.hbase.filter.IncompatibleFilterException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.hbase.filter.PrefixFilter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.hbase.filter.RegexStringComparator;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.hbase.filter.RowFilter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.hbase.io.ImmutableBytesWritable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.hbase.mapreduce.IdentityTableMapper;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.hbase.mapreduce.TableInputFormat;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.hbase.util.Bytes;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.mapreduce.Job;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.mapreduce.lib.output.SequenceFileOutputFormat;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.util.GenericOptionsParser;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Export an HBase table. Writes content to sequence files up in HDFS. Use</span></span><br><span class=\"line\"><span class=\"comment\"> * &#123;<span class=\"doctag\">@link</span> Import&#125; to read it back in again.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@InterfaceAudience</span>.Public</span><br><span class=\"line\"><span class=\"meta\">@InterfaceStability</span>.Stable</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Export</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Log LOG = LogFactory.getLog(Export.class);</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> String NAME = <span class=\"string\">\"export\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> String RAW_SCAN = <span class=\"string\">\"hbase.mapreduce.include.deleted.rows\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> String EXPORT_BATCHING = <span class=\"string\">\"hbase.export.scanner.batch\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> DateFormat format = <span class=\"keyword\">new</span> SimpleDateFormat(<span class=\"string\">\"yyyy-MM-dd\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Sets up the actual job.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> conf</span></span><br><span class=\"line\"><span class=\"comment\">     *            The current configuration.</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> args</span></span><br><span class=\"line\"><span class=\"comment\">     *            The command line parameters.</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> The newly created job.</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> IOException</span></span><br><span class=\"line\"><span class=\"comment\">     *             When setting up the job fails.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Job <span class=\"title\">createSubmittableJob</span><span class=\"params\">(Configuration conf, String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">            <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        String tableName = args[<span class=\"number\">0</span>];</span><br><span class=\"line\">        Path outputDir = <span class=\"keyword\">new</span> Path(args[<span class=\"number\">1</span>]);</span><br><span class=\"line\">        Job job = <span class=\"keyword\">new</span> Job(conf, NAME + <span class=\"string\">\"_\"</span> + tableName);</span><br><span class=\"line\">        job.setJobName(NAME + <span class=\"string\">\"_\"</span> + tableName);</span><br><span class=\"line\">        job.setJarByClass(Export.class);</span><br><span class=\"line\">        job.setUser(<span class=\"string\">\"hdfs\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">// Set optional scan parameters</span></span><br><span class=\"line\">        Scan s = getConfiguredScanForJob(conf, args);</span><br><span class=\"line\">        IdentityTableMapper.initJob(tableName, s, IdentityTableMapper.class,</span><br><span class=\"line\">                job);</span><br><span class=\"line\">        <span class=\"comment\">// No reducers. Just write straight to output files.</span></span><br><span class=\"line\">        job.setNumReduceTasks(<span class=\"number\">0</span>);</span><br><span class=\"line\">        job.setOutputFormatClass(SequenceFileOutputFormat.class);</span><br><span class=\"line\">        job.setOutputKeyClass(ImmutableBytesWritable.class);</span><br><span class=\"line\">        job.setOutputValueClass(Result.class);</span><br><span class=\"line\">        FileOutputFormat.setOutputPath(job, outputDir); <span class=\"comment\">// job conf doesn't</span></span><br><span class=\"line\">                                                        <span class=\"comment\">// contain the conf so</span></span><br><span class=\"line\">                                                        <span class=\"comment\">// doesn't have a</span></span><br><span class=\"line\">                                                        <span class=\"comment\">// default fs.</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> job;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Scan <span class=\"title\">getConfiguredScanForJob</span><span class=\"params\">(Configuration conf,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">            String[] args)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        Scan s = <span class=\"keyword\">new</span> Scan();</span><br><span class=\"line\">        <span class=\"comment\">// Optional arguments.</span></span><br><span class=\"line\">        <span class=\"comment\">// Set Scan Versions</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> versions = args.length &gt; <span class=\"number\">2</span> ? Integer.parseInt(args[<span class=\"number\">2</span>]) : <span class=\"number\">1</span>;</span><br><span class=\"line\">        s.setMaxVersions(versions);</span><br><span class=\"line\">        <span class=\"comment\">// Set Scan Range</span></span><br><span class=\"line\">        <span class=\"keyword\">long</span> startTime = args.length &gt; <span class=\"number\">3</span> ? Long.parseLong(args[<span class=\"number\">3</span>]) : <span class=\"number\">0L</span>;</span><br><span class=\"line\">        <span class=\"keyword\">long</span> endTime = args.length &gt; <span class=\"number\">4</span> ? Long.parseLong(args[<span class=\"number\">4</span>])</span><br><span class=\"line\">                : Long.MAX_VALUE;</span><br><span class=\"line\">        s.setTimeRange(startTime, endTime);</span><br><span class=\"line\">        <span class=\"comment\">// Set cache blocks</span></span><br><span class=\"line\">        s.setCacheBlocks(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">        <span class=\"comment\">// set Start and Stop row</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (conf.get(TableInputFormat.SCAN_ROW_START) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            String rowStart[] = conf.get(TableInputFormat.SCAN_ROW_START).split(<span class=\"string\">\",\"</span>);</span><br><span class=\"line\">            Short companyID = Short.valueOf(rowStart[<span class=\"number\">0</span>]);</span><br><span class=\"line\">            Short deviceID = Short.valueOf(rowStart[<span class=\"number\">1</span>]);</span><br><span class=\"line\">            Long insertTime = <span class=\"number\">0l</span>;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                insertTime = format.parse(rowStart[<span class=\"number\">2</span>]).getTime();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (ParseException e) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// ignore</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            s.setStartRow(Bytes.add(Bytes.toBytes(companyID),</span><br><span class=\"line\">                    Bytes.toBytes(deviceID), Bytes.toBytes(insertTime)));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (conf.get(TableInputFormat.SCAN_ROW_STOP) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            String rowStop[] = conf.get(TableInputFormat.SCAN_ROW_STOP).split(<span class=\"string\">\",\"</span>);</span><br><span class=\"line\">            Short companyID = Short.valueOf(rowStop[<span class=\"number\">0</span>]);</span><br><span class=\"line\">            Short deviceID = Short.valueOf(rowStop[<span class=\"number\">1</span>]);</span><br><span class=\"line\">            Long insertTime = <span class=\"number\">0l</span>;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                insertTime = format.parse(rowStop[<span class=\"number\">2</span>]).getTime();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (ParseException e) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// ignore</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            s.setStopRow(Bytes.add(Bytes.toBytes(companyID),</span><br><span class=\"line\">                    Bytes.toBytes(deviceID), Bytes.toBytes(insertTime)));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// Set Scan Column Family</span></span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> raw = Boolean.parseBoolean(conf.get(RAW_SCAN));</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (raw) &#123;</span><br><span class=\"line\">            s.setRaw(raw);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (conf.get(TableInputFormat.SCAN_COLUMN_FAMILY) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            s.addFamily(Bytes.toBytes(conf</span><br><span class=\"line\">                    .get(TableInputFormat.SCAN_COLUMN_FAMILY)));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// Set RowFilter or Prefix Filter if applicable.</span></span><br><span class=\"line\">        Filter exportFilter = getExportFilter(args);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (exportFilter != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            LOG.info(<span class=\"string\">\"Setting Scan Filter for Export.\"</span>);</span><br><span class=\"line\">            s.setFilter(exportFilter);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> batching = conf.getInt(EXPORT_BATCHING, -<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (batching != -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                s.setBatch(batching);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (IncompatibleFilterException e) &#123;</span><br><span class=\"line\">                LOG.error(<span class=\"string\">\"Batching could not be set\"</span>, e);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        StringBuffer sb = <span class=\"keyword\">new</span> StringBuffer(<span class=\"string\">\"versions=\"</span> + versions + <span class=\"string\">\", starttime=\"</span> + startTime</span><br><span class=\"line\">                + <span class=\"string\">\", endtime=\"</span> + endTime + <span class=\"string\">\", keepDeletedCells=\"</span> + raw);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (conf.get(TableInputFormat.SCAN_ROW_START) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            sb.append(<span class=\"string\">\", startRow=\"</span> + conf.get(TableInputFormat.SCAN_ROW_START));</span><br><span class=\"line\">            sb.append(<span class=\"string\">\", stopRow=\"</span> + conf.get(TableInputFormat.SCAN_ROW_STOP));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        LOG.info(sb.toString());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Filter <span class=\"title\">getExportFilter</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Filter exportFilter = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        String filterCriteria = (args.length &gt; <span class=\"number\">5</span>) ? args[<span class=\"number\">5</span>] : <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (filterCriteria == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (filterCriteria.startsWith(<span class=\"string\">\"^\"</span>)) &#123;</span><br><span class=\"line\">            String regexPattern = filterCriteria.substring(<span class=\"number\">1</span>,</span><br><span class=\"line\">                    filterCriteria.length());</span><br><span class=\"line\">            exportFilter = <span class=\"keyword\">new</span> RowFilter(CompareOp.EQUAL,</span><br><span class=\"line\">                    <span class=\"keyword\">new</span> RegexStringComparator(regexPattern));</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            exportFilter = <span class=\"keyword\">new</span> PrefixFilter(Bytes.toBytes(filterCriteria));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> exportFilter;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * @param errorMsg Error message. Can be null.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">usage</span><span class=\"params\">(<span class=\"keyword\">final</span> String errorMsg)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (errorMsg != <span class=\"keyword\">null</span> &amp;&amp; errorMsg.length() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            System.err.println(<span class=\"string\">\"ERROR: \"</span> + errorMsg);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.err</span><br><span class=\"line\">                .println(<span class=\"string\">\"Usage: Export [-D &lt;property=value&gt;]* &lt;tablename&gt; &lt;outputdir&gt; [&lt;versions&gt; \"</span></span><br><span class=\"line\">                        + <span class=\"string\">\"[&lt;starttime&gt; [&lt;endtime&gt;]] [^[regex pattern] or [Prefix] to filter]]\\n\"</span>);</span><br><span class=\"line\">        System.err</span><br><span class=\"line\">                .println(<span class=\"string\">\"  Note: -D properties will be applied to the conf used. \"</span>);</span><br><span class=\"line\">        System.err.println(<span class=\"string\">\"  For example: \"</span>);</span><br><span class=\"line\">        System.err</span><br><span class=\"line\">                .println(<span class=\"string\">\"   -D mapreduce.output.fileoutputformat.compress=true\"</span>);</span><br><span class=\"line\">        System.err</span><br><span class=\"line\">                .println(<span class=\"string\">\"   -D mapreduce.output.fileoutputformat.compress.codec=org.apache.hadoop.io.compress.GzipCodec\"</span>);</span><br><span class=\"line\">        System.err</span><br><span class=\"line\">                .println(<span class=\"string\">\"   -D mapreduce.output.fileoutputformat.compress.type=BLOCK\"</span>);</span><br><span class=\"line\">        System.err</span><br><span class=\"line\">                .println(<span class=\"string\">\"  Additionally, the following SCAN properties can be specified\"</span>);</span><br><span class=\"line\">        System.err.println(<span class=\"string\">\"  to control/limit what is exported..\"</span>);</span><br><span class=\"line\">        System.err.println(<span class=\"string\">\"   -D \"</span> + TableInputFormat.SCAN_COLUMN_FAMILY</span><br><span class=\"line\">                + <span class=\"string\">\"=&lt;familyName&gt;\"</span>);</span><br><span class=\"line\">        System.err.println(<span class=\"string\">\"   -D \"</span> + RAW_SCAN + <span class=\"string\">\"=true\"</span>);</span><br><span class=\"line\">        System.err.println(<span class=\"string\">\"   -D \"</span> + TableInputFormat.SCAN_ROW_START</span><br><span class=\"line\">                + <span class=\"string\">\"=&lt;CompanyID(Short),DeviceID(Short),yyyy-MM-dd(String)&gt;\"</span>);</span><br><span class=\"line\">        System.err.println(<span class=\"string\">\"   -D \"</span> + TableInputFormat.SCAN_ROW_STOP</span><br><span class=\"line\">                + <span class=\"string\">\"=&lt;CompanyID(Short),DeviceID(Short),yyyy-MM-dd(String)&gt;\"</span>);</span><br><span class=\"line\">        System.err</span><br><span class=\"line\">                .println(<span class=\"string\">\"For performance consider the following properties:\\n\"</span></span><br><span class=\"line\">                        + <span class=\"string\">\"   -Dhbase.client.scanner.caching=100\\n\"</span></span><br><span class=\"line\">                        + <span class=\"string\">\"   -Dmapreduce.map.speculative=false\\n\"</span></span><br><span class=\"line\">                        + <span class=\"string\">\"   -Dmapreduce.reduce.speculative=false\"</span>);</span><br><span class=\"line\">        System.err</span><br><span class=\"line\">                .println(<span class=\"string\">\"For tables with very wide rows consider setting the batch size as below:\\n\"</span></span><br><span class=\"line\">                        + <span class=\"string\">\"   -D\"</span> + EXPORT_BATCHING + <span class=\"string\">\"=10\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Main entry point.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> args</span></span><br><span class=\"line\"><span class=\"comment\">     *            The command line parameters.</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> Exception</span></span><br><span class=\"line\"><span class=\"comment\">     *             When running the job fails.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        System.setProperty(<span class=\"string\">\"HADOOP_USER_NAME\"</span>, <span class=\"string\">\"hdfs\"</span>);</span><br><span class=\"line\">        UnixSystem us = <span class=\"keyword\">new</span> UnixSystem();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Unix Username : \"</span> + us.getUsername());</span><br><span class=\"line\">        <span class=\"comment\">// -----------------------------------------------------</span></span><br><span class=\"line\">        Configuration conf = HBaseConfiguration.create();</span><br><span class=\"line\">        String[] otherArgs = <span class=\"keyword\">new</span> GenericOptionsParser(conf, args)</span><br><span class=\"line\">                .getRemainingArgs();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (otherArgs.length &lt; <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">            usage(<span class=\"string\">\"Wrong number of arguments: \"</span> + otherArgs.length);</span><br><span class=\"line\">            System.exit(-<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// Check StartRow And StopRow</span></span><br><span class=\"line\">        String rowStart = conf.get(TableInputFormat.SCAN_ROW_START);</span><br><span class=\"line\">        String rowStop = conf.get(TableInputFormat.SCAN_ROW_STOP);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(rowStart == <span class=\"keyword\">null</span> &amp;&amp; rowStop == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// do nothing</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(rowStart != <span class=\"keyword\">null</span> &amp;&amp; rowStop != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// check rowStart</span></span><br><span class=\"line\">                String strToCheck[] = rowStart.split(<span class=\"string\">\",\"</span>);</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    Short.valueOf(strToCheck[<span class=\"number\">0</span>]);</span><br><span class=\"line\">                    Short.valueOf(strToCheck[<span class=\"number\">1</span>]);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                    usage(<span class=\"string\">\"String parsed to Short error ! Wrong argument of \"</span> + TableInputFormat.SCAN_ROW_START + <span class=\"string\">\" : \"</span> + rowStart);</span><br><span class=\"line\">                    System.exit(-<span class=\"number\">1</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    format.parse(strToCheck[<span class=\"number\">2</span>]);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                    usage(<span class=\"string\">\"yyyy-MM-dd String parsed to Date error ! Wrong argument of \"</span> + TableInputFormat.SCAN_ROW_START + <span class=\"string\">\" : \"</span> + rowStart);</span><br><span class=\"line\">                    System.exit(-<span class=\"number\">1</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">// check rowStop</span></span><br><span class=\"line\">                strToCheck = rowStop.split(<span class=\"string\">\",\"</span>);</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    Short.valueOf(strToCheck[<span class=\"number\">0</span>]);</span><br><span class=\"line\">                    Short.valueOf(strToCheck[<span class=\"number\">1</span>]);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                    usage(<span class=\"string\">\"String parsed to Short error ! Wrong argument of \"</span> + TableInputFormat.SCAN_ROW_STOP + <span class=\"string\">\" : \"</span> + rowStop);</span><br><span class=\"line\">                    System.exit(-<span class=\"number\">1</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    format.parse(strToCheck[<span class=\"number\">2</span>]);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                    usage(<span class=\"string\">\"yyyy-MM-dd String parsed to Date error ! Wrong argument of \"</span> + TableInputFormat.SCAN_ROW_STOP + <span class=\"string\">\" : \"</span> + rowStop);</span><br><span class=\"line\">                    System.exit(-<span class=\"number\">1</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                usage(TableInputFormat.SCAN_ROW_START + <span class=\"string\">\" and \"</span> + TableInputFormat.SCAN_ROW_STOP + <span class=\"string\">\" must both not be null.\"</span>);</span><br><span class=\"line\">                System.exit(-<span class=\"number\">1</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Job job = createSubmittableJob(conf, otherArgs);</span><br><span class=\"line\">        System.exit(job.waitForCompletion(<span class=\"keyword\">true</span>) ? <span class=\"number\">0</span> : <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"layout":"post","title":"多对一autossh隧道管理","date":"2016-06-22T13:05:00.000Z","comments":1,"_content":"\n笔者的云端主机开放了两个端口，一个为SSH端口（假定为62638），一个为应用程序TCP端口（假定为62639，长连接），现有多个客户端连接到应用程序TCP端口进行数据通信，但假如我想通过云主机远程到某一个客户进行调试，该如何实现呢？\n\n<!--more-->\n\n这里就需要用到autossh了，简要介绍其思路：客户安装配置autossh，主动去连接云端主机建立autossh隧道，**此隧道在云端主机有一个对端端口**，云端主机直接ssh此端口就会到达隧道的另一端——客户端。\n\n具体实现过程如下，注意：\n1. 下文的bbblack是客户端用于登入云端主机的普通账户；\n2. 125.94.212.178为云端主机公网IP；\n\n## 客户端配置autossh\n\n1. 编辑/etc/ssh/ssh_config，修改`StrictHostKeyChecking ask`为`StrictHostKeyChecking no`并去除其前面的注释；\n2. 执行ssh-keygen得id_rsa.pub，将id_rsa.pub上传到云主机的/home/bbblack/.ssh/customer_name_authorized_keys（**customer_name_authorized_keys为客户名称开头，加_上authorized_keys为后缀**）；\n3. 安装autossh；\n4. crontab配置每5分钟执行一次以下脚本（autossh.sh），\n\n```bash\n#!/bin/sh\n# 隧道在云主机的对端是1235端口，在客户端是22端口（ssh的默认端口）\ntokeep=1235:localhost:22\n# 检测此连接是否存在，否则建立autossh连接\nif $(/bin/ps ax|grep $tokeep|grep -v \"grep\" > /dev/null)\nthen\n    echo \"ok\" > /dev/null\nelse\n    # autossh本身会去检测并维持隧道的长连接\n    /usr/bin/autossh -M 1234 -NR 1235:localhost:22 bbblack@125.94.212.178 -p62638 > /root/autossh.log 2>&1 &\nfi\nexit 0\n```\n\n## 云端配置autossh\n\n1. 编辑/etc/ssh/ssh_config，修改`StrictHostKeyChecking ask`为`StrictHostKeyChecking no`并去除其前面的注释；\n2. 编辑/etc/ssh/sshd_config，修改`AuthorizedKeysFile`配置项为`AuthorizedKeysFile      .ssh/authorized_keys`，若上文的customer_name_authorized_keys与.ssh/authorized_keys内容相同，则客户端无需输入密码通过authorized_keys就能连接上云端；\n\n### 在只有一个客户的情况下\n\n将上文的customer_name重命名为authorized_keys，过一会客户端就会连接上云端，使用`lsof -i:1235`可查看连接建立情况，使用`ssh -p1235 user_name@localhost`可登录到客户端（**user_name为客户端的linux user name**）；\n\n### 在有多个客户的情况下\n\n最简单的一种方案是：使每条隧道的云端主机对端端口唯一，也就是每个客户的隧道互相独立，但如果客户太多，会将云端的端口耗尽。笔者想要的效果是所有客户共用一个云端对端端口，即一次只有一条隧道，一次只能远程登录到一个客户。那么问题来了？如何实现？\n\n使用下述脚本（autossh-helper.sh）即可解决上述问题，\n\n```bash\n#!/bin/sh\n\nfilepath=$1\nport1=1235\n\n[ $# -eq 0 ] && { echo \"Usage: $0 authorized_keys_filepath\"; exit 999; }\n\nif [ -f \"$filepath\" ] ; then\n    # kill 1235\n    pid=$(lsof -i:$port1 -t)\n    echo $pid|while read line\n    do\n        if [ \"\" != \"$line\" ] ; then\n            $(kill $line)\n        fi\n    done\n\n    # clear known_hosts\n    echo > /home/bbblack/.ssh/known_hosts\n\n    # authorized_keys changed\n    cp $filepath /home/bbblack/.ssh/authorized_keys\n    echo \"done ...\"\nelse\n    echo \"$filepath not exists ...\"\nfi\n\nexit 0\n```\n\n**FIXME** \n但是，以非root用户bbblack使用上述脚本有个问题，它需要定位出绑定在1235的pid号是多少，而1235是由sshd进程以bbblack用户在隧道建立时绑定的，这时候不管使用`lsof`还是`netstat`都无法在bbblack用户下定位出绑定在1235的pid号是多少（原因未知）。所以需要配置lsof为setuid程序（有何安全隐患？），root用户运行`chmod u+s /usr/bin/lsof`即可。\n\n接着，以bbblack账户（无需root用户）运行`./autossh-helper.sh customer_name_authorized_keys`（customer_name_authorized_keys为上文提到的文件）即可实现客户切换，其原理无非是一次只有一个客户独占ssh的authorized_keys，其他没有独占的客户由于不满足ssh登入的条件因而无法建立隧道。\n\n但是问题到这里还没有结束，云端的主机由于安全的需要一般都会配置denyhosts，denyhosts会不断检查ssh日志的失败记录，把那些连续失败多次的IP记为黑名单（ssh不可用），于是会出现这样一个现象，即使你运行了上述的autossh-helper.sh切换客户，依然还是没有客户建立隧道，这就是因为该客户所在公网IP被加入黑名单的原因。\n\n有什么解决办法呢？这时候我们的应用程序TCP端口（假定为62639，长连接）派上了用场。这里我们假设，该客户所在公网IP虽然被加入黑名单，但应用程序TCP端口（假定为62639，长连接）依然正常，因为云端和客户端需要源源不断的交互数据，此端口为长连接。若不满足此假设，则以下解决方案无效。\n\n解决方法就是，在执行autossh-helper.sh前，将与云端应用程序正常通信的客户端公网IP从黑名单解除即可。即在执行autossh-helper.sh前，必须先以**root用户**（因为denyhosts需要以root用户执行，这是个遗憾）执行脚本如下（public-ip-helper.sh）：\n\n```bash\n#!/bin/sh\n\nif [ `whoami` = \"root\" ]; then\n    echo \"\" > /dev/null\nelse\n    echo \"please login as root !\"\n    exit 1\nfi\n\ntokill=/usr/bin/denyhosts\n/bin/ps ax|grep $tokill|grep -v \"grep\"|awk '{print $1}'|while read line\ndo\n    kill $line\ndone\n\nnetstat -npt|grep 62639|cut -d \":\" -f2|cut -d \":\" -f1|while read str\ndo\nHOST=${str##* }\necho $HOST >> /usr/share/denyhosts/allowed-hosts\necho '\n/etc/hosts.deny\n/usr/share/denyhosts/data/hosts\n/usr/share/denyhosts/data/hosts-restricted\n/usr/share/denyhosts/data/hosts-root\n/usr/share/denyhosts/data/hosts-valid\n/usr/share/denyhosts/data/users-hosts\n' | grep -v \"^$\" | xargs sed -i \"/${HOST}/d\"\ndone\n\n/etc/init.d/denyhosts start\n```\n","source":"_posts/2016-06-22-autossh-helper.markdown","raw":"---\nlayout: post\ntitle: 多对一autossh隧道管理\ndate: '2016-06-22 21:05'\ncomments: true\ncategories: ['编程实践']  \ntags: ['Linux', '内网穿透']\n---\n\n笔者的云端主机开放了两个端口，一个为SSH端口（假定为62638），一个为应用程序TCP端口（假定为62639，长连接），现有多个客户端连接到应用程序TCP端口进行数据通信，但假如我想通过云主机远程到某一个客户进行调试，该如何实现呢？\n\n<!--more-->\n\n这里就需要用到autossh了，简要介绍其思路：客户安装配置autossh，主动去连接云端主机建立autossh隧道，**此隧道在云端主机有一个对端端口**，云端主机直接ssh此端口就会到达隧道的另一端——客户端。\n\n具体实现过程如下，注意：\n1. 下文的bbblack是客户端用于登入云端主机的普通账户；\n2. 125.94.212.178为云端主机公网IP；\n\n## 客户端配置autossh\n\n1. 编辑/etc/ssh/ssh_config，修改`StrictHostKeyChecking ask`为`StrictHostKeyChecking no`并去除其前面的注释；\n2. 执行ssh-keygen得id_rsa.pub，将id_rsa.pub上传到云主机的/home/bbblack/.ssh/customer_name_authorized_keys（**customer_name_authorized_keys为客户名称开头，加_上authorized_keys为后缀**）；\n3. 安装autossh；\n4. crontab配置每5分钟执行一次以下脚本（autossh.sh），\n\n```bash\n#!/bin/sh\n# 隧道在云主机的对端是1235端口，在客户端是22端口（ssh的默认端口）\ntokeep=1235:localhost:22\n# 检测此连接是否存在，否则建立autossh连接\nif $(/bin/ps ax|grep $tokeep|grep -v \"grep\" > /dev/null)\nthen\n    echo \"ok\" > /dev/null\nelse\n    # autossh本身会去检测并维持隧道的长连接\n    /usr/bin/autossh -M 1234 -NR 1235:localhost:22 bbblack@125.94.212.178 -p62638 > /root/autossh.log 2>&1 &\nfi\nexit 0\n```\n\n## 云端配置autossh\n\n1. 编辑/etc/ssh/ssh_config，修改`StrictHostKeyChecking ask`为`StrictHostKeyChecking no`并去除其前面的注释；\n2. 编辑/etc/ssh/sshd_config，修改`AuthorizedKeysFile`配置项为`AuthorizedKeysFile      .ssh/authorized_keys`，若上文的customer_name_authorized_keys与.ssh/authorized_keys内容相同，则客户端无需输入密码通过authorized_keys就能连接上云端；\n\n### 在只有一个客户的情况下\n\n将上文的customer_name重命名为authorized_keys，过一会客户端就会连接上云端，使用`lsof -i:1235`可查看连接建立情况，使用`ssh -p1235 user_name@localhost`可登录到客户端（**user_name为客户端的linux user name**）；\n\n### 在有多个客户的情况下\n\n最简单的一种方案是：使每条隧道的云端主机对端端口唯一，也就是每个客户的隧道互相独立，但如果客户太多，会将云端的端口耗尽。笔者想要的效果是所有客户共用一个云端对端端口，即一次只有一条隧道，一次只能远程登录到一个客户。那么问题来了？如何实现？\n\n使用下述脚本（autossh-helper.sh）即可解决上述问题，\n\n```bash\n#!/bin/sh\n\nfilepath=$1\nport1=1235\n\n[ $# -eq 0 ] && { echo \"Usage: $0 authorized_keys_filepath\"; exit 999; }\n\nif [ -f \"$filepath\" ] ; then\n    # kill 1235\n    pid=$(lsof -i:$port1 -t)\n    echo $pid|while read line\n    do\n        if [ \"\" != \"$line\" ] ; then\n            $(kill $line)\n        fi\n    done\n\n    # clear known_hosts\n    echo > /home/bbblack/.ssh/known_hosts\n\n    # authorized_keys changed\n    cp $filepath /home/bbblack/.ssh/authorized_keys\n    echo \"done ...\"\nelse\n    echo \"$filepath not exists ...\"\nfi\n\nexit 0\n```\n\n**FIXME** \n但是，以非root用户bbblack使用上述脚本有个问题，它需要定位出绑定在1235的pid号是多少，而1235是由sshd进程以bbblack用户在隧道建立时绑定的，这时候不管使用`lsof`还是`netstat`都无法在bbblack用户下定位出绑定在1235的pid号是多少（原因未知）。所以需要配置lsof为setuid程序（有何安全隐患？），root用户运行`chmod u+s /usr/bin/lsof`即可。\n\n接着，以bbblack账户（无需root用户）运行`./autossh-helper.sh customer_name_authorized_keys`（customer_name_authorized_keys为上文提到的文件）即可实现客户切换，其原理无非是一次只有一个客户独占ssh的authorized_keys，其他没有独占的客户由于不满足ssh登入的条件因而无法建立隧道。\n\n但是问题到这里还没有结束，云端的主机由于安全的需要一般都会配置denyhosts，denyhosts会不断检查ssh日志的失败记录，把那些连续失败多次的IP记为黑名单（ssh不可用），于是会出现这样一个现象，即使你运行了上述的autossh-helper.sh切换客户，依然还是没有客户建立隧道，这就是因为该客户所在公网IP被加入黑名单的原因。\n\n有什么解决办法呢？这时候我们的应用程序TCP端口（假定为62639，长连接）派上了用场。这里我们假设，该客户所在公网IP虽然被加入黑名单，但应用程序TCP端口（假定为62639，长连接）依然正常，因为云端和客户端需要源源不断的交互数据，此端口为长连接。若不满足此假设，则以下解决方案无效。\n\n解决方法就是，在执行autossh-helper.sh前，将与云端应用程序正常通信的客户端公网IP从黑名单解除即可。即在执行autossh-helper.sh前，必须先以**root用户**（因为denyhosts需要以root用户执行，这是个遗憾）执行脚本如下（public-ip-helper.sh）：\n\n```bash\n#!/bin/sh\n\nif [ `whoami` = \"root\" ]; then\n    echo \"\" > /dev/null\nelse\n    echo \"please login as root !\"\n    exit 1\nfi\n\ntokill=/usr/bin/denyhosts\n/bin/ps ax|grep $tokill|grep -v \"grep\"|awk '{print $1}'|while read line\ndo\n    kill $line\ndone\n\nnetstat -npt|grep 62639|cut -d \":\" -f2|cut -d \":\" -f1|while read str\ndo\nHOST=${str##* }\necho $HOST >> /usr/share/denyhosts/allowed-hosts\necho '\n/etc/hosts.deny\n/usr/share/denyhosts/data/hosts\n/usr/share/denyhosts/data/hosts-restricted\n/usr/share/denyhosts/data/hosts-root\n/usr/share/denyhosts/data/hosts-valid\n/usr/share/denyhosts/data/users-hosts\n' | grep -v \"^$\" | xargs sed -i \"/${HOST}/d\"\ndone\n\n/etc/init.d/denyhosts start\n```\n","slug":"autossh-helper","published":1,"updated":"2017-04-09T14:41:00.000Z","photos":[],"link":"","_id":"cjlza6m4r0015pguphh36p543","content":"<p>笔者的云端主机开放了两个端口，一个为SSH端口（假定为62638），一个为应用程序TCP端口（假定为62639，长连接），现有多个客户端连接到应用程序TCP端口进行数据通信，但假如我想通过云主机远程到某一个客户进行调试，该如何实现呢？</p>\n<a id=\"more\"></a>\n<p>这里就需要用到autossh了，简要介绍其思路：客户安装配置autossh，主动去连接云端主机建立autossh隧道，<strong>此隧道在云端主机有一个对端端口</strong>，云端主机直接ssh此端口就会到达隧道的另一端——客户端。</p>\n<p>具体实现过程如下，注意：</p>\n<ol>\n<li>下文的bbblack是客户端用于登入云端主机的普通账户；</li>\n<li>125.94.212.178为云端主机公网IP；</li>\n</ol>\n<h2 id=\"客户端配置autossh\"><a href=\"#客户端配置autossh\" class=\"headerlink\" title=\"客户端配置autossh\"></a>客户端配置autossh</h2><ol>\n<li>编辑/etc/ssh/ssh_config，修改<code>StrictHostKeyChecking ask</code>为<code>StrictHostKeyChecking no</code>并去除其前面的注释；</li>\n<li>执行ssh-keygen得id_rsa.pub，将id_rsa.pub上传到云主机的/home/bbblack/.ssh/customer_name_authorized_keys（<strong>customer_name_authorized_keys为客户名称开头，加_上authorized_keys为后缀</strong>）；</li>\n<li>安装autossh；</li>\n<li>crontab配置每5分钟执行一次以下脚本（autossh.sh），</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/sh</span></span><br><span class=\"line\"><span class=\"comment\"># 隧道在云主机的对端是1235端口，在客户端是22端口（ssh的默认端口）</span></span><br><span class=\"line\">tokeep=1235:localhost:22</span><br><span class=\"line\"><span class=\"comment\"># 检测此连接是否存在，否则建立autossh连接</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> $(/bin/ps ax|grep <span class=\"variable\">$tokeep</span>|grep -v <span class=\"string\">\"grep\"</span> &gt; /dev/null)</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"ok\"</span> &gt; /dev/null</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"comment\"># autossh本身会去检测并维持隧道的长连接</span></span><br><span class=\"line\">    /usr/bin/autossh -M 1234 -NR 1235:localhost:22 bbblack@125.94.212.178 -p62638 &gt; /root/autossh.log 2&gt;&amp;1 &amp;</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"built_in\">exit</span> 0</span><br></pre></td></tr></table></figure>\n<h2 id=\"云端配置autossh\"><a href=\"#云端配置autossh\" class=\"headerlink\" title=\"云端配置autossh\"></a>云端配置autossh</h2><ol>\n<li>编辑/etc/ssh/ssh_config，修改<code>StrictHostKeyChecking ask</code>为<code>StrictHostKeyChecking no</code>并去除其前面的注释；</li>\n<li>编辑/etc/ssh/sshd_config，修改<code>AuthorizedKeysFile</code>配置项为<code>AuthorizedKeysFile      .ssh/authorized_keys</code>，若上文的customer_name_authorized_keys与.ssh/authorized_keys内容相同，则客户端无需输入密码通过authorized_keys就能连接上云端；</li>\n</ol>\n<h3 id=\"在只有一个客户的情况下\"><a href=\"#在只有一个客户的情况下\" class=\"headerlink\" title=\"在只有一个客户的情况下\"></a>在只有一个客户的情况下</h3><p>将上文的customer_name重命名为authorized_keys，过一会客户端就会连接上云端，使用<code>lsof -i:1235</code>可查看连接建立情况，使用<code>ssh -p1235 user_name@localhost</code>可登录到客户端（<strong>user_name为客户端的linux user name</strong>）；</p>\n<h3 id=\"在有多个客户的情况下\"><a href=\"#在有多个客户的情况下\" class=\"headerlink\" title=\"在有多个客户的情况下\"></a>在有多个客户的情况下</h3><p>最简单的一种方案是：使每条隧道的云端主机对端端口唯一，也就是每个客户的隧道互相独立，但如果客户太多，会将云端的端口耗尽。笔者想要的效果是所有客户共用一个云端对端端口，即一次只有一条隧道，一次只能远程登录到一个客户。那么问题来了？如何实现？</p>\n<p>使用下述脚本（autossh-helper.sh）即可解决上述问题，</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/sh</span></span><br><span class=\"line\"></span><br><span class=\"line\">filepath=<span class=\"variable\">$1</span></span><br><span class=\"line\">port1=1235</span><br><span class=\"line\"></span><br><span class=\"line\">[ <span class=\"variable\">$#</span> -eq 0 ] &amp;&amp; &#123; <span class=\"built_in\">echo</span> <span class=\"string\">\"Usage: <span class=\"variable\">$0</span> authorized_keys_filepath\"</span>; <span class=\"built_in\">exit</span> 999; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ -f <span class=\"string\">\"<span class=\"variable\">$filepath</span>\"</span> ] ; <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"comment\"># kill 1235</span></span><br><span class=\"line\">    pid=$(lsof -i:<span class=\"variable\">$port1</span> -t)</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"variable\">$pid</span>|<span class=\"keyword\">while</span> <span class=\"built_in\">read</span> line</span><br><span class=\"line\">    <span class=\"keyword\">do</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> [ <span class=\"string\">\"\"</span> != <span class=\"string\">\"<span class=\"variable\">$line</span>\"</span> ] ; <span class=\"keyword\">then</span></span><br><span class=\"line\">            $(<span class=\"built_in\">kill</span> <span class=\"variable\">$line</span>)</span><br><span class=\"line\">        <span class=\"keyword\">fi</span></span><br><span class=\"line\">    <span class=\"keyword\">done</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># clear known_hosts</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> &gt; /home/bbblack/.ssh/known_hosts</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># authorized_keys changed</span></span><br><span class=\"line\">    cp <span class=\"variable\">$filepath</span> /home/bbblack/.ssh/authorized_keys</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"done ...\"</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$filepath</span> not exists ...\"</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">exit</span> 0</span><br></pre></td></tr></table></figure>\n<p><strong>FIXME</strong><br>但是，以非root用户bbblack使用上述脚本有个问题，它需要定位出绑定在1235的pid号是多少，而1235是由sshd进程以bbblack用户在隧道建立时绑定的，这时候不管使用<code>lsof</code>还是<code>netstat</code>都无法在bbblack用户下定位出绑定在1235的pid号是多少（原因未知）。所以需要配置lsof为setuid程序（有何安全隐患？），root用户运行<code>chmod u+s /usr/bin/lsof</code>即可。</p>\n<p>接着，以bbblack账户（无需root用户）运行<code>./autossh-helper.sh customer_name_authorized_keys</code>（customer_name_authorized_keys为上文提到的文件）即可实现客户切换，其原理无非是一次只有一个客户独占ssh的authorized_keys，其他没有独占的客户由于不满足ssh登入的条件因而无法建立隧道。</p>\n<p>但是问题到这里还没有结束，云端的主机由于安全的需要一般都会配置denyhosts，denyhosts会不断检查ssh日志的失败记录，把那些连续失败多次的IP记为黑名单（ssh不可用），于是会出现这样一个现象，即使你运行了上述的autossh-helper.sh切换客户，依然还是没有客户建立隧道，这就是因为该客户所在公网IP被加入黑名单的原因。</p>\n<p>有什么解决办法呢？这时候我们的应用程序TCP端口（假定为62639，长连接）派上了用场。这里我们假设，该客户所在公网IP虽然被加入黑名单，但应用程序TCP端口（假定为62639，长连接）依然正常，因为云端和客户端需要源源不断的交互数据，此端口为长连接。若不满足此假设，则以下解决方案无效。</p>\n<p>解决方法就是，在执行autossh-helper.sh前，将与云端应用程序正常通信的客户端公网IP从黑名单解除即可。即在执行autossh-helper.sh前，必须先以<strong>root用户</strong>（因为denyhosts需要以root用户执行，这是个遗憾）执行脚本如下（public-ip-helper.sh）：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/sh</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ `whoami` = <span class=\"string\">\"root\"</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"\"</span> &gt; /dev/null</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"please login as root !\"</span></span><br><span class=\"line\">    <span class=\"built_in\">exit</span> 1</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\">tokill=/usr/bin/denyhosts</span><br><span class=\"line\">/bin/ps ax|grep <span class=\"variable\">$tokill</span>|grep -v <span class=\"string\">\"grep\"</span>|awk <span class=\"string\">'&#123;print $1&#125;'</span>|<span class=\"keyword\">while</span> <span class=\"built_in\">read</span> line</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">    <span class=\"built_in\">kill</span> <span class=\"variable\">$line</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\"></span><br><span class=\"line\">netstat -npt|grep 62639|cut -d <span class=\"string\">\":\"</span> -f2|cut -d <span class=\"string\">\":\"</span> -f1|<span class=\"keyword\">while</span> <span class=\"built_in\">read</span> str</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">HOST=<span class=\"variable\">$&#123;str##* &#125;</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$HOST</span> &gt;&gt; /usr/share/denyhosts/allowed-hosts</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'</span></span><br><span class=\"line\"><span class=\"string\">/etc/hosts.deny</span></span><br><span class=\"line\"><span class=\"string\">/usr/share/denyhosts/data/hosts</span></span><br><span class=\"line\"><span class=\"string\">/usr/share/denyhosts/data/hosts-restricted</span></span><br><span class=\"line\"><span class=\"string\">/usr/share/denyhosts/data/hosts-root</span></span><br><span class=\"line\"><span class=\"string\">/usr/share/denyhosts/data/hosts-valid</span></span><br><span class=\"line\"><span class=\"string\">/usr/share/denyhosts/data/users-hosts</span></span><br><span class=\"line\"><span class=\"string\">'</span> | grep -v <span class=\"string\">\"^$\"</span> | xargs sed -i <span class=\"string\">\"/<span class=\"variable\">$&#123;HOST&#125;</span>/d\"</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\"></span><br><span class=\"line\">/etc/init.d/denyhosts start</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>笔者的云端主机开放了两个端口，一个为SSH端口（假定为62638），一个为应用程序TCP端口（假定为62639，长连接），现有多个客户端连接到应用程序TCP端口进行数据通信，但假如我想通过云主机远程到某一个客户进行调试，该如何实现呢？</p>","more":"<p>这里就需要用到autossh了，简要介绍其思路：客户安装配置autossh，主动去连接云端主机建立autossh隧道，<strong>此隧道在云端主机有一个对端端口</strong>，云端主机直接ssh此端口就会到达隧道的另一端——客户端。</p>\n<p>具体实现过程如下，注意：</p>\n<ol>\n<li>下文的bbblack是客户端用于登入云端主机的普通账户；</li>\n<li>125.94.212.178为云端主机公网IP；</li>\n</ol>\n<h2 id=\"客户端配置autossh\"><a href=\"#客户端配置autossh\" class=\"headerlink\" title=\"客户端配置autossh\"></a>客户端配置autossh</h2><ol>\n<li>编辑/etc/ssh/ssh_config，修改<code>StrictHostKeyChecking ask</code>为<code>StrictHostKeyChecking no</code>并去除其前面的注释；</li>\n<li>执行ssh-keygen得id_rsa.pub，将id_rsa.pub上传到云主机的/home/bbblack/.ssh/customer_name_authorized_keys（<strong>customer_name_authorized_keys为客户名称开头，加_上authorized_keys为后缀</strong>）；</li>\n<li>安装autossh；</li>\n<li>crontab配置每5分钟执行一次以下脚本（autossh.sh），</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/sh</span></span><br><span class=\"line\"><span class=\"comment\"># 隧道在云主机的对端是1235端口，在客户端是22端口（ssh的默认端口）</span></span><br><span class=\"line\">tokeep=1235:localhost:22</span><br><span class=\"line\"><span class=\"comment\"># 检测此连接是否存在，否则建立autossh连接</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> $(/bin/ps ax|grep <span class=\"variable\">$tokeep</span>|grep -v <span class=\"string\">\"grep\"</span> &gt; /dev/null)</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"ok\"</span> &gt; /dev/null</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"comment\"># autossh本身会去检测并维持隧道的长连接</span></span><br><span class=\"line\">    /usr/bin/autossh -M 1234 -NR 1235:localhost:22 bbblack@125.94.212.178 -p62638 &gt; /root/autossh.log 2&gt;&amp;1 &amp;</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"built_in\">exit</span> 0</span><br></pre></td></tr></table></figure>\n<h2 id=\"云端配置autossh\"><a href=\"#云端配置autossh\" class=\"headerlink\" title=\"云端配置autossh\"></a>云端配置autossh</h2><ol>\n<li>编辑/etc/ssh/ssh_config，修改<code>StrictHostKeyChecking ask</code>为<code>StrictHostKeyChecking no</code>并去除其前面的注释；</li>\n<li>编辑/etc/ssh/sshd_config，修改<code>AuthorizedKeysFile</code>配置项为<code>AuthorizedKeysFile      .ssh/authorized_keys</code>，若上文的customer_name_authorized_keys与.ssh/authorized_keys内容相同，则客户端无需输入密码通过authorized_keys就能连接上云端；</li>\n</ol>\n<h3 id=\"在只有一个客户的情况下\"><a href=\"#在只有一个客户的情况下\" class=\"headerlink\" title=\"在只有一个客户的情况下\"></a>在只有一个客户的情况下</h3><p>将上文的customer_name重命名为authorized_keys，过一会客户端就会连接上云端，使用<code>lsof -i:1235</code>可查看连接建立情况，使用<code>ssh -p1235 user_name@localhost</code>可登录到客户端（<strong>user_name为客户端的linux user name</strong>）；</p>\n<h3 id=\"在有多个客户的情况下\"><a href=\"#在有多个客户的情况下\" class=\"headerlink\" title=\"在有多个客户的情况下\"></a>在有多个客户的情况下</h3><p>最简单的一种方案是：使每条隧道的云端主机对端端口唯一，也就是每个客户的隧道互相独立，但如果客户太多，会将云端的端口耗尽。笔者想要的效果是所有客户共用一个云端对端端口，即一次只有一条隧道，一次只能远程登录到一个客户。那么问题来了？如何实现？</p>\n<p>使用下述脚本（autossh-helper.sh）即可解决上述问题，</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/sh</span></span><br><span class=\"line\"></span><br><span class=\"line\">filepath=<span class=\"variable\">$1</span></span><br><span class=\"line\">port1=1235</span><br><span class=\"line\"></span><br><span class=\"line\">[ <span class=\"variable\">$#</span> -eq 0 ] &amp;&amp; &#123; <span class=\"built_in\">echo</span> <span class=\"string\">\"Usage: <span class=\"variable\">$0</span> authorized_keys_filepath\"</span>; <span class=\"built_in\">exit</span> 999; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ -f <span class=\"string\">\"<span class=\"variable\">$filepath</span>\"</span> ] ; <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"comment\"># kill 1235</span></span><br><span class=\"line\">    pid=$(lsof -i:<span class=\"variable\">$port1</span> -t)</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"variable\">$pid</span>|<span class=\"keyword\">while</span> <span class=\"built_in\">read</span> line</span><br><span class=\"line\">    <span class=\"keyword\">do</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> [ <span class=\"string\">\"\"</span> != <span class=\"string\">\"<span class=\"variable\">$line</span>\"</span> ] ; <span class=\"keyword\">then</span></span><br><span class=\"line\">            $(<span class=\"built_in\">kill</span> <span class=\"variable\">$line</span>)</span><br><span class=\"line\">        <span class=\"keyword\">fi</span></span><br><span class=\"line\">    <span class=\"keyword\">done</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># clear known_hosts</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> &gt; /home/bbblack/.ssh/known_hosts</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># authorized_keys changed</span></span><br><span class=\"line\">    cp <span class=\"variable\">$filepath</span> /home/bbblack/.ssh/authorized_keys</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"done ...\"</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$filepath</span> not exists ...\"</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">exit</span> 0</span><br></pre></td></tr></table></figure>\n<p><strong>FIXME</strong><br>但是，以非root用户bbblack使用上述脚本有个问题，它需要定位出绑定在1235的pid号是多少，而1235是由sshd进程以bbblack用户在隧道建立时绑定的，这时候不管使用<code>lsof</code>还是<code>netstat</code>都无法在bbblack用户下定位出绑定在1235的pid号是多少（原因未知）。所以需要配置lsof为setuid程序（有何安全隐患？），root用户运行<code>chmod u+s /usr/bin/lsof</code>即可。</p>\n<p>接着，以bbblack账户（无需root用户）运行<code>./autossh-helper.sh customer_name_authorized_keys</code>（customer_name_authorized_keys为上文提到的文件）即可实现客户切换，其原理无非是一次只有一个客户独占ssh的authorized_keys，其他没有独占的客户由于不满足ssh登入的条件因而无法建立隧道。</p>\n<p>但是问题到这里还没有结束，云端的主机由于安全的需要一般都会配置denyhosts，denyhosts会不断检查ssh日志的失败记录，把那些连续失败多次的IP记为黑名单（ssh不可用），于是会出现这样一个现象，即使你运行了上述的autossh-helper.sh切换客户，依然还是没有客户建立隧道，这就是因为该客户所在公网IP被加入黑名单的原因。</p>\n<p>有什么解决办法呢？这时候我们的应用程序TCP端口（假定为62639，长连接）派上了用场。这里我们假设，该客户所在公网IP虽然被加入黑名单，但应用程序TCP端口（假定为62639，长连接）依然正常，因为云端和客户端需要源源不断的交互数据，此端口为长连接。若不满足此假设，则以下解决方案无效。</p>\n<p>解决方法就是，在执行autossh-helper.sh前，将与云端应用程序正常通信的客户端公网IP从黑名单解除即可。即在执行autossh-helper.sh前，必须先以<strong>root用户</strong>（因为denyhosts需要以root用户执行，这是个遗憾）执行脚本如下（public-ip-helper.sh）：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/sh</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ `whoami` = <span class=\"string\">\"root\"</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"\"</span> &gt; /dev/null</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"please login as root !\"</span></span><br><span class=\"line\">    <span class=\"built_in\">exit</span> 1</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\">tokill=/usr/bin/denyhosts</span><br><span class=\"line\">/bin/ps ax|grep <span class=\"variable\">$tokill</span>|grep -v <span class=\"string\">\"grep\"</span>|awk <span class=\"string\">'&#123;print $1&#125;'</span>|<span class=\"keyword\">while</span> <span class=\"built_in\">read</span> line</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">    <span class=\"built_in\">kill</span> <span class=\"variable\">$line</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\"></span><br><span class=\"line\">netstat -npt|grep 62639|cut -d <span class=\"string\">\":\"</span> -f2|cut -d <span class=\"string\">\":\"</span> -f1|<span class=\"keyword\">while</span> <span class=\"built_in\">read</span> str</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">HOST=<span class=\"variable\">$&#123;str##* &#125;</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$HOST</span> &gt;&gt; /usr/share/denyhosts/allowed-hosts</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'</span></span><br><span class=\"line\"><span class=\"string\">/etc/hosts.deny</span></span><br><span class=\"line\"><span class=\"string\">/usr/share/denyhosts/data/hosts</span></span><br><span class=\"line\"><span class=\"string\">/usr/share/denyhosts/data/hosts-restricted</span></span><br><span class=\"line\"><span class=\"string\">/usr/share/denyhosts/data/hosts-root</span></span><br><span class=\"line\"><span class=\"string\">/usr/share/denyhosts/data/hosts-valid</span></span><br><span class=\"line\"><span class=\"string\">/usr/share/denyhosts/data/users-hosts</span></span><br><span class=\"line\"><span class=\"string\">'</span> | grep -v <span class=\"string\">\"^$\"</span> | xargs sed -i <span class=\"string\">\"/<span class=\"variable\">$&#123;HOST&#125;</span>/d\"</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\"></span><br><span class=\"line\">/etc/init.d/denyhosts start</span><br></pre></td></tr></table></figure>"},{"layout":"post","title":"SVN hooks的使用","date":"2016-06-22T13:05:00.000Z","comments":1,"_content":"\n笔者想要在下属提交SVN代码时收到邮件，查了一下，使用SVN hooks即可做到，简要记录如下：\n\n<!--more-->\n\n进入你的SVN项目的hooks文件夹下，将看到如下文件：\n\n```\n-rwxrwsr-x 1 www-data subversion   2198 6月  22 21:01 post-commit.tmpl\n-rwxrwsr-x 1 www-data subversion   1638 5月   5  2015 post-lock.tmpl\n-rwxrwsr-x 1 www-data subversion   2289 5月   5  2015 post-revprop-change.tmpl\n-rwxrwsr-x 1 www-data subversion   1567 5月   5  2015 post-unlock.tmpl\n-rwxrwsr-x 1 www-data subversion   3426 5月   5  2015 pre-commit.tmpl\n-rwxrwsr-x 1 www-data subversion   2434 5月   5  2015 pre-lock.tmpl\n-rwxrwsr-x 1 www-data subversion   2786 5月   5  2015 pre-revprop-change.tmpl\n-rwxrwsr-x 1 www-data subversion   2122 5月   5  2015 pre-unlock.tmpl\n-rwxrwsr-x 1 www-data subversion   3163 5月   5  2015 start-commit.tmpl\n```\n\n只需要简单执行命令`mv post-commit.tmpl post-commit`（即将post-commit的后缀去掉），就能实现提交代码时触发执行post-commit脚本，笔者的post-commit内容如下：\n\n```bash\n## 设置中文编码\nexport LANG=zh_CN.UTF-8\n## 设置为nohup、丢弃错误流标准流输出、以后台进程运行\nnohup /usr/java/jdk/bin/java -jar /home/svn/myproject/hooks/inv.jar > /dev/null 2>&1 &\nexit 0\n```\n\n注意，若上述不设置为nohup+后台进程，**SVN提交时会阻塞直到此jar包执行完毕**，但发送邮件需要时间，阻塞显然是不合理的。至于笔者的inv.jar包为何物，请移步[SvnPostCommit](https://github.com/JayzeeZhang/SvnPostCommit)。\n","source":"_posts/2016-06-22-svn-hooks.markdown","raw":"---\nlayout: post\ntitle: SVN hooks的使用\ndate: '2016-06-22 21:05'\ncomments: true\ncategories: ['编程实践']  \ntags: ['SVN']\n---\n\n笔者想要在下属提交SVN代码时收到邮件，查了一下，使用SVN hooks即可做到，简要记录如下：\n\n<!--more-->\n\n进入你的SVN项目的hooks文件夹下，将看到如下文件：\n\n```\n-rwxrwsr-x 1 www-data subversion   2198 6月  22 21:01 post-commit.tmpl\n-rwxrwsr-x 1 www-data subversion   1638 5月   5  2015 post-lock.tmpl\n-rwxrwsr-x 1 www-data subversion   2289 5月   5  2015 post-revprop-change.tmpl\n-rwxrwsr-x 1 www-data subversion   1567 5月   5  2015 post-unlock.tmpl\n-rwxrwsr-x 1 www-data subversion   3426 5月   5  2015 pre-commit.tmpl\n-rwxrwsr-x 1 www-data subversion   2434 5月   5  2015 pre-lock.tmpl\n-rwxrwsr-x 1 www-data subversion   2786 5月   5  2015 pre-revprop-change.tmpl\n-rwxrwsr-x 1 www-data subversion   2122 5月   5  2015 pre-unlock.tmpl\n-rwxrwsr-x 1 www-data subversion   3163 5月   5  2015 start-commit.tmpl\n```\n\n只需要简单执行命令`mv post-commit.tmpl post-commit`（即将post-commit的后缀去掉），就能实现提交代码时触发执行post-commit脚本，笔者的post-commit内容如下：\n\n```bash\n## 设置中文编码\nexport LANG=zh_CN.UTF-8\n## 设置为nohup、丢弃错误流标准流输出、以后台进程运行\nnohup /usr/java/jdk/bin/java -jar /home/svn/myproject/hooks/inv.jar > /dev/null 2>&1 &\nexit 0\n```\n\n注意，若上述不设置为nohup+后台进程，**SVN提交时会阻塞直到此jar包执行完毕**，但发送邮件需要时间，阻塞显然是不合理的。至于笔者的inv.jar包为何物，请移步[SvnPostCommit](https://github.com/JayzeeZhang/SvnPostCommit)。\n","slug":"svn-hooks","published":1,"updated":"2017-04-09T14:40:55.000Z","photos":[],"link":"","_id":"cjlza6m4t0018pgupjqw5pkb7","content":"<p>笔者想要在下属提交SVN代码时收到邮件，查了一下，使用SVN hooks即可做到，简要记录如下：</p>\n<a id=\"more\"></a>\n<p>进入你的SVN项目的hooks文件夹下，将看到如下文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-rwxrwsr-x 1 www-data subversion   2198 6月  22 21:01 post-commit.tmpl</span><br><span class=\"line\">-rwxrwsr-x 1 www-data subversion   1638 5月   5  2015 post-lock.tmpl</span><br><span class=\"line\">-rwxrwsr-x 1 www-data subversion   2289 5月   5  2015 post-revprop-change.tmpl</span><br><span class=\"line\">-rwxrwsr-x 1 www-data subversion   1567 5月   5  2015 post-unlock.tmpl</span><br><span class=\"line\">-rwxrwsr-x 1 www-data subversion   3426 5月   5  2015 pre-commit.tmpl</span><br><span class=\"line\">-rwxrwsr-x 1 www-data subversion   2434 5月   5  2015 pre-lock.tmpl</span><br><span class=\"line\">-rwxrwsr-x 1 www-data subversion   2786 5月   5  2015 pre-revprop-change.tmpl</span><br><span class=\"line\">-rwxrwsr-x 1 www-data subversion   2122 5月   5  2015 pre-unlock.tmpl</span><br><span class=\"line\">-rwxrwsr-x 1 www-data subversion   3163 5月   5  2015 start-commit.tmpl</span><br></pre></td></tr></table></figure>\n<p>只需要简单执行命令<code>mv post-commit.tmpl post-commit</code>（即将post-commit的后缀去掉），就能实现提交代码时触发执行post-commit脚本，笔者的post-commit内容如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## 设置中文编码</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> LANG=zh_CN.UTF-8</span><br><span class=\"line\"><span class=\"comment\">## 设置为nohup、丢弃错误流标准流输出、以后台进程运行</span></span><br><span class=\"line\">nohup /usr/java/jdk/bin/java -jar /home/svn/myproject/hooks/inv.jar &gt; /dev/null 2&gt;&amp;1 &amp;</span><br><span class=\"line\"><span class=\"built_in\">exit</span> 0</span><br></pre></td></tr></table></figure>\n<p>注意，若上述不设置为nohup+后台进程，<strong>SVN提交时会阻塞直到此jar包执行完毕</strong>，但发送邮件需要时间，阻塞显然是不合理的。至于笔者的inv.jar包为何物，请移步<a href=\"https://github.com/JayzeeZhang/SvnPostCommit\" target=\"_blank\" rel=\"noopener\">SvnPostCommit</a>。</p>\n","site":{"data":{}},"excerpt":"<p>笔者想要在下属提交SVN代码时收到邮件，查了一下，使用SVN hooks即可做到，简要记录如下：</p>","more":"<p>进入你的SVN项目的hooks文件夹下，将看到如下文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-rwxrwsr-x 1 www-data subversion   2198 6月  22 21:01 post-commit.tmpl</span><br><span class=\"line\">-rwxrwsr-x 1 www-data subversion   1638 5月   5  2015 post-lock.tmpl</span><br><span class=\"line\">-rwxrwsr-x 1 www-data subversion   2289 5月   5  2015 post-revprop-change.tmpl</span><br><span class=\"line\">-rwxrwsr-x 1 www-data subversion   1567 5月   5  2015 post-unlock.tmpl</span><br><span class=\"line\">-rwxrwsr-x 1 www-data subversion   3426 5月   5  2015 pre-commit.tmpl</span><br><span class=\"line\">-rwxrwsr-x 1 www-data subversion   2434 5月   5  2015 pre-lock.tmpl</span><br><span class=\"line\">-rwxrwsr-x 1 www-data subversion   2786 5月   5  2015 pre-revprop-change.tmpl</span><br><span class=\"line\">-rwxrwsr-x 1 www-data subversion   2122 5月   5  2015 pre-unlock.tmpl</span><br><span class=\"line\">-rwxrwsr-x 1 www-data subversion   3163 5月   5  2015 start-commit.tmpl</span><br></pre></td></tr></table></figure>\n<p>只需要简单执行命令<code>mv post-commit.tmpl post-commit</code>（即将post-commit的后缀去掉），就能实现提交代码时触发执行post-commit脚本，笔者的post-commit内容如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## 设置中文编码</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> LANG=zh_CN.UTF-8</span><br><span class=\"line\"><span class=\"comment\">## 设置为nohup、丢弃错误流标准流输出、以后台进程运行</span></span><br><span class=\"line\">nohup /usr/java/jdk/bin/java -jar /home/svn/myproject/hooks/inv.jar &gt; /dev/null 2&gt;&amp;1 &amp;</span><br><span class=\"line\"><span class=\"built_in\">exit</span> 0</span><br></pre></td></tr></table></figure>\n<p>注意，若上述不设置为nohup+后台进程，<strong>SVN提交时会阻塞直到此jar包执行完毕</strong>，但发送邮件需要时间，阻塞显然是不合理的。至于笔者的inv.jar包为何物，请移步<a href=\"https://github.com/JayzeeZhang/SvnPostCommit\" target=\"_blank\" rel=\"noopener\">SvnPostCommit</a>。</p>"},{"layout":"post","title":"使用ant自动生成WAR包需知","date":"2016-06-28T03:07:00.000Z","comments":1,"_content":"\n由于早期的eclipse web工程没有使用Maven管理，每次生成WAR包都得在IDE下执行编译、打包，觉得很繁琐，遂决定使用ant自动生成WAR包。记录注意点如下：\n\n<!--more-->\n\n- 下载、安装、配置[ant](http://ant.apache.org/bindownload.cgi)；\n- 使用IDE如eclipse自动生成工程的ant文件到工程根目录，取名为build.xml，在build.xml找到`<javac`开头的标签并配置上`encoding=\"UTF-8\"`（按你的实际编码设定，否则会出现编译问题），并新增`target`标签如下：\n```\n    <target name=\"war\">\n        <war destfile = \"releases/gx-desk.war\" webxml = \"WebContent/WEB-INF/web.xml\">\n           <fileset dir = \"WebContent\">\n              <include name = \"**/*\"/>\n           </fileset>\n           <classes dir=\"build/classes\"/>\n           <webinf dir=\"WebContent/WEB-INF/lib\"/>\n        </war>\n    </target>\n```\n- 写一个bash脚本自动化编译和打包；\n\n------\n\n附件1：bash脚本\n\n```bash\n#!/bin/sh\n\n## dependency : sencha cmd\n\n## 1. export build.xml, setup javac and war\n## 2. download ant\n## 3. add ant/bin to $PATH\n## 4. setup ANT_HOME\n\ncd /d/SVN/Workspace/gx-desk/\n\nif [ -d \"WebContent2\" ]; then\n    echo \"ERROR: WebContent2 exists, please check !\"\n    exit 0\nfi\n\ncd WebContent/\n\nsencha app build\n\nif [ $? -ne 0 ] ; then\n    echo \"ERROR: sencha build error !\"\n    exit 0\nelse\n    # frontend\n    cd ..\n    mv WebContent WebContent2 \n    mkdir WebContent\n    cp WebContent2/build/production/Desktop/* WebContent/ -rf\n    cp WebContent2/WEB-INF WebContent/ -rf\n    rm WebContent/WEB-INF/lib/* -rf\n\n    # backend\n    cd src/main/resources/\n    mv config.properties config.properties.bak\n    mv config.properties.hwcloud config.properties\n    mv spring/applicationContext.xml spring/applicationContext.xml.bak\n    mv spring/applicationContext.xml.hwcloud spring/applicationContext.xml\n    cd -\n\n    # ant\n    ant clean\n    ant\n    if [ $? -ne 0 ] ; then\n        echo \"ERROR: ant build error !\"\n    else\n        ant war\n    if [ $? -ne 0 ] ; then\n        echo \"ERROR: ant war error !\"\n    else\n       scp -v -P62627 releases/gx-desk.war gx@125.94.212.178:~/\n    fi\n    fi\n    # reverse\n    rm WebContent -rf\n    mv WebContent2 WebContent\n    cd src/main/resources/\n    mv config.properties config.properties.hwcloud\n    mv config.properties.bak config.properties\n    mv spring/applicationContext.xml spring/applicationContext.xml.hwcloud\n    mv spring/applicationContext.xml.bak spring/applicationContext.xml\n    \nfi\n\nexit 0\n\n```\n\n附件2：build.xml\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!-- WARNING: Eclipse auto-generated file.\n              Any modifications will be overwritten.\n              To include a user specific buildfile here, simply create one in the same\n              directory with the processing instruction <?eclipse.ant.import?>\n              as the first entry and export the buildfile again. --><project basedir=\".\" default=\"build\" name=\"gx-desk\">\n    <property environment=\"env\"/>\n    <property name=\"ECLIPSE_HOME\" value=\"../../../Softwares/IDE/eclipse/\"/>\n    <property name=\"junit.output.dir\" value=\"junit\"/>\n    <property name=\"debuglevel\" value=\"source,lines,vars\"/>\n    <property name=\"target\" value=\"1.8\"/>\n    <property name=\"source\" value=\"1.8\"/>\n    <path id=\"Web App Libraries.libraryclasspath\"/>\n    <path id=\"EAR Libraries.libraryclasspath\"/>\n    <path id=\"Apache Tomcat v8.0 [Apache Tomcat v8.0 GX].libraryclasspath\">\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/annotations-api.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/antlr-2.7.6.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/aopalliance-1.0.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/asm-all-3.3.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/aspectjweaver-1.8.9.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/aspose-cells-7.7.0.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/bcprov-jdk16-146.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/c3p0-0.9.1.1.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/cas-client-core-3.4.1.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/catalina-ant.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/catalina-ha.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/catalina-storeconfig.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/catalina-tribes.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/catalina.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/cglib-2.2.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/com.springsource.org.codehaus.jackson-1.4.3.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/commons-beanutils.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/commons-codec-1.6.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/commons-codec-1.7.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/commons-collections-3.1.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/commons-configuration-1.6.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/commons-dbcp.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/commons-digester-2.1.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/commons-fileupload-1.2.2.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/commons-io-2.0.1.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/commons-lang-2.4.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/commons-lang-2.6.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/commons-logging-1.1.1.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/commons-logging-1.2.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/commons-math3-3.5.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/commons-pool.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/dom4j-1.6.1.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/ecj-4.4.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/ehcache-core-2.6.7.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/el-api.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/ezmorph-1.0.6.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/groovy-all-1.8.6.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/gson-2.2.4.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/guava-12.0.1.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/guice-2.0.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/hadoop-auth-2.2.0.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/hadoop-common-2.2.0.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/hbase-client-0.98.3-hadoop2.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/hbase-common-0.98.3-hadoop2.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/hbase-protocol-0.98.3-hadoop2.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/hibernate-jpa-2.0-api-1.0.0.Final.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/hibernate3.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/htrace-core-2.04.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/httpclient-4.3.5.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/httpclient-cache-4.3.5.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/httpcore-4.3.2.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/iText-2.1.0.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/iTextAsian.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/jackson-annotations-2.7.5.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/jackson-core-2.7.5.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/jackson-core-asl-1.4.3.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/jackson-databind-2.7.5.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/jackson-mapper-asl-1.4.3.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/jasper-el.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/jasper.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/jasperreports-5.0.0.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/jasperreports-applet-5.0.0.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/jasperreports-fonts-5.0.0.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/javassist-3.9.0.GA.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/javax.ws.rs.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/jcip-annotations-1.0.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/jcommon-1.0.13.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/jedis-2.6.0.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/jfreechart-1.0.10.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/json-lib-2.2.3.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/jsp-api.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/jsr311-api-1.1.1.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/jta-1.1.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/jtransforms-2.4.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/junit-4.8.1.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/jxl.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/log4j-over-slf4j-1.7.2.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/log4j.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/logback-classic-1.0.13.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/logback-core-1.0.13.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/mail.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/mina-core-2.0.4.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/mybatis-3.0.5.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/mybatis-ehcache-1.0.1.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/mybatis-spring-1.0.1.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/mysql-connector-java-5.1.17-bin.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/nekohtml-1.9.20.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/netty-3.6.6.Final.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/ojdbc5.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/openid4java-nodeps-0.9.6.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/poi-3.9-20121203.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/protobuf-java-2.5.0.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/quartz-2.2.1.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/servlet-api.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/slf4j-api-1.6.6.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/spring-aop-4.3.1.RELEASE.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/spring-asm-3.2.0.M1.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/spring-aspects-4.3.1.RELEASE.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/spring-beans-3.2.0.M1.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/spring-beans-4.3.1.RELEASE.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/spring-context-3.2.0.M1.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/spring-context-4.3.1.RELEASE.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/spring-context-support-4.3.1.RELEASE.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/spring-core-3.2.0.M1.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/spring-core-4.3.1.RELEASE.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/spring-expression-3.2.0.M1.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/spring-expression-4.3.1.RELEASE.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/spring-instrument-4.3.1.RELEASE.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/spring-instrument-tomcat-4.3.1.RELEASE.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/spring-jdbc-4.3.1.RELEASE.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/spring-jms-4.3.1.RELEASE.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/spring-ldap-core-2.0.2.RELEASE.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/spring-messaging-4.3.1.RELEASE.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/spring-orm-4.3.1.RELEASE.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/spring-oxm-4.3.1.RELEASE.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/spring-security-acl-4.1.0.RELEASE.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/spring-security-aspects-4.1.0.RELEASE.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/spring-security-cas-4.1.0.RELEASE.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/spring-security-config-4.1.0.RELEASE.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/spring-security-core-4.1.0.RELEASE.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/spring-security-ldap-4.1.0.RELEASE.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/spring-security-openid-4.1.0.RELEASE.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/spring-security-taglibs-4.1.0.RELEASE.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/spring-security-web-4.1.0.RELEASE.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/spring-test-4.3.1.RELEASE.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/spring-tx-4.3.1.RELEASE.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/spring-web-3.2.0.M1.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/spring-web-4.3.1.RELEASE.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/spring-webmvc-3.2.0.M1.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/spring-webmvc-4.3.1.RELEASE.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/spring-webmvc-portlet-4.3.1.RELEASE.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/spring-websocket-4.3.1.RELEASE.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/tomcat-api.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/tomcat-coyote.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/tomcat-dbcp.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/tomcat-i18n-es.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/tomcat-i18n-fr.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/tomcat-i18n-ja.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/tomcat-jdbc.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/tomcat-jni.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/tomcat-spdy.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/tomcat-util-scan.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/tomcat-util.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/tomcat-websocket.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/websocket-api.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/xercesImpl-2.10.0.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/xml-apis-1.4.01.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/xstream-1.4.1.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/zmq.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/zookeeper-3.4.6.jar\"/>\n    </path>\n    <path id=\"gx-desk.classpath\">\n        <pathelement location=\"build/classes\"/>\n        <path refid=\"Web App Libraries.libraryclasspath\"/>\n        <path refid=\"EAR Libraries.libraryclasspath\"/>\n        <path refid=\"Apache Tomcat v8.0 [Apache Tomcat v8.0 GX].libraryclasspath\"/>\n    </path>\n    <target name=\"init\">\n        <mkdir dir=\"build/classes\"/>\n        <copy includeemptydirs=\"false\" todir=\"build/classes\">\n            <fileset dir=\"src/main/java\">\n                <exclude name=\"**/*.java\"/>\n            </fileset>\n        </copy>\n        <copy includeemptydirs=\"false\" todir=\"build/classes\">\n            <fileset dir=\"src/main/resources\">\n                <exclude name=\"**/*.java\"/>\n            </fileset>\n        </copy>\n        <copy includeemptydirs=\"false\" todir=\"build/classes\">\n            <fileset dir=\"src/test/java\">\n                <exclude name=\"**/*.java\"/>\n            </fileset>\n        </copy>\n        <copy includeemptydirs=\"false\" todir=\"build/classes\">\n            <fileset dir=\"src/test/resources\">\n                <exclude name=\"**/*.java\"/>\n            </fileset>\n        </copy>\n    </target>\n    <target name=\"clean\">\n        <delete dir=\"build/classes\"/>\n    </target>\n    <target depends=\"clean\" name=\"cleanall\"/>\n    <target depends=\"build-subprojects,build-project\" name=\"build\"/>\n    <target name=\"build-subprojects\"/>\n    <target depends=\"init\" name=\"build-project\">\n        <echo message=\"${ant.project.name}: ${ant.file}\"/>\n        <javac encoding=\"UTF-8\" debug=\"true\" debuglevel=\"${debuglevel}\" destdir=\"build/classes\" includeantruntime=\"false\" source=\"${source}\" target=\"${target}\">\n            <src path=\"src/main/java\"/>\n            <src path=\"src/main/resources\"/>\n            <src path=\"src/test/java\"/>\n            <src path=\"src/test/resources\"/>\n            <classpath refid=\"gx-desk.classpath\"/>\n        </javac>\n    </target>\n    <target description=\"Build all projects which reference this project. Useful to propagate changes.\" name=\"build-refprojects\"/>\n    <target description=\"copy Eclipse compiler jars to ant lib directory\" name=\"init-eclipse-compiler\">\n        <copy todir=\"${ant.library.dir}\">\n            <fileset dir=\"${ECLIPSE_HOME}/plugins\" includes=\"org.eclipse.jdt.core_*.jar\"/>\n        </copy>\n        <unzip dest=\"${ant.library.dir}\">\n            <patternset includes=\"jdtCompilerAdapter.jar\"/>\n            <fileset dir=\"${ECLIPSE_HOME}/plugins\" includes=\"org.eclipse.jdt.core_*.jar\"/>\n        </unzip>\n    </target>\n    <target description=\"compile project with Eclipse compiler\" name=\"build-eclipse-compiler\">\n        <property name=\"build.compiler\" value=\"org.eclipse.jdt.core.JDTCompilerAdapter\"/>\n        <antcall target=\"build\"/>\n    </target>\n    <target name=\"war\">\n        <war destfile = \"releases/gx-desk.war\" webxml = \"WebContent/WEB-INF/web.xml\">\n           <fileset dir = \"WebContent\">\n              <include name = \"**/*\"/>\n           </fileset>\n           <classes dir=\"build/classes\"/>\n           <webinf dir=\"WebContent/WEB-INF/lib\"/>\n        </war>\n    </target>\n</project>\n```\n","source":"_posts/2016-06-28-ant-war-task.markdown","raw":"---\nlayout: post\ntitle: 使用ant自动生成WAR包需知\ndate: '2016-06-28 11:07'\ncomments: true\ncategories: ['编程实践']  \ntags: ['Java', 'Eclipse']\n---\n\n由于早期的eclipse web工程没有使用Maven管理，每次生成WAR包都得在IDE下执行编译、打包，觉得很繁琐，遂决定使用ant自动生成WAR包。记录注意点如下：\n\n<!--more-->\n\n- 下载、安装、配置[ant](http://ant.apache.org/bindownload.cgi)；\n- 使用IDE如eclipse自动生成工程的ant文件到工程根目录，取名为build.xml，在build.xml找到`<javac`开头的标签并配置上`encoding=\"UTF-8\"`（按你的实际编码设定，否则会出现编译问题），并新增`target`标签如下：\n```\n    <target name=\"war\">\n        <war destfile = \"releases/gx-desk.war\" webxml = \"WebContent/WEB-INF/web.xml\">\n           <fileset dir = \"WebContent\">\n              <include name = \"**/*\"/>\n           </fileset>\n           <classes dir=\"build/classes\"/>\n           <webinf dir=\"WebContent/WEB-INF/lib\"/>\n        </war>\n    </target>\n```\n- 写一个bash脚本自动化编译和打包；\n\n------\n\n附件1：bash脚本\n\n```bash\n#!/bin/sh\n\n## dependency : sencha cmd\n\n## 1. export build.xml, setup javac and war\n## 2. download ant\n## 3. add ant/bin to $PATH\n## 4. setup ANT_HOME\n\ncd /d/SVN/Workspace/gx-desk/\n\nif [ -d \"WebContent2\" ]; then\n    echo \"ERROR: WebContent2 exists, please check !\"\n    exit 0\nfi\n\ncd WebContent/\n\nsencha app build\n\nif [ $? -ne 0 ] ; then\n    echo \"ERROR: sencha build error !\"\n    exit 0\nelse\n    # frontend\n    cd ..\n    mv WebContent WebContent2 \n    mkdir WebContent\n    cp WebContent2/build/production/Desktop/* WebContent/ -rf\n    cp WebContent2/WEB-INF WebContent/ -rf\n    rm WebContent/WEB-INF/lib/* -rf\n\n    # backend\n    cd src/main/resources/\n    mv config.properties config.properties.bak\n    mv config.properties.hwcloud config.properties\n    mv spring/applicationContext.xml spring/applicationContext.xml.bak\n    mv spring/applicationContext.xml.hwcloud spring/applicationContext.xml\n    cd -\n\n    # ant\n    ant clean\n    ant\n    if [ $? -ne 0 ] ; then\n        echo \"ERROR: ant build error !\"\n    else\n        ant war\n    if [ $? -ne 0 ] ; then\n        echo \"ERROR: ant war error !\"\n    else\n       scp -v -P62627 releases/gx-desk.war gx@125.94.212.178:~/\n    fi\n    fi\n    # reverse\n    rm WebContent -rf\n    mv WebContent2 WebContent\n    cd src/main/resources/\n    mv config.properties config.properties.hwcloud\n    mv config.properties.bak config.properties\n    mv spring/applicationContext.xml spring/applicationContext.xml.hwcloud\n    mv spring/applicationContext.xml.bak spring/applicationContext.xml\n    \nfi\n\nexit 0\n\n```\n\n附件2：build.xml\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!-- WARNING: Eclipse auto-generated file.\n              Any modifications will be overwritten.\n              To include a user specific buildfile here, simply create one in the same\n              directory with the processing instruction <?eclipse.ant.import?>\n              as the first entry and export the buildfile again. --><project basedir=\".\" default=\"build\" name=\"gx-desk\">\n    <property environment=\"env\"/>\n    <property name=\"ECLIPSE_HOME\" value=\"../../../Softwares/IDE/eclipse/\"/>\n    <property name=\"junit.output.dir\" value=\"junit\"/>\n    <property name=\"debuglevel\" value=\"source,lines,vars\"/>\n    <property name=\"target\" value=\"1.8\"/>\n    <property name=\"source\" value=\"1.8\"/>\n    <path id=\"Web App Libraries.libraryclasspath\"/>\n    <path id=\"EAR Libraries.libraryclasspath\"/>\n    <path id=\"Apache Tomcat v8.0 [Apache Tomcat v8.0 GX].libraryclasspath\">\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/annotations-api.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/antlr-2.7.6.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/aopalliance-1.0.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/asm-all-3.3.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/aspectjweaver-1.8.9.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/aspose-cells-7.7.0.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/bcprov-jdk16-146.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/c3p0-0.9.1.1.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/cas-client-core-3.4.1.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/catalina-ant.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/catalina-ha.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/catalina-storeconfig.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/catalina-tribes.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/catalina.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/cglib-2.2.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/com.springsource.org.codehaus.jackson-1.4.3.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/commons-beanutils.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/commons-codec-1.6.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/commons-codec-1.7.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/commons-collections-3.1.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/commons-configuration-1.6.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/commons-dbcp.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/commons-digester-2.1.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/commons-fileupload-1.2.2.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/commons-io-2.0.1.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/commons-lang-2.4.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/commons-lang-2.6.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/commons-logging-1.1.1.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/commons-logging-1.2.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/commons-math3-3.5.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/commons-pool.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/dom4j-1.6.1.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/ecj-4.4.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/ehcache-core-2.6.7.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/el-api.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/ezmorph-1.0.6.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/groovy-all-1.8.6.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/gson-2.2.4.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/guava-12.0.1.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/guice-2.0.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/hadoop-auth-2.2.0.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/hadoop-common-2.2.0.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/hbase-client-0.98.3-hadoop2.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/hbase-common-0.98.3-hadoop2.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/hbase-protocol-0.98.3-hadoop2.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/hibernate-jpa-2.0-api-1.0.0.Final.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/hibernate3.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/htrace-core-2.04.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/httpclient-4.3.5.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/httpclient-cache-4.3.5.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/httpcore-4.3.2.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/iText-2.1.0.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/iTextAsian.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/jackson-annotations-2.7.5.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/jackson-core-2.7.5.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/jackson-core-asl-1.4.3.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/jackson-databind-2.7.5.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/jackson-mapper-asl-1.4.3.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/jasper-el.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/jasper.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/jasperreports-5.0.0.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/jasperreports-applet-5.0.0.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/jasperreports-fonts-5.0.0.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/javassist-3.9.0.GA.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/javax.ws.rs.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/jcip-annotations-1.0.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/jcommon-1.0.13.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/jedis-2.6.0.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/jfreechart-1.0.10.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/json-lib-2.2.3.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/jsp-api.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/jsr311-api-1.1.1.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/jta-1.1.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/jtransforms-2.4.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/junit-4.8.1.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/jxl.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/log4j-over-slf4j-1.7.2.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/log4j.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/logback-classic-1.0.13.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/logback-core-1.0.13.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/mail.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/mina-core-2.0.4.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/mybatis-3.0.5.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/mybatis-ehcache-1.0.1.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/mybatis-spring-1.0.1.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/mysql-connector-java-5.1.17-bin.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/nekohtml-1.9.20.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/netty-3.6.6.Final.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/ojdbc5.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/openid4java-nodeps-0.9.6.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/poi-3.9-20121203.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/protobuf-java-2.5.0.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/quartz-2.2.1.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/servlet-api.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/slf4j-api-1.6.6.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/spring-aop-4.3.1.RELEASE.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/spring-asm-3.2.0.M1.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/spring-aspects-4.3.1.RELEASE.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/spring-beans-3.2.0.M1.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/spring-beans-4.3.1.RELEASE.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/spring-context-3.2.0.M1.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/spring-context-4.3.1.RELEASE.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/spring-context-support-4.3.1.RELEASE.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/spring-core-3.2.0.M1.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/spring-core-4.3.1.RELEASE.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/spring-expression-3.2.0.M1.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/spring-expression-4.3.1.RELEASE.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/spring-instrument-4.3.1.RELEASE.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/spring-instrument-tomcat-4.3.1.RELEASE.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/spring-jdbc-4.3.1.RELEASE.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/spring-jms-4.3.1.RELEASE.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/spring-ldap-core-2.0.2.RELEASE.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/spring-messaging-4.3.1.RELEASE.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/spring-orm-4.3.1.RELEASE.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/spring-oxm-4.3.1.RELEASE.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/spring-security-acl-4.1.0.RELEASE.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/spring-security-aspects-4.1.0.RELEASE.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/spring-security-cas-4.1.0.RELEASE.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/spring-security-config-4.1.0.RELEASE.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/spring-security-core-4.1.0.RELEASE.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/spring-security-ldap-4.1.0.RELEASE.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/spring-security-openid-4.1.0.RELEASE.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/spring-security-taglibs-4.1.0.RELEASE.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/spring-security-web-4.1.0.RELEASE.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/spring-test-4.3.1.RELEASE.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/spring-tx-4.3.1.RELEASE.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/spring-web-3.2.0.M1.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/spring-web-4.3.1.RELEASE.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/spring-webmvc-3.2.0.M1.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/spring-webmvc-4.3.1.RELEASE.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/spring-webmvc-portlet-4.3.1.RELEASE.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/spring-websocket-4.3.1.RELEASE.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/tomcat-api.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/tomcat-coyote.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/tomcat-dbcp.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/tomcat-i18n-es.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/tomcat-i18n-fr.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/tomcat-i18n-ja.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/tomcat-jdbc.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/tomcat-jni.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/tomcat-spdy.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/tomcat-util-scan.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/tomcat-util.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/tomcat-websocket.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/websocket-api.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/xercesImpl-2.10.0.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/xml-apis-1.4.01.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/xstream-1.4.1.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/zmq.jar\"/>\n        <pathelement location=\"../../../Softwares/Apache/apache-tomcat-gx/lib/zookeeper-3.4.6.jar\"/>\n    </path>\n    <path id=\"gx-desk.classpath\">\n        <pathelement location=\"build/classes\"/>\n        <path refid=\"Web App Libraries.libraryclasspath\"/>\n        <path refid=\"EAR Libraries.libraryclasspath\"/>\n        <path refid=\"Apache Tomcat v8.0 [Apache Tomcat v8.0 GX].libraryclasspath\"/>\n    </path>\n    <target name=\"init\">\n        <mkdir dir=\"build/classes\"/>\n        <copy includeemptydirs=\"false\" todir=\"build/classes\">\n            <fileset dir=\"src/main/java\">\n                <exclude name=\"**/*.java\"/>\n            </fileset>\n        </copy>\n        <copy includeemptydirs=\"false\" todir=\"build/classes\">\n            <fileset dir=\"src/main/resources\">\n                <exclude name=\"**/*.java\"/>\n            </fileset>\n        </copy>\n        <copy includeemptydirs=\"false\" todir=\"build/classes\">\n            <fileset dir=\"src/test/java\">\n                <exclude name=\"**/*.java\"/>\n            </fileset>\n        </copy>\n        <copy includeemptydirs=\"false\" todir=\"build/classes\">\n            <fileset dir=\"src/test/resources\">\n                <exclude name=\"**/*.java\"/>\n            </fileset>\n        </copy>\n    </target>\n    <target name=\"clean\">\n        <delete dir=\"build/classes\"/>\n    </target>\n    <target depends=\"clean\" name=\"cleanall\"/>\n    <target depends=\"build-subprojects,build-project\" name=\"build\"/>\n    <target name=\"build-subprojects\"/>\n    <target depends=\"init\" name=\"build-project\">\n        <echo message=\"${ant.project.name}: ${ant.file}\"/>\n        <javac encoding=\"UTF-8\" debug=\"true\" debuglevel=\"${debuglevel}\" destdir=\"build/classes\" includeantruntime=\"false\" source=\"${source}\" target=\"${target}\">\n            <src path=\"src/main/java\"/>\n            <src path=\"src/main/resources\"/>\n            <src path=\"src/test/java\"/>\n            <src path=\"src/test/resources\"/>\n            <classpath refid=\"gx-desk.classpath\"/>\n        </javac>\n    </target>\n    <target description=\"Build all projects which reference this project. Useful to propagate changes.\" name=\"build-refprojects\"/>\n    <target description=\"copy Eclipse compiler jars to ant lib directory\" name=\"init-eclipse-compiler\">\n        <copy todir=\"${ant.library.dir}\">\n            <fileset dir=\"${ECLIPSE_HOME}/plugins\" includes=\"org.eclipse.jdt.core_*.jar\"/>\n        </copy>\n        <unzip dest=\"${ant.library.dir}\">\n            <patternset includes=\"jdtCompilerAdapter.jar\"/>\n            <fileset dir=\"${ECLIPSE_HOME}/plugins\" includes=\"org.eclipse.jdt.core_*.jar\"/>\n        </unzip>\n    </target>\n    <target description=\"compile project with Eclipse compiler\" name=\"build-eclipse-compiler\">\n        <property name=\"build.compiler\" value=\"org.eclipse.jdt.core.JDTCompilerAdapter\"/>\n        <antcall target=\"build\"/>\n    </target>\n    <target name=\"war\">\n        <war destfile = \"releases/gx-desk.war\" webxml = \"WebContent/WEB-INF/web.xml\">\n           <fileset dir = \"WebContent\">\n              <include name = \"**/*\"/>\n           </fileset>\n           <classes dir=\"build/classes\"/>\n           <webinf dir=\"WebContent/WEB-INF/lib\"/>\n        </war>\n    </target>\n</project>\n```\n","slug":"ant-war-task","published":1,"updated":"2017-04-09T14:40:50.000Z","photos":[],"link":"","_id":"cjlza6m4v001cpgupa9zmj6bh","content":"<p>由于早期的eclipse web工程没有使用Maven管理，每次生成WAR包都得在IDE下执行编译、打包，觉得很繁琐，遂决定使用ant自动生成WAR包。记录注意点如下：</p>\n<a id=\"more\"></a>\n<ul>\n<li>下载、安装、配置<a href=\"http://ant.apache.org/bindownload.cgi\" target=\"_blank\" rel=\"noopener\">ant</a>；</li>\n<li><p>使用IDE如eclipse自动生成工程的ant文件到工程根目录，取名为build.xml，在build.xml找到<code>&lt;javac</code>开头的标签并配置上<code>encoding=&quot;UTF-8&quot;</code>（按你的实际编码设定，否则会出现编译问题），并新增<code>target</code>标签如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;target name=&quot;war&quot;&gt;</span><br><span class=\"line\">    &lt;war destfile = &quot;releases/gx-desk.war&quot; webxml = &quot;WebContent/WEB-INF/web.xml&quot;&gt;</span><br><span class=\"line\">       &lt;fileset dir = &quot;WebContent&quot;&gt;</span><br><span class=\"line\">          &lt;include name = &quot;**/*&quot;/&gt;</span><br><span class=\"line\">       &lt;/fileset&gt;</span><br><span class=\"line\">       &lt;classes dir=&quot;build/classes&quot;/&gt;</span><br><span class=\"line\">       &lt;webinf dir=&quot;WebContent/WEB-INF/lib&quot;/&gt;</span><br><span class=\"line\">    &lt;/war&gt;</span><br><span class=\"line\">&lt;/target&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>写一个bash脚本自动化编译和打包；</p>\n</li>\n</ul>\n<hr>\n<p>附件1：bash脚本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/sh</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## dependency : sencha cmd</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 1. export build.xml, setup javac and war</span></span><br><span class=\"line\"><span class=\"comment\">## 2. download ant</span></span><br><span class=\"line\"><span class=\"comment\">## 3. add ant/bin to $PATH</span></span><br><span class=\"line\"><span class=\"comment\">## 4. setup ANT_HOME</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">cd</span> /d/SVN/Workspace/gx-desk/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ -d <span class=\"string\">\"WebContent2\"</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"ERROR: WebContent2 exists, please check !\"</span></span><br><span class=\"line\">    <span class=\"built_in\">exit</span> 0</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">cd</span> WebContent/</span><br><span class=\"line\"></span><br><span class=\"line\">sencha app build</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ $? -ne 0 ] ; <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"ERROR: sencha build error !\"</span></span><br><span class=\"line\">    <span class=\"built_in\">exit</span> 0</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"comment\"># frontend</span></span><br><span class=\"line\">    <span class=\"built_in\">cd</span> ..</span><br><span class=\"line\">    mv WebContent WebContent2 </span><br><span class=\"line\">    mkdir WebContent</span><br><span class=\"line\">    cp WebContent2/build/production/Desktop/* WebContent/ -rf</span><br><span class=\"line\">    cp WebContent2/WEB-INF WebContent/ -rf</span><br><span class=\"line\">    rm WebContent/WEB-INF/lib/* -rf</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># backend</span></span><br><span class=\"line\">    <span class=\"built_in\">cd</span> src/main/resources/</span><br><span class=\"line\">    mv config.properties config.properties.bak</span><br><span class=\"line\">    mv config.properties.hwcloud config.properties</span><br><span class=\"line\">    mv spring/applicationContext.xml spring/applicationContext.xml.bak</span><br><span class=\"line\">    mv spring/applicationContext.xml.hwcloud spring/applicationContext.xml</span><br><span class=\"line\">    <span class=\"built_in\">cd</span> -</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># ant</span></span><br><span class=\"line\">    ant clean</span><br><span class=\"line\">    ant</span><br><span class=\"line\">    <span class=\"keyword\">if</span> [ $? -ne 0 ] ; <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">\"ERROR: ant build error !\"</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        ant war</span><br><span class=\"line\">    <span class=\"keyword\">if</span> [ $? -ne 0 ] ; <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">\"ERROR: ant war error !\"</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">       scp -v -P62627 releases/gx-desk.war gx@125.94.212.178:~/</span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\">    <span class=\"comment\"># reverse</span></span><br><span class=\"line\">    rm WebContent -rf</span><br><span class=\"line\">    mv WebContent2 WebContent</span><br><span class=\"line\">    <span class=\"built_in\">cd</span> src/main/resources/</span><br><span class=\"line\">    mv config.properties config.properties.hwcloud</span><br><span class=\"line\">    mv config.properties.bak config.properties</span><br><span class=\"line\">    mv spring/applicationContext.xml spring/applicationContext.xml.hwcloud</span><br><span class=\"line\">    mv spring/applicationContext.xml.bak spring/applicationContext.xml</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">exit</span> 0</span><br></pre></td></tr></table></figure>\n<p>附件2：build.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?&gt;</span><br><span class=\"line\"><span class=\"comment\">&lt;!-- WARNING: Eclipse auto-generated file.</span></span><br><span class=\"line\"><span class=\"comment\">              Any modifications will be overwritten.</span></span><br><span class=\"line\"><span class=\"comment\">              To include a user specific buildfile here, simply create one in the same</span></span><br><span class=\"line\"><span class=\"comment\">              directory with the processing instruction &lt;?eclipse.ant.import?&gt;</span></span><br><span class=\"line\"><span class=\"comment\">              as the first entry and export the buildfile again. --&gt;</span><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">basedir</span>=<span class=\"string\">\".\"</span> <span class=\"attr\">default</span>=<span class=\"string\">\"build\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"gx-desk\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">environment</span>=<span class=\"string\">\"env\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"ECLIPSE_HOME\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"../../../Softwares/IDE/eclipse/\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"junit.output.dir\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"junit\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"debuglevel\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"source,lines,vars\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"target\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"1.8\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"source\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"1.8\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">path</span> <span class=\"attr\">id</span>=<span class=\"string\">\"Web App Libraries.libraryclasspath\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">path</span> <span class=\"attr\">id</span>=<span class=\"string\">\"EAR Libraries.libraryclasspath\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">path</span> <span class=\"attr\">id</span>=<span class=\"string\">\"Apache Tomcat v8.0 [Apache Tomcat v8.0 GX].libraryclasspath\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/annotations-api.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/antlr-2.7.6.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/aopalliance-1.0.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/asm-all-3.3.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/aspectjweaver-1.8.9.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/aspose-cells-7.7.0.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/bcprov-jdk16-146.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/c3p0-0.9.1.1.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/cas-client-core-3.4.1.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/catalina-ant.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/catalina-ha.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/catalina-storeconfig.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/catalina-tribes.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/catalina.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/cglib-2.2.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/com.springsource.org.codehaus.jackson-1.4.3.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/commons-beanutils.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/commons-codec-1.6.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/commons-codec-1.7.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/commons-collections-3.1.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/commons-configuration-1.6.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/commons-dbcp.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/commons-digester-2.1.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/commons-fileupload-1.2.2.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/commons-io-2.0.1.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/commons-lang-2.4.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/commons-lang-2.6.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/commons-logging-1.1.1.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/commons-logging-1.2.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/commons-math3-3.5.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/commons-pool.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/dom4j-1.6.1.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/ecj-4.4.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/ehcache-core-2.6.7.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/el-api.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/ezmorph-1.0.6.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/groovy-all-1.8.6.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/gson-2.2.4.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/guava-12.0.1.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/guice-2.0.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/hadoop-auth-2.2.0.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/hadoop-common-2.2.0.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/hbase-client-0.98.3-hadoop2.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/hbase-common-0.98.3-hadoop2.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/hbase-protocol-0.98.3-hadoop2.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/hibernate-jpa-2.0-api-1.0.0.Final.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/hibernate3.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/htrace-core-2.04.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/httpclient-4.3.5.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/httpclient-cache-4.3.5.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/httpcore-4.3.2.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/iText-2.1.0.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/iTextAsian.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/jackson-annotations-2.7.5.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/jackson-core-2.7.5.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/jackson-core-asl-1.4.3.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/jackson-databind-2.7.5.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/jackson-mapper-asl-1.4.3.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/jasper-el.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/jasper.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/jasperreports-5.0.0.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/jasperreports-applet-5.0.0.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/jasperreports-fonts-5.0.0.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/javassist-3.9.0.GA.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/javax.ws.rs.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/jcip-annotations-1.0.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/jcommon-1.0.13.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/jedis-2.6.0.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/jfreechart-1.0.10.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/json-lib-2.2.3.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/jsp-api.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/jsr311-api-1.1.1.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/jta-1.1.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/jtransforms-2.4.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/junit-4.8.1.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/jxl.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/log4j-over-slf4j-1.7.2.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/log4j.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/logback-classic-1.0.13.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/logback-core-1.0.13.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/mail.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/mina-core-2.0.4.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/mybatis-3.0.5.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/mybatis-ehcache-1.0.1.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/mybatis-spring-1.0.1.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/mysql-connector-java-5.1.17-bin.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/nekohtml-1.9.20.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/netty-3.6.6.Final.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/ojdbc5.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/openid4java-nodeps-0.9.6.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/poi-3.9-20121203.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/protobuf-java-2.5.0.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/quartz-2.2.1.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/servlet-api.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/slf4j-api-1.6.6.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/spring-aop-4.3.1.RELEASE.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/spring-asm-3.2.0.M1.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/spring-aspects-4.3.1.RELEASE.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/spring-beans-3.2.0.M1.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/spring-beans-4.3.1.RELEASE.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/spring-context-3.2.0.M1.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/spring-context-4.3.1.RELEASE.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/spring-context-support-4.3.1.RELEASE.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/spring-core-3.2.0.M1.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/spring-core-4.3.1.RELEASE.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/spring-expression-3.2.0.M1.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/spring-expression-4.3.1.RELEASE.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/spring-instrument-4.3.1.RELEASE.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/spring-instrument-tomcat-4.3.1.RELEASE.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/spring-jdbc-4.3.1.RELEASE.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/spring-jms-4.3.1.RELEASE.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/spring-ldap-core-2.0.2.RELEASE.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/spring-messaging-4.3.1.RELEASE.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/spring-orm-4.3.1.RELEASE.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/spring-oxm-4.3.1.RELEASE.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/spring-security-acl-4.1.0.RELEASE.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/spring-security-aspects-4.1.0.RELEASE.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/spring-security-cas-4.1.0.RELEASE.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/spring-security-config-4.1.0.RELEASE.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/spring-security-core-4.1.0.RELEASE.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/spring-security-ldap-4.1.0.RELEASE.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/spring-security-openid-4.1.0.RELEASE.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/spring-security-taglibs-4.1.0.RELEASE.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/spring-security-web-4.1.0.RELEASE.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/spring-test-4.3.1.RELEASE.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/spring-tx-4.3.1.RELEASE.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/spring-web-3.2.0.M1.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/spring-web-4.3.1.RELEASE.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/spring-webmvc-3.2.0.M1.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/spring-webmvc-4.3.1.RELEASE.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/spring-webmvc-portlet-4.3.1.RELEASE.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/spring-websocket-4.3.1.RELEASE.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/tomcat-api.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/tomcat-coyote.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/tomcat-dbcp.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/tomcat-i18n-es.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/tomcat-i18n-fr.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/tomcat-i18n-ja.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/tomcat-jdbc.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/tomcat-jni.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/tomcat-spdy.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/tomcat-util-scan.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/tomcat-util.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/tomcat-websocket.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/websocket-api.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/xercesImpl-2.10.0.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/xml-apis-1.4.01.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/xstream-1.4.1.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/zmq.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/zookeeper-3.4.6.jar\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">path</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">path</span> <span class=\"attr\">id</span>=<span class=\"string\">\"gx-desk.classpath\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"build/classes\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">path</span> <span class=\"attr\">refid</span>=<span class=\"string\">\"Web App Libraries.libraryclasspath\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">path</span> <span class=\"attr\">refid</span>=<span class=\"string\">\"EAR Libraries.libraryclasspath\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">path</span> <span class=\"attr\">refid</span>=<span class=\"string\">\"Apache Tomcat v8.0 [Apache Tomcat v8.0 GX].libraryclasspath\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">path</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">target</span> <span class=\"attr\">name</span>=<span class=\"string\">\"init\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">mkdir</span> <span class=\"attr\">dir</span>=<span class=\"string\">\"build/classes\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">copy</span> <span class=\"attr\">includeemptydirs</span>=<span class=\"string\">\"false\"</span> <span class=\"attr\">todir</span>=<span class=\"string\">\"build/classes\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">fileset</span> <span class=\"attr\">dir</span>=<span class=\"string\">\"src/main/java\"</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">exclude</span> <span class=\"attr\">name</span>=<span class=\"string\">\"**/*.java\"</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">fileset</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">copy</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">copy</span> <span class=\"attr\">includeemptydirs</span>=<span class=\"string\">\"false\"</span> <span class=\"attr\">todir</span>=<span class=\"string\">\"build/classes\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">fileset</span> <span class=\"attr\">dir</span>=<span class=\"string\">\"src/main/resources\"</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">exclude</span> <span class=\"attr\">name</span>=<span class=\"string\">\"**/*.java\"</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">fileset</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">copy</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">copy</span> <span class=\"attr\">includeemptydirs</span>=<span class=\"string\">\"false\"</span> <span class=\"attr\">todir</span>=<span class=\"string\">\"build/classes\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">fileset</span> <span class=\"attr\">dir</span>=<span class=\"string\">\"src/test/java\"</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">exclude</span> <span class=\"attr\">name</span>=<span class=\"string\">\"**/*.java\"</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">fileset</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">copy</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">copy</span> <span class=\"attr\">includeemptydirs</span>=<span class=\"string\">\"false\"</span> <span class=\"attr\">todir</span>=<span class=\"string\">\"build/classes\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">fileset</span> <span class=\"attr\">dir</span>=<span class=\"string\">\"src/test/resources\"</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">exclude</span> <span class=\"attr\">name</span>=<span class=\"string\">\"**/*.java\"</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">fileset</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">copy</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">target</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">target</span> <span class=\"attr\">name</span>=<span class=\"string\">\"clean\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">delete</span> <span class=\"attr\">dir</span>=<span class=\"string\">\"build/classes\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">target</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">target</span> <span class=\"attr\">depends</span>=<span class=\"string\">\"clean\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"cleanall\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">target</span> <span class=\"attr\">depends</span>=<span class=\"string\">\"build-subprojects,build-project\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"build\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">target</span> <span class=\"attr\">name</span>=<span class=\"string\">\"build-subprojects\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">target</span> <span class=\"attr\">depends</span>=<span class=\"string\">\"init\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"build-project\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">echo</span> <span class=\"attr\">message</span>=<span class=\"string\">\"$&#123;ant.project.name&#125;: $&#123;ant.file&#125;\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">javac</span> <span class=\"attr\">encoding</span>=<span class=\"string\">\"UTF-8\"</span> <span class=\"attr\">debug</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">debuglevel</span>=<span class=\"string\">\"$&#123;debuglevel&#125;\"</span> <span class=\"attr\">destdir</span>=<span class=\"string\">\"build/classes\"</span> <span class=\"attr\">includeantruntime</span>=<span class=\"string\">\"false\"</span> <span class=\"attr\">source</span>=<span class=\"string\">\"$&#123;source&#125;\"</span> <span class=\"attr\">target</span>=<span class=\"string\">\"$&#123;target&#125;\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">src</span> <span class=\"attr\">path</span>=<span class=\"string\">\"src/main/java\"</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">src</span> <span class=\"attr\">path</span>=<span class=\"string\">\"src/main/resources\"</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">src</span> <span class=\"attr\">path</span>=<span class=\"string\">\"src/test/java\"</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">src</span> <span class=\"attr\">path</span>=<span class=\"string\">\"src/test/resources\"</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">classpath</span> <span class=\"attr\">refid</span>=<span class=\"string\">\"gx-desk.classpath\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">javac</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">target</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">target</span> <span class=\"attr\">description</span>=<span class=\"string\">\"Build all projects which reference this project. Useful to propagate changes.\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"build-refprojects\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">target</span> <span class=\"attr\">description</span>=<span class=\"string\">\"copy Eclipse compiler jars to ant lib directory\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"init-eclipse-compiler\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">copy</span> <span class=\"attr\">todir</span>=<span class=\"string\">\"$&#123;ant.library.dir&#125;\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">fileset</span> <span class=\"attr\">dir</span>=<span class=\"string\">\"$&#123;ECLIPSE_HOME&#125;/plugins\"</span> <span class=\"attr\">includes</span>=<span class=\"string\">\"org.eclipse.jdt.core_*.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">copy</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">unzip</span> <span class=\"attr\">dest</span>=<span class=\"string\">\"$&#123;ant.library.dir&#125;\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">patternset</span> <span class=\"attr\">includes</span>=<span class=\"string\">\"jdtCompilerAdapter.jar\"</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">fileset</span> <span class=\"attr\">dir</span>=<span class=\"string\">\"$&#123;ECLIPSE_HOME&#125;/plugins\"</span> <span class=\"attr\">includes</span>=<span class=\"string\">\"org.eclipse.jdt.core_*.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">unzip</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">target</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">target</span> <span class=\"attr\">description</span>=<span class=\"string\">\"compile project with Eclipse compiler\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"build-eclipse-compiler\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"build.compiler\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"org.eclipse.jdt.core.JDTCompilerAdapter\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">antcall</span> <span class=\"attr\">target</span>=<span class=\"string\">\"build\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">target</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">target</span> <span class=\"attr\">name</span>=<span class=\"string\">\"war\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">war</span> <span class=\"attr\">destfile</span> = <span class=\"string\">\"releases/gx-desk.war\"</span> <span class=\"attr\">webxml</span> = <span class=\"string\">\"WebContent/WEB-INF/web.xml\"</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">fileset</span> <span class=\"attr\">dir</span> = <span class=\"string\">\"WebContent\"</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">include</span> <span class=\"attr\">name</span> = <span class=\"string\">\"**/*\"</span>/&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;/<span class=\"name\">fileset</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">classes</span> <span class=\"attr\">dir</span>=<span class=\"string\">\"build/classes\"</span>/&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">webinf</span> <span class=\"attr\">dir</span>=<span class=\"string\">\"WebContent/WEB-INF/lib\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">war</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">target</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>由于早期的eclipse web工程没有使用Maven管理，每次生成WAR包都得在IDE下执行编译、打包，觉得很繁琐，遂决定使用ant自动生成WAR包。记录注意点如下：</p>","more":"<ul>\n<li>下载、安装、配置<a href=\"http://ant.apache.org/bindownload.cgi\" target=\"_blank\" rel=\"noopener\">ant</a>；</li>\n<li><p>使用IDE如eclipse自动生成工程的ant文件到工程根目录，取名为build.xml，在build.xml找到<code>&lt;javac</code>开头的标签并配置上<code>encoding=&quot;UTF-8&quot;</code>（按你的实际编码设定，否则会出现编译问题），并新增<code>target</code>标签如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;target name=&quot;war&quot;&gt;</span><br><span class=\"line\">    &lt;war destfile = &quot;releases/gx-desk.war&quot; webxml = &quot;WebContent/WEB-INF/web.xml&quot;&gt;</span><br><span class=\"line\">       &lt;fileset dir = &quot;WebContent&quot;&gt;</span><br><span class=\"line\">          &lt;include name = &quot;**/*&quot;/&gt;</span><br><span class=\"line\">       &lt;/fileset&gt;</span><br><span class=\"line\">       &lt;classes dir=&quot;build/classes&quot;/&gt;</span><br><span class=\"line\">       &lt;webinf dir=&quot;WebContent/WEB-INF/lib&quot;/&gt;</span><br><span class=\"line\">    &lt;/war&gt;</span><br><span class=\"line\">&lt;/target&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>写一个bash脚本自动化编译和打包；</p>\n</li>\n</ul>\n<hr>\n<p>附件1：bash脚本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/sh</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## dependency : sencha cmd</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 1. export build.xml, setup javac and war</span></span><br><span class=\"line\"><span class=\"comment\">## 2. download ant</span></span><br><span class=\"line\"><span class=\"comment\">## 3. add ant/bin to $PATH</span></span><br><span class=\"line\"><span class=\"comment\">## 4. setup ANT_HOME</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">cd</span> /d/SVN/Workspace/gx-desk/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ -d <span class=\"string\">\"WebContent2\"</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"ERROR: WebContent2 exists, please check !\"</span></span><br><span class=\"line\">    <span class=\"built_in\">exit</span> 0</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">cd</span> WebContent/</span><br><span class=\"line\"></span><br><span class=\"line\">sencha app build</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ $? -ne 0 ] ; <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"ERROR: sencha build error !\"</span></span><br><span class=\"line\">    <span class=\"built_in\">exit</span> 0</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"comment\"># frontend</span></span><br><span class=\"line\">    <span class=\"built_in\">cd</span> ..</span><br><span class=\"line\">    mv WebContent WebContent2 </span><br><span class=\"line\">    mkdir WebContent</span><br><span class=\"line\">    cp WebContent2/build/production/Desktop/* WebContent/ -rf</span><br><span class=\"line\">    cp WebContent2/WEB-INF WebContent/ -rf</span><br><span class=\"line\">    rm WebContent/WEB-INF/lib/* -rf</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># backend</span></span><br><span class=\"line\">    <span class=\"built_in\">cd</span> src/main/resources/</span><br><span class=\"line\">    mv config.properties config.properties.bak</span><br><span class=\"line\">    mv config.properties.hwcloud config.properties</span><br><span class=\"line\">    mv spring/applicationContext.xml spring/applicationContext.xml.bak</span><br><span class=\"line\">    mv spring/applicationContext.xml.hwcloud spring/applicationContext.xml</span><br><span class=\"line\">    <span class=\"built_in\">cd</span> -</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># ant</span></span><br><span class=\"line\">    ant clean</span><br><span class=\"line\">    ant</span><br><span class=\"line\">    <span class=\"keyword\">if</span> [ $? -ne 0 ] ; <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">\"ERROR: ant build error !\"</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        ant war</span><br><span class=\"line\">    <span class=\"keyword\">if</span> [ $? -ne 0 ] ; <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">\"ERROR: ant war error !\"</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">       scp -v -P62627 releases/gx-desk.war gx@125.94.212.178:~/</span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\">    <span class=\"comment\"># reverse</span></span><br><span class=\"line\">    rm WebContent -rf</span><br><span class=\"line\">    mv WebContent2 WebContent</span><br><span class=\"line\">    <span class=\"built_in\">cd</span> src/main/resources/</span><br><span class=\"line\">    mv config.properties config.properties.hwcloud</span><br><span class=\"line\">    mv config.properties.bak config.properties</span><br><span class=\"line\">    mv spring/applicationContext.xml spring/applicationContext.xml.hwcloud</span><br><span class=\"line\">    mv spring/applicationContext.xml.bak spring/applicationContext.xml</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">exit</span> 0</span><br></pre></td></tr></table></figure>\n<p>附件2：build.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?&gt;</span><br><span class=\"line\"><span class=\"comment\">&lt;!-- WARNING: Eclipse auto-generated file.</span></span><br><span class=\"line\"><span class=\"comment\">              Any modifications will be overwritten.</span></span><br><span class=\"line\"><span class=\"comment\">              To include a user specific buildfile here, simply create one in the same</span></span><br><span class=\"line\"><span class=\"comment\">              directory with the processing instruction &lt;?eclipse.ant.import?&gt;</span></span><br><span class=\"line\"><span class=\"comment\">              as the first entry and export the buildfile again. --&gt;</span><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">basedir</span>=<span class=\"string\">\".\"</span> <span class=\"attr\">default</span>=<span class=\"string\">\"build\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"gx-desk\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">environment</span>=<span class=\"string\">\"env\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"ECLIPSE_HOME\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"../../../Softwares/IDE/eclipse/\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"junit.output.dir\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"junit\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"debuglevel\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"source,lines,vars\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"target\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"1.8\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"source\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"1.8\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">path</span> <span class=\"attr\">id</span>=<span class=\"string\">\"Web App Libraries.libraryclasspath\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">path</span> <span class=\"attr\">id</span>=<span class=\"string\">\"EAR Libraries.libraryclasspath\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">path</span> <span class=\"attr\">id</span>=<span class=\"string\">\"Apache Tomcat v8.0 [Apache Tomcat v8.0 GX].libraryclasspath\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/annotations-api.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/antlr-2.7.6.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/aopalliance-1.0.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/asm-all-3.3.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/aspectjweaver-1.8.9.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/aspose-cells-7.7.0.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/bcprov-jdk16-146.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/c3p0-0.9.1.1.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/cas-client-core-3.4.1.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/catalina-ant.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/catalina-ha.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/catalina-storeconfig.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/catalina-tribes.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/catalina.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/cglib-2.2.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/com.springsource.org.codehaus.jackson-1.4.3.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/commons-beanutils.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/commons-codec-1.6.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/commons-codec-1.7.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/commons-collections-3.1.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/commons-configuration-1.6.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/commons-dbcp.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/commons-digester-2.1.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/commons-fileupload-1.2.2.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/commons-io-2.0.1.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/commons-lang-2.4.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/commons-lang-2.6.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/commons-logging-1.1.1.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/commons-logging-1.2.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/commons-math3-3.5.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/commons-pool.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/dom4j-1.6.1.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/ecj-4.4.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/ehcache-core-2.6.7.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/el-api.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/ezmorph-1.0.6.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/groovy-all-1.8.6.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/gson-2.2.4.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/guava-12.0.1.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/guice-2.0.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/hadoop-auth-2.2.0.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/hadoop-common-2.2.0.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/hbase-client-0.98.3-hadoop2.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/hbase-common-0.98.3-hadoop2.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/hbase-protocol-0.98.3-hadoop2.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/hibernate-jpa-2.0-api-1.0.0.Final.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/hibernate3.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/htrace-core-2.04.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/httpclient-4.3.5.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/httpclient-cache-4.3.5.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/httpcore-4.3.2.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/iText-2.1.0.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/iTextAsian.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/jackson-annotations-2.7.5.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/jackson-core-2.7.5.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/jackson-core-asl-1.4.3.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/jackson-databind-2.7.5.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/jackson-mapper-asl-1.4.3.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/jasper-el.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/jasper.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/jasperreports-5.0.0.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/jasperreports-applet-5.0.0.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/jasperreports-fonts-5.0.0.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/javassist-3.9.0.GA.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/javax.ws.rs.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/jcip-annotations-1.0.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/jcommon-1.0.13.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/jedis-2.6.0.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/jfreechart-1.0.10.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/json-lib-2.2.3.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/jsp-api.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/jsr311-api-1.1.1.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/jta-1.1.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/jtransforms-2.4.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/junit-4.8.1.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/jxl.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/log4j-over-slf4j-1.7.2.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/log4j.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/logback-classic-1.0.13.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/logback-core-1.0.13.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/mail.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/mina-core-2.0.4.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/mybatis-3.0.5.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/mybatis-ehcache-1.0.1.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/mybatis-spring-1.0.1.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/mysql-connector-java-5.1.17-bin.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/nekohtml-1.9.20.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/netty-3.6.6.Final.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/ojdbc5.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/openid4java-nodeps-0.9.6.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/poi-3.9-20121203.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/protobuf-java-2.5.0.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/quartz-2.2.1.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/servlet-api.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/slf4j-api-1.6.6.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/spring-aop-4.3.1.RELEASE.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/spring-asm-3.2.0.M1.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/spring-aspects-4.3.1.RELEASE.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/spring-beans-3.2.0.M1.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/spring-beans-4.3.1.RELEASE.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/spring-context-3.2.0.M1.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/spring-context-4.3.1.RELEASE.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/spring-context-support-4.3.1.RELEASE.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/spring-core-3.2.0.M1.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/spring-core-4.3.1.RELEASE.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/spring-expression-3.2.0.M1.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/spring-expression-4.3.1.RELEASE.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/spring-instrument-4.3.1.RELEASE.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/spring-instrument-tomcat-4.3.1.RELEASE.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/spring-jdbc-4.3.1.RELEASE.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/spring-jms-4.3.1.RELEASE.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/spring-ldap-core-2.0.2.RELEASE.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/spring-messaging-4.3.1.RELEASE.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/spring-orm-4.3.1.RELEASE.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/spring-oxm-4.3.1.RELEASE.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/spring-security-acl-4.1.0.RELEASE.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/spring-security-aspects-4.1.0.RELEASE.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/spring-security-cas-4.1.0.RELEASE.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/spring-security-config-4.1.0.RELEASE.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/spring-security-core-4.1.0.RELEASE.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/spring-security-ldap-4.1.0.RELEASE.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/spring-security-openid-4.1.0.RELEASE.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/spring-security-taglibs-4.1.0.RELEASE.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/spring-security-web-4.1.0.RELEASE.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/spring-test-4.3.1.RELEASE.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/spring-tx-4.3.1.RELEASE.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/spring-web-3.2.0.M1.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/spring-web-4.3.1.RELEASE.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/spring-webmvc-3.2.0.M1.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/spring-webmvc-4.3.1.RELEASE.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/spring-webmvc-portlet-4.3.1.RELEASE.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/spring-websocket-4.3.1.RELEASE.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/tomcat-api.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/tomcat-coyote.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/tomcat-dbcp.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/tomcat-i18n-es.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/tomcat-i18n-fr.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/tomcat-i18n-ja.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/tomcat-jdbc.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/tomcat-jni.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/tomcat-spdy.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/tomcat-util-scan.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/tomcat-util.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/tomcat-websocket.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/websocket-api.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/xercesImpl-2.10.0.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/xml-apis-1.4.01.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/xstream-1.4.1.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/zmq.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"../../../Softwares/Apache/apache-tomcat-gx/lib/zookeeper-3.4.6.jar\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">path</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">path</span> <span class=\"attr\">id</span>=<span class=\"string\">\"gx-desk.classpath\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"build/classes\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">path</span> <span class=\"attr\">refid</span>=<span class=\"string\">\"Web App Libraries.libraryclasspath\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">path</span> <span class=\"attr\">refid</span>=<span class=\"string\">\"EAR Libraries.libraryclasspath\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">path</span> <span class=\"attr\">refid</span>=<span class=\"string\">\"Apache Tomcat v8.0 [Apache Tomcat v8.0 GX].libraryclasspath\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">path</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">target</span> <span class=\"attr\">name</span>=<span class=\"string\">\"init\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">mkdir</span> <span class=\"attr\">dir</span>=<span class=\"string\">\"build/classes\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">copy</span> <span class=\"attr\">includeemptydirs</span>=<span class=\"string\">\"false\"</span> <span class=\"attr\">todir</span>=<span class=\"string\">\"build/classes\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">fileset</span> <span class=\"attr\">dir</span>=<span class=\"string\">\"src/main/java\"</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">exclude</span> <span class=\"attr\">name</span>=<span class=\"string\">\"**/*.java\"</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">fileset</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">copy</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">copy</span> <span class=\"attr\">includeemptydirs</span>=<span class=\"string\">\"false\"</span> <span class=\"attr\">todir</span>=<span class=\"string\">\"build/classes\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">fileset</span> <span class=\"attr\">dir</span>=<span class=\"string\">\"src/main/resources\"</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">exclude</span> <span class=\"attr\">name</span>=<span class=\"string\">\"**/*.java\"</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">fileset</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">copy</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">copy</span> <span class=\"attr\">includeemptydirs</span>=<span class=\"string\">\"false\"</span> <span class=\"attr\">todir</span>=<span class=\"string\">\"build/classes\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">fileset</span> <span class=\"attr\">dir</span>=<span class=\"string\">\"src/test/java\"</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">exclude</span> <span class=\"attr\">name</span>=<span class=\"string\">\"**/*.java\"</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">fileset</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">copy</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">copy</span> <span class=\"attr\">includeemptydirs</span>=<span class=\"string\">\"false\"</span> <span class=\"attr\">todir</span>=<span class=\"string\">\"build/classes\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">fileset</span> <span class=\"attr\">dir</span>=<span class=\"string\">\"src/test/resources\"</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">exclude</span> <span class=\"attr\">name</span>=<span class=\"string\">\"**/*.java\"</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">fileset</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">copy</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">target</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">target</span> <span class=\"attr\">name</span>=<span class=\"string\">\"clean\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">delete</span> <span class=\"attr\">dir</span>=<span class=\"string\">\"build/classes\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">target</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">target</span> <span class=\"attr\">depends</span>=<span class=\"string\">\"clean\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"cleanall\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">target</span> <span class=\"attr\">depends</span>=<span class=\"string\">\"build-subprojects,build-project\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"build\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">target</span> <span class=\"attr\">name</span>=<span class=\"string\">\"build-subprojects\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">target</span> <span class=\"attr\">depends</span>=<span class=\"string\">\"init\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"build-project\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">echo</span> <span class=\"attr\">message</span>=<span class=\"string\">\"$&#123;ant.project.name&#125;: $&#123;ant.file&#125;\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">javac</span> <span class=\"attr\">encoding</span>=<span class=\"string\">\"UTF-8\"</span> <span class=\"attr\">debug</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">debuglevel</span>=<span class=\"string\">\"$&#123;debuglevel&#125;\"</span> <span class=\"attr\">destdir</span>=<span class=\"string\">\"build/classes\"</span> <span class=\"attr\">includeantruntime</span>=<span class=\"string\">\"false\"</span> <span class=\"attr\">source</span>=<span class=\"string\">\"$&#123;source&#125;\"</span> <span class=\"attr\">target</span>=<span class=\"string\">\"$&#123;target&#125;\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">src</span> <span class=\"attr\">path</span>=<span class=\"string\">\"src/main/java\"</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">src</span> <span class=\"attr\">path</span>=<span class=\"string\">\"src/main/resources\"</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">src</span> <span class=\"attr\">path</span>=<span class=\"string\">\"src/test/java\"</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">src</span> <span class=\"attr\">path</span>=<span class=\"string\">\"src/test/resources\"</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">classpath</span> <span class=\"attr\">refid</span>=<span class=\"string\">\"gx-desk.classpath\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">javac</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">target</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">target</span> <span class=\"attr\">description</span>=<span class=\"string\">\"Build all projects which reference this project. Useful to propagate changes.\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"build-refprojects\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">target</span> <span class=\"attr\">description</span>=<span class=\"string\">\"copy Eclipse compiler jars to ant lib directory\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"init-eclipse-compiler\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">copy</span> <span class=\"attr\">todir</span>=<span class=\"string\">\"$&#123;ant.library.dir&#125;\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">fileset</span> <span class=\"attr\">dir</span>=<span class=\"string\">\"$&#123;ECLIPSE_HOME&#125;/plugins\"</span> <span class=\"attr\">includes</span>=<span class=\"string\">\"org.eclipse.jdt.core_*.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">copy</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">unzip</span> <span class=\"attr\">dest</span>=<span class=\"string\">\"$&#123;ant.library.dir&#125;\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">patternset</span> <span class=\"attr\">includes</span>=<span class=\"string\">\"jdtCompilerAdapter.jar\"</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">fileset</span> <span class=\"attr\">dir</span>=<span class=\"string\">\"$&#123;ECLIPSE_HOME&#125;/plugins\"</span> <span class=\"attr\">includes</span>=<span class=\"string\">\"org.eclipse.jdt.core_*.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">unzip</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">target</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">target</span> <span class=\"attr\">description</span>=<span class=\"string\">\"compile project with Eclipse compiler\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"build-eclipse-compiler\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"build.compiler\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"org.eclipse.jdt.core.JDTCompilerAdapter\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">antcall</span> <span class=\"attr\">target</span>=<span class=\"string\">\"build\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">target</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">target</span> <span class=\"attr\">name</span>=<span class=\"string\">\"war\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">war</span> <span class=\"attr\">destfile</span> = <span class=\"string\">\"releases/gx-desk.war\"</span> <span class=\"attr\">webxml</span> = <span class=\"string\">\"WebContent/WEB-INF/web.xml\"</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">fileset</span> <span class=\"attr\">dir</span> = <span class=\"string\">\"WebContent\"</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">include</span> <span class=\"attr\">name</span> = <span class=\"string\">\"**/*\"</span>/&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;/<span class=\"name\">fileset</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">classes</span> <span class=\"attr\">dir</span>=<span class=\"string\">\"build/classes\"</span>/&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">webinf</span> <span class=\"attr\">dir</span>=<span class=\"string\">\"WebContent/WEB-INF/lib\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">war</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">target</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br></pre></td></tr></table></figure>"},{"layout":"post","title":"docker初探","date":"2016-06-29T09:57:00.000Z","comments":1,"_content":"\n想在公司安装bugzilla用于bug跟踪，又不想做太多的安装配置，这时候使用docker是非常不错的方式，记录一些安装过程中用到的命令参数。我的bugzilla在docker中的容器名称为bugzilla。\n\n<!--more-->\n\n1. 启动/停止容器bugzilla：`docker start/stop bugzilla`；\n1. 查看容器bugzilla日志：`docker logs bugzilla`；\n1. 查看运行中的容器：`docker ps`；\n1. 与容器bugzilla进行内容传输：\n    ```\n    docker cp [OPTIONS] CONTAINER:PATH LOCALPATH|-\n    docker cp [OPTIONS] LOCALPATH|- CONTAINER:PATH\n    ```\n1. 在容器bugzilla内执行命令：\n    ```\n    docker exec [OPTIONS] CONTAINER COMMAND [ARG...]\n    ```\n1. 登入容器bugzilla：\n   ```\n   docker exec -it bugzilla bash\n   ```\n","source":"_posts/2016-06-29-bugzilla-in-docker.markdown","raw":"---\nlayout: post\ntitle: docker初探\ndate: '2016-06-29 17:57'\ncomments: true\ncategories: ['编程实践'] \ntags: ['Docker']\n---\n\n想在公司安装bugzilla用于bug跟踪，又不想做太多的安装配置，这时候使用docker是非常不错的方式，记录一些安装过程中用到的命令参数。我的bugzilla在docker中的容器名称为bugzilla。\n\n<!--more-->\n\n1. 启动/停止容器bugzilla：`docker start/stop bugzilla`；\n1. 查看容器bugzilla日志：`docker logs bugzilla`；\n1. 查看运行中的容器：`docker ps`；\n1. 与容器bugzilla进行内容传输：\n    ```\n    docker cp [OPTIONS] CONTAINER:PATH LOCALPATH|-\n    docker cp [OPTIONS] LOCALPATH|- CONTAINER:PATH\n    ```\n1. 在容器bugzilla内执行命令：\n    ```\n    docker exec [OPTIONS] CONTAINER COMMAND [ARG...]\n    ```\n1. 登入容器bugzilla：\n   ```\n   docker exec -it bugzilla bash\n   ```\n","slug":"bugzilla-in-docker","published":1,"updated":"2017-04-09T14:40:42.000Z","photos":[],"link":"","_id":"cjlza6m4x001fpgupfhyrxlbu","content":"<p>想在公司安装bugzilla用于bug跟踪，又不想做太多的安装配置，这时候使用docker是非常不错的方式，记录一些安装过程中用到的命令参数。我的bugzilla在docker中的容器名称为bugzilla。</p>\n<a id=\"more\"></a>\n<ol>\n<li>启动/停止容器bugzilla：<code>docker start/stop bugzilla</code>；</li>\n<li>查看容器bugzilla日志：<code>docker logs bugzilla</code>；</li>\n<li>查看运行中的容器：<code>docker ps</code>；</li>\n<li><p>与容器bugzilla进行内容传输：</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker cp [OPTIONS] CONTAINER:PATH LOCALPATH|-</span><br><span class=\"line\">docker cp [OPTIONS] LOCALPATH|- CONTAINER:PATH</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在容器bugzilla内执行命令：</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker exec [OPTIONS] CONTAINER COMMAND [ARG...]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>登入容器bugzilla：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker exec -it bugzilla bash</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>想在公司安装bugzilla用于bug跟踪，又不想做太多的安装配置，这时候使用docker是非常不错的方式，记录一些安装过程中用到的命令参数。我的bugzilla在docker中的容器名称为bugzilla。</p>","more":"<ol>\n<li>启动/停止容器bugzilla：<code>docker start/stop bugzilla</code>；</li>\n<li>查看容器bugzilla日志：<code>docker logs bugzilla</code>；</li>\n<li>查看运行中的容器：<code>docker ps</code>；</li>\n<li><p>与容器bugzilla进行内容传输：</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker cp [OPTIONS] CONTAINER:PATH LOCALPATH|-</span><br><span class=\"line\">docker cp [OPTIONS] LOCALPATH|- CONTAINER:PATH</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在容器bugzilla内执行命令：</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker exec [OPTIONS] CONTAINER COMMAND [ARG...]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>登入容器bugzilla：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker exec -it bugzilla bash</span><br></pre></td></tr></table></figure>\n</li>\n</ol>"},{"layout":"post","title":"管理工作上的反思","date":"2016-07-13T12:29:00.000Z","comments":1,"_content":"\n目前，我相当大一部分工作的时间花在了管理上，但却成效一般，我觉得我并没有把管理工作做好。但是，为什么要做好管理工作呢？我的看法是这样的：\n\n<!--more-->\n\n1. **精力有限**：人的精力是有限的，你不可能把所有事情都揽在自己身上，这样你很难走得很远，很难做成所谓“大事”；\n2. **时间有限**：管理工作的目的是把团队打造成一个稳定运行且能自适应、自调整的系统，这时候你就大大节省了自己的时间，有了更高的自由度（这时候你可以做一些更有价值的事情）；\n3. **业务需要**：假设因为管理的问题导致项目无法正常推进，那么管理必须变革，亦即“好的”管理工作应能使事情推进得更好；\n4. **有趣**：这本身就不是一件容易的事情，**不容易才有趣不是吗？**\n\n那么，我为什么会觉得自己没做好管理工作，我遇到了哪些问题呢？其次，我又该如何解决这些问题呢？\n\n## 我遇到了什么问题\n\n问题的背景是，这两个多月以来，我们整个团队（本团队4人，借调2人，共6人）都忙于一个项目的上线。从结果上来看，我们比承诺交付时间滞后了半个月，而且交付当天还有一部分功能没有完成。首先，我必须承认工作量是巨大的，但是怎么都不应该出现如此长时间的滞后，甚至是部分功能没完成（原计划的工作大概还需要5个工作日才全部完成）。也就是说，原本按我的评估，团队的战斗力绝对是可以拿下这个项目的，那为什么没有做到呢？我认为是我的管理上出了问题，而不是某个员工偷懒误事，或者说我的领导中断我临门又插了一脚其他事情进来。\n\n那么，我的管理到底出了什么问题？\n\n1. **员工并不知道自己一个整体的计划**：在整个项目行进过程中，其实已经有一两次员工问我接下来该做什么了，我没有予以足够的重视，总是给了他一个周的工作计划就把他打发了。而且我给的周工作计划是非常具体的事务，站在员工的角度，只是把事情做完就行了，很多信息他都不知道。那么问题来了？假如我是一个员工，我就会想：**我这部分工作对整体有什么影响？我是慢慢做呢还是得加班加点做呢？假如我这部分工作滞后，应该也没问题的吧？我下星期又该干嘛呢？下下个星期呢？**结果是怎么样呢？确实，有那么一段时间，员工确实工作得比较散，虽然我后面及时的提出了我们整体进度滞后，整体的节奏加快了，但还是按照周工作计划的方式来推进事情，并没有提及整体。结果呢？竟然有一些非常重要的事情，假如我不提醒，员工可能会忘记（例如一个重要的服务承诺：运行日报的自动生成），我当时想，不是吧你竟然不知道这是服务承诺的一部分？但转念想，我真的有交待清楚吗？员工并不清楚自己做的一件具体事情对于整体而言是什么价值，或者说，**他从来就没有清晰的知道，自己接下来这一个多月项目上线期的工作目标是什么，应该做到什么程度**。假如员工对自己的工作目标不清晰，其自我控制就无从谈起了，因此他会在最该咬紧牙关的时候放松（因为他没有意识到），然后在临近交付时忙得焦头烂额。总结一句：**我没有充分的调度员工**。\n2. **员工的成果缺乏质量把关**：管理学中有个概念叫PDCA环，P即Plan计划，D是Do做事情，C是Check检查，A是Action调整（根据检查的结果）。其实我上一条说的问题可以归结为Plan上的问题，那么这一条要说的就是Check和Action的问题了——我把很多Check和Action都放到了最后，而没有及时的去检查和修正。这非常要命，**因为这些问题在悄悄吞食项目的剩余时间**（我自认为给予的时间是包含了Check和Action的，而员工认为只是包含Do）；\n3. **我没有一开始就做进度跟踪**：一开始，我只是“觉得”能完成，一个星期才做一次进度跟踪，因此并没有准确的感知进度。等到时间节点临近（临近交付的后面两三个星期），才被逼着去做以日为频度的进度跟踪。\n4. **工作量估计错误以及没有合理利用资源**：原本临时借调了运维团队的同事帮着做一些事情的，但中间时候他们临时又被指派去做其他事情了。好了，我这边原定由他们负责的工作就暂时落下了，我甚至还答应帮忙把原先指派给他们的事情接过来，问题就出在这里。且不说承接过来的工作量大不大，我的团队由于我没有调度好，已经是工作滞后的了，事实上，我反而需要运维的同事反过来帮我才对，因为后面一段时间我发现我的团队的人都需要加班到很晚，而运维的同事却相对而言比较轻松。一方面我没有对团队的工作量负责（已经滞后还增添新的），另一方面我没有请求支援（当然，我存有一些私心，想通过这么一件共同作战的事情来提升团队的凝聚力。现在想来却是荒谬，**凝聚力是靠大家共同辛苦加班来提升的吗？**）。\n\n## 我该如何解决这些问题\n\n1. 针对上面的第一个问题，我必须让每个员工清晰的知道：**他近期、中期、长期的工作目标是什么，以及我们为什么要做这些事情**。这也意味着，我必须对所负责的项目的未来（软件部分）有明晰的规划（包含一些必要的明确的流程），否则员工的工作目标无从谈起，目前看来，我这方面是欠缺的。\n2. 针对上面的第二个问题，**必须把质量检查纳入过程中**，在过程中及时的发现问题，而不是集中堆积到项目的末期。这一点可以引入一些工具辅助，如引入一些代码的质量检查工具、交付代码的测试用例等等，但更重要的是要形成规范。\n3. 针对上面的第三个问题，进度必须在过程中跟踪，且需要精准的度量，而不是“觉得”应该是这么多，显然甘特图能比较好的解决我这个问题，及时的发现过程中的问题并做出调整。\n4. 针对上面的第四个问题，我必须拿进度数据说话，而不是“觉得”能行就把任务接了过来，这是对自己团队的负责，也是对总体进度的负责。另外，需要借调同事就尽早提出而不是死顶，现在想想简直太愚蠢了。\n\n反思下来，其实以上问题影射了我一直以来存在的几个问题：\n1. **不善于规划**；\n2. 逃避一些繁琐的事情，但最终还是得面对，**既然是迟早得面对的那应该一开始就想清楚该如何应对**（比如工作中的结果检查，比如交待清楚工作背景）；\n3. 不是特别理性，总把一些事情**想当然**了，实际上根本不是那样的。保持理性是多么的重要啊！\n\n还有，更要命的是，可能有些问题我自己目前都未必意识得到，发现多少改多少吧。另外，其实我应该立即去找一本软件管理的书来看，我相信自己能做得越来越好的:-)\n","source":"_posts/2016-07-13-to-be-a-manager.markdown","raw":"---\nlayout: post\ntitle: 管理工作上的反思\ndate: '2016-07-13 20:29'\ncomments: true\ncategories: ['一些感悟']\ntags: ['贯行']\n---\n\n目前，我相当大一部分工作的时间花在了管理上，但却成效一般，我觉得我并没有把管理工作做好。但是，为什么要做好管理工作呢？我的看法是这样的：\n\n<!--more-->\n\n1. **精力有限**：人的精力是有限的，你不可能把所有事情都揽在自己身上，这样你很难走得很远，很难做成所谓“大事”；\n2. **时间有限**：管理工作的目的是把团队打造成一个稳定运行且能自适应、自调整的系统，这时候你就大大节省了自己的时间，有了更高的自由度（这时候你可以做一些更有价值的事情）；\n3. **业务需要**：假设因为管理的问题导致项目无法正常推进，那么管理必须变革，亦即“好的”管理工作应能使事情推进得更好；\n4. **有趣**：这本身就不是一件容易的事情，**不容易才有趣不是吗？**\n\n那么，我为什么会觉得自己没做好管理工作，我遇到了哪些问题呢？其次，我又该如何解决这些问题呢？\n\n## 我遇到了什么问题\n\n问题的背景是，这两个多月以来，我们整个团队（本团队4人，借调2人，共6人）都忙于一个项目的上线。从结果上来看，我们比承诺交付时间滞后了半个月，而且交付当天还有一部分功能没有完成。首先，我必须承认工作量是巨大的，但是怎么都不应该出现如此长时间的滞后，甚至是部分功能没完成（原计划的工作大概还需要5个工作日才全部完成）。也就是说，原本按我的评估，团队的战斗力绝对是可以拿下这个项目的，那为什么没有做到呢？我认为是我的管理上出了问题，而不是某个员工偷懒误事，或者说我的领导中断我临门又插了一脚其他事情进来。\n\n那么，我的管理到底出了什么问题？\n\n1. **员工并不知道自己一个整体的计划**：在整个项目行进过程中，其实已经有一两次员工问我接下来该做什么了，我没有予以足够的重视，总是给了他一个周的工作计划就把他打发了。而且我给的周工作计划是非常具体的事务，站在员工的角度，只是把事情做完就行了，很多信息他都不知道。那么问题来了？假如我是一个员工，我就会想：**我这部分工作对整体有什么影响？我是慢慢做呢还是得加班加点做呢？假如我这部分工作滞后，应该也没问题的吧？我下星期又该干嘛呢？下下个星期呢？**结果是怎么样呢？确实，有那么一段时间，员工确实工作得比较散，虽然我后面及时的提出了我们整体进度滞后，整体的节奏加快了，但还是按照周工作计划的方式来推进事情，并没有提及整体。结果呢？竟然有一些非常重要的事情，假如我不提醒，员工可能会忘记（例如一个重要的服务承诺：运行日报的自动生成），我当时想，不是吧你竟然不知道这是服务承诺的一部分？但转念想，我真的有交待清楚吗？员工并不清楚自己做的一件具体事情对于整体而言是什么价值，或者说，**他从来就没有清晰的知道，自己接下来这一个多月项目上线期的工作目标是什么，应该做到什么程度**。假如员工对自己的工作目标不清晰，其自我控制就无从谈起了，因此他会在最该咬紧牙关的时候放松（因为他没有意识到），然后在临近交付时忙得焦头烂额。总结一句：**我没有充分的调度员工**。\n2. **员工的成果缺乏质量把关**：管理学中有个概念叫PDCA环，P即Plan计划，D是Do做事情，C是Check检查，A是Action调整（根据检查的结果）。其实我上一条说的问题可以归结为Plan上的问题，那么这一条要说的就是Check和Action的问题了——我把很多Check和Action都放到了最后，而没有及时的去检查和修正。这非常要命，**因为这些问题在悄悄吞食项目的剩余时间**（我自认为给予的时间是包含了Check和Action的，而员工认为只是包含Do）；\n3. **我没有一开始就做进度跟踪**：一开始，我只是“觉得”能完成，一个星期才做一次进度跟踪，因此并没有准确的感知进度。等到时间节点临近（临近交付的后面两三个星期），才被逼着去做以日为频度的进度跟踪。\n4. **工作量估计错误以及没有合理利用资源**：原本临时借调了运维团队的同事帮着做一些事情的，但中间时候他们临时又被指派去做其他事情了。好了，我这边原定由他们负责的工作就暂时落下了，我甚至还答应帮忙把原先指派给他们的事情接过来，问题就出在这里。且不说承接过来的工作量大不大，我的团队由于我没有调度好，已经是工作滞后的了，事实上，我反而需要运维的同事反过来帮我才对，因为后面一段时间我发现我的团队的人都需要加班到很晚，而运维的同事却相对而言比较轻松。一方面我没有对团队的工作量负责（已经滞后还增添新的），另一方面我没有请求支援（当然，我存有一些私心，想通过这么一件共同作战的事情来提升团队的凝聚力。现在想来却是荒谬，**凝聚力是靠大家共同辛苦加班来提升的吗？**）。\n\n## 我该如何解决这些问题\n\n1. 针对上面的第一个问题，我必须让每个员工清晰的知道：**他近期、中期、长期的工作目标是什么，以及我们为什么要做这些事情**。这也意味着，我必须对所负责的项目的未来（软件部分）有明晰的规划（包含一些必要的明确的流程），否则员工的工作目标无从谈起，目前看来，我这方面是欠缺的。\n2. 针对上面的第二个问题，**必须把质量检查纳入过程中**，在过程中及时的发现问题，而不是集中堆积到项目的末期。这一点可以引入一些工具辅助，如引入一些代码的质量检查工具、交付代码的测试用例等等，但更重要的是要形成规范。\n3. 针对上面的第三个问题，进度必须在过程中跟踪，且需要精准的度量，而不是“觉得”应该是这么多，显然甘特图能比较好的解决我这个问题，及时的发现过程中的问题并做出调整。\n4. 针对上面的第四个问题，我必须拿进度数据说话，而不是“觉得”能行就把任务接了过来，这是对自己团队的负责，也是对总体进度的负责。另外，需要借调同事就尽早提出而不是死顶，现在想想简直太愚蠢了。\n\n反思下来，其实以上问题影射了我一直以来存在的几个问题：\n1. **不善于规划**；\n2. 逃避一些繁琐的事情，但最终还是得面对，**既然是迟早得面对的那应该一开始就想清楚该如何应对**（比如工作中的结果检查，比如交待清楚工作背景）；\n3. 不是特别理性，总把一些事情**想当然**了，实际上根本不是那样的。保持理性是多么的重要啊！\n\n还有，更要命的是，可能有些问题我自己目前都未必意识得到，发现多少改多少吧。另外，其实我应该立即去找一本软件管理的书来看，我相信自己能做得越来越好的:-)\n","slug":"to-be-a-manager","published":1,"updated":"2017-04-09T14:40:20.000Z","photos":[],"link":"","_id":"cjlza6m4y001hpgup10cpio92","content":"<p>目前，我相当大一部分工作的时间花在了管理上，但却成效一般，我觉得我并没有把管理工作做好。但是，为什么要做好管理工作呢？我的看法是这样的：</p>\n<a id=\"more\"></a>\n<ol>\n<li><strong>精力有限</strong>：人的精力是有限的，你不可能把所有事情都揽在自己身上，这样你很难走得很远，很难做成所谓“大事”；</li>\n<li><strong>时间有限</strong>：管理工作的目的是把团队打造成一个稳定运行且能自适应、自调整的系统，这时候你就大大节省了自己的时间，有了更高的自由度（这时候你可以做一些更有价值的事情）；</li>\n<li><strong>业务需要</strong>：假设因为管理的问题导致项目无法正常推进，那么管理必须变革，亦即“好的”管理工作应能使事情推进得更好；</li>\n<li><strong>有趣</strong>：这本身就不是一件容易的事情，<strong>不容易才有趣不是吗？</strong></li>\n</ol>\n<p>那么，我为什么会觉得自己没做好管理工作，我遇到了哪些问题呢？其次，我又该如何解决这些问题呢？</p>\n<h2 id=\"我遇到了什么问题\"><a href=\"#我遇到了什么问题\" class=\"headerlink\" title=\"我遇到了什么问题\"></a>我遇到了什么问题</h2><p>问题的背景是，这两个多月以来，我们整个团队（本团队4人，借调2人，共6人）都忙于一个项目的上线。从结果上来看，我们比承诺交付时间滞后了半个月，而且交付当天还有一部分功能没有完成。首先，我必须承认工作量是巨大的，但是怎么都不应该出现如此长时间的滞后，甚至是部分功能没完成（原计划的工作大概还需要5个工作日才全部完成）。也就是说，原本按我的评估，团队的战斗力绝对是可以拿下这个项目的，那为什么没有做到呢？我认为是我的管理上出了问题，而不是某个员工偷懒误事，或者说我的领导中断我临门又插了一脚其他事情进来。</p>\n<p>那么，我的管理到底出了什么问题？</p>\n<ol>\n<li><strong>员工并不知道自己一个整体的计划</strong>：在整个项目行进过程中，其实已经有一两次员工问我接下来该做什么了，我没有予以足够的重视，总是给了他一个周的工作计划就把他打发了。而且我给的周工作计划是非常具体的事务，站在员工的角度，只是把事情做完就行了，很多信息他都不知道。那么问题来了？假如我是一个员工，我就会想：<strong>我这部分工作对整体有什么影响？我是慢慢做呢还是得加班加点做呢？假如我这部分工作滞后，应该也没问题的吧？我下星期又该干嘛呢？下下个星期呢？</strong>结果是怎么样呢？确实，有那么一段时间，员工确实工作得比较散，虽然我后面及时的提出了我们整体进度滞后，整体的节奏加快了，但还是按照周工作计划的方式来推进事情，并没有提及整体。结果呢？竟然有一些非常重要的事情，假如我不提醒，员工可能会忘记（例如一个重要的服务承诺：运行日报的自动生成），我当时想，不是吧你竟然不知道这是服务承诺的一部分？但转念想，我真的有交待清楚吗？员工并不清楚自己做的一件具体事情对于整体而言是什么价值，或者说，<strong>他从来就没有清晰的知道，自己接下来这一个多月项目上线期的工作目标是什么，应该做到什么程度</strong>。假如员工对自己的工作目标不清晰，其自我控制就无从谈起了，因此他会在最该咬紧牙关的时候放松（因为他没有意识到），然后在临近交付时忙得焦头烂额。总结一句：<strong>我没有充分的调度员工</strong>。</li>\n<li><strong>员工的成果缺乏质量把关</strong>：管理学中有个概念叫PDCA环，P即Plan计划，D是Do做事情，C是Check检查，A是Action调整（根据检查的结果）。其实我上一条说的问题可以归结为Plan上的问题，那么这一条要说的就是Check和Action的问题了——我把很多Check和Action都放到了最后，而没有及时的去检查和修正。这非常要命，<strong>因为这些问题在悄悄吞食项目的剩余时间</strong>（我自认为给予的时间是包含了Check和Action的，而员工认为只是包含Do）；</li>\n<li><strong>我没有一开始就做进度跟踪</strong>：一开始，我只是“觉得”能完成，一个星期才做一次进度跟踪，因此并没有准确的感知进度。等到时间节点临近（临近交付的后面两三个星期），才被逼着去做以日为频度的进度跟踪。</li>\n<li><strong>工作量估计错误以及没有合理利用资源</strong>：原本临时借调了运维团队的同事帮着做一些事情的，但中间时候他们临时又被指派去做其他事情了。好了，我这边原定由他们负责的工作就暂时落下了，我甚至还答应帮忙把原先指派给他们的事情接过来，问题就出在这里。且不说承接过来的工作量大不大，我的团队由于我没有调度好，已经是工作滞后的了，事实上，我反而需要运维的同事反过来帮我才对，因为后面一段时间我发现我的团队的人都需要加班到很晚，而运维的同事却相对而言比较轻松。一方面我没有对团队的工作量负责（已经滞后还增添新的），另一方面我没有请求支援（当然，我存有一些私心，想通过这么一件共同作战的事情来提升团队的凝聚力。现在想来却是荒谬，<strong>凝聚力是靠大家共同辛苦加班来提升的吗？</strong>）。</li>\n</ol>\n<h2 id=\"我该如何解决这些问题\"><a href=\"#我该如何解决这些问题\" class=\"headerlink\" title=\"我该如何解决这些问题\"></a>我该如何解决这些问题</h2><ol>\n<li>针对上面的第一个问题，我必须让每个员工清晰的知道：<strong>他近期、中期、长期的工作目标是什么，以及我们为什么要做这些事情</strong>。这也意味着，我必须对所负责的项目的未来（软件部分）有明晰的规划（包含一些必要的明确的流程），否则员工的工作目标无从谈起，目前看来，我这方面是欠缺的。</li>\n<li>针对上面的第二个问题，<strong>必须把质量检查纳入过程中</strong>，在过程中及时的发现问题，而不是集中堆积到项目的末期。这一点可以引入一些工具辅助，如引入一些代码的质量检查工具、交付代码的测试用例等等，但更重要的是要形成规范。</li>\n<li>针对上面的第三个问题，进度必须在过程中跟踪，且需要精准的度量，而不是“觉得”应该是这么多，显然甘特图能比较好的解决我这个问题，及时的发现过程中的问题并做出调整。</li>\n<li>针对上面的第四个问题，我必须拿进度数据说话，而不是“觉得”能行就把任务接了过来，这是对自己团队的负责，也是对总体进度的负责。另外，需要借调同事就尽早提出而不是死顶，现在想想简直太愚蠢了。</li>\n</ol>\n<p>反思下来，其实以上问题影射了我一直以来存在的几个问题：</p>\n<ol>\n<li><strong>不善于规划</strong>；</li>\n<li>逃避一些繁琐的事情，但最终还是得面对，<strong>既然是迟早得面对的那应该一开始就想清楚该如何应对</strong>（比如工作中的结果检查，比如交待清楚工作背景）；</li>\n<li>不是特别理性，总把一些事情<strong>想当然</strong>了，实际上根本不是那样的。保持理性是多么的重要啊！</li>\n</ol>\n<p>还有，更要命的是，可能有些问题我自己目前都未必意识得到，发现多少改多少吧。另外，其实我应该立即去找一本软件管理的书来看，我相信自己能做得越来越好的:-)</p>\n","site":{"data":{}},"excerpt":"<p>目前，我相当大一部分工作的时间花在了管理上，但却成效一般，我觉得我并没有把管理工作做好。但是，为什么要做好管理工作呢？我的看法是这样的：</p>","more":"<ol>\n<li><strong>精力有限</strong>：人的精力是有限的，你不可能把所有事情都揽在自己身上，这样你很难走得很远，很难做成所谓“大事”；</li>\n<li><strong>时间有限</strong>：管理工作的目的是把团队打造成一个稳定运行且能自适应、自调整的系统，这时候你就大大节省了自己的时间，有了更高的自由度（这时候你可以做一些更有价值的事情）；</li>\n<li><strong>业务需要</strong>：假设因为管理的问题导致项目无法正常推进，那么管理必须变革，亦即“好的”管理工作应能使事情推进得更好；</li>\n<li><strong>有趣</strong>：这本身就不是一件容易的事情，<strong>不容易才有趣不是吗？</strong></li>\n</ol>\n<p>那么，我为什么会觉得自己没做好管理工作，我遇到了哪些问题呢？其次，我又该如何解决这些问题呢？</p>\n<h2 id=\"我遇到了什么问题\"><a href=\"#我遇到了什么问题\" class=\"headerlink\" title=\"我遇到了什么问题\"></a>我遇到了什么问题</h2><p>问题的背景是，这两个多月以来，我们整个团队（本团队4人，借调2人，共6人）都忙于一个项目的上线。从结果上来看，我们比承诺交付时间滞后了半个月，而且交付当天还有一部分功能没有完成。首先，我必须承认工作量是巨大的，但是怎么都不应该出现如此长时间的滞后，甚至是部分功能没完成（原计划的工作大概还需要5个工作日才全部完成）。也就是说，原本按我的评估，团队的战斗力绝对是可以拿下这个项目的，那为什么没有做到呢？我认为是我的管理上出了问题，而不是某个员工偷懒误事，或者说我的领导中断我临门又插了一脚其他事情进来。</p>\n<p>那么，我的管理到底出了什么问题？</p>\n<ol>\n<li><strong>员工并不知道自己一个整体的计划</strong>：在整个项目行进过程中，其实已经有一两次员工问我接下来该做什么了，我没有予以足够的重视，总是给了他一个周的工作计划就把他打发了。而且我给的周工作计划是非常具体的事务，站在员工的角度，只是把事情做完就行了，很多信息他都不知道。那么问题来了？假如我是一个员工，我就会想：<strong>我这部分工作对整体有什么影响？我是慢慢做呢还是得加班加点做呢？假如我这部分工作滞后，应该也没问题的吧？我下星期又该干嘛呢？下下个星期呢？</strong>结果是怎么样呢？确实，有那么一段时间，员工确实工作得比较散，虽然我后面及时的提出了我们整体进度滞后，整体的节奏加快了，但还是按照周工作计划的方式来推进事情，并没有提及整体。结果呢？竟然有一些非常重要的事情，假如我不提醒，员工可能会忘记（例如一个重要的服务承诺：运行日报的自动生成），我当时想，不是吧你竟然不知道这是服务承诺的一部分？但转念想，我真的有交待清楚吗？员工并不清楚自己做的一件具体事情对于整体而言是什么价值，或者说，<strong>他从来就没有清晰的知道，自己接下来这一个多月项目上线期的工作目标是什么，应该做到什么程度</strong>。假如员工对自己的工作目标不清晰，其自我控制就无从谈起了，因此他会在最该咬紧牙关的时候放松（因为他没有意识到），然后在临近交付时忙得焦头烂额。总结一句：<strong>我没有充分的调度员工</strong>。</li>\n<li><strong>员工的成果缺乏质量把关</strong>：管理学中有个概念叫PDCA环，P即Plan计划，D是Do做事情，C是Check检查，A是Action调整（根据检查的结果）。其实我上一条说的问题可以归结为Plan上的问题，那么这一条要说的就是Check和Action的问题了——我把很多Check和Action都放到了最后，而没有及时的去检查和修正。这非常要命，<strong>因为这些问题在悄悄吞食项目的剩余时间</strong>（我自认为给予的时间是包含了Check和Action的，而员工认为只是包含Do）；</li>\n<li><strong>我没有一开始就做进度跟踪</strong>：一开始，我只是“觉得”能完成，一个星期才做一次进度跟踪，因此并没有准确的感知进度。等到时间节点临近（临近交付的后面两三个星期），才被逼着去做以日为频度的进度跟踪。</li>\n<li><strong>工作量估计错误以及没有合理利用资源</strong>：原本临时借调了运维团队的同事帮着做一些事情的，但中间时候他们临时又被指派去做其他事情了。好了，我这边原定由他们负责的工作就暂时落下了，我甚至还答应帮忙把原先指派给他们的事情接过来，问题就出在这里。且不说承接过来的工作量大不大，我的团队由于我没有调度好，已经是工作滞后的了，事实上，我反而需要运维的同事反过来帮我才对，因为后面一段时间我发现我的团队的人都需要加班到很晚，而运维的同事却相对而言比较轻松。一方面我没有对团队的工作量负责（已经滞后还增添新的），另一方面我没有请求支援（当然，我存有一些私心，想通过这么一件共同作战的事情来提升团队的凝聚力。现在想来却是荒谬，<strong>凝聚力是靠大家共同辛苦加班来提升的吗？</strong>）。</li>\n</ol>\n<h2 id=\"我该如何解决这些问题\"><a href=\"#我该如何解决这些问题\" class=\"headerlink\" title=\"我该如何解决这些问题\"></a>我该如何解决这些问题</h2><ol>\n<li>针对上面的第一个问题，我必须让每个员工清晰的知道：<strong>他近期、中期、长期的工作目标是什么，以及我们为什么要做这些事情</strong>。这也意味着，我必须对所负责的项目的未来（软件部分）有明晰的规划（包含一些必要的明确的流程），否则员工的工作目标无从谈起，目前看来，我这方面是欠缺的。</li>\n<li>针对上面的第二个问题，<strong>必须把质量检查纳入过程中</strong>，在过程中及时的发现问题，而不是集中堆积到项目的末期。这一点可以引入一些工具辅助，如引入一些代码的质量检查工具、交付代码的测试用例等等，但更重要的是要形成规范。</li>\n<li>针对上面的第三个问题，进度必须在过程中跟踪，且需要精准的度量，而不是“觉得”应该是这么多，显然甘特图能比较好的解决我这个问题，及时的发现过程中的问题并做出调整。</li>\n<li>针对上面的第四个问题，我必须拿进度数据说话，而不是“觉得”能行就把任务接了过来，这是对自己团队的负责，也是对总体进度的负责。另外，需要借调同事就尽早提出而不是死顶，现在想想简直太愚蠢了。</li>\n</ol>\n<p>反思下来，其实以上问题影射了我一直以来存在的几个问题：</p>\n<ol>\n<li><strong>不善于规划</strong>；</li>\n<li>逃避一些繁琐的事情，但最终还是得面对，<strong>既然是迟早得面对的那应该一开始就想清楚该如何应对</strong>（比如工作中的结果检查，比如交待清楚工作背景）；</li>\n<li>不是特别理性，总把一些事情<strong>想当然</strong>了，实际上根本不是那样的。保持理性是多么的重要啊！</li>\n</ol>\n<p>还有，更要命的是，可能有些问题我自己目前都未必意识得到，发现多少改多少吧。另外，其实我应该立即去找一本软件管理的书来看，我相信自己能做得越来越好的:-)</p>"},{"layout":"post","title":"linux程序崩溃时无corefile","date":"2016-07-04T09:52:00.000Z","comments":1,"_content":"\n运行在beaglebone上的linux程序崩溃时（非daemon）没有生成corefile，解决思路如下：\n\n<!--more-->\n\n运行程序前设置`ulimit -c unlimited`（可配置在其start脚本）；\n\n若上述设置还不能解决问题，则\n1. 安装libc的调试包：`apt-get install libc6-dbg`；\n2. 使用gdb包裹你的程序（这时候不能是daemon了），命令如下：\n`gdb --batch -x your_gdbinit_file your_program`\n\n注1：libc6-dbg的作用如下，\n> libc6-dbg - Embedded GNU C Library: detached debugging symbols\n\n注2：`your_gdbinit_file`是gdbinit文件，用于指示gdb在batch模式下该执行何种指令，内容举例如下：\n\n```\nrun\nbt\ngenerate-core-file\nquit\n```\n\n其中`bt`用于输出错误堆栈，`generate-core-file`用于生成core文件（文件格式为core.pid）；\n","source":"_posts/2016-07-04-generate-core-file.markdown","raw":"---\nlayout: post\ntitle: linux程序崩溃时无corefile\ndate: '2016-07-04 17:52'\ncomments: true\ncategories: ['编程实践'] \ntags: ['Linux']\n---\n\n运行在beaglebone上的linux程序崩溃时（非daemon）没有生成corefile，解决思路如下：\n\n<!--more-->\n\n运行程序前设置`ulimit -c unlimited`（可配置在其start脚本）；\n\n若上述设置还不能解决问题，则\n1. 安装libc的调试包：`apt-get install libc6-dbg`；\n2. 使用gdb包裹你的程序（这时候不能是daemon了），命令如下：\n`gdb --batch -x your_gdbinit_file your_program`\n\n注1：libc6-dbg的作用如下，\n> libc6-dbg - Embedded GNU C Library: detached debugging symbols\n\n注2：`your_gdbinit_file`是gdbinit文件，用于指示gdb在batch模式下该执行何种指令，内容举例如下：\n\n```\nrun\nbt\ngenerate-core-file\nquit\n```\n\n其中`bt`用于输出错误堆栈，`generate-core-file`用于生成core文件（文件格式为core.pid）；\n","slug":"generate-core-file","published":1,"updated":"2017-04-09T14:40:30.000Z","photos":[],"link":"","_id":"cjlza6m50001kpgupn8bb9nhw","content":"<p>运行在beaglebone上的linux程序崩溃时（非daemon）没有生成corefile，解决思路如下：</p>\n<a id=\"more\"></a>\n<p>运行程序前设置<code>ulimit -c unlimited</code>（可配置在其start脚本）；</p>\n<p>若上述设置还不能解决问题，则</p>\n<ol>\n<li>安装libc的调试包：<code>apt-get install libc6-dbg</code>；</li>\n<li>使用gdb包裹你的程序（这时候不能是daemon了），命令如下：<br><code>gdb --batch -x your_gdbinit_file your_program</code></li>\n</ol>\n<p>注1：libc6-dbg的作用如下，</p>\n<blockquote>\n<p>libc6-dbg - Embedded GNU C Library: detached debugging symbols</p>\n</blockquote>\n<p>注2：<code>your_gdbinit_file</code>是gdbinit文件，用于指示gdb在batch模式下该执行何种指令，内容举例如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">run</span><br><span class=\"line\">bt</span><br><span class=\"line\">generate-core-file</span><br><span class=\"line\">quit</span><br></pre></td></tr></table></figure>\n<p>其中<code>bt</code>用于输出错误堆栈，<code>generate-core-file</code>用于生成core文件（文件格式为core.pid）；</p>\n","site":{"data":{}},"excerpt":"<p>运行在beaglebone上的linux程序崩溃时（非daemon）没有生成corefile，解决思路如下：</p>","more":"<p>运行程序前设置<code>ulimit -c unlimited</code>（可配置在其start脚本）；</p>\n<p>若上述设置还不能解决问题，则</p>\n<ol>\n<li>安装libc的调试包：<code>apt-get install libc6-dbg</code>；</li>\n<li>使用gdb包裹你的程序（这时候不能是daemon了），命令如下：<br><code>gdb --batch -x your_gdbinit_file your_program</code></li>\n</ol>\n<p>注1：libc6-dbg的作用如下，</p>\n<blockquote>\n<p>libc6-dbg - Embedded GNU C Library: detached debugging symbols</p>\n</blockquote>\n<p>注2：<code>your_gdbinit_file</code>是gdbinit文件，用于指示gdb在batch模式下该执行何种指令，内容举例如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">run</span><br><span class=\"line\">bt</span><br><span class=\"line\">generate-core-file</span><br><span class=\"line\">quit</span><br></pre></td></tr></table></figure>\n<p>其中<code>bt</code>用于输出错误堆栈，<code>generate-core-file</code>用于生成core文件（文件格式为core.pid）；</p>"},{"layout":"post","title":"Chumen带来的一些启发","date":"2016-07-14T15:03:00.000Z","comments":1,"_content":"\n今晚，新官上任的张总（他坚持要我们叫他英文名Truman，听起来像“初吻”）拉着我们一帮骨干，开了一个项目营运相关的会议，我从他身上学到了不少东西，简单记录下。\n\n<!--more-->\n\n1. 会议必须要有规矩，\n    - 必须**明确要谈论的是什么**；\n    - **没有准备的会议不谈**，什么东西都不准备，寄希望于通过头脑风暴来谈论并解决问题的效率太低；\n    - 会议必须指定会议记录者，而且需要在会议结束后的24小时内将会议记录发送出来；\n    - 每个与会者必须**积极参与进来，充分发表自己的观点**；\n    - **会议必须准时参加**，不需要临近会议前再通知一遍；\n    - 明确由谁负责，**约定什么时间完成**；\n2. **必须要有清晰的业务规划**，我们要知道我们即将走到哪里去；\n3. **标准化**的高效营运；\n4. **提问题要顺便提出解决方案**；\n\n\n反观自身，工作上，\n\n1. 我并没有给予下属一个长远的技术目标，也没有给予自己一个长远的计划；\n2. 部门的工作我并没有制定太多标准（我不太喜欢做这个事情，所以本能的去回避），如应该遵循的流程是什么，规范又是什么；\n3. 对于什么时间完成一直都比较模糊，因此也造成了下属的不作为，没有对自己负责的事情担起足够的责任；\n\n\n生活上，我非常大的一个问题是一直都特别缺乏长远的一个规划，不是很明确自己要走到哪里去！\n\n总结一下，我必须做出改变的是，\n\n1. 不管是工作还是生活，**都必须制定长远工作目标**，工作目标需要向下和向上沟通并通过甘特图分解，生活目标要通过生命之花来分解。有了目标之后更重要的一点是：**要坚持不懈**；\n2. 工作上制定一些可以制定的标准；\n3. 不管是工作还是生活，**强调时间概念**，必须对自己和别人的时间负责；\n","source":"_posts/2016-07-14-learn-sth-from-chumen.markdown","raw":"---\nlayout: post\ntitle: Chumen带来的一些启发\ndate: '2016-07-14 23:03'\ncomments: true\ncategories: ['一些感悟'] \ntags: ['贯行']\n---\n\n今晚，新官上任的张总（他坚持要我们叫他英文名Truman，听起来像“初吻”）拉着我们一帮骨干，开了一个项目营运相关的会议，我从他身上学到了不少东西，简单记录下。\n\n<!--more-->\n\n1. 会议必须要有规矩，\n    - 必须**明确要谈论的是什么**；\n    - **没有准备的会议不谈**，什么东西都不准备，寄希望于通过头脑风暴来谈论并解决问题的效率太低；\n    - 会议必须指定会议记录者，而且需要在会议结束后的24小时内将会议记录发送出来；\n    - 每个与会者必须**积极参与进来，充分发表自己的观点**；\n    - **会议必须准时参加**，不需要临近会议前再通知一遍；\n    - 明确由谁负责，**约定什么时间完成**；\n2. **必须要有清晰的业务规划**，我们要知道我们即将走到哪里去；\n3. **标准化**的高效营运；\n4. **提问题要顺便提出解决方案**；\n\n\n反观自身，工作上，\n\n1. 我并没有给予下属一个长远的技术目标，也没有给予自己一个长远的计划；\n2. 部门的工作我并没有制定太多标准（我不太喜欢做这个事情，所以本能的去回避），如应该遵循的流程是什么，规范又是什么；\n3. 对于什么时间完成一直都比较模糊，因此也造成了下属的不作为，没有对自己负责的事情担起足够的责任；\n\n\n生活上，我非常大的一个问题是一直都特别缺乏长远的一个规划，不是很明确自己要走到哪里去！\n\n总结一下，我必须做出改变的是，\n\n1. 不管是工作还是生活，**都必须制定长远工作目标**，工作目标需要向下和向上沟通并通过甘特图分解，生活目标要通过生命之花来分解。有了目标之后更重要的一点是：**要坚持不懈**；\n2. 工作上制定一些可以制定的标准；\n3. 不管是工作还是生活，**强调时间概念**，必须对自己和别人的时间负责；\n","slug":"learn-sth-from-chumen","published":1,"updated":"2017-04-09T14:40:09.000Z","photos":[],"link":"","_id":"cjlza6m51001npgupsx99jqxs","content":"<p>今晚，新官上任的张总（他坚持要我们叫他英文名Truman，听起来像“初吻”）拉着我们一帮骨干，开了一个项目营运相关的会议，我从他身上学到了不少东西，简单记录下。</p>\n<a id=\"more\"></a>\n<ol>\n<li>会议必须要有规矩，<ul>\n<li>必须<strong>明确要谈论的是什么</strong>；</li>\n<li><strong>没有准备的会议不谈</strong>，什么东西都不准备，寄希望于通过头脑风暴来谈论并解决问题的效率太低；</li>\n<li>会议必须指定会议记录者，而且需要在会议结束后的24小时内将会议记录发送出来；</li>\n<li>每个与会者必须<strong>积极参与进来，充分发表自己的观点</strong>；</li>\n<li><strong>会议必须准时参加</strong>，不需要临近会议前再通知一遍；</li>\n<li>明确由谁负责，<strong>约定什么时间完成</strong>；</li>\n</ul>\n</li>\n<li><strong>必须要有清晰的业务规划</strong>，我们要知道我们即将走到哪里去；</li>\n<li><strong>标准化</strong>的高效营运；</li>\n<li><strong>提问题要顺便提出解决方案</strong>；</li>\n</ol>\n<p>反观自身，工作上，</p>\n<ol>\n<li>我并没有给予下属一个长远的技术目标，也没有给予自己一个长远的计划；</li>\n<li>部门的工作我并没有制定太多标准（我不太喜欢做这个事情，所以本能的去回避），如应该遵循的流程是什么，规范又是什么；</li>\n<li>对于什么时间完成一直都比较模糊，因此也造成了下属的不作为，没有对自己负责的事情担起足够的责任；</li>\n</ol>\n<p>生活上，我非常大的一个问题是一直都特别缺乏长远的一个规划，不是很明确自己要走到哪里去！</p>\n<p>总结一下，我必须做出改变的是，</p>\n<ol>\n<li>不管是工作还是生活，<strong>都必须制定长远工作目标</strong>，工作目标需要向下和向上沟通并通过甘特图分解，生活目标要通过生命之花来分解。有了目标之后更重要的一点是：<strong>要坚持不懈</strong>；</li>\n<li>工作上制定一些可以制定的标准；</li>\n<li>不管是工作还是生活，<strong>强调时间概念</strong>，必须对自己和别人的时间负责；</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>今晚，新官上任的张总（他坚持要我们叫他英文名Truman，听起来像“初吻”）拉着我们一帮骨干，开了一个项目营运相关的会议，我从他身上学到了不少东西，简单记录下。</p>","more":"<ol>\n<li>会议必须要有规矩，<ul>\n<li>必须<strong>明确要谈论的是什么</strong>；</li>\n<li><strong>没有准备的会议不谈</strong>，什么东西都不准备，寄希望于通过头脑风暴来谈论并解决问题的效率太低；</li>\n<li>会议必须指定会议记录者，而且需要在会议结束后的24小时内将会议记录发送出来；</li>\n<li>每个与会者必须<strong>积极参与进来，充分发表自己的观点</strong>；</li>\n<li><strong>会议必须准时参加</strong>，不需要临近会议前再通知一遍；</li>\n<li>明确由谁负责，<strong>约定什么时间完成</strong>；</li>\n</ul>\n</li>\n<li><strong>必须要有清晰的业务规划</strong>，我们要知道我们即将走到哪里去；</li>\n<li><strong>标准化</strong>的高效营运；</li>\n<li><strong>提问题要顺便提出解决方案</strong>；</li>\n</ol>\n<p>反观自身，工作上，</p>\n<ol>\n<li>我并没有给予下属一个长远的技术目标，也没有给予自己一个长远的计划；</li>\n<li>部门的工作我并没有制定太多标准（我不太喜欢做这个事情，所以本能的去回避），如应该遵循的流程是什么，规范又是什么；</li>\n<li>对于什么时间完成一直都比较模糊，因此也造成了下属的不作为，没有对自己负责的事情担起足够的责任；</li>\n</ol>\n<p>生活上，我非常大的一个问题是一直都特别缺乏长远的一个规划，不是很明确自己要走到哪里去！</p>\n<p>总结一下，我必须做出改变的是，</p>\n<ol>\n<li>不管是工作还是生活，<strong>都必须制定长远工作目标</strong>，工作目标需要向下和向上沟通并通过甘特图分解，生活目标要通过生命之花来分解。有了目标之后更重要的一点是：<strong>要坚持不懈</strong>；</li>\n<li>工作上制定一些可以制定的标准；</li>\n<li>不管是工作还是生活，<strong>强调时间概念</strong>，必须对自己和别人的时间负责；</li>\n</ol>"},{"layout":"post","title":"C/C++的const","date":"2016-08-02T01:04:00.000Z","comments":1,"_content":"\nC/C++都有const关键字？它有什么用途以及用来干嘛呢？\n\n<!--more-->\n\n## const variable\n\nconst修饰variable，意味着**该变量不可修改**，即变量是readonly的，这一点C和C++相同。例子如下：\n\n```c\nint main() {\n    const int a = 0; // 等价于：int const a = 0;\n    a = 1; // error：a是readonly的，不可修改\n    return 0;\n}\n```\n\n考虑到指针也是variable，上述特点对指针也适用，称为const pointer，const pointer的**dereference（*号取值）不受影响**。例子如下：\n\n```c\nint main() {\n    typedef int * int_ptr;\n    int a = 0, b = 1;\n    const int_ptr ip = &a; // 等价于：int_ptr const ip = &a;\n    ip = &b; // error：ip是readonly的，其值（标识地址）不可修改\n    *ip = 2; // 不影响指针的dereference\n    return 0;\n}\n```\n\n假如不想使用typedef的方式表示上述的const pointer，则必须写成如下形式：\n\n```c\nint a = 0;\nint * const ptr = &a;\nint const * ptr = &a; // error：这表示指向const int的指针\nconst int * ptr = &a; // error：这表示指向const int的指针\n```\n\nconst variable的特点如下：\n\n1. 声明和定义必须在同一个地方（声明变量时实例化）；\n2. const variable不可修改；\n3. const和type类型可以互换（指针不使用typedef的方式定义时需要格外注意）；\n\n## pointer to const variable\n\n指针指向const variable，意味着**不能通过指针去修改指针指向的内存**，即指针指向的内存是readonly的，但**指针本身的值修改不受影响（即可以重新绑定地址）**，这一点C和C++也相同，例子如下：\n\n```c\nint main() {\n    typedef int * const int_cst_ptr; // const pointer\n    typedef int const int_cst; // const int\n    int a = 0;\n    int *b = &a;\n    int_cst_ptr *ptr1 = &b;\n    int_cst *ptr2 = &a;\n    *ptr1 = NULL; // error：pointer to const，指针指向内存readonly\n    *ptr2 = 1; // error：pointer to const，指针指向内存readonly\n    ptr1 = NULL; // 指针本身的值修改不受影响（即可以重新绑定地址）\n    ptr2 = NULL;\n}\n```\n\n假设不使用typedef，上述例子需写成：\n\n```c\nint main() {\n    int a = 0;\n    int *b = &a;\n    int * const *ptr1 = &b; // 从右到左：ptr1 is a pointer to const pointer to int\n    int const *ptr2 = &a;\n    *ptr1 = NULL; // error：pointer to const，指针指向内存readonly\n    *ptr2 = 1; // error：pointer to const，指针指向内存readonly\n    ptr1 = NULL; // 指针本身的值修改不受影响（即可以重新绑定地址）\n    ptr2 = NULL;\n}\n```\n\npointer to const variable的特点：\n\n1. 指针指向内存不可修改；\n2. 指针本身的值（代表的地址）可以修改；\n\n举一个复杂点的例子，即有指针又有数组的情况：\n\n```c\n#include <stdio.h>\n#include <string.h>\n\nint main(int argc,char *argv[]) {\n    int i = 0;\n    for(; i<argc; i++) {\n        printf(\"argv[%d] : %s\\n\", i, argv[i]);\n        argv[i] = \"a\";\n    }\n    // char *const argv2[] = argv;\n    char *const argv3[] = {\"a\", \"b\"};\n    // argv3[0] = \"test\";\n    char *const argv4[2];\n    char *str = argv4[0];\n    printf(\"str: %s\\n\", str);\n    printf(\"strlen(str): %d\\n\", strlen(str));\n    *str = 'a';\n    *(str+1) = '\\0';\n    printf(\"str: %s\\n\", str);\n    return 0;\n}\n```\n\n上述代码可正常编译，被注释掉的行是因为其会在编译时出错。在x86的Linux下运行得到的结果为，\n\n```\nargv[0] : ./a.out\nstr: ,ݳ▒\nstrlen(str): 4\nstr: a\n```\n\n而在x64的Linux下运行得到的结果为，\n\n```\nargv[0] : ./a.out\nstr: AWA▒▒AVI▒▒AUI▒▒ATL▒%h\nstrlen(str): 23\n段错误\n```\n\n关于该代码的几点说明如下，\n\n1. `char *const argv2[] = argv;`之所以被注释是因为不能够将一个数组赋值给另外一个数组；\n2. `char *const argv3[] = {\"a\", \"b\"};`定义并显示实例化了argv3，argv3是一个数组，它包含2个char * const（const pointer to char）元素，因此argv3[0]的指针值不可修改；\n3. 在两个平台下运行结果不同说明若不显示实例化数组内容，数组的内容是不可预料的，对数组内容的修改结果也是不可预料的；\n\n## const pointer to const variable\n\nconst pointer指向const variable，这意外着**指针本身值（代表的地址）不可修改**，同时**指针指向的内存也不可修改**，这点C和C++也相同。例子如下：\n\n```c\nint main() {\n    typedef int * const int_cst_ptr; // const pointer\n    typedef int const int_cst; // const int\n    int a = 0;\n    int *b = &a;\n    int_cst_ptr * const ptr1 = &b;\n    int_cst * const ptr2 = &a;\n    *ptr1 = NULL; // error：pointer to const，指针指向内存readonly\n    *ptr2 = 1; // error：pointer to const，指针指向内存readonly\n    ptr1 = NULL; // error：const pointer，指针本身值不可修改\n    ptr2 = NULL; // error：const pointer，指针本身值不可修改\n}\n```\n\n假设不使用typedef，上述例子需写成：\n\n```c\nint main() {\n    int a = 0;\n    int *b = &a;\n    int * const * const ptr1 = &b; // 这时候表达式越来越复杂\n    int const * const ptr2 = &a;\n    *ptr1 = NULL; // error：pointer to const，指针指向内存readonly\n    *ptr2 = 1; // error：pointer to const，指针指向内存readonly\n    ptr1 = NULL; // error：const pointer，指针本身值不可修改\n    ptr2 = NULL; // error：const pointer，指针本身值不可修改\n}\n```\n\nconst pointer to const variable的特点：\n\n1. 指针本身值（代表的地址）不可修改；\n2. 指针指向的内存也不可修改；\n\n## linkage\n\n有以下代码文件：\n\n头文件linkage.h，\n\n```c\nextern const int counter;\nvoid print_counter();\n```\n\nc文件linkage.c，\n\n```c\n#include \"stdio.h\"\n#include \"linkage.h\"\n\nvoid print_counter() {\n    printf(\"counter: %d\\n\", counter);\n}\n```\n\nc文件main.c，\n\n```c\n#include \"linkage.h\"\n\nconst int counter = 12;\n\nint main(int argc,char *argv[]) {\n    print_counter();\n    return 0;\n}\n```\n\n执行下述语句，\n\n```\ngcc -c linkage.cpp -o linkage.o\ngcc -c main.cpp -o main.o\ngcc linkage.o main.o -o main\n./main\n```\n\n得到的输出是预期的值：12。\n\n将上述的linkage.c文件重命名为linkage.cpp，main.c重命名为main.cpp，执行下述语句，\n\n```\ng++ -c linkage.cpp -o linkage.o\ng++ -c main.cpp -o main.o\ng++ linkage.o main.o -o main\n./main\n```\n\n得到的输出却是：0。\n\n回想一下在C语言里面使用全局变量的注意点，\n\n1. 在一个头文件声明该变量，即上述代码的`extern const int counter;`，它的作用是告诉编译器，我有这么一个类型的变量存在；\n2. 在一个C文件定义该变量，即上述代码的`const int counter = 12;`，它的作用是为该全局变量申请存储；\n3. 在其他需要此全局变量的C文件，include步骤1提到的头文件，全局变量得以共享；\n\n对于C语言，const全局变量与非const变量一样，都是全局共享的，C++ Primer将此称为**external linkage**；\n但对于C++，const全局变量确是local to file的（作用域仅限于文件内），问题就处在于`const int counter = 12;`这一行代码，在C++里这意味着定义了一个const int变量，但仅限于文件内部使用，C++ Primer将此称为**internal linkage**。\n\n那么，如何在C++共享const全局变量呢？方法很简单，将步骤2的定义代码修改为`extern const int counter = 12;`即可。\n\n## top-level const和low-level const\n\nC++里面，将const variable称为**top-level const**，将pointer to const variable称为**low-level const**，而且还规定，\n\n1. const variable赋值给普通variable或pointer to const variable时，top-level const的const被忽略，等同于普通变量间赋值；\n2. pointer to const variable赋值给普通variable或const variable时，low-level const的const不能被忽略；\n\n有以下main.cpp文件，\n\n```c\nint main() {\n    const int a = 0;\n    int b = a; // const int --> int, top to normal\n    const int c = b; // int --> const int, normal to top\n    int * const ptr = &a; // const int * --> int * const, low to top\n    int * ptr2 = &a; // const int * --> int *, low to normal\n    int * ptr3 = ptr; // int * const --> int *, top to normal\n    const int * ptr4 = ptr; // int * const --> const int *, top to low\n    return 0;\n}\n```\n\n运行`g++ main.c`，得到的输出如下：\n\n```\nmain.cpp: In function ‘int main()’:\nmain.cpp:5:24: error: invalid conversion from ‘const int*’ to ‘int*’ [-fpermissive]\n     int * const ptr = &a; // const int * --> int * const, low to top\n                        ^\nmain.cpp:6:19: error: invalid conversion from ‘const int*’ to ‘int*’ [-fpermissive]\n     int * ptr2 = &a; // const int * --> int *, low to normal\n                   ^\n```\n\n这说明在C++里面，low-level const赋值或强转给其他类型时，const是不能被忽略的，否则会在编译时报错。\n\n将上述代码保存为main.c后执行`gcc main.c`，得到的输出如下：\n\n```\nmain.c: In function ‘main’:\nmain.c:4:23: warning: initialization discards ‘const’ qualifier from pointer target type [enabled by default]\n     int * const ptr = &a; // const int * --> int * const, low to top\n                       ^\nmain.c:5:18: warning: initialization discards ‘const’ qualifier from pointer target type [enabled by default]\n     int * ptr2 = &a; // const int * --> int *, low to normal\n                  ^\n```\n\n这说明在C里面，并没有严格规定top-level const和low-level const，但是对于low-level const的情况，还是会有warning，因此必须小心使用，同时必须注意编译器的所有warning。\n","source":"_posts/2016-08-02-summary-of-const.markdown","raw":"---\nlayout: post\ntitle: C/C++的const\ndate: '2016-08-02 09:04'\ncomments: true\ncategories: ['编程实践'] \ntags: ['C/C++']\n---\n\nC/C++都有const关键字？它有什么用途以及用来干嘛呢？\n\n<!--more-->\n\n## const variable\n\nconst修饰variable，意味着**该变量不可修改**，即变量是readonly的，这一点C和C++相同。例子如下：\n\n```c\nint main() {\n    const int a = 0; // 等价于：int const a = 0;\n    a = 1; // error：a是readonly的，不可修改\n    return 0;\n}\n```\n\n考虑到指针也是variable，上述特点对指针也适用，称为const pointer，const pointer的**dereference（*号取值）不受影响**。例子如下：\n\n```c\nint main() {\n    typedef int * int_ptr;\n    int a = 0, b = 1;\n    const int_ptr ip = &a; // 等价于：int_ptr const ip = &a;\n    ip = &b; // error：ip是readonly的，其值（标识地址）不可修改\n    *ip = 2; // 不影响指针的dereference\n    return 0;\n}\n```\n\n假如不想使用typedef的方式表示上述的const pointer，则必须写成如下形式：\n\n```c\nint a = 0;\nint * const ptr = &a;\nint const * ptr = &a; // error：这表示指向const int的指针\nconst int * ptr = &a; // error：这表示指向const int的指针\n```\n\nconst variable的特点如下：\n\n1. 声明和定义必须在同一个地方（声明变量时实例化）；\n2. const variable不可修改；\n3. const和type类型可以互换（指针不使用typedef的方式定义时需要格外注意）；\n\n## pointer to const variable\n\n指针指向const variable，意味着**不能通过指针去修改指针指向的内存**，即指针指向的内存是readonly的，但**指针本身的值修改不受影响（即可以重新绑定地址）**，这一点C和C++也相同，例子如下：\n\n```c\nint main() {\n    typedef int * const int_cst_ptr; // const pointer\n    typedef int const int_cst; // const int\n    int a = 0;\n    int *b = &a;\n    int_cst_ptr *ptr1 = &b;\n    int_cst *ptr2 = &a;\n    *ptr1 = NULL; // error：pointer to const，指针指向内存readonly\n    *ptr2 = 1; // error：pointer to const，指针指向内存readonly\n    ptr1 = NULL; // 指针本身的值修改不受影响（即可以重新绑定地址）\n    ptr2 = NULL;\n}\n```\n\n假设不使用typedef，上述例子需写成：\n\n```c\nint main() {\n    int a = 0;\n    int *b = &a;\n    int * const *ptr1 = &b; // 从右到左：ptr1 is a pointer to const pointer to int\n    int const *ptr2 = &a;\n    *ptr1 = NULL; // error：pointer to const，指针指向内存readonly\n    *ptr2 = 1; // error：pointer to const，指针指向内存readonly\n    ptr1 = NULL; // 指针本身的值修改不受影响（即可以重新绑定地址）\n    ptr2 = NULL;\n}\n```\n\npointer to const variable的特点：\n\n1. 指针指向内存不可修改；\n2. 指针本身的值（代表的地址）可以修改；\n\n举一个复杂点的例子，即有指针又有数组的情况：\n\n```c\n#include <stdio.h>\n#include <string.h>\n\nint main(int argc,char *argv[]) {\n    int i = 0;\n    for(; i<argc; i++) {\n        printf(\"argv[%d] : %s\\n\", i, argv[i]);\n        argv[i] = \"a\";\n    }\n    // char *const argv2[] = argv;\n    char *const argv3[] = {\"a\", \"b\"};\n    // argv3[0] = \"test\";\n    char *const argv4[2];\n    char *str = argv4[0];\n    printf(\"str: %s\\n\", str);\n    printf(\"strlen(str): %d\\n\", strlen(str));\n    *str = 'a';\n    *(str+1) = '\\0';\n    printf(\"str: %s\\n\", str);\n    return 0;\n}\n```\n\n上述代码可正常编译，被注释掉的行是因为其会在编译时出错。在x86的Linux下运行得到的结果为，\n\n```\nargv[0] : ./a.out\nstr: ,ݳ▒\nstrlen(str): 4\nstr: a\n```\n\n而在x64的Linux下运行得到的结果为，\n\n```\nargv[0] : ./a.out\nstr: AWA▒▒AVI▒▒AUI▒▒ATL▒%h\nstrlen(str): 23\n段错误\n```\n\n关于该代码的几点说明如下，\n\n1. `char *const argv2[] = argv;`之所以被注释是因为不能够将一个数组赋值给另外一个数组；\n2. `char *const argv3[] = {\"a\", \"b\"};`定义并显示实例化了argv3，argv3是一个数组，它包含2个char * const（const pointer to char）元素，因此argv3[0]的指针值不可修改；\n3. 在两个平台下运行结果不同说明若不显示实例化数组内容，数组的内容是不可预料的，对数组内容的修改结果也是不可预料的；\n\n## const pointer to const variable\n\nconst pointer指向const variable，这意外着**指针本身值（代表的地址）不可修改**，同时**指针指向的内存也不可修改**，这点C和C++也相同。例子如下：\n\n```c\nint main() {\n    typedef int * const int_cst_ptr; // const pointer\n    typedef int const int_cst; // const int\n    int a = 0;\n    int *b = &a;\n    int_cst_ptr * const ptr1 = &b;\n    int_cst * const ptr2 = &a;\n    *ptr1 = NULL; // error：pointer to const，指针指向内存readonly\n    *ptr2 = 1; // error：pointer to const，指针指向内存readonly\n    ptr1 = NULL; // error：const pointer，指针本身值不可修改\n    ptr2 = NULL; // error：const pointer，指针本身值不可修改\n}\n```\n\n假设不使用typedef，上述例子需写成：\n\n```c\nint main() {\n    int a = 0;\n    int *b = &a;\n    int * const * const ptr1 = &b; // 这时候表达式越来越复杂\n    int const * const ptr2 = &a;\n    *ptr1 = NULL; // error：pointer to const，指针指向内存readonly\n    *ptr2 = 1; // error：pointer to const，指针指向内存readonly\n    ptr1 = NULL; // error：const pointer，指针本身值不可修改\n    ptr2 = NULL; // error：const pointer，指针本身值不可修改\n}\n```\n\nconst pointer to const variable的特点：\n\n1. 指针本身值（代表的地址）不可修改；\n2. 指针指向的内存也不可修改；\n\n## linkage\n\n有以下代码文件：\n\n头文件linkage.h，\n\n```c\nextern const int counter;\nvoid print_counter();\n```\n\nc文件linkage.c，\n\n```c\n#include \"stdio.h\"\n#include \"linkage.h\"\n\nvoid print_counter() {\n    printf(\"counter: %d\\n\", counter);\n}\n```\n\nc文件main.c，\n\n```c\n#include \"linkage.h\"\n\nconst int counter = 12;\n\nint main(int argc,char *argv[]) {\n    print_counter();\n    return 0;\n}\n```\n\n执行下述语句，\n\n```\ngcc -c linkage.cpp -o linkage.o\ngcc -c main.cpp -o main.o\ngcc linkage.o main.o -o main\n./main\n```\n\n得到的输出是预期的值：12。\n\n将上述的linkage.c文件重命名为linkage.cpp，main.c重命名为main.cpp，执行下述语句，\n\n```\ng++ -c linkage.cpp -o linkage.o\ng++ -c main.cpp -o main.o\ng++ linkage.o main.o -o main\n./main\n```\n\n得到的输出却是：0。\n\n回想一下在C语言里面使用全局变量的注意点，\n\n1. 在一个头文件声明该变量，即上述代码的`extern const int counter;`，它的作用是告诉编译器，我有这么一个类型的变量存在；\n2. 在一个C文件定义该变量，即上述代码的`const int counter = 12;`，它的作用是为该全局变量申请存储；\n3. 在其他需要此全局变量的C文件，include步骤1提到的头文件，全局变量得以共享；\n\n对于C语言，const全局变量与非const变量一样，都是全局共享的，C++ Primer将此称为**external linkage**；\n但对于C++，const全局变量确是local to file的（作用域仅限于文件内），问题就处在于`const int counter = 12;`这一行代码，在C++里这意味着定义了一个const int变量，但仅限于文件内部使用，C++ Primer将此称为**internal linkage**。\n\n那么，如何在C++共享const全局变量呢？方法很简单，将步骤2的定义代码修改为`extern const int counter = 12;`即可。\n\n## top-level const和low-level const\n\nC++里面，将const variable称为**top-level const**，将pointer to const variable称为**low-level const**，而且还规定，\n\n1. const variable赋值给普通variable或pointer to const variable时，top-level const的const被忽略，等同于普通变量间赋值；\n2. pointer to const variable赋值给普通variable或const variable时，low-level const的const不能被忽略；\n\n有以下main.cpp文件，\n\n```c\nint main() {\n    const int a = 0;\n    int b = a; // const int --> int, top to normal\n    const int c = b; // int --> const int, normal to top\n    int * const ptr = &a; // const int * --> int * const, low to top\n    int * ptr2 = &a; // const int * --> int *, low to normal\n    int * ptr3 = ptr; // int * const --> int *, top to normal\n    const int * ptr4 = ptr; // int * const --> const int *, top to low\n    return 0;\n}\n```\n\n运行`g++ main.c`，得到的输出如下：\n\n```\nmain.cpp: In function ‘int main()’:\nmain.cpp:5:24: error: invalid conversion from ‘const int*’ to ‘int*’ [-fpermissive]\n     int * const ptr = &a; // const int * --> int * const, low to top\n                        ^\nmain.cpp:6:19: error: invalid conversion from ‘const int*’ to ‘int*’ [-fpermissive]\n     int * ptr2 = &a; // const int * --> int *, low to normal\n                   ^\n```\n\n这说明在C++里面，low-level const赋值或强转给其他类型时，const是不能被忽略的，否则会在编译时报错。\n\n将上述代码保存为main.c后执行`gcc main.c`，得到的输出如下：\n\n```\nmain.c: In function ‘main’:\nmain.c:4:23: warning: initialization discards ‘const’ qualifier from pointer target type [enabled by default]\n     int * const ptr = &a; // const int * --> int * const, low to top\n                       ^\nmain.c:5:18: warning: initialization discards ‘const’ qualifier from pointer target type [enabled by default]\n     int * ptr2 = &a; // const int * --> int *, low to normal\n                  ^\n```\n\n这说明在C里面，并没有严格规定top-level const和low-level const，但是对于low-level const的情况，还是会有warning，因此必须小心使用，同时必须注意编译器的所有warning。\n","slug":"summary-of-const","published":1,"updated":"2017-04-09T14:46:46.000Z","photos":[],"link":"","_id":"cjlza6m53001qpgupoww09sds","content":"<p>C/C++都有const关键字？它有什么用途以及用来干嘛呢？</p>\n<a id=\"more\"></a>\n<h2 id=\"const-variable\"><a href=\"#const-variable\" class=\"headerlink\" title=\"const variable\"></a>const variable</h2><p>const修饰variable，意味着<strong>该变量不可修改</strong>，即变量是readonly的，这一点C和C++相同。例子如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> a = <span class=\"number\">0</span>; <span class=\"comment\">// 等价于：int const a = 0;</span></span><br><span class=\"line\">    a = <span class=\"number\">1</span>; <span class=\"comment\">// error：a是readonly的，不可修改</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>考虑到指针也是variable，上述特点对指针也适用，称为const pointer，const pointer的<strong>dereference（*号取值）不受影响</strong>。例子如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">typedef</span> <span class=\"keyword\">int</span> * int_ptr;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a = <span class=\"number\">0</span>, b = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> int_ptr ip = &amp;a; <span class=\"comment\">// 等价于：int_ptr const ip = &amp;a;</span></span><br><span class=\"line\">    ip = &amp;b; <span class=\"comment\">// error：ip是readonly的，其值（标识地址）不可修改</span></span><br><span class=\"line\">    *ip = <span class=\"number\">2</span>; <span class=\"comment\">// 不影响指针的dereference</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>假如不想使用typedef的方式表示上述的const pointer，则必须写成如下形式：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> a = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> * <span class=\"keyword\">const</span> ptr = &amp;a;</span><br><span class=\"line\"><span class=\"keyword\">int</span> <span class=\"keyword\">const</span> * ptr = &amp;a; <span class=\"comment\">// error：这表示指向const int的指针</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> * ptr = &amp;a; <span class=\"comment\">// error：这表示指向const int的指针</span></span><br></pre></td></tr></table></figure>\n<p>const variable的特点如下：</p>\n<ol>\n<li>声明和定义必须在同一个地方（声明变量时实例化）；</li>\n<li>const variable不可修改；</li>\n<li>const和type类型可以互换（指针不使用typedef的方式定义时需要格外注意）；</li>\n</ol>\n<h2 id=\"pointer-to-const-variable\"><a href=\"#pointer-to-const-variable\" class=\"headerlink\" title=\"pointer to const variable\"></a>pointer to const variable</h2><p>指针指向const variable，意味着<strong>不能通过指针去修改指针指向的内存</strong>，即指针指向的内存是readonly的，但<strong>指针本身的值修改不受影响（即可以重新绑定地址）</strong>，这一点C和C++也相同，例子如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">typedef</span> <span class=\"keyword\">int</span> * <span class=\"keyword\">const</span> int_cst_ptr; <span class=\"comment\">// const pointer</span></span><br><span class=\"line\">    <span class=\"keyword\">typedef</span> <span class=\"keyword\">int</span> <span class=\"keyword\">const</span> int_cst; <span class=\"comment\">// const int</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> a = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> *b = &amp;a;</span><br><span class=\"line\">    int_cst_ptr *ptr1 = &amp;b;</span><br><span class=\"line\">    int_cst *ptr2 = &amp;a;</span><br><span class=\"line\">    *ptr1 = <span class=\"literal\">NULL</span>; <span class=\"comment\">// error：pointer to const，指针指向内存readonly</span></span><br><span class=\"line\">    *ptr2 = <span class=\"number\">1</span>; <span class=\"comment\">// error：pointer to const，指针指向内存readonly</span></span><br><span class=\"line\">    ptr1 = <span class=\"literal\">NULL</span>; <span class=\"comment\">// 指针本身的值修改不受影响（即可以重新绑定地址）</span></span><br><span class=\"line\">    ptr2 = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>假设不使用typedef，上述例子需写成：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> *b = &amp;a;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> * <span class=\"keyword\">const</span> *ptr1 = &amp;b; <span class=\"comment\">// 从右到左：ptr1 is a pointer to const pointer to int</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> <span class=\"keyword\">const</span> *ptr2 = &amp;a;</span><br><span class=\"line\">    *ptr1 = <span class=\"literal\">NULL</span>; <span class=\"comment\">// error：pointer to const，指针指向内存readonly</span></span><br><span class=\"line\">    *ptr2 = <span class=\"number\">1</span>; <span class=\"comment\">// error：pointer to const，指针指向内存readonly</span></span><br><span class=\"line\">    ptr1 = <span class=\"literal\">NULL</span>; <span class=\"comment\">// 指针本身的值修改不受影响（即可以重新绑定地址）</span></span><br><span class=\"line\">    ptr2 = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>pointer to const variable的特点：</p>\n<ol>\n<li>指针指向内存不可修改；</li>\n<li>指针本身的值（代表的地址）可以修改；</li>\n</ol>\n<p>举一个复杂点的例子，即有指针又有数组的情况：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc,<span class=\"keyword\">char</span> *argv[])</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(; i&lt;argc; i++) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"argv[%d] : %s\\n\"</span>, i, argv[i]);</span><br><span class=\"line\">        argv[i] = <span class=\"string\">\"a\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// char *const argv2[] = argv;</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span> *<span class=\"keyword\">const</span> argv3[] = &#123;<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>&#125;;</span><br><span class=\"line\">    <span class=\"comment\">// argv3[0] = \"test\";</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span> *<span class=\"keyword\">const</span> argv4[<span class=\"number\">2</span>];</span><br><span class=\"line\">    <span class=\"keyword\">char</span> *str = argv4[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"str: %s\\n\"</span>, str);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"strlen(str): %d\\n\"</span>, <span class=\"built_in\">strlen</span>(str));</span><br><span class=\"line\">    *str = <span class=\"string\">'a'</span>;</span><br><span class=\"line\">    *(str+<span class=\"number\">1</span>) = <span class=\"string\">'\\0'</span>;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"str: %s\\n\"</span>, str);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上述代码可正常编译，被注释掉的行是因为其会在编译时出错。在x86的Linux下运行得到的结果为，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">argv[0] : ./a.out</span><br><span class=\"line\">str: ,ݳ▒</span><br><span class=\"line\">strlen(str): 4</span><br><span class=\"line\">str: a</span><br></pre></td></tr></table></figure>\n<p>而在x64的Linux下运行得到的结果为，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">argv[0] : ./a.out</span><br><span class=\"line\">str: AWA▒▒AVI▒▒AUI▒▒ATL▒%h</span><br><span class=\"line\">strlen(str): 23</span><br><span class=\"line\">段错误</span><br></pre></td></tr></table></figure>\n<p>关于该代码的几点说明如下，</p>\n<ol>\n<li><code>char *const argv2[] = argv;</code>之所以被注释是因为不能够将一个数组赋值给另外一个数组；</li>\n<li><code>char *const argv3[] = {&quot;a&quot;, &quot;b&quot;};</code>定义并显示实例化了argv3，argv3是一个数组，它包含2个char * const（const pointer to char）元素，因此argv3[0]的指针值不可修改；</li>\n<li>在两个平台下运行结果不同说明若不显示实例化数组内容，数组的内容是不可预料的，对数组内容的修改结果也是不可预料的；</li>\n</ol>\n<h2 id=\"const-pointer-to-const-variable\"><a href=\"#const-pointer-to-const-variable\" class=\"headerlink\" title=\"const pointer to const variable\"></a>const pointer to const variable</h2><p>const pointer指向const variable，这意外着<strong>指针本身值（代表的地址）不可修改</strong>，同时<strong>指针指向的内存也不可修改</strong>，这点C和C++也相同。例子如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">typedef</span> <span class=\"keyword\">int</span> * <span class=\"keyword\">const</span> int_cst_ptr; <span class=\"comment\">// const pointer</span></span><br><span class=\"line\">    <span class=\"keyword\">typedef</span> <span class=\"keyword\">int</span> <span class=\"keyword\">const</span> int_cst; <span class=\"comment\">// const int</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> a = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> *b = &amp;a;</span><br><span class=\"line\">    int_cst_ptr * <span class=\"keyword\">const</span> ptr1 = &amp;b;</span><br><span class=\"line\">    int_cst * <span class=\"keyword\">const</span> ptr2 = &amp;a;</span><br><span class=\"line\">    *ptr1 = <span class=\"literal\">NULL</span>; <span class=\"comment\">// error：pointer to const，指针指向内存readonly</span></span><br><span class=\"line\">    *ptr2 = <span class=\"number\">1</span>; <span class=\"comment\">// error：pointer to const，指针指向内存readonly</span></span><br><span class=\"line\">    ptr1 = <span class=\"literal\">NULL</span>; <span class=\"comment\">// error：const pointer，指针本身值不可修改</span></span><br><span class=\"line\">    ptr2 = <span class=\"literal\">NULL</span>; <span class=\"comment\">// error：const pointer，指针本身值不可修改</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>假设不使用typedef，上述例子需写成：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> *b = &amp;a;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> * <span class=\"keyword\">const</span> * <span class=\"keyword\">const</span> ptr1 = &amp;b; <span class=\"comment\">// 这时候表达式越来越复杂</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> <span class=\"keyword\">const</span> * <span class=\"keyword\">const</span> ptr2 = &amp;a;</span><br><span class=\"line\">    *ptr1 = <span class=\"literal\">NULL</span>; <span class=\"comment\">// error：pointer to const，指针指向内存readonly</span></span><br><span class=\"line\">    *ptr2 = <span class=\"number\">1</span>; <span class=\"comment\">// error：pointer to const，指针指向内存readonly</span></span><br><span class=\"line\">    ptr1 = <span class=\"literal\">NULL</span>; <span class=\"comment\">// error：const pointer，指针本身值不可修改</span></span><br><span class=\"line\">    ptr2 = <span class=\"literal\">NULL</span>; <span class=\"comment\">// error：const pointer，指针本身值不可修改</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>const pointer to const variable的特点：</p>\n<ol>\n<li>指针本身值（代表的地址）不可修改；</li>\n<li>指针指向的内存也不可修改；</li>\n</ol>\n<h2 id=\"linkage\"><a href=\"#linkage\" class=\"headerlink\" title=\"linkage\"></a>linkage</h2><p>有以下代码文件：</p>\n<p>头文件linkage.h，</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> counter;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">print_counter</span><span class=\"params\">()</span></span>;</span><br></pre></td></tr></table></figure>\n<p>c文件linkage.c，</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"stdio.h\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"linkage.h\"</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">print_counter</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"counter: %d\\n\"</span>, counter);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>c文件main.c，</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"linkage.h\"</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> counter = <span class=\"number\">12</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc,<span class=\"keyword\">char</span> *argv[])</span> </span>&#123;</span><br><span class=\"line\">    print_counter();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>执行下述语句，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcc -c linkage.cpp -o linkage.o</span><br><span class=\"line\">gcc -c main.cpp -o main.o</span><br><span class=\"line\">gcc linkage.o main.o -o main</span><br><span class=\"line\">./main</span><br></pre></td></tr></table></figure>\n<p>得到的输出是预期的值：12。</p>\n<p>将上述的linkage.c文件重命名为linkage.cpp，main.c重命名为main.cpp，执行下述语句，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">g++ -c linkage.cpp -o linkage.o</span><br><span class=\"line\">g++ -c main.cpp -o main.o</span><br><span class=\"line\">g++ linkage.o main.o -o main</span><br><span class=\"line\">./main</span><br></pre></td></tr></table></figure>\n<p>得到的输出却是：0。</p>\n<p>回想一下在C语言里面使用全局变量的注意点，</p>\n<ol>\n<li>在一个头文件声明该变量，即上述代码的<code>extern const int counter;</code>，它的作用是告诉编译器，我有这么一个类型的变量存在；</li>\n<li>在一个C文件定义该变量，即上述代码的<code>const int counter = 12;</code>，它的作用是为该全局变量申请存储；</li>\n<li>在其他需要此全局变量的C文件，include步骤1提到的头文件，全局变量得以共享；</li>\n</ol>\n<p>对于C语言，const全局变量与非const变量一样，都是全局共享的，C++ Primer将此称为<strong>external linkage</strong>；<br>但对于C++，const全局变量确是local to file的（作用域仅限于文件内），问题就处在于<code>const int counter = 12;</code>这一行代码，在C++里这意味着定义了一个const int变量，但仅限于文件内部使用，C++ Primer将此称为<strong>internal linkage</strong>。</p>\n<p>那么，如何在C++共享const全局变量呢？方法很简单，将步骤2的定义代码修改为<code>extern const int counter = 12;</code>即可。</p>\n<h2 id=\"top-level-const和low-level-const\"><a href=\"#top-level-const和low-level-const\" class=\"headerlink\" title=\"top-level const和low-level const\"></a>top-level const和low-level const</h2><p>C++里面，将const variable称为<strong>top-level const</strong>，将pointer to const variable称为<strong>low-level const</strong>，而且还规定，</p>\n<ol>\n<li>const variable赋值给普通variable或pointer to const variable时，top-level const的const被忽略，等同于普通变量间赋值；</li>\n<li>pointer to const variable赋值给普通variable或const variable时，low-level const的const不能被忽略；</li>\n</ol>\n<p>有以下main.cpp文件，</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> a = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> b = a; <span class=\"comment\">// const int --&gt; int, top to normal</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> c = b; <span class=\"comment\">// int --&gt; const int, normal to top</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> * <span class=\"keyword\">const</span> ptr = &amp;a; <span class=\"comment\">// const int * --&gt; int * const, low to top</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> * ptr2 = &amp;a; <span class=\"comment\">// const int * --&gt; int *, low to normal</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> * ptr3 = ptr; <span class=\"comment\">// int * const --&gt; int *, top to normal</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> * ptr4 = ptr; <span class=\"comment\">// int * const --&gt; const int *, top to low</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行<code>g++ main.c</code>，得到的输出如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">main.cpp: In function ‘int main()’:</span><br><span class=\"line\">main.cpp:5:24: error: invalid conversion from ‘const int*’ to ‘int*’ [-fpermissive]</span><br><span class=\"line\">     int * const ptr = &amp;a; // const int * --&gt; int * const, low to top</span><br><span class=\"line\">                        ^</span><br><span class=\"line\">main.cpp:6:19: error: invalid conversion from ‘const int*’ to ‘int*’ [-fpermissive]</span><br><span class=\"line\">     int * ptr2 = &amp;a; // const int * --&gt; int *, low to normal</span><br><span class=\"line\">                   ^</span><br></pre></td></tr></table></figure>\n<p>这说明在C++里面，low-level const赋值或强转给其他类型时，const是不能被忽略的，否则会在编译时报错。</p>\n<p>将上述代码保存为main.c后执行<code>gcc main.c</code>，得到的输出如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">main.c: In function ‘main’:</span><br><span class=\"line\">main.c:4:23: warning: initialization discards ‘const’ qualifier from pointer target type [enabled by default]</span><br><span class=\"line\">     int * const ptr = &amp;a; // const int * --&gt; int * const, low to top</span><br><span class=\"line\">                       ^</span><br><span class=\"line\">main.c:5:18: warning: initialization discards ‘const’ qualifier from pointer target type [enabled by default]</span><br><span class=\"line\">     int * ptr2 = &amp;a; // const int * --&gt; int *, low to normal</span><br><span class=\"line\">                  ^</span><br></pre></td></tr></table></figure>\n<p>这说明在C里面，并没有严格规定top-level const和low-level const，但是对于low-level const的情况，还是会有warning，因此必须小心使用，同时必须注意编译器的所有warning。</p>\n","site":{"data":{}},"excerpt":"<p>C/C++都有const关键字？它有什么用途以及用来干嘛呢？</p>","more":"<h2 id=\"const-variable\"><a href=\"#const-variable\" class=\"headerlink\" title=\"const variable\"></a>const variable</h2><p>const修饰variable，意味着<strong>该变量不可修改</strong>，即变量是readonly的，这一点C和C++相同。例子如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> a = <span class=\"number\">0</span>; <span class=\"comment\">// 等价于：int const a = 0;</span></span><br><span class=\"line\">    a = <span class=\"number\">1</span>; <span class=\"comment\">// error：a是readonly的，不可修改</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>考虑到指针也是variable，上述特点对指针也适用，称为const pointer，const pointer的<strong>dereference（*号取值）不受影响</strong>。例子如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">typedef</span> <span class=\"keyword\">int</span> * int_ptr;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a = <span class=\"number\">0</span>, b = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> int_ptr ip = &amp;a; <span class=\"comment\">// 等价于：int_ptr const ip = &amp;a;</span></span><br><span class=\"line\">    ip = &amp;b; <span class=\"comment\">// error：ip是readonly的，其值（标识地址）不可修改</span></span><br><span class=\"line\">    *ip = <span class=\"number\">2</span>; <span class=\"comment\">// 不影响指针的dereference</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>假如不想使用typedef的方式表示上述的const pointer，则必须写成如下形式：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> a = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> * <span class=\"keyword\">const</span> ptr = &amp;a;</span><br><span class=\"line\"><span class=\"keyword\">int</span> <span class=\"keyword\">const</span> * ptr = &amp;a; <span class=\"comment\">// error：这表示指向const int的指针</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> * ptr = &amp;a; <span class=\"comment\">// error：这表示指向const int的指针</span></span><br></pre></td></tr></table></figure>\n<p>const variable的特点如下：</p>\n<ol>\n<li>声明和定义必须在同一个地方（声明变量时实例化）；</li>\n<li>const variable不可修改；</li>\n<li>const和type类型可以互换（指针不使用typedef的方式定义时需要格外注意）；</li>\n</ol>\n<h2 id=\"pointer-to-const-variable\"><a href=\"#pointer-to-const-variable\" class=\"headerlink\" title=\"pointer to const variable\"></a>pointer to const variable</h2><p>指针指向const variable，意味着<strong>不能通过指针去修改指针指向的内存</strong>，即指针指向的内存是readonly的，但<strong>指针本身的值修改不受影响（即可以重新绑定地址）</strong>，这一点C和C++也相同，例子如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">typedef</span> <span class=\"keyword\">int</span> * <span class=\"keyword\">const</span> int_cst_ptr; <span class=\"comment\">// const pointer</span></span><br><span class=\"line\">    <span class=\"keyword\">typedef</span> <span class=\"keyword\">int</span> <span class=\"keyword\">const</span> int_cst; <span class=\"comment\">// const int</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> a = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> *b = &amp;a;</span><br><span class=\"line\">    int_cst_ptr *ptr1 = &amp;b;</span><br><span class=\"line\">    int_cst *ptr2 = &amp;a;</span><br><span class=\"line\">    *ptr1 = <span class=\"literal\">NULL</span>; <span class=\"comment\">// error：pointer to const，指针指向内存readonly</span></span><br><span class=\"line\">    *ptr2 = <span class=\"number\">1</span>; <span class=\"comment\">// error：pointer to const，指针指向内存readonly</span></span><br><span class=\"line\">    ptr1 = <span class=\"literal\">NULL</span>; <span class=\"comment\">// 指针本身的值修改不受影响（即可以重新绑定地址）</span></span><br><span class=\"line\">    ptr2 = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>假设不使用typedef，上述例子需写成：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> *b = &amp;a;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> * <span class=\"keyword\">const</span> *ptr1 = &amp;b; <span class=\"comment\">// 从右到左：ptr1 is a pointer to const pointer to int</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> <span class=\"keyword\">const</span> *ptr2 = &amp;a;</span><br><span class=\"line\">    *ptr1 = <span class=\"literal\">NULL</span>; <span class=\"comment\">// error：pointer to const，指针指向内存readonly</span></span><br><span class=\"line\">    *ptr2 = <span class=\"number\">1</span>; <span class=\"comment\">// error：pointer to const，指针指向内存readonly</span></span><br><span class=\"line\">    ptr1 = <span class=\"literal\">NULL</span>; <span class=\"comment\">// 指针本身的值修改不受影响（即可以重新绑定地址）</span></span><br><span class=\"line\">    ptr2 = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>pointer to const variable的特点：</p>\n<ol>\n<li>指针指向内存不可修改；</li>\n<li>指针本身的值（代表的地址）可以修改；</li>\n</ol>\n<p>举一个复杂点的例子，即有指针又有数组的情况：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc,<span class=\"keyword\">char</span> *argv[])</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(; i&lt;argc; i++) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"argv[%d] : %s\\n\"</span>, i, argv[i]);</span><br><span class=\"line\">        argv[i] = <span class=\"string\">\"a\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// char *const argv2[] = argv;</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span> *<span class=\"keyword\">const</span> argv3[] = &#123;<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>&#125;;</span><br><span class=\"line\">    <span class=\"comment\">// argv3[0] = \"test\";</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span> *<span class=\"keyword\">const</span> argv4[<span class=\"number\">2</span>];</span><br><span class=\"line\">    <span class=\"keyword\">char</span> *str = argv4[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"str: %s\\n\"</span>, str);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"strlen(str): %d\\n\"</span>, <span class=\"built_in\">strlen</span>(str));</span><br><span class=\"line\">    *str = <span class=\"string\">'a'</span>;</span><br><span class=\"line\">    *(str+<span class=\"number\">1</span>) = <span class=\"string\">'\\0'</span>;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"str: %s\\n\"</span>, str);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上述代码可正常编译，被注释掉的行是因为其会在编译时出错。在x86的Linux下运行得到的结果为，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">argv[0] : ./a.out</span><br><span class=\"line\">str: ,ݳ▒</span><br><span class=\"line\">strlen(str): 4</span><br><span class=\"line\">str: a</span><br></pre></td></tr></table></figure>\n<p>而在x64的Linux下运行得到的结果为，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">argv[0] : ./a.out</span><br><span class=\"line\">str: AWA▒▒AVI▒▒AUI▒▒ATL▒%h</span><br><span class=\"line\">strlen(str): 23</span><br><span class=\"line\">段错误</span><br></pre></td></tr></table></figure>\n<p>关于该代码的几点说明如下，</p>\n<ol>\n<li><code>char *const argv2[] = argv;</code>之所以被注释是因为不能够将一个数组赋值给另外一个数组；</li>\n<li><code>char *const argv3[] = {&quot;a&quot;, &quot;b&quot;};</code>定义并显示实例化了argv3，argv3是一个数组，它包含2个char * const（const pointer to char）元素，因此argv3[0]的指针值不可修改；</li>\n<li>在两个平台下运行结果不同说明若不显示实例化数组内容，数组的内容是不可预料的，对数组内容的修改结果也是不可预料的；</li>\n</ol>\n<h2 id=\"const-pointer-to-const-variable\"><a href=\"#const-pointer-to-const-variable\" class=\"headerlink\" title=\"const pointer to const variable\"></a>const pointer to const variable</h2><p>const pointer指向const variable，这意外着<strong>指针本身值（代表的地址）不可修改</strong>，同时<strong>指针指向的内存也不可修改</strong>，这点C和C++也相同。例子如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">typedef</span> <span class=\"keyword\">int</span> * <span class=\"keyword\">const</span> int_cst_ptr; <span class=\"comment\">// const pointer</span></span><br><span class=\"line\">    <span class=\"keyword\">typedef</span> <span class=\"keyword\">int</span> <span class=\"keyword\">const</span> int_cst; <span class=\"comment\">// const int</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> a = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> *b = &amp;a;</span><br><span class=\"line\">    int_cst_ptr * <span class=\"keyword\">const</span> ptr1 = &amp;b;</span><br><span class=\"line\">    int_cst * <span class=\"keyword\">const</span> ptr2 = &amp;a;</span><br><span class=\"line\">    *ptr1 = <span class=\"literal\">NULL</span>; <span class=\"comment\">// error：pointer to const，指针指向内存readonly</span></span><br><span class=\"line\">    *ptr2 = <span class=\"number\">1</span>; <span class=\"comment\">// error：pointer to const，指针指向内存readonly</span></span><br><span class=\"line\">    ptr1 = <span class=\"literal\">NULL</span>; <span class=\"comment\">// error：const pointer，指针本身值不可修改</span></span><br><span class=\"line\">    ptr2 = <span class=\"literal\">NULL</span>; <span class=\"comment\">// error：const pointer，指针本身值不可修改</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>假设不使用typedef，上述例子需写成：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> *b = &amp;a;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> * <span class=\"keyword\">const</span> * <span class=\"keyword\">const</span> ptr1 = &amp;b; <span class=\"comment\">// 这时候表达式越来越复杂</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> <span class=\"keyword\">const</span> * <span class=\"keyword\">const</span> ptr2 = &amp;a;</span><br><span class=\"line\">    *ptr1 = <span class=\"literal\">NULL</span>; <span class=\"comment\">// error：pointer to const，指针指向内存readonly</span></span><br><span class=\"line\">    *ptr2 = <span class=\"number\">1</span>; <span class=\"comment\">// error：pointer to const，指针指向内存readonly</span></span><br><span class=\"line\">    ptr1 = <span class=\"literal\">NULL</span>; <span class=\"comment\">// error：const pointer，指针本身值不可修改</span></span><br><span class=\"line\">    ptr2 = <span class=\"literal\">NULL</span>; <span class=\"comment\">// error：const pointer，指针本身值不可修改</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>const pointer to const variable的特点：</p>\n<ol>\n<li>指针本身值（代表的地址）不可修改；</li>\n<li>指针指向的内存也不可修改；</li>\n</ol>\n<h2 id=\"linkage\"><a href=\"#linkage\" class=\"headerlink\" title=\"linkage\"></a>linkage</h2><p>有以下代码文件：</p>\n<p>头文件linkage.h，</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> counter;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">print_counter</span><span class=\"params\">()</span></span>;</span><br></pre></td></tr></table></figure>\n<p>c文件linkage.c，</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"stdio.h\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"linkage.h\"</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">print_counter</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"counter: %d\\n\"</span>, counter);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>c文件main.c，</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"linkage.h\"</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> counter = <span class=\"number\">12</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc,<span class=\"keyword\">char</span> *argv[])</span> </span>&#123;</span><br><span class=\"line\">    print_counter();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>执行下述语句，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcc -c linkage.cpp -o linkage.o</span><br><span class=\"line\">gcc -c main.cpp -o main.o</span><br><span class=\"line\">gcc linkage.o main.o -o main</span><br><span class=\"line\">./main</span><br></pre></td></tr></table></figure>\n<p>得到的输出是预期的值：12。</p>\n<p>将上述的linkage.c文件重命名为linkage.cpp，main.c重命名为main.cpp，执行下述语句，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">g++ -c linkage.cpp -o linkage.o</span><br><span class=\"line\">g++ -c main.cpp -o main.o</span><br><span class=\"line\">g++ linkage.o main.o -o main</span><br><span class=\"line\">./main</span><br></pre></td></tr></table></figure>\n<p>得到的输出却是：0。</p>\n<p>回想一下在C语言里面使用全局变量的注意点，</p>\n<ol>\n<li>在一个头文件声明该变量，即上述代码的<code>extern const int counter;</code>，它的作用是告诉编译器，我有这么一个类型的变量存在；</li>\n<li>在一个C文件定义该变量，即上述代码的<code>const int counter = 12;</code>，它的作用是为该全局变量申请存储；</li>\n<li>在其他需要此全局变量的C文件，include步骤1提到的头文件，全局变量得以共享；</li>\n</ol>\n<p>对于C语言，const全局变量与非const变量一样，都是全局共享的，C++ Primer将此称为<strong>external linkage</strong>；<br>但对于C++，const全局变量确是local to file的（作用域仅限于文件内），问题就处在于<code>const int counter = 12;</code>这一行代码，在C++里这意味着定义了一个const int变量，但仅限于文件内部使用，C++ Primer将此称为<strong>internal linkage</strong>。</p>\n<p>那么，如何在C++共享const全局变量呢？方法很简单，将步骤2的定义代码修改为<code>extern const int counter = 12;</code>即可。</p>\n<h2 id=\"top-level-const和low-level-const\"><a href=\"#top-level-const和low-level-const\" class=\"headerlink\" title=\"top-level const和low-level const\"></a>top-level const和low-level const</h2><p>C++里面，将const variable称为<strong>top-level const</strong>，将pointer to const variable称为<strong>low-level const</strong>，而且还规定，</p>\n<ol>\n<li>const variable赋值给普通variable或pointer to const variable时，top-level const的const被忽略，等同于普通变量间赋值；</li>\n<li>pointer to const variable赋值给普通variable或const variable时，low-level const的const不能被忽略；</li>\n</ol>\n<p>有以下main.cpp文件，</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> a = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> b = a; <span class=\"comment\">// const int --&gt; int, top to normal</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> c = b; <span class=\"comment\">// int --&gt; const int, normal to top</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> * <span class=\"keyword\">const</span> ptr = &amp;a; <span class=\"comment\">// const int * --&gt; int * const, low to top</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> * ptr2 = &amp;a; <span class=\"comment\">// const int * --&gt; int *, low to normal</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> * ptr3 = ptr; <span class=\"comment\">// int * const --&gt; int *, top to normal</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> * ptr4 = ptr; <span class=\"comment\">// int * const --&gt; const int *, top to low</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行<code>g++ main.c</code>，得到的输出如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">main.cpp: In function ‘int main()’:</span><br><span class=\"line\">main.cpp:5:24: error: invalid conversion from ‘const int*’ to ‘int*’ [-fpermissive]</span><br><span class=\"line\">     int * const ptr = &amp;a; // const int * --&gt; int * const, low to top</span><br><span class=\"line\">                        ^</span><br><span class=\"line\">main.cpp:6:19: error: invalid conversion from ‘const int*’ to ‘int*’ [-fpermissive]</span><br><span class=\"line\">     int * ptr2 = &amp;a; // const int * --&gt; int *, low to normal</span><br><span class=\"line\">                   ^</span><br></pre></td></tr></table></figure>\n<p>这说明在C++里面，low-level const赋值或强转给其他类型时，const是不能被忽略的，否则会在编译时报错。</p>\n<p>将上述代码保存为main.c后执行<code>gcc main.c</code>，得到的输出如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">main.c: In function ‘main’:</span><br><span class=\"line\">main.c:4:23: warning: initialization discards ‘const’ qualifier from pointer target type [enabled by default]</span><br><span class=\"line\">     int * const ptr = &amp;a; // const int * --&gt; int * const, low to top</span><br><span class=\"line\">                       ^</span><br><span class=\"line\">main.c:5:18: warning: initialization discards ‘const’ qualifier from pointer target type [enabled by default]</span><br><span class=\"line\">     int * ptr2 = &amp;a; // const int * --&gt; int *, low to normal</span><br><span class=\"line\">                  ^</span><br></pre></td></tr></table></figure>\n<p>这说明在C里面，并没有严格规定top-level const和low-level const，但是对于low-level const的情况，还是会有warning，因此必须小心使用，同时必须注意编译器的所有warning。</p>"},{"layout":"post","title":"《UNP卷1》的一些问题","date":"2016-08-02T01:01:00.000Z","comments":1,"_content":"\n《Unix Network Programing》的一些问题。\n\n<!--more-->\n\n## Q&A\n\nQ: TIME_WAIT能否去除？能否简化？\n\nA: TIME_WAIT的原理图如下，\n\n![time_wait](/images/pics/time_wait.jpg)\n\n- 如果C端不维持TIME_WAIT状态，而是FIN_WAIT2后直接进入CLOSED状态，那么C端将响应RST分节，S端收到后将此分节解释成一个错误，因此若想实现正常关闭，此环节必不可少；\n- MSL是一个IP数据报能在互联网上存在的最长时间，而TIME_WAIT持续的时间是两个MSL，这实际上是对路由器异常的容错，防止程序收到脏数据；\n\n------\n\nQ: Linux下listen()的backlog的真实含义是什么？有何问题？\n\nA: [How TCP backlog works in Linux](http://veithen.github.io/2014/01/01/how-tcp-backlog-works-in-linux.html)给出的解释如下，\n\n> The behavior of the backlog argument on TCP sockets changed with Linux 2.2. Now it **specifies the queue length for completely established sockets waiting to be accepted**, instead of the number of incomplete connection requests. The maximum length of the queue for **incomplete sockets can be set using /proc/sys/net/ipv4/tcp_max_syn_backlog**.\n\n即backlog指示的是ESTABLISHED Queue的大小，而SYN RECV Queue的大小则需要在系统配置。\n\n## 参考文献\n\n1. veithen.github.io: [How TCP backlog works in Linux](http://veithen.github.io/2014/01/01/how-tcp-backlog-works-in-linux.html)","source":"_posts/2016-08-02-qa-of-unp.markdown","raw":"---\nlayout: post\ntitle: 《UNP卷1》的一些问题\ndate: '2016-08-02 09:01'\ncomments: true\ncategories: ['读书笔记']\ntags: ['C/C++', 'Linux', 'Network']\n---\n\n《Unix Network Programing》的一些问题。\n\n<!--more-->\n\n## Q&A\n\nQ: TIME_WAIT能否去除？能否简化？\n\nA: TIME_WAIT的原理图如下，\n\n![time_wait](/images/pics/time_wait.jpg)\n\n- 如果C端不维持TIME_WAIT状态，而是FIN_WAIT2后直接进入CLOSED状态，那么C端将响应RST分节，S端收到后将此分节解释成一个错误，因此若想实现正常关闭，此环节必不可少；\n- MSL是一个IP数据报能在互联网上存在的最长时间，而TIME_WAIT持续的时间是两个MSL，这实际上是对路由器异常的容错，防止程序收到脏数据；\n\n------\n\nQ: Linux下listen()的backlog的真实含义是什么？有何问题？\n\nA: [How TCP backlog works in Linux](http://veithen.github.io/2014/01/01/how-tcp-backlog-works-in-linux.html)给出的解释如下，\n\n> The behavior of the backlog argument on TCP sockets changed with Linux 2.2. Now it **specifies the queue length for completely established sockets waiting to be accepted**, instead of the number of incomplete connection requests. The maximum length of the queue for **incomplete sockets can be set using /proc/sys/net/ipv4/tcp_max_syn_backlog**.\n\n即backlog指示的是ESTABLISHED Queue的大小，而SYN RECV Queue的大小则需要在系统配置。\n\n## 参考文献\n\n1. veithen.github.io: [How TCP backlog works in Linux](http://veithen.github.io/2014/01/01/how-tcp-backlog-works-in-linux.html)","slug":"qa-of-unp","published":1,"updated":"2017-04-09T14:46:52.000Z","photos":[],"link":"","_id":"cjlza6m55001tpgupwkj91utw","content":"<p>《Unix Network Programing》的一些问题。</p>\n<a id=\"more\"></a>\n<h2 id=\"Q-amp-A\"><a href=\"#Q-amp-A\" class=\"headerlink\" title=\"Q&amp;A\"></a>Q&amp;A</h2><p>Q: TIME_WAIT能否去除？能否简化？</p>\n<p>A: TIME_WAIT的原理图如下，</p>\n<p><img src=\"/images/pics/time_wait.jpg\" alt=\"time_wait\"></p>\n<ul>\n<li>如果C端不维持TIME_WAIT状态，而是FIN_WAIT2后直接进入CLOSED状态，那么C端将响应RST分节，S端收到后将此分节解释成一个错误，因此若想实现正常关闭，此环节必不可少；</li>\n<li>MSL是一个IP数据报能在互联网上存在的最长时间，而TIME_WAIT持续的时间是两个MSL，这实际上是对路由器异常的容错，防止程序收到脏数据；</li>\n</ul>\n<hr>\n<p>Q: Linux下listen()的backlog的真实含义是什么？有何问题？</p>\n<p>A: <a href=\"http://veithen.github.io/2014/01/01/how-tcp-backlog-works-in-linux.html\" target=\"_blank\" rel=\"noopener\">How TCP backlog works in Linux</a>给出的解释如下，</p>\n<blockquote>\n<p>The behavior of the backlog argument on TCP sockets changed with Linux 2.2. Now it <strong>specifies the queue length for completely established sockets waiting to be accepted</strong>, instead of the number of incomplete connection requests. The maximum length of the queue for <strong>incomplete sockets can be set using /proc/sys/net/ipv4/tcp_max_syn_backlog</strong>.</p>\n</blockquote>\n<p>即backlog指示的是ESTABLISHED Queue的大小，而SYN RECV Queue的大小则需要在系统配置。</p>\n<h2 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h2><ol>\n<li>veithen.github.io: <a href=\"http://veithen.github.io/2014/01/01/how-tcp-backlog-works-in-linux.html\" target=\"_blank\" rel=\"noopener\">How TCP backlog works in Linux</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>《Unix Network Programing》的一些问题。</p>","more":"<h2 id=\"Q-amp-A\"><a href=\"#Q-amp-A\" class=\"headerlink\" title=\"Q&amp;A\"></a>Q&amp;A</h2><p>Q: TIME_WAIT能否去除？能否简化？</p>\n<p>A: TIME_WAIT的原理图如下，</p>\n<p><img src=\"/images/pics/time_wait.jpg\" alt=\"time_wait\"></p>\n<ul>\n<li>如果C端不维持TIME_WAIT状态，而是FIN_WAIT2后直接进入CLOSED状态，那么C端将响应RST分节，S端收到后将此分节解释成一个错误，因此若想实现正常关闭，此环节必不可少；</li>\n<li>MSL是一个IP数据报能在互联网上存在的最长时间，而TIME_WAIT持续的时间是两个MSL，这实际上是对路由器异常的容错，防止程序收到脏数据；</li>\n</ul>\n<hr>\n<p>Q: Linux下listen()的backlog的真实含义是什么？有何问题？</p>\n<p>A: <a href=\"http://veithen.github.io/2014/01/01/how-tcp-backlog-works-in-linux.html\" target=\"_blank\" rel=\"noopener\">How TCP backlog works in Linux</a>给出的解释如下，</p>\n<blockquote>\n<p>The behavior of the backlog argument on TCP sockets changed with Linux 2.2. Now it <strong>specifies the queue length for completely established sockets waiting to be accepted</strong>, instead of the number of incomplete connection requests. The maximum length of the queue for <strong>incomplete sockets can be set using /proc/sys/net/ipv4/tcp_max_syn_backlog</strong>.</p>\n</blockquote>\n<p>即backlog指示的是ESTABLISHED Queue的大小，而SYN RECV Queue的大小则需要在系统配置。</p>\n<h2 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h2><ol>\n<li>veithen.github.io: <a href=\"http://veithen.github.io/2014/01/01/how-tcp-backlog-works-in-linux.html\" target=\"_blank\" rel=\"noopener\">How TCP backlog works in Linux</a></li>\n</ol>"},{"layout":"post","title":"刘老师的智慧箴言","date":"2016-07-31T02:50:00.000Z","comments":1,"_content":"\n参加工作已然有三年，这三年，公司的一位老总——刘老师，给予了我很多的启发——这些启发将使我受益一生。\n\n<!--more-->\n\n写这篇博文是为了记录刘老师的一些智慧箴言，并加之一些自己的理解。遗憾的是，我可能并未彻底理解刘老师的意思，因此本文的刘老师的智慧箴言其实是我加工后的，这种加工无法避免，因为我不是一字不漏的记忆他说的话，而是通过自己的理解以及部分关键词来编码为自己的记忆。\n\n## 人生观\n\n刘老师：进大学后，有的人参加社团，是因为以后想要从商或从政，以锻炼自己交际能力并扩展自己的交际圈为目的，而有的人是因为别人参加所以他也参加；有的人苦学，是因为他以后想要做这个领域的专家，这里的区别是他们有没有想法。几十年后，我们本科的同学想要当官的都当上了，当然被抓了是另外一回事，想要当教授的也都当上了，至于那些没什么想法的同学呢？其实生活过得也不差，但就是没有什么特别的成就。人与人有一个很重要的差别就是，**你有没有想法**。\n\n刘老师：既然你读大学了，尽管你以后未必是从事这个专业的工作，但为什么不把它读好呢？就好比你学习画画，你即使以后不是立志做一个画家，那为什么不把画画学好呢？如果你能把你的专业学得很好，**那么这种训练将使你做其他事情也特别厉害。**\n\n刘老师：基尔霍夫绝对是一个宿命论者，你看他的基尔霍夫定律：电压有升有降，但对于电路中一个位置，走了一圈回来之后电压代数和为0。这意味着什么呢？我们姑且把人生看成一个常数，就假定为0吧！这就意味着人生有高峰有低谷，但总体水平趋于一个常数。当我们春风得意时，不能得意忘形，或者说居安不思危，否则很快就要走下坡路；当我们人生诸事不顺时，这恰恰意味着立马就要有新的转机了。这就是古人所说的，**不以物喜，不以己悲**。当然我不是说要做一个宿命论者，而是你可以将宿命论作为你**解决一些问题的方法之一**。\n\n刘老师：从工作后开始计算，**至少要努力奋斗15年**，这样你人生的后几十年将一马平川。**我大学时代和工作之后过得算是非常苦的**，几乎和现在的高三一样。\n\n刘老师：有时候你看到一些商人很能讲，可能会觉得他很能吹，其实不然，这意味着他很有逻辑，否则话都讲不清楚。逻辑清晰是非常重要的，但**光有逻辑其实还不够，还得能由此及彼而且能自圆其说**，这时候这个人就是有才气了。\n\n刘老师：**兴趣和天赋是两回事。**\n\n刘老师：如果选择工作，那么就要在一切可利用的条件下尽可能的训练自己。把意思表达清楚是训练，学习更多知识也是训练，**处处都可训练，而且这种训练更重要的是持之以恒。**\n\n刘老师：由文人画到书法与篆刻，进而文字与古文，再到哲学与宗教，再至沟通哲学与科学。\n\n刘老师：首先，**你要想清楚你自己要成为一个什么样的人**，不是具体到说要达到一个怎样的职位，而是做什么样的人，我只是计划做一个什么样的人，而不是计划做华南理工的教授，为什么不能定要成为某某大学教授那样的目标？因为计划会变，变化就会引起不安，而是应该成为一个计算机专家这样的；其次，**你要为此准备什么样的知识，选择什么样的平台**；最后，**如何处理外部的干扰**（主要是来自家庭的干扰）。\n\n刘老师：读在职研究生的目的不是让你电多厉害，一拿文凭，二这是一个难得的**重新再接受一次系统训练的机会**。在这家公司做事情，这些知识肯定是要学的，学的过程顺带就学位给拿了。\n\n刘老师：**真正应该看的是45岁以后怎样**，程序员在生命周期在45岁差不多就终结了（年轻人达到跟你一样的能力但拿得比你少），这个时候你该怎么办？真正**应该做到的是能人所不能**，那么什么平台能给你更多锻炼呢？什么平台给予你更多挑战呢？\n\n刘老师：大平台为什么这么精细化？假如它不这么精细化其实是在培养竞争对手，随便一个员工都可以拿着这套技术去复制一个出来。这种精细化会导致你只是擅长做一个狭小领域的事情，等同于给你高收入废你武功。**年轻人不要做太简单的事情，老了会为此而买单的。**实际上我本身并没有刻意去选取一个平台或一个更好的机会，当你能人所不能的时候，机会就主动找上门来了，我读博一的时候华工就来挖我了。\n\n刘老师：我弟弟前妻后悔离婚，因为我弟弟混得很好，但我弟弟坚持不复合，并说**自己种下的果子自己吃**。既然当时这个女的没看中他的能力，那还要她干嘛，她家里人又不是拿着刀逼她离婚，这是她自己的选择。我年轻的时候就说过，谁也不能阻挡我前进的步伐，但是实际上这种干扰是特别多的，特别是来自家庭，或者说老婆。\n\n刘老师：假如我们总把时间浪费在于事无补**的事情上，而且还产生很多的情绪影响心情，这就叫惘念。有很多人把大部分时间花在这上面，而且特别煎熬人，然而**真正有用的是把时间花在想如何解决问题上面**。把时间花在重要的事情上，其实也花不了多少时间，而且久而久之你就会给人以一种举重若轻的感觉，因为你的时间利用率特高。把时间花在真正重要的事情，意味着你得有相应的判断力，同时还得有直面问题的勇气。\n\n刘老师：我没有处理很多家庭问题的，只是你在一个方向钻研得特别深之后，你会发现处理家庭问题就那么几招，处理商业问题也是那么几招。重要的是，我们要想**如何把自己的所学应用到实际生活**，并且改良实际生活（这里隐含了一个前提，人人都追求更好的生活）。\n\n刘老师：**想事情要连贯想，重点是想如何解决问题，以及我如何能解决问题**，这想那想胡思乱想没有任何作用。\n\n刘老师：**成功永远是少数，任何时代如此，这是一个客观规律**，因而大部分人所信奉的如何做能成功不一定正确，否则就违反这个客观规律了。\n\n刘老师：**只要你坚信努力一定有结果，那你就有了自信。自信的人就一定是强大的人。**\n\n刘老师：**要想的是，人活着是很好玩的。**\n\n刘老师：**太功利，就会只顾眼前利益。**\n\n刘老师：**做男人，一定要坚定，不受外界影响，任何人阻挡不了我前进的步伐。**\n\n刘老师：什么叫高尚情操——**科学与艺术就是高尚情操。**\n\n刘老师：我不是高人，**我只是忠于我自己**，别人喜欢是别人的事情。\n\n刘老师：**科学从具体开始，然后到抽象，然后可以用在任何地方。**\n\n刘老师：**人生不就是过过日子吗？**\n\n刘老师：**人生不就是图个心安吗？**\n\n刘老师：**谋其上者取其中,谋其中者取其下。**\n\n刘老师：**识缺乏则多虑，威缺乏则多怒，信缺乏则多言。**\n\n刘老师：**人的知识和认知永远都是有限的**，而知识的整体是无边无际的。\n\n刘老师：**内尊黄老，外示儒术。**\n\n刘老师：凡事要客观，但**有了情绪一般客观不了。**\n\n刘老师：先有道，才有德，**不能有德而无道。**\n\n## 方法论\n\n刘老师：**简单是好的，复杂是难用的。**\n\n刘老师：**学问是悟出来的**，而不是读出来的。\n\n刘老师：**着急对接下来的思考和决策有帮助吗？**\n\n刘老师：**对每一件事情进行哲学性思考**，比如微分dx/dt，这不就是在讲见微知著吗？\n\n刘老师：**看难的书要不求甚解**，第一遍先看懂20%（不要在一页上纠结太久但又要读无字书），第二遍40%，懂得80%或90%就可以丢开看其他书了。\n\n刘老师：**真正核心的能力不是利用计算机去解决问题，而是描述清楚问题（回到牛顿体系）。**\n\n刘老师：一定要养成**抠细节**的习惯，生活处处皆可训练逻辑。看别人文章是一种训练，看新闻是一种训练，看书也是一种训练，对方逻辑慎密一般作品都差不到哪里去。\n\n刘老师：**先要保持理性**，不让一切感性因素把你控制住，然后才是运用逻辑去解决问题。\n\n刘老师：**大量的阅读与思考**，归结知识的基本问题并讲给自己听，能训练你迅速抓住重点的能力。\n\n刘老师：**千万不要读太多书**，同类型的书读一本就好，即使同类型的书读多本，也要做到第一本30天，第二本15天，最后一本6天，如果每一本读的时间一样长，说明你没有进步。\n\n刘老师：理性批判精神有三，1）平视古今中外一切先哲的成果；2）直面问题；3）形式逻辑而非辩证逻辑；\n\n刘老师：我父亲对我说，**做学问的决战之巅在数学**，而不在专业知识，专业知识一次不懂，两次不懂，翻个三五年就懂了，而数学需要更长的时间去钻研。\n\n刘老师：**如何达到通达？**一种方式是学习多个学科的基本知识，最终融会贯通；另一种方式是在一个学科不断深入，最终联系上其他学科。\n\n刘老师：**把复杂问题的每个局部摸清楚**，那么大体形状也就出来了，一次求全是不可能的，这话就是所谓的盲人摸象。\n\n刘老师：此生所学和所经历，前人都已经历过，为何我不去探究，向哲人学习呢？我是不可能比前人最聪明的人聪明的，为何不向他们学习呢？\n\n刘老师：我问黄工说，你信大学时你那些师兄说的某某学科不重要之类的言论吗？黄工说傻的才信，全世界的大学都是学这个，你有什么理由不学。**这就是基本常识的重要性。**\n\n刘老师：判断自己是不是真的懂最简单的方法就是**讲给自己听**，说一遍不通就第二遍，直到说通为止。\n\n刘老师：通过长时间阅读和训练打通一切，这样工作就是**杀鸡用牛刀**，游刃有余。\n\n刘老师：应对一件事情有两种思维，一种是**学术思维**（不同的事物找出相同之处），一种是**技术思维**（相同的地方找出不同之处，将差异最大化），比如吃饭用筷子，学术思维研究的是东西方文化不同，技术思维研究如何拿的更顺畅。\n\n刘老师：**带团队必须从难的事情开始，然后后面的事情就简单了**。\n\n刘老师：该认真的时候认真，该放松的时候放松。弓弦绷久了容易坏，一个终日郁结的人也难以取得什么大的成就。**“适度松紧”**可以应用在许多领域，例如读书，以一种玩味的心态去读书，认真但不要死磕，这一次努力之后攻破不了的问题，把它深深记住，自然会在研读其他书或者许久之后回顾攻破。另外，越是想快速达成你的目标，越不能绷得太紧，“欲速则不达”其实就是一种“适度松紧”。对于我自己而言，我是一个过于敏感的人，太过敏感的人无法专注，这就是弊端。\n\n\n刘老师：**以小见大（小题大做）**，把事物适当抽象，这样你才能推演归纳，由此及彼。大题小做，这样你才能找到切入点。\n","source":"_posts/2016-07-31-learn-sth-from-master-liu.markdown","raw":"---\nlayout: post\ntitle: 刘老师的智慧箴言\ndate: '2016-07-31 10:50'\ncomments: true\ncategories: ['科技与人文'] \ntags: ['Wisdom']\n---\n\n参加工作已然有三年，这三年，公司的一位老总——刘老师，给予了我很多的启发——这些启发将使我受益一生。\n\n<!--more-->\n\n写这篇博文是为了记录刘老师的一些智慧箴言，并加之一些自己的理解。遗憾的是，我可能并未彻底理解刘老师的意思，因此本文的刘老师的智慧箴言其实是我加工后的，这种加工无法避免，因为我不是一字不漏的记忆他说的话，而是通过自己的理解以及部分关键词来编码为自己的记忆。\n\n## 人生观\n\n刘老师：进大学后，有的人参加社团，是因为以后想要从商或从政，以锻炼自己交际能力并扩展自己的交际圈为目的，而有的人是因为别人参加所以他也参加；有的人苦学，是因为他以后想要做这个领域的专家，这里的区别是他们有没有想法。几十年后，我们本科的同学想要当官的都当上了，当然被抓了是另外一回事，想要当教授的也都当上了，至于那些没什么想法的同学呢？其实生活过得也不差，但就是没有什么特别的成就。人与人有一个很重要的差别就是，**你有没有想法**。\n\n刘老师：既然你读大学了，尽管你以后未必是从事这个专业的工作，但为什么不把它读好呢？就好比你学习画画，你即使以后不是立志做一个画家，那为什么不把画画学好呢？如果你能把你的专业学得很好，**那么这种训练将使你做其他事情也特别厉害。**\n\n刘老师：基尔霍夫绝对是一个宿命论者，你看他的基尔霍夫定律：电压有升有降，但对于电路中一个位置，走了一圈回来之后电压代数和为0。这意味着什么呢？我们姑且把人生看成一个常数，就假定为0吧！这就意味着人生有高峰有低谷，但总体水平趋于一个常数。当我们春风得意时，不能得意忘形，或者说居安不思危，否则很快就要走下坡路；当我们人生诸事不顺时，这恰恰意味着立马就要有新的转机了。这就是古人所说的，**不以物喜，不以己悲**。当然我不是说要做一个宿命论者，而是你可以将宿命论作为你**解决一些问题的方法之一**。\n\n刘老师：从工作后开始计算，**至少要努力奋斗15年**，这样你人生的后几十年将一马平川。**我大学时代和工作之后过得算是非常苦的**，几乎和现在的高三一样。\n\n刘老师：有时候你看到一些商人很能讲，可能会觉得他很能吹，其实不然，这意味着他很有逻辑，否则话都讲不清楚。逻辑清晰是非常重要的，但**光有逻辑其实还不够，还得能由此及彼而且能自圆其说**，这时候这个人就是有才气了。\n\n刘老师：**兴趣和天赋是两回事。**\n\n刘老师：如果选择工作，那么就要在一切可利用的条件下尽可能的训练自己。把意思表达清楚是训练，学习更多知识也是训练，**处处都可训练，而且这种训练更重要的是持之以恒。**\n\n刘老师：由文人画到书法与篆刻，进而文字与古文，再到哲学与宗教，再至沟通哲学与科学。\n\n刘老师：首先，**你要想清楚你自己要成为一个什么样的人**，不是具体到说要达到一个怎样的职位，而是做什么样的人，我只是计划做一个什么样的人，而不是计划做华南理工的教授，为什么不能定要成为某某大学教授那样的目标？因为计划会变，变化就会引起不安，而是应该成为一个计算机专家这样的；其次，**你要为此准备什么样的知识，选择什么样的平台**；最后，**如何处理外部的干扰**（主要是来自家庭的干扰）。\n\n刘老师：读在职研究生的目的不是让你电多厉害，一拿文凭，二这是一个难得的**重新再接受一次系统训练的机会**。在这家公司做事情，这些知识肯定是要学的，学的过程顺带就学位给拿了。\n\n刘老师：**真正应该看的是45岁以后怎样**，程序员在生命周期在45岁差不多就终结了（年轻人达到跟你一样的能力但拿得比你少），这个时候你该怎么办？真正**应该做到的是能人所不能**，那么什么平台能给你更多锻炼呢？什么平台给予你更多挑战呢？\n\n刘老师：大平台为什么这么精细化？假如它不这么精细化其实是在培养竞争对手，随便一个员工都可以拿着这套技术去复制一个出来。这种精细化会导致你只是擅长做一个狭小领域的事情，等同于给你高收入废你武功。**年轻人不要做太简单的事情，老了会为此而买单的。**实际上我本身并没有刻意去选取一个平台或一个更好的机会，当你能人所不能的时候，机会就主动找上门来了，我读博一的时候华工就来挖我了。\n\n刘老师：我弟弟前妻后悔离婚，因为我弟弟混得很好，但我弟弟坚持不复合，并说**自己种下的果子自己吃**。既然当时这个女的没看中他的能力，那还要她干嘛，她家里人又不是拿着刀逼她离婚，这是她自己的选择。我年轻的时候就说过，谁也不能阻挡我前进的步伐，但是实际上这种干扰是特别多的，特别是来自家庭，或者说老婆。\n\n刘老师：假如我们总把时间浪费在于事无补**的事情上，而且还产生很多的情绪影响心情，这就叫惘念。有很多人把大部分时间花在这上面，而且特别煎熬人，然而**真正有用的是把时间花在想如何解决问题上面**。把时间花在重要的事情上，其实也花不了多少时间，而且久而久之你就会给人以一种举重若轻的感觉，因为你的时间利用率特高。把时间花在真正重要的事情，意味着你得有相应的判断力，同时还得有直面问题的勇气。\n\n刘老师：我没有处理很多家庭问题的，只是你在一个方向钻研得特别深之后，你会发现处理家庭问题就那么几招，处理商业问题也是那么几招。重要的是，我们要想**如何把自己的所学应用到实际生活**，并且改良实际生活（这里隐含了一个前提，人人都追求更好的生活）。\n\n刘老师：**想事情要连贯想，重点是想如何解决问题，以及我如何能解决问题**，这想那想胡思乱想没有任何作用。\n\n刘老师：**成功永远是少数，任何时代如此，这是一个客观规律**，因而大部分人所信奉的如何做能成功不一定正确，否则就违反这个客观规律了。\n\n刘老师：**只要你坚信努力一定有结果，那你就有了自信。自信的人就一定是强大的人。**\n\n刘老师：**要想的是，人活着是很好玩的。**\n\n刘老师：**太功利，就会只顾眼前利益。**\n\n刘老师：**做男人，一定要坚定，不受外界影响，任何人阻挡不了我前进的步伐。**\n\n刘老师：什么叫高尚情操——**科学与艺术就是高尚情操。**\n\n刘老师：我不是高人，**我只是忠于我自己**，别人喜欢是别人的事情。\n\n刘老师：**科学从具体开始，然后到抽象，然后可以用在任何地方。**\n\n刘老师：**人生不就是过过日子吗？**\n\n刘老师：**人生不就是图个心安吗？**\n\n刘老师：**谋其上者取其中,谋其中者取其下。**\n\n刘老师：**识缺乏则多虑，威缺乏则多怒，信缺乏则多言。**\n\n刘老师：**人的知识和认知永远都是有限的**，而知识的整体是无边无际的。\n\n刘老师：**内尊黄老，外示儒术。**\n\n刘老师：凡事要客观，但**有了情绪一般客观不了。**\n\n刘老师：先有道，才有德，**不能有德而无道。**\n\n## 方法论\n\n刘老师：**简单是好的，复杂是难用的。**\n\n刘老师：**学问是悟出来的**，而不是读出来的。\n\n刘老师：**着急对接下来的思考和决策有帮助吗？**\n\n刘老师：**对每一件事情进行哲学性思考**，比如微分dx/dt，这不就是在讲见微知著吗？\n\n刘老师：**看难的书要不求甚解**，第一遍先看懂20%（不要在一页上纠结太久但又要读无字书），第二遍40%，懂得80%或90%就可以丢开看其他书了。\n\n刘老师：**真正核心的能力不是利用计算机去解决问题，而是描述清楚问题（回到牛顿体系）。**\n\n刘老师：一定要养成**抠细节**的习惯，生活处处皆可训练逻辑。看别人文章是一种训练，看新闻是一种训练，看书也是一种训练，对方逻辑慎密一般作品都差不到哪里去。\n\n刘老师：**先要保持理性**，不让一切感性因素把你控制住，然后才是运用逻辑去解决问题。\n\n刘老师：**大量的阅读与思考**，归结知识的基本问题并讲给自己听，能训练你迅速抓住重点的能力。\n\n刘老师：**千万不要读太多书**，同类型的书读一本就好，即使同类型的书读多本，也要做到第一本30天，第二本15天，最后一本6天，如果每一本读的时间一样长，说明你没有进步。\n\n刘老师：理性批判精神有三，1）平视古今中外一切先哲的成果；2）直面问题；3）形式逻辑而非辩证逻辑；\n\n刘老师：我父亲对我说，**做学问的决战之巅在数学**，而不在专业知识，专业知识一次不懂，两次不懂，翻个三五年就懂了，而数学需要更长的时间去钻研。\n\n刘老师：**如何达到通达？**一种方式是学习多个学科的基本知识，最终融会贯通；另一种方式是在一个学科不断深入，最终联系上其他学科。\n\n刘老师：**把复杂问题的每个局部摸清楚**，那么大体形状也就出来了，一次求全是不可能的，这话就是所谓的盲人摸象。\n\n刘老师：此生所学和所经历，前人都已经历过，为何我不去探究，向哲人学习呢？我是不可能比前人最聪明的人聪明的，为何不向他们学习呢？\n\n刘老师：我问黄工说，你信大学时你那些师兄说的某某学科不重要之类的言论吗？黄工说傻的才信，全世界的大学都是学这个，你有什么理由不学。**这就是基本常识的重要性。**\n\n刘老师：判断自己是不是真的懂最简单的方法就是**讲给自己听**，说一遍不通就第二遍，直到说通为止。\n\n刘老师：通过长时间阅读和训练打通一切，这样工作就是**杀鸡用牛刀**，游刃有余。\n\n刘老师：应对一件事情有两种思维，一种是**学术思维**（不同的事物找出相同之处），一种是**技术思维**（相同的地方找出不同之处，将差异最大化），比如吃饭用筷子，学术思维研究的是东西方文化不同，技术思维研究如何拿的更顺畅。\n\n刘老师：**带团队必须从难的事情开始，然后后面的事情就简单了**。\n\n刘老师：该认真的时候认真，该放松的时候放松。弓弦绷久了容易坏，一个终日郁结的人也难以取得什么大的成就。**“适度松紧”**可以应用在许多领域，例如读书，以一种玩味的心态去读书，认真但不要死磕，这一次努力之后攻破不了的问题，把它深深记住，自然会在研读其他书或者许久之后回顾攻破。另外，越是想快速达成你的目标，越不能绷得太紧，“欲速则不达”其实就是一种“适度松紧”。对于我自己而言，我是一个过于敏感的人，太过敏感的人无法专注，这就是弊端。\n\n\n刘老师：**以小见大（小题大做）**，把事物适当抽象，这样你才能推演归纳，由此及彼。大题小做，这样你才能找到切入点。\n","slug":"learn-sth-from-master-liu","published":1,"updated":"2017-04-09T14:39:59.000Z","photos":[],"link":"","_id":"cjlza6m57001wpgup1y0qet3m","content":"<p>参加工作已然有三年，这三年，公司的一位老总——刘老师，给予了我很多的启发——这些启发将使我受益一生。</p>\n<a id=\"more\"></a>\n<p>写这篇博文是为了记录刘老师的一些智慧箴言，并加之一些自己的理解。遗憾的是，我可能并未彻底理解刘老师的意思，因此本文的刘老师的智慧箴言其实是我加工后的，这种加工无法避免，因为我不是一字不漏的记忆他说的话，而是通过自己的理解以及部分关键词来编码为自己的记忆。</p>\n<h2 id=\"人生观\"><a href=\"#人生观\" class=\"headerlink\" title=\"人生观\"></a>人生观</h2><p>刘老师：进大学后，有的人参加社团，是因为以后想要从商或从政，以锻炼自己交际能力并扩展自己的交际圈为目的，而有的人是因为别人参加所以他也参加；有的人苦学，是因为他以后想要做这个领域的专家，这里的区别是他们有没有想法。几十年后，我们本科的同学想要当官的都当上了，当然被抓了是另外一回事，想要当教授的也都当上了，至于那些没什么想法的同学呢？其实生活过得也不差，但就是没有什么特别的成就。人与人有一个很重要的差别就是，<strong>你有没有想法</strong>。</p>\n<p>刘老师：既然你读大学了，尽管你以后未必是从事这个专业的工作，但为什么不把它读好呢？就好比你学习画画，你即使以后不是立志做一个画家，那为什么不把画画学好呢？如果你能把你的专业学得很好，<strong>那么这种训练将使你做其他事情也特别厉害。</strong></p>\n<p>刘老师：基尔霍夫绝对是一个宿命论者，你看他的基尔霍夫定律：电压有升有降，但对于电路中一个位置，走了一圈回来之后电压代数和为0。这意味着什么呢？我们姑且把人生看成一个常数，就假定为0吧！这就意味着人生有高峰有低谷，但总体水平趋于一个常数。当我们春风得意时，不能得意忘形，或者说居安不思危，否则很快就要走下坡路；当我们人生诸事不顺时，这恰恰意味着立马就要有新的转机了。这就是古人所说的，<strong>不以物喜，不以己悲</strong>。当然我不是说要做一个宿命论者，而是你可以将宿命论作为你<strong>解决一些问题的方法之一</strong>。</p>\n<p>刘老师：从工作后开始计算，<strong>至少要努力奋斗15年</strong>，这样你人生的后几十年将一马平川。<strong>我大学时代和工作之后过得算是非常苦的</strong>，几乎和现在的高三一样。</p>\n<p>刘老师：有时候你看到一些商人很能讲，可能会觉得他很能吹，其实不然，这意味着他很有逻辑，否则话都讲不清楚。逻辑清晰是非常重要的，但<strong>光有逻辑其实还不够，还得能由此及彼而且能自圆其说</strong>，这时候这个人就是有才气了。</p>\n<p>刘老师：<strong>兴趣和天赋是两回事。</strong></p>\n<p>刘老师：如果选择工作，那么就要在一切可利用的条件下尽可能的训练自己。把意思表达清楚是训练，学习更多知识也是训练，<strong>处处都可训练，而且这种训练更重要的是持之以恒。</strong></p>\n<p>刘老师：由文人画到书法与篆刻，进而文字与古文，再到哲学与宗教，再至沟通哲学与科学。</p>\n<p>刘老师：首先，<strong>你要想清楚你自己要成为一个什么样的人</strong>，不是具体到说要达到一个怎样的职位，而是做什么样的人，我只是计划做一个什么样的人，而不是计划做华南理工的教授，为什么不能定要成为某某大学教授那样的目标？因为计划会变，变化就会引起不安，而是应该成为一个计算机专家这样的；其次，<strong>你要为此准备什么样的知识，选择什么样的平台</strong>；最后，<strong>如何处理外部的干扰</strong>（主要是来自家庭的干扰）。</p>\n<p>刘老师：读在职研究生的目的不是让你电多厉害，一拿文凭，二这是一个难得的<strong>重新再接受一次系统训练的机会</strong>。在这家公司做事情，这些知识肯定是要学的，学的过程顺带就学位给拿了。</p>\n<p>刘老师：<strong>真正应该看的是45岁以后怎样</strong>，程序员在生命周期在45岁差不多就终结了（年轻人达到跟你一样的能力但拿得比你少），这个时候你该怎么办？真正<strong>应该做到的是能人所不能</strong>，那么什么平台能给你更多锻炼呢？什么平台给予你更多挑战呢？</p>\n<p>刘老师：大平台为什么这么精细化？假如它不这么精细化其实是在培养竞争对手，随便一个员工都可以拿着这套技术去复制一个出来。这种精细化会导致你只是擅长做一个狭小领域的事情，等同于给你高收入废你武功。<strong>年轻人不要做太简单的事情，老了会为此而买单的。</strong>实际上我本身并没有刻意去选取一个平台或一个更好的机会，当你能人所不能的时候，机会就主动找上门来了，我读博一的时候华工就来挖我了。</p>\n<p>刘老师：我弟弟前妻后悔离婚，因为我弟弟混得很好，但我弟弟坚持不复合，并说<strong>自己种下的果子自己吃</strong>。既然当时这个女的没看中他的能力，那还要她干嘛，她家里人又不是拿着刀逼她离婚，这是她自己的选择。我年轻的时候就说过，谁也不能阻挡我前进的步伐，但是实际上这种干扰是特别多的，特别是来自家庭，或者说老婆。</p>\n<p>刘老师：假如我们总把时间浪费在于事无补<strong>的事情上，而且还产生很多的情绪影响心情，这就叫惘念。有很多人把大部分时间花在这上面，而且特别煎熬人，然而</strong>真正有用的是把时间花在想如何解决问题上面**。把时间花在重要的事情上，其实也花不了多少时间，而且久而久之你就会给人以一种举重若轻的感觉，因为你的时间利用率特高。把时间花在真正重要的事情，意味着你得有相应的判断力，同时还得有直面问题的勇气。</p>\n<p>刘老师：我没有处理很多家庭问题的，只是你在一个方向钻研得特别深之后，你会发现处理家庭问题就那么几招，处理商业问题也是那么几招。重要的是，我们要想<strong>如何把自己的所学应用到实际生活</strong>，并且改良实际生活（这里隐含了一个前提，人人都追求更好的生活）。</p>\n<p>刘老师：<strong>想事情要连贯想，重点是想如何解决问题，以及我如何能解决问题</strong>，这想那想胡思乱想没有任何作用。</p>\n<p>刘老师：<strong>成功永远是少数，任何时代如此，这是一个客观规律</strong>，因而大部分人所信奉的如何做能成功不一定正确，否则就违反这个客观规律了。</p>\n<p>刘老师：<strong>只要你坚信努力一定有结果，那你就有了自信。自信的人就一定是强大的人。</strong></p>\n<p>刘老师：<strong>要想的是，人活着是很好玩的。</strong></p>\n<p>刘老师：<strong>太功利，就会只顾眼前利益。</strong></p>\n<p>刘老师：<strong>做男人，一定要坚定，不受外界影响，任何人阻挡不了我前进的步伐。</strong></p>\n<p>刘老师：什么叫高尚情操——<strong>科学与艺术就是高尚情操。</strong></p>\n<p>刘老师：我不是高人，<strong>我只是忠于我自己</strong>，别人喜欢是别人的事情。</p>\n<p>刘老师：<strong>科学从具体开始，然后到抽象，然后可以用在任何地方。</strong></p>\n<p>刘老师：<strong>人生不就是过过日子吗？</strong></p>\n<p>刘老师：<strong>人生不就是图个心安吗？</strong></p>\n<p>刘老师：<strong>谋其上者取其中,谋其中者取其下。</strong></p>\n<p>刘老师：<strong>识缺乏则多虑，威缺乏则多怒，信缺乏则多言。</strong></p>\n<p>刘老师：<strong>人的知识和认知永远都是有限的</strong>，而知识的整体是无边无际的。</p>\n<p>刘老师：<strong>内尊黄老，外示儒术。</strong></p>\n<p>刘老师：凡事要客观，但<strong>有了情绪一般客观不了。</strong></p>\n<p>刘老师：先有道，才有德，<strong>不能有德而无道。</strong></p>\n<h2 id=\"方法论\"><a href=\"#方法论\" class=\"headerlink\" title=\"方法论\"></a>方法论</h2><p>刘老师：<strong>简单是好的，复杂是难用的。</strong></p>\n<p>刘老师：<strong>学问是悟出来的</strong>，而不是读出来的。</p>\n<p>刘老师：<strong>着急对接下来的思考和决策有帮助吗？</strong></p>\n<p>刘老师：<strong>对每一件事情进行哲学性思考</strong>，比如微分dx/dt，这不就是在讲见微知著吗？</p>\n<p>刘老师：<strong>看难的书要不求甚解</strong>，第一遍先看懂20%（不要在一页上纠结太久但又要读无字书），第二遍40%，懂得80%或90%就可以丢开看其他书了。</p>\n<p>刘老师：<strong>真正核心的能力不是利用计算机去解决问题，而是描述清楚问题（回到牛顿体系）。</strong></p>\n<p>刘老师：一定要养成<strong>抠细节</strong>的习惯，生活处处皆可训练逻辑。看别人文章是一种训练，看新闻是一种训练，看书也是一种训练，对方逻辑慎密一般作品都差不到哪里去。</p>\n<p>刘老师：<strong>先要保持理性</strong>，不让一切感性因素把你控制住，然后才是运用逻辑去解决问题。</p>\n<p>刘老师：<strong>大量的阅读与思考</strong>，归结知识的基本问题并讲给自己听，能训练你迅速抓住重点的能力。</p>\n<p>刘老师：<strong>千万不要读太多书</strong>，同类型的书读一本就好，即使同类型的书读多本，也要做到第一本30天，第二本15天，最后一本6天，如果每一本读的时间一样长，说明你没有进步。</p>\n<p>刘老师：理性批判精神有三，1）平视古今中外一切先哲的成果；2）直面问题；3）形式逻辑而非辩证逻辑；</p>\n<p>刘老师：我父亲对我说，<strong>做学问的决战之巅在数学</strong>，而不在专业知识，专业知识一次不懂，两次不懂，翻个三五年就懂了，而数学需要更长的时间去钻研。</p>\n<p>刘老师：<strong>如何达到通达？</strong>一种方式是学习多个学科的基本知识，最终融会贯通；另一种方式是在一个学科不断深入，最终联系上其他学科。</p>\n<p>刘老师：<strong>把复杂问题的每个局部摸清楚</strong>，那么大体形状也就出来了，一次求全是不可能的，这话就是所谓的盲人摸象。</p>\n<p>刘老师：此生所学和所经历，前人都已经历过，为何我不去探究，向哲人学习呢？我是不可能比前人最聪明的人聪明的，为何不向他们学习呢？</p>\n<p>刘老师：我问黄工说，你信大学时你那些师兄说的某某学科不重要之类的言论吗？黄工说傻的才信，全世界的大学都是学这个，你有什么理由不学。<strong>这就是基本常识的重要性。</strong></p>\n<p>刘老师：判断自己是不是真的懂最简单的方法就是<strong>讲给自己听</strong>，说一遍不通就第二遍，直到说通为止。</p>\n<p>刘老师：通过长时间阅读和训练打通一切，这样工作就是<strong>杀鸡用牛刀</strong>，游刃有余。</p>\n<p>刘老师：应对一件事情有两种思维，一种是<strong>学术思维</strong>（不同的事物找出相同之处），一种是<strong>技术思维</strong>（相同的地方找出不同之处，将差异最大化），比如吃饭用筷子，学术思维研究的是东西方文化不同，技术思维研究如何拿的更顺畅。</p>\n<p>刘老师：<strong>带团队必须从难的事情开始，然后后面的事情就简单了</strong>。</p>\n<p>刘老师：该认真的时候认真，该放松的时候放松。弓弦绷久了容易坏，一个终日郁结的人也难以取得什么大的成就。<strong>“适度松紧”</strong>可以应用在许多领域，例如读书，以一种玩味的心态去读书，认真但不要死磕，这一次努力之后攻破不了的问题，把它深深记住，自然会在研读其他书或者许久之后回顾攻破。另外，越是想快速达成你的目标，越不能绷得太紧，“欲速则不达”其实就是一种“适度松紧”。对于我自己而言，我是一个过于敏感的人，太过敏感的人无法专注，这就是弊端。</p>\n<p>刘老师：<strong>以小见大（小题大做）</strong>，把事物适当抽象，这样你才能推演归纳，由此及彼。大题小做，这样你才能找到切入点。</p>\n","site":{"data":{}},"excerpt":"<p>参加工作已然有三年，这三年，公司的一位老总——刘老师，给予了我很多的启发——这些启发将使我受益一生。</p>","more":"<p>写这篇博文是为了记录刘老师的一些智慧箴言，并加之一些自己的理解。遗憾的是，我可能并未彻底理解刘老师的意思，因此本文的刘老师的智慧箴言其实是我加工后的，这种加工无法避免，因为我不是一字不漏的记忆他说的话，而是通过自己的理解以及部分关键词来编码为自己的记忆。</p>\n<h2 id=\"人生观\"><a href=\"#人生观\" class=\"headerlink\" title=\"人生观\"></a>人生观</h2><p>刘老师：进大学后，有的人参加社团，是因为以后想要从商或从政，以锻炼自己交际能力并扩展自己的交际圈为目的，而有的人是因为别人参加所以他也参加；有的人苦学，是因为他以后想要做这个领域的专家，这里的区别是他们有没有想法。几十年后，我们本科的同学想要当官的都当上了，当然被抓了是另外一回事，想要当教授的也都当上了，至于那些没什么想法的同学呢？其实生活过得也不差，但就是没有什么特别的成就。人与人有一个很重要的差别就是，<strong>你有没有想法</strong>。</p>\n<p>刘老师：既然你读大学了，尽管你以后未必是从事这个专业的工作，但为什么不把它读好呢？就好比你学习画画，你即使以后不是立志做一个画家，那为什么不把画画学好呢？如果你能把你的专业学得很好，<strong>那么这种训练将使你做其他事情也特别厉害。</strong></p>\n<p>刘老师：基尔霍夫绝对是一个宿命论者，你看他的基尔霍夫定律：电压有升有降，但对于电路中一个位置，走了一圈回来之后电压代数和为0。这意味着什么呢？我们姑且把人生看成一个常数，就假定为0吧！这就意味着人生有高峰有低谷，但总体水平趋于一个常数。当我们春风得意时，不能得意忘形，或者说居安不思危，否则很快就要走下坡路；当我们人生诸事不顺时，这恰恰意味着立马就要有新的转机了。这就是古人所说的，<strong>不以物喜，不以己悲</strong>。当然我不是说要做一个宿命论者，而是你可以将宿命论作为你<strong>解决一些问题的方法之一</strong>。</p>\n<p>刘老师：从工作后开始计算，<strong>至少要努力奋斗15年</strong>，这样你人生的后几十年将一马平川。<strong>我大学时代和工作之后过得算是非常苦的</strong>，几乎和现在的高三一样。</p>\n<p>刘老师：有时候你看到一些商人很能讲，可能会觉得他很能吹，其实不然，这意味着他很有逻辑，否则话都讲不清楚。逻辑清晰是非常重要的，但<strong>光有逻辑其实还不够，还得能由此及彼而且能自圆其说</strong>，这时候这个人就是有才气了。</p>\n<p>刘老师：<strong>兴趣和天赋是两回事。</strong></p>\n<p>刘老师：如果选择工作，那么就要在一切可利用的条件下尽可能的训练自己。把意思表达清楚是训练，学习更多知识也是训练，<strong>处处都可训练，而且这种训练更重要的是持之以恒。</strong></p>\n<p>刘老师：由文人画到书法与篆刻，进而文字与古文，再到哲学与宗教，再至沟通哲学与科学。</p>\n<p>刘老师：首先，<strong>你要想清楚你自己要成为一个什么样的人</strong>，不是具体到说要达到一个怎样的职位，而是做什么样的人，我只是计划做一个什么样的人，而不是计划做华南理工的教授，为什么不能定要成为某某大学教授那样的目标？因为计划会变，变化就会引起不安，而是应该成为一个计算机专家这样的；其次，<strong>你要为此准备什么样的知识，选择什么样的平台</strong>；最后，<strong>如何处理外部的干扰</strong>（主要是来自家庭的干扰）。</p>\n<p>刘老师：读在职研究生的目的不是让你电多厉害，一拿文凭，二这是一个难得的<strong>重新再接受一次系统训练的机会</strong>。在这家公司做事情，这些知识肯定是要学的，学的过程顺带就学位给拿了。</p>\n<p>刘老师：<strong>真正应该看的是45岁以后怎样</strong>，程序员在生命周期在45岁差不多就终结了（年轻人达到跟你一样的能力但拿得比你少），这个时候你该怎么办？真正<strong>应该做到的是能人所不能</strong>，那么什么平台能给你更多锻炼呢？什么平台给予你更多挑战呢？</p>\n<p>刘老师：大平台为什么这么精细化？假如它不这么精细化其实是在培养竞争对手，随便一个员工都可以拿着这套技术去复制一个出来。这种精细化会导致你只是擅长做一个狭小领域的事情，等同于给你高收入废你武功。<strong>年轻人不要做太简单的事情，老了会为此而买单的。</strong>实际上我本身并没有刻意去选取一个平台或一个更好的机会，当你能人所不能的时候，机会就主动找上门来了，我读博一的时候华工就来挖我了。</p>\n<p>刘老师：我弟弟前妻后悔离婚，因为我弟弟混得很好，但我弟弟坚持不复合，并说<strong>自己种下的果子自己吃</strong>。既然当时这个女的没看中他的能力，那还要她干嘛，她家里人又不是拿着刀逼她离婚，这是她自己的选择。我年轻的时候就说过，谁也不能阻挡我前进的步伐，但是实际上这种干扰是特别多的，特别是来自家庭，或者说老婆。</p>\n<p>刘老师：假如我们总把时间浪费在于事无补<strong>的事情上，而且还产生很多的情绪影响心情，这就叫惘念。有很多人把大部分时间花在这上面，而且特别煎熬人，然而</strong>真正有用的是把时间花在想如何解决问题上面**。把时间花在重要的事情上，其实也花不了多少时间，而且久而久之你就会给人以一种举重若轻的感觉，因为你的时间利用率特高。把时间花在真正重要的事情，意味着你得有相应的判断力，同时还得有直面问题的勇气。</p>\n<p>刘老师：我没有处理很多家庭问题的，只是你在一个方向钻研得特别深之后，你会发现处理家庭问题就那么几招，处理商业问题也是那么几招。重要的是，我们要想<strong>如何把自己的所学应用到实际生活</strong>，并且改良实际生活（这里隐含了一个前提，人人都追求更好的生活）。</p>\n<p>刘老师：<strong>想事情要连贯想，重点是想如何解决问题，以及我如何能解决问题</strong>，这想那想胡思乱想没有任何作用。</p>\n<p>刘老师：<strong>成功永远是少数，任何时代如此，这是一个客观规律</strong>，因而大部分人所信奉的如何做能成功不一定正确，否则就违反这个客观规律了。</p>\n<p>刘老师：<strong>只要你坚信努力一定有结果，那你就有了自信。自信的人就一定是强大的人。</strong></p>\n<p>刘老师：<strong>要想的是，人活着是很好玩的。</strong></p>\n<p>刘老师：<strong>太功利，就会只顾眼前利益。</strong></p>\n<p>刘老师：<strong>做男人，一定要坚定，不受外界影响，任何人阻挡不了我前进的步伐。</strong></p>\n<p>刘老师：什么叫高尚情操——<strong>科学与艺术就是高尚情操。</strong></p>\n<p>刘老师：我不是高人，<strong>我只是忠于我自己</strong>，别人喜欢是别人的事情。</p>\n<p>刘老师：<strong>科学从具体开始，然后到抽象，然后可以用在任何地方。</strong></p>\n<p>刘老师：<strong>人生不就是过过日子吗？</strong></p>\n<p>刘老师：<strong>人生不就是图个心安吗？</strong></p>\n<p>刘老师：<strong>谋其上者取其中,谋其中者取其下。</strong></p>\n<p>刘老师：<strong>识缺乏则多虑，威缺乏则多怒，信缺乏则多言。</strong></p>\n<p>刘老师：<strong>人的知识和认知永远都是有限的</strong>，而知识的整体是无边无际的。</p>\n<p>刘老师：<strong>内尊黄老，外示儒术。</strong></p>\n<p>刘老师：凡事要客观，但<strong>有了情绪一般客观不了。</strong></p>\n<p>刘老师：先有道，才有德，<strong>不能有德而无道。</strong></p>\n<h2 id=\"方法论\"><a href=\"#方法论\" class=\"headerlink\" title=\"方法论\"></a>方法论</h2><p>刘老师：<strong>简单是好的，复杂是难用的。</strong></p>\n<p>刘老师：<strong>学问是悟出来的</strong>，而不是读出来的。</p>\n<p>刘老师：<strong>着急对接下来的思考和决策有帮助吗？</strong></p>\n<p>刘老师：<strong>对每一件事情进行哲学性思考</strong>，比如微分dx/dt，这不就是在讲见微知著吗？</p>\n<p>刘老师：<strong>看难的书要不求甚解</strong>，第一遍先看懂20%（不要在一页上纠结太久但又要读无字书），第二遍40%，懂得80%或90%就可以丢开看其他书了。</p>\n<p>刘老师：<strong>真正核心的能力不是利用计算机去解决问题，而是描述清楚问题（回到牛顿体系）。</strong></p>\n<p>刘老师：一定要养成<strong>抠细节</strong>的习惯，生活处处皆可训练逻辑。看别人文章是一种训练，看新闻是一种训练，看书也是一种训练，对方逻辑慎密一般作品都差不到哪里去。</p>\n<p>刘老师：<strong>先要保持理性</strong>，不让一切感性因素把你控制住，然后才是运用逻辑去解决问题。</p>\n<p>刘老师：<strong>大量的阅读与思考</strong>，归结知识的基本问题并讲给自己听，能训练你迅速抓住重点的能力。</p>\n<p>刘老师：<strong>千万不要读太多书</strong>，同类型的书读一本就好，即使同类型的书读多本，也要做到第一本30天，第二本15天，最后一本6天，如果每一本读的时间一样长，说明你没有进步。</p>\n<p>刘老师：理性批判精神有三，1）平视古今中外一切先哲的成果；2）直面问题；3）形式逻辑而非辩证逻辑；</p>\n<p>刘老师：我父亲对我说，<strong>做学问的决战之巅在数学</strong>，而不在专业知识，专业知识一次不懂，两次不懂，翻个三五年就懂了，而数学需要更长的时间去钻研。</p>\n<p>刘老师：<strong>如何达到通达？</strong>一种方式是学习多个学科的基本知识，最终融会贯通；另一种方式是在一个学科不断深入，最终联系上其他学科。</p>\n<p>刘老师：<strong>把复杂问题的每个局部摸清楚</strong>，那么大体形状也就出来了，一次求全是不可能的，这话就是所谓的盲人摸象。</p>\n<p>刘老师：此生所学和所经历，前人都已经历过，为何我不去探究，向哲人学习呢？我是不可能比前人最聪明的人聪明的，为何不向他们学习呢？</p>\n<p>刘老师：我问黄工说，你信大学时你那些师兄说的某某学科不重要之类的言论吗？黄工说傻的才信，全世界的大学都是学这个，你有什么理由不学。<strong>这就是基本常识的重要性。</strong></p>\n<p>刘老师：判断自己是不是真的懂最简单的方法就是<strong>讲给自己听</strong>，说一遍不通就第二遍，直到说通为止。</p>\n<p>刘老师：通过长时间阅读和训练打通一切，这样工作就是<strong>杀鸡用牛刀</strong>，游刃有余。</p>\n<p>刘老师：应对一件事情有两种思维，一种是<strong>学术思维</strong>（不同的事物找出相同之处），一种是<strong>技术思维</strong>（相同的地方找出不同之处，将差异最大化），比如吃饭用筷子，学术思维研究的是东西方文化不同，技术思维研究如何拿的更顺畅。</p>\n<p>刘老师：<strong>带团队必须从难的事情开始，然后后面的事情就简单了</strong>。</p>\n<p>刘老师：该认真的时候认真，该放松的时候放松。弓弦绷久了容易坏，一个终日郁结的人也难以取得什么大的成就。<strong>“适度松紧”</strong>可以应用在许多领域，例如读书，以一种玩味的心态去读书，认真但不要死磕，这一次努力之后攻破不了的问题，把它深深记住，自然会在研读其他书或者许久之后回顾攻破。另外，越是想快速达成你的目标，越不能绷得太紧，“欲速则不达”其实就是一种“适度松紧”。对于我自己而言，我是一个过于敏感的人，太过敏感的人无法专注，这就是弊端。</p>\n<p>刘老师：<strong>以小见大（小题大做）</strong>，把事物适当抽象，这样你才能推演归纳，由此及彼。大题小做，这样你才能找到切入点。</p>"},{"layout":"post","title":"关于SIGPIPE","date":"2016-08-05T12:14:00.000Z","comments":1,"_content":"\nUnix有一个信号名称为SIGPIPE，wiki上的解释是：\n\n<!--more-->\n\nThe SIGPIPE signal is sent to a process when it attempts to write to a pipe without a process connected to the other end。通俗翻译下：如果连接的另一端已断开，那么此时写数据到另一端会产生SIGPIPE信号。\n\n## SIGPIPE的原因\n\nSIGPIPE的根本原因是：已连接套接字收到RST分节，但应用程序没有发现，继续调用send()或write()往该套接字写数据，而导致内核产生SIGPIPE信号。那什么情况下对端会发送RST分节呢？UNP卷1的解释有以下三种：\n\n1. **对端无应用监听**：数据（含目的端口target_port）到达对端机器，到对端根本就没有应用在target_port等待数据（有可能是该应用被强制杀死），这时对端返回一个RST分节；\n2. **对端想取消已建立的连接**：对端通过设置linger，调用close强制发送RST分节，直接略过了TIME_WAIT的状态；\n3. **对端认为收到的数据无效**：假定对端崩溃后重启，其TCP丢失了之前的所有连接信息（根据ACK数值大小来决策？），因此对端收到数据后发回一个RST分节；\n\n关于上面提到的第2点，UNP卷1认为它存在隐患：2MSL内，双端又建立了连接，此时上一次连接的数据可能还未消逝，从而导致“新生”连接收到脏数据（丢弃还是发生RST分节？）。\n\n## SIGPIPE的处理\n\n如果能在发送前检测是否收到RST分节，再决策是否发送，能否解决问题呢？答案是不能。因为有可能在检测完之后，发送之前，应用收到了一个RST分节。况且，调用send()和write()并不意味着真的把数据发送出去，而**只是数据写入到了已连接套接字的发送缓冲区**，何时真正发送出去不是应用层所能够决策的。\n\n处理方法有以下2种：\n\n**全局忽略SIGPIPE**：掉用`signal(SIGPIPE, SIG_IGN);`忽略该信号，然后在调用write()或send()之后检查其返回值和errno，若返回值为-1则表明出错，同时errno会被置为EPIPE，应用再做相应的清理工作；\n\n**仅相关线程忽略SIGPIPE**：参考[Ignore SIGPIPE without affecting other threads in a process](http://www.microhowto.info/howto/ignore_sigpipe_without_affecting_other_threads_in_a_process.html)，该文章给出了非常详细的示范。\n","source":"_posts/2016-08-05-about-sigpipe.markdown","raw":"---\nlayout: post\ntitle: 关于SIGPIPE\ndate: '2016-08-05 20:14'\ncomments: true\ncategories: ['编程实践'] \ntags: ['C/C++', 'TCP/IP', 'Linux']\n---\n\nUnix有一个信号名称为SIGPIPE，wiki上的解释是：\n\n<!--more-->\n\nThe SIGPIPE signal is sent to a process when it attempts to write to a pipe without a process connected to the other end。通俗翻译下：如果连接的另一端已断开，那么此时写数据到另一端会产生SIGPIPE信号。\n\n## SIGPIPE的原因\n\nSIGPIPE的根本原因是：已连接套接字收到RST分节，但应用程序没有发现，继续调用send()或write()往该套接字写数据，而导致内核产生SIGPIPE信号。那什么情况下对端会发送RST分节呢？UNP卷1的解释有以下三种：\n\n1. **对端无应用监听**：数据（含目的端口target_port）到达对端机器，到对端根本就没有应用在target_port等待数据（有可能是该应用被强制杀死），这时对端返回一个RST分节；\n2. **对端想取消已建立的连接**：对端通过设置linger，调用close强制发送RST分节，直接略过了TIME_WAIT的状态；\n3. **对端认为收到的数据无效**：假定对端崩溃后重启，其TCP丢失了之前的所有连接信息（根据ACK数值大小来决策？），因此对端收到数据后发回一个RST分节；\n\n关于上面提到的第2点，UNP卷1认为它存在隐患：2MSL内，双端又建立了连接，此时上一次连接的数据可能还未消逝，从而导致“新生”连接收到脏数据（丢弃还是发生RST分节？）。\n\n## SIGPIPE的处理\n\n如果能在发送前检测是否收到RST分节，再决策是否发送，能否解决问题呢？答案是不能。因为有可能在检测完之后，发送之前，应用收到了一个RST分节。况且，调用send()和write()并不意味着真的把数据发送出去，而**只是数据写入到了已连接套接字的发送缓冲区**，何时真正发送出去不是应用层所能够决策的。\n\n处理方法有以下2种：\n\n**全局忽略SIGPIPE**：掉用`signal(SIGPIPE, SIG_IGN);`忽略该信号，然后在调用write()或send()之后检查其返回值和errno，若返回值为-1则表明出错，同时errno会被置为EPIPE，应用再做相应的清理工作；\n\n**仅相关线程忽略SIGPIPE**：参考[Ignore SIGPIPE without affecting other threads in a process](http://www.microhowto.info/howto/ignore_sigpipe_without_affecting_other_threads_in_a_process.html)，该文章给出了非常详细的示范。\n","slug":"about-sigpipe","published":1,"updated":"2017-04-09T14:37:46.000Z","photos":[],"link":"","_id":"cjlza6m590020pgup6x89zzvh","content":"<p>Unix有一个信号名称为SIGPIPE，wiki上的解释是：</p>\n<a id=\"more\"></a>\n<p>The SIGPIPE signal is sent to a process when it attempts to write to a pipe without a process connected to the other end。通俗翻译下：如果连接的另一端已断开，那么此时写数据到另一端会产生SIGPIPE信号。</p>\n<h2 id=\"SIGPIPE的原因\"><a href=\"#SIGPIPE的原因\" class=\"headerlink\" title=\"SIGPIPE的原因\"></a>SIGPIPE的原因</h2><p>SIGPIPE的根本原因是：已连接套接字收到RST分节，但应用程序没有发现，继续调用send()或write()往该套接字写数据，而导致内核产生SIGPIPE信号。那什么情况下对端会发送RST分节呢？UNP卷1的解释有以下三种：</p>\n<ol>\n<li><strong>对端无应用监听</strong>：数据（含目的端口target_port）到达对端机器，到对端根本就没有应用在target_port等待数据（有可能是该应用被强制杀死），这时对端返回一个RST分节；</li>\n<li><strong>对端想取消已建立的连接</strong>：对端通过设置linger，调用close强制发送RST分节，直接略过了TIME_WAIT的状态；</li>\n<li><strong>对端认为收到的数据无效</strong>：假定对端崩溃后重启，其TCP丢失了之前的所有连接信息（根据ACK数值大小来决策？），因此对端收到数据后发回一个RST分节；</li>\n</ol>\n<p>关于上面提到的第2点，UNP卷1认为它存在隐患：2MSL内，双端又建立了连接，此时上一次连接的数据可能还未消逝，从而导致“新生”连接收到脏数据（丢弃还是发生RST分节？）。</p>\n<h2 id=\"SIGPIPE的处理\"><a href=\"#SIGPIPE的处理\" class=\"headerlink\" title=\"SIGPIPE的处理\"></a>SIGPIPE的处理</h2><p>如果能在发送前检测是否收到RST分节，再决策是否发送，能否解决问题呢？答案是不能。因为有可能在检测完之后，发送之前，应用收到了一个RST分节。况且，调用send()和write()并不意味着真的把数据发送出去，而<strong>只是数据写入到了已连接套接字的发送缓冲区</strong>，何时真正发送出去不是应用层所能够决策的。</p>\n<p>处理方法有以下2种：</p>\n<p><strong>全局忽略SIGPIPE</strong>：掉用<code>signal(SIGPIPE, SIG_IGN);</code>忽略该信号，然后在调用write()或send()之后检查其返回值和errno，若返回值为-1则表明出错，同时errno会被置为EPIPE，应用再做相应的清理工作；</p>\n<p><strong>仅相关线程忽略SIGPIPE</strong>：参考<a href=\"http://www.microhowto.info/howto/ignore_sigpipe_without_affecting_other_threads_in_a_process.html\" target=\"_blank\" rel=\"noopener\">Ignore SIGPIPE without affecting other threads in a process</a>，该文章给出了非常详细的示范。</p>\n","site":{"data":{}},"excerpt":"<p>Unix有一个信号名称为SIGPIPE，wiki上的解释是：</p>","more":"<p>The SIGPIPE signal is sent to a process when it attempts to write to a pipe without a process connected to the other end。通俗翻译下：如果连接的另一端已断开，那么此时写数据到另一端会产生SIGPIPE信号。</p>\n<h2 id=\"SIGPIPE的原因\"><a href=\"#SIGPIPE的原因\" class=\"headerlink\" title=\"SIGPIPE的原因\"></a>SIGPIPE的原因</h2><p>SIGPIPE的根本原因是：已连接套接字收到RST分节，但应用程序没有发现，继续调用send()或write()往该套接字写数据，而导致内核产生SIGPIPE信号。那什么情况下对端会发送RST分节呢？UNP卷1的解释有以下三种：</p>\n<ol>\n<li><strong>对端无应用监听</strong>：数据（含目的端口target_port）到达对端机器，到对端根本就没有应用在target_port等待数据（有可能是该应用被强制杀死），这时对端返回一个RST分节；</li>\n<li><strong>对端想取消已建立的连接</strong>：对端通过设置linger，调用close强制发送RST分节，直接略过了TIME_WAIT的状态；</li>\n<li><strong>对端认为收到的数据无效</strong>：假定对端崩溃后重启，其TCP丢失了之前的所有连接信息（根据ACK数值大小来决策？），因此对端收到数据后发回一个RST分节；</li>\n</ol>\n<p>关于上面提到的第2点，UNP卷1认为它存在隐患：2MSL内，双端又建立了连接，此时上一次连接的数据可能还未消逝，从而导致“新生”连接收到脏数据（丢弃还是发生RST分节？）。</p>\n<h2 id=\"SIGPIPE的处理\"><a href=\"#SIGPIPE的处理\" class=\"headerlink\" title=\"SIGPIPE的处理\"></a>SIGPIPE的处理</h2><p>如果能在发送前检测是否收到RST分节，再决策是否发送，能否解决问题呢？答案是不能。因为有可能在检测完之后，发送之前，应用收到了一个RST分节。况且，调用send()和write()并不意味着真的把数据发送出去，而<strong>只是数据写入到了已连接套接字的发送缓冲区</strong>，何时真正发送出去不是应用层所能够决策的。</p>\n<p>处理方法有以下2种：</p>\n<p><strong>全局忽略SIGPIPE</strong>：掉用<code>signal(SIGPIPE, SIG_IGN);</code>忽略该信号，然后在调用write()或send()之后检查其返回值和errno，若返回值为-1则表明出错，同时errno会被置为EPIPE，应用再做相应的清理工作；</p>\n<p><strong>仅相关线程忽略SIGPIPE</strong>：参考<a href=\"http://www.microhowto.info/howto/ignore_sigpipe_without_affecting_other_threads_in_a_process.html\" target=\"_blank\" rel=\"noopener\">Ignore SIGPIPE without affecting other threads in a process</a>，该文章给出了非常详细的示范。</p>"},{"layout":"post","title":"Multi virtual HOST of Tomcat","date":"2016-08-17T09:51:00.000Z","comments":1,"_content":"\n本文介绍tomcat如何设置multi vitual host。\n\n<!--more-->\n\n## why and how does it work\n\n注：以下的全部域名是为了举例虚构，出于一些考虑，笔者不打算公布真实域名。\n\n笔者有个域名为[gx.com](http://www.gx.com)，指向个人主页。同时，该域名下有个资源[gx.com/product](http://gx.com/product)，指向笔者的产品界面。某天从同事那了解到还可以设置二级域名，于是，我想把我的产品界面链接[gx.com/product](http://gx.com/product)改为[product.gx.com](http://product.gx.com)，用二级域名的方式来指向（如何创建二级域名请自行搜索）。\n\n笔者的个人主页和产品界面都部署在同一主机的同一个Tomcat容器下（80端口），查了下资料，通过配置Tomcat就可以实现我的上述要求。且先不说如何配置，其工作原理是什么呢？Tomcat在80端口监听HTTP连接，它是如何判断一个HTTP请求到底是要请求[gx.com](http://www.gx.com)的资源，还是要请求[product.gx.com](http://product.gx.com)的资源呢？\n\n```\nGET / HTTP/1.1\nHost: www.gx.com\nProxy-Connection: keep-alive\nUser-Agent: Mozilla/5.0 (Windows NT 6.2) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.56 Safari/535.11\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\nAccept-Encoding: gzip,deflate,sdch\nAccept-Language: en-US,en;q=0.8\n```\n\n原来是通过报文的Header来区分的。至于请求转发的原理，请参考[Tomcat 系统架构与设计模式，第 1 部分: 工作原理](http://www.ibm.com/developerworks/cn/java/j-lo-tomcat1/)。\n\n## how\n\n下面讲解如何配置，先贴上笔者的最终配置。\n\n```xml\n<Engine defaultHost=\"www.gx.com\" name=\"Catalina\">\n\n      <!--For clustering, please take a look at documentation at:\n          /docs/cluster-howto.html  (simple how to)\n          /docs/config/cluster.html (reference documentation) -->\n      <!--\n      <Cluster className=\"org.apache.catalina.ha.tcp.SimpleTcpCluster\"/>\n      -->\n\n      <!-- Use the LockOutRealm to prevent attempts to guess user passwords\n           via a brute-force attack -->\n      <Realm className=\"org.apache.catalina.realm.LockOutRealm\">\n        <!-- This Realm uses the UserDatabase configured in the global JNDI\n             resources under the key \"UserDatabase\".  Any edits\n             that are performed against this UserDatabase are immediately\n             available for use by the Realm.  -->\n        <Realm className=\"org.apache.catalina.realm.UserDatabaseRealm\" resourceName=\"UserDatabase\"/>\n      </Realm>\n\n      <Host appBase=\"primaryapps\" autoDeploy=\"true\" name=\"product.gx.com\" unpackWARs=\"true\">\n        <Valve className=\"org.apache.catalina.valves.AccessLogValve\" directory=\"logs\" pattern=\"%h %l %u %t &quot;%r&quot; %s %b\" prefix=\"cloud_access_log\" suffix=\".txt\"/>\n      </Host>\n\n      <Host appBase=\"webapps\" autoDeploy=\"true\" name=\"www.gx.com\" unpackWARs=\"true\">\n        <Context path=\"\" docBase=\"guanxing\" debug=\"0\"/>\n        <!-- Access log processes all example.\n             Documentation at: /docs/config/valve.html\n             Note: The pattern used is equivalent to using pattern=\"common\" -->\n        <Valve className=\"org.apache.catalina.valves.AccessLogValve\" directory=\"logs\" pattern=\"%h %l %u %t &quot;%r&quot; %s %b\" prefix=\"localhost_access_log\" suffix=\".txt\"/>\n\n      </Host>\n      ......\n</Engine>\n```\n\n- 第01行：`defaultHost`必须指向其中一个Host的name，即为域名；\n- 第20行：域名[product.gx.com](http://product.gx.com)的配置，这里我没有配置Context标签，按照官网的说明，它会自动去寻找`<tomcat_home>/<appBase>/ROOT`（见附件1）作为此域名的容器应用（本文为`<tomcat_home>/primaryapps/ROOT`）；\n- 第24行：域名[gx.com](http://www.gx.com)的配置；\n- 第25行：域名[gx.com](http://www.gx.com)的容器应用为`<tomcat_home>/webapps/guanxing`；\n\n------\n\n**附件1**\n>\nWhen autoDeploy or deployOnStartup operations are performed by a Host, the name and context path of the web application are derived from the name(s) of the file(s) that define(s) the web application. Consequently, the context path may not be defined in a META-INF/context.xml embedded in the application and there is a close relationship between the context name, context path, context version and the base file name (the name minus any .war or .xml extension) of the file.\n>\nIf no version is specified then the context name is always the same as the context path. **If the context path is the empty string them the base name will be ROOT (always in upper case) ** otherwise the base name will be the context path with the leading '/' removed and any remaining '/' characters replaced with '#'.\n>\nIf a version is specified then the context path remains unchanged and both the context name and the base name have the string '##' appended to them followed by the version identifier.\n>\nSome examples of these naming conventions are given below.\n>\nhttp://tomcat.apache.org/tomcat-7.0-doc/config/context.html\n","source":"_posts/2016-08-17-tomcat-multi-virtual-host.markdown","raw":"---\nlayout: post\ntitle: Multi virtual HOST of Tomcat\ndate: '2016-08-17 17:51'\ncomments: true\ncategories: ['编程实践'] \ntags: ['Tomcat']\n---\n\n本文介绍tomcat如何设置multi vitual host。\n\n<!--more-->\n\n## why and how does it work\n\n注：以下的全部域名是为了举例虚构，出于一些考虑，笔者不打算公布真实域名。\n\n笔者有个域名为[gx.com](http://www.gx.com)，指向个人主页。同时，该域名下有个资源[gx.com/product](http://gx.com/product)，指向笔者的产品界面。某天从同事那了解到还可以设置二级域名，于是，我想把我的产品界面链接[gx.com/product](http://gx.com/product)改为[product.gx.com](http://product.gx.com)，用二级域名的方式来指向（如何创建二级域名请自行搜索）。\n\n笔者的个人主页和产品界面都部署在同一主机的同一个Tomcat容器下（80端口），查了下资料，通过配置Tomcat就可以实现我的上述要求。且先不说如何配置，其工作原理是什么呢？Tomcat在80端口监听HTTP连接，它是如何判断一个HTTP请求到底是要请求[gx.com](http://www.gx.com)的资源，还是要请求[product.gx.com](http://product.gx.com)的资源呢？\n\n```\nGET / HTTP/1.1\nHost: www.gx.com\nProxy-Connection: keep-alive\nUser-Agent: Mozilla/5.0 (Windows NT 6.2) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.56 Safari/535.11\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\nAccept-Encoding: gzip,deflate,sdch\nAccept-Language: en-US,en;q=0.8\n```\n\n原来是通过报文的Header来区分的。至于请求转发的原理，请参考[Tomcat 系统架构与设计模式，第 1 部分: 工作原理](http://www.ibm.com/developerworks/cn/java/j-lo-tomcat1/)。\n\n## how\n\n下面讲解如何配置，先贴上笔者的最终配置。\n\n```xml\n<Engine defaultHost=\"www.gx.com\" name=\"Catalina\">\n\n      <!--For clustering, please take a look at documentation at:\n          /docs/cluster-howto.html  (simple how to)\n          /docs/config/cluster.html (reference documentation) -->\n      <!--\n      <Cluster className=\"org.apache.catalina.ha.tcp.SimpleTcpCluster\"/>\n      -->\n\n      <!-- Use the LockOutRealm to prevent attempts to guess user passwords\n           via a brute-force attack -->\n      <Realm className=\"org.apache.catalina.realm.LockOutRealm\">\n        <!-- This Realm uses the UserDatabase configured in the global JNDI\n             resources under the key \"UserDatabase\".  Any edits\n             that are performed against this UserDatabase are immediately\n             available for use by the Realm.  -->\n        <Realm className=\"org.apache.catalina.realm.UserDatabaseRealm\" resourceName=\"UserDatabase\"/>\n      </Realm>\n\n      <Host appBase=\"primaryapps\" autoDeploy=\"true\" name=\"product.gx.com\" unpackWARs=\"true\">\n        <Valve className=\"org.apache.catalina.valves.AccessLogValve\" directory=\"logs\" pattern=\"%h %l %u %t &quot;%r&quot; %s %b\" prefix=\"cloud_access_log\" suffix=\".txt\"/>\n      </Host>\n\n      <Host appBase=\"webapps\" autoDeploy=\"true\" name=\"www.gx.com\" unpackWARs=\"true\">\n        <Context path=\"\" docBase=\"guanxing\" debug=\"0\"/>\n        <!-- Access log processes all example.\n             Documentation at: /docs/config/valve.html\n             Note: The pattern used is equivalent to using pattern=\"common\" -->\n        <Valve className=\"org.apache.catalina.valves.AccessLogValve\" directory=\"logs\" pattern=\"%h %l %u %t &quot;%r&quot; %s %b\" prefix=\"localhost_access_log\" suffix=\".txt\"/>\n\n      </Host>\n      ......\n</Engine>\n```\n\n- 第01行：`defaultHost`必须指向其中一个Host的name，即为域名；\n- 第20行：域名[product.gx.com](http://product.gx.com)的配置，这里我没有配置Context标签，按照官网的说明，它会自动去寻找`<tomcat_home>/<appBase>/ROOT`（见附件1）作为此域名的容器应用（本文为`<tomcat_home>/primaryapps/ROOT`）；\n- 第24行：域名[gx.com](http://www.gx.com)的配置；\n- 第25行：域名[gx.com](http://www.gx.com)的容器应用为`<tomcat_home>/webapps/guanxing`；\n\n------\n\n**附件1**\n>\nWhen autoDeploy or deployOnStartup operations are performed by a Host, the name and context path of the web application are derived from the name(s) of the file(s) that define(s) the web application. Consequently, the context path may not be defined in a META-INF/context.xml embedded in the application and there is a close relationship between the context name, context path, context version and the base file name (the name minus any .war or .xml extension) of the file.\n>\nIf no version is specified then the context name is always the same as the context path. **If the context path is the empty string them the base name will be ROOT (always in upper case) ** otherwise the base name will be the context path with the leading '/' removed and any remaining '/' characters replaced with '#'.\n>\nIf a version is specified then the context path remains unchanged and both the context name and the base name have the string '##' appended to them followed by the version identifier.\n>\nSome examples of these naming conventions are given below.\n>\nhttp://tomcat.apache.org/tomcat-7.0-doc/config/context.html\n","slug":"tomcat-multi-virtual-host","published":1,"updated":"2017-04-09T14:45:36.000Z","photos":[],"link":"","_id":"cjlza6m5c0024pgup8j8s9dhd","content":"<p>本文介绍tomcat如何设置multi vitual host。</p>\n<a id=\"more\"></a>\n<h2 id=\"why-and-how-does-it-work\"><a href=\"#why-and-how-does-it-work\" class=\"headerlink\" title=\"why and how does it work\"></a>why and how does it work</h2><p>注：以下的全部域名是为了举例虚构，出于一些考虑，笔者不打算公布真实域名。</p>\n<p>笔者有个域名为<a href=\"http://www.gx.com\" target=\"_blank\" rel=\"noopener\">gx.com</a>，指向个人主页。同时，该域名下有个资源<a href=\"http://gx.com/product\" target=\"_blank\" rel=\"noopener\">gx.com/product</a>，指向笔者的产品界面。某天从同事那了解到还可以设置二级域名，于是，我想把我的产品界面链接<a href=\"http://gx.com/product\" target=\"_blank\" rel=\"noopener\">gx.com/product</a>改为<a href=\"http://product.gx.com\" target=\"_blank\" rel=\"noopener\">product.gx.com</a>，用二级域名的方式来指向（如何创建二级域名请自行搜索）。</p>\n<p>笔者的个人主页和产品界面都部署在同一主机的同一个Tomcat容器下（80端口），查了下资料，通过配置Tomcat就可以实现我的上述要求。且先不说如何配置，其工作原理是什么呢？Tomcat在80端口监听HTTP连接，它是如何判断一个HTTP请求到底是要请求<a href=\"http://www.gx.com\" target=\"_blank\" rel=\"noopener\">gx.com</a>的资源，还是要请求<a href=\"http://product.gx.com\" target=\"_blank\" rel=\"noopener\">product.gx.com</a>的资源呢？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET / HTTP/1.1</span><br><span class=\"line\">Host: www.gx.com</span><br><span class=\"line\">Proxy-Connection: keep-alive</span><br><span class=\"line\">User-Agent: Mozilla/5.0 (Windows NT 6.2) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.56 Safari/535.11</span><br><span class=\"line\">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</span><br><span class=\"line\">Accept-Encoding: gzip,deflate,sdch</span><br><span class=\"line\">Accept-Language: en-US,en;q=0.8</span><br></pre></td></tr></table></figure>\n<p>原来是通过报文的Header来区分的。至于请求转发的原理，请参考<a href=\"http://www.ibm.com/developerworks/cn/java/j-lo-tomcat1/\" target=\"_blank\" rel=\"noopener\">Tomcat 系统架构与设计模式，第 1 部分: 工作原理</a>。</p>\n<h2 id=\"how\"><a href=\"#how\" class=\"headerlink\" title=\"how\"></a>how</h2><p>下面讲解如何配置，先贴上笔者的最终配置。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Engine</span> <span class=\"attr\">defaultHost</span>=<span class=\"string\">\"www.gx.com\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"Catalina\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">&lt;!--For clustering, please take a look at documentation at:</span></span><br><span class=\"line\"><span class=\"comment\">          /docs/cluster-howto.html  (simple how to)</span></span><br><span class=\"line\"><span class=\"comment\">          /docs/config/cluster.html (reference documentation) --&gt;</span></span><br><span class=\"line\">      <span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">      &lt;Cluster className=\"org.apache.catalina.ha.tcp.SimpleTcpCluster\"/&gt;</span></span><br><span class=\"line\"><span class=\"comment\">      --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">&lt;!-- Use the LockOutRealm to prevent attempts to guess user passwords</span></span><br><span class=\"line\"><span class=\"comment\">           via a brute-force attack --&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">Realm</span> <span class=\"attr\">className</span>=<span class=\"string\">\"org.apache.catalina.realm.LockOutRealm\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- This Realm uses the UserDatabase configured in the global JNDI</span></span><br><span class=\"line\"><span class=\"comment\">             resources under the key \"UserDatabase\".  Any edits</span></span><br><span class=\"line\"><span class=\"comment\">             that are performed against this UserDatabase are immediately</span></span><br><span class=\"line\"><span class=\"comment\">             available for use by the Realm.  --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Realm</span> <span class=\"attr\">className</span>=<span class=\"string\">\"org.apache.catalina.realm.UserDatabaseRealm\"</span> <span class=\"attr\">resourceName</span>=<span class=\"string\">\"UserDatabase\"</span>/&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">Realm</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">Host</span> <span class=\"attr\">appBase</span>=<span class=\"string\">\"primaryapps\"</span> <span class=\"attr\">autoDeploy</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"product.gx.com\"</span> <span class=\"attr\">unpackWARs</span>=<span class=\"string\">\"true\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Valve</span> <span class=\"attr\">className</span>=<span class=\"string\">\"org.apache.catalina.valves.AccessLogValve\"</span> <span class=\"attr\">directory</span>=<span class=\"string\">\"logs\"</span> <span class=\"attr\">pattern</span>=<span class=\"string\">\"%h %l %u %t &amp;quot;%r&amp;quot; %s %b\"</span> <span class=\"attr\">prefix</span>=<span class=\"string\">\"cloud_access_log\"</span> <span class=\"attr\">suffix</span>=<span class=\"string\">\".txt\"</span>/&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">Host</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">Host</span> <span class=\"attr\">appBase</span>=<span class=\"string\">\"webapps\"</span> <span class=\"attr\">autoDeploy</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"www.gx.com\"</span> <span class=\"attr\">unpackWARs</span>=<span class=\"string\">\"true\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Context</span> <span class=\"attr\">path</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">docBase</span>=<span class=\"string\">\"guanxing\"</span> <span class=\"attr\">debug</span>=<span class=\"string\">\"0\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- Access log processes all example.</span></span><br><span class=\"line\"><span class=\"comment\">             Documentation at: /docs/config/valve.html</span></span><br><span class=\"line\"><span class=\"comment\">             <span class=\"doctag\">Note:</span> The pattern used is equivalent to using pattern=\"common\" --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Valve</span> <span class=\"attr\">className</span>=<span class=\"string\">\"org.apache.catalina.valves.AccessLogValve\"</span> <span class=\"attr\">directory</span>=<span class=\"string\">\"logs\"</span> <span class=\"attr\">pattern</span>=<span class=\"string\">\"%h %l %u %t &amp;quot;%r&amp;quot; %s %b\"</span> <span class=\"attr\">prefix</span>=<span class=\"string\">\"localhost_access_log\"</span> <span class=\"attr\">suffix</span>=<span class=\"string\">\".txt\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">Host</span>&gt;</span></span><br><span class=\"line\">      ......</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Engine</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>第01行：<code>defaultHost</code>必须指向其中一个Host的name，即为域名；</li>\n<li>第20行：域名<a href=\"http://product.gx.com\" target=\"_blank\" rel=\"noopener\">product.gx.com</a>的配置，这里我没有配置Context标签，按照官网的说明，它会自动去寻找<code>&lt;tomcat_home&gt;/&lt;appBase&gt;/ROOT</code>（见附件1）作为此域名的容器应用（本文为<code>&lt;tomcat_home&gt;/primaryapps/ROOT</code>）；</li>\n<li>第24行：域名<a href=\"http://www.gx.com\" target=\"_blank\" rel=\"noopener\">gx.com</a>的配置；</li>\n<li>第25行：域名<a href=\"http://www.gx.com\" target=\"_blank\" rel=\"noopener\">gx.com</a>的容器应用为<code>&lt;tomcat_home&gt;/webapps/guanxing</code>；</li>\n</ul>\n<hr>\n<p><strong>附件1</strong></p>\n<blockquote>\n</blockquote>\n<p>When autoDeploy or deployOnStartup operations are performed by a Host, the name and context path of the web application are derived from the name(s) of the file(s) that define(s) the web application. Consequently, the context path may not be defined in a META-INF/context.xml embedded in the application and there is a close relationship between the context name, context path, context version and the base file name (the name minus any .war or .xml extension) of the file.</p>\n<blockquote>\n</blockquote>\n<p>If no version is specified then the context name is always the same as the context path. <strong>If the context path is the empty string them the base name will be ROOT (always in upper case) </strong> otherwise the base name will be the context path with the leading ‘/‘ removed and any remaining ‘/‘ characters replaced with ‘#’.</p>\n<blockquote>\n</blockquote>\n<p>If a version is specified then the context path remains unchanged and both the context name and the base name have the string ‘##’ appended to them followed by the version identifier.</p>\n<blockquote>\n</blockquote>\n<p>Some examples of these naming conventions are given below.</p>\n<blockquote>\n</blockquote>\n<p><a href=\"http://tomcat.apache.org/tomcat-7.0-doc/config/context.html\" target=\"_blank\" rel=\"noopener\">http://tomcat.apache.org/tomcat-7.0-doc/config/context.html</a></p>\n","site":{"data":{}},"excerpt":"<p>本文介绍tomcat如何设置multi vitual host。</p>","more":"<h2 id=\"why-and-how-does-it-work\"><a href=\"#why-and-how-does-it-work\" class=\"headerlink\" title=\"why and how does it work\"></a>why and how does it work</h2><p>注：以下的全部域名是为了举例虚构，出于一些考虑，笔者不打算公布真实域名。</p>\n<p>笔者有个域名为<a href=\"http://www.gx.com\" target=\"_blank\" rel=\"noopener\">gx.com</a>，指向个人主页。同时，该域名下有个资源<a href=\"http://gx.com/product\" target=\"_blank\" rel=\"noopener\">gx.com/product</a>，指向笔者的产品界面。某天从同事那了解到还可以设置二级域名，于是，我想把我的产品界面链接<a href=\"http://gx.com/product\" target=\"_blank\" rel=\"noopener\">gx.com/product</a>改为<a href=\"http://product.gx.com\" target=\"_blank\" rel=\"noopener\">product.gx.com</a>，用二级域名的方式来指向（如何创建二级域名请自行搜索）。</p>\n<p>笔者的个人主页和产品界面都部署在同一主机的同一个Tomcat容器下（80端口），查了下资料，通过配置Tomcat就可以实现我的上述要求。且先不说如何配置，其工作原理是什么呢？Tomcat在80端口监听HTTP连接，它是如何判断一个HTTP请求到底是要请求<a href=\"http://www.gx.com\" target=\"_blank\" rel=\"noopener\">gx.com</a>的资源，还是要请求<a href=\"http://product.gx.com\" target=\"_blank\" rel=\"noopener\">product.gx.com</a>的资源呢？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET / HTTP/1.1</span><br><span class=\"line\">Host: www.gx.com</span><br><span class=\"line\">Proxy-Connection: keep-alive</span><br><span class=\"line\">User-Agent: Mozilla/5.0 (Windows NT 6.2) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.56 Safari/535.11</span><br><span class=\"line\">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</span><br><span class=\"line\">Accept-Encoding: gzip,deflate,sdch</span><br><span class=\"line\">Accept-Language: en-US,en;q=0.8</span><br></pre></td></tr></table></figure>\n<p>原来是通过报文的Header来区分的。至于请求转发的原理，请参考<a href=\"http://www.ibm.com/developerworks/cn/java/j-lo-tomcat1/\" target=\"_blank\" rel=\"noopener\">Tomcat 系统架构与设计模式，第 1 部分: 工作原理</a>。</p>\n<h2 id=\"how\"><a href=\"#how\" class=\"headerlink\" title=\"how\"></a>how</h2><p>下面讲解如何配置，先贴上笔者的最终配置。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Engine</span> <span class=\"attr\">defaultHost</span>=<span class=\"string\">\"www.gx.com\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"Catalina\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">&lt;!--For clustering, please take a look at documentation at:</span></span><br><span class=\"line\"><span class=\"comment\">          /docs/cluster-howto.html  (simple how to)</span></span><br><span class=\"line\"><span class=\"comment\">          /docs/config/cluster.html (reference documentation) --&gt;</span></span><br><span class=\"line\">      <span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">      &lt;Cluster className=\"org.apache.catalina.ha.tcp.SimpleTcpCluster\"/&gt;</span></span><br><span class=\"line\"><span class=\"comment\">      --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">&lt;!-- Use the LockOutRealm to prevent attempts to guess user passwords</span></span><br><span class=\"line\"><span class=\"comment\">           via a brute-force attack --&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">Realm</span> <span class=\"attr\">className</span>=<span class=\"string\">\"org.apache.catalina.realm.LockOutRealm\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- This Realm uses the UserDatabase configured in the global JNDI</span></span><br><span class=\"line\"><span class=\"comment\">             resources under the key \"UserDatabase\".  Any edits</span></span><br><span class=\"line\"><span class=\"comment\">             that are performed against this UserDatabase are immediately</span></span><br><span class=\"line\"><span class=\"comment\">             available for use by the Realm.  --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Realm</span> <span class=\"attr\">className</span>=<span class=\"string\">\"org.apache.catalina.realm.UserDatabaseRealm\"</span> <span class=\"attr\">resourceName</span>=<span class=\"string\">\"UserDatabase\"</span>/&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">Realm</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">Host</span> <span class=\"attr\">appBase</span>=<span class=\"string\">\"primaryapps\"</span> <span class=\"attr\">autoDeploy</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"product.gx.com\"</span> <span class=\"attr\">unpackWARs</span>=<span class=\"string\">\"true\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Valve</span> <span class=\"attr\">className</span>=<span class=\"string\">\"org.apache.catalina.valves.AccessLogValve\"</span> <span class=\"attr\">directory</span>=<span class=\"string\">\"logs\"</span> <span class=\"attr\">pattern</span>=<span class=\"string\">\"%h %l %u %t &amp;quot;%r&amp;quot; %s %b\"</span> <span class=\"attr\">prefix</span>=<span class=\"string\">\"cloud_access_log\"</span> <span class=\"attr\">suffix</span>=<span class=\"string\">\".txt\"</span>/&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">Host</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">Host</span> <span class=\"attr\">appBase</span>=<span class=\"string\">\"webapps\"</span> <span class=\"attr\">autoDeploy</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"www.gx.com\"</span> <span class=\"attr\">unpackWARs</span>=<span class=\"string\">\"true\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Context</span> <span class=\"attr\">path</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">docBase</span>=<span class=\"string\">\"guanxing\"</span> <span class=\"attr\">debug</span>=<span class=\"string\">\"0\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- Access log processes all example.</span></span><br><span class=\"line\"><span class=\"comment\">             Documentation at: /docs/config/valve.html</span></span><br><span class=\"line\"><span class=\"comment\">             <span class=\"doctag\">Note:</span> The pattern used is equivalent to using pattern=\"common\" --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Valve</span> <span class=\"attr\">className</span>=<span class=\"string\">\"org.apache.catalina.valves.AccessLogValve\"</span> <span class=\"attr\">directory</span>=<span class=\"string\">\"logs\"</span> <span class=\"attr\">pattern</span>=<span class=\"string\">\"%h %l %u %t &amp;quot;%r&amp;quot; %s %b\"</span> <span class=\"attr\">prefix</span>=<span class=\"string\">\"localhost_access_log\"</span> <span class=\"attr\">suffix</span>=<span class=\"string\">\".txt\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">Host</span>&gt;</span></span><br><span class=\"line\">      ......</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Engine</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>第01行：<code>defaultHost</code>必须指向其中一个Host的name，即为域名；</li>\n<li>第20行：域名<a href=\"http://product.gx.com\" target=\"_blank\" rel=\"noopener\">product.gx.com</a>的配置，这里我没有配置Context标签，按照官网的说明，它会自动去寻找<code>&lt;tomcat_home&gt;/&lt;appBase&gt;/ROOT</code>（见附件1）作为此域名的容器应用（本文为<code>&lt;tomcat_home&gt;/primaryapps/ROOT</code>）；</li>\n<li>第24行：域名<a href=\"http://www.gx.com\" target=\"_blank\" rel=\"noopener\">gx.com</a>的配置；</li>\n<li>第25行：域名<a href=\"http://www.gx.com\" target=\"_blank\" rel=\"noopener\">gx.com</a>的容器应用为<code>&lt;tomcat_home&gt;/webapps/guanxing</code>；</li>\n</ul>\n<hr>\n<p><strong>附件1</strong></p>\n<blockquote>\n</blockquote>\n<p>When autoDeploy or deployOnStartup operations are performed by a Host, the name and context path of the web application are derived from the name(s) of the file(s) that define(s) the web application. Consequently, the context path may not be defined in a META-INF/context.xml embedded in the application and there is a close relationship between the context name, context path, context version and the base file name (the name minus any .war or .xml extension) of the file.</p>\n<blockquote>\n</blockquote>\n<p>If no version is specified then the context name is always the same as the context path. <strong>If the context path is the empty string them the base name will be ROOT (always in upper case) </strong> otherwise the base name will be the context path with the leading ‘/‘ removed and any remaining ‘/‘ characters replaced with ‘#’.</p>\n<blockquote>\n</blockquote>\n<p>If a version is specified then the context path remains unchanged and both the context name and the base name have the string ‘##’ appended to them followed by the version identifier.</p>\n<blockquote>\n</blockquote>\n<p>Some examples of these naming conventions are given below.</p>\n<blockquote>\n</blockquote>\n<p><a href=\"http://tomcat.apache.org/tomcat-7.0-doc/config/context.html\" target=\"_blank\" rel=\"noopener\">http://tomcat.apache.org/tomcat-7.0-doc/config/context.html</a></p>"},{"layout":"post","title":"使用C语言调用sendmail的一些注意点","date":"2016-08-13T00:46:00.000Z","comments":1,"_content":"\n本文简单介绍C语言调用sendmail遇到的一些问题。\n\n<!--more-->\n\n## sendmail原理\n\n先附上邮件发送的原理图如下，该图转自[基础邮件原理（MUA/MTA/MDA）](http://www.itye.org/archives/1304)，\n\n![mail](/images/pics/mail.jpg)\n\nsendmail作为MTA，在DNS定位到对方的MTA地址后，将邮件发送到对端MTA。\n\n## 使用sendmail注意\n\n笔者在Shell下调用sendmail的语法如下（当然，这不是唯一的调用方式，详细请`man sendmail`），\n\n```\nsendmail -f<sender> -vt receiver < mail.txt\n```\n\n其中，\n\n- `-f`指定发件人邮箱；\n- `receiver`指定收件人邮箱；\n- `-v`表示以调试输出的模式打印；\n- `-t`表示读取mail.txt里面的`To`和`Cc`等字段；\n\n举个实际的例子如下，\n\n```\nsendmail -fjayzee@jayzee.com -vt jayzee@qq.com < mail.txt\n```\n\nmail.txt的内容，\n\n```\nSuject: Hello\n\nWorld\n```\n\n但是，在执行上述语句前，你需要注意以下事项，\n\n- 你的发件邮箱不需要是真实邮箱，但必须符合`xxx@xxx.com`的格式，否则会被你的收件人的邮件服务器拒绝；\n- 将你的发件邮箱添加到收件邮箱的白名单，否则极有可能被当成垃圾邮件拦截；\n- 你的mail.txt的`Subject`表示标题，紧接着是一个空行和正文，建议加上该空行，因为笔者在debian wheezy上使用sendmail发邮件时没有空行会报错，但在ubuntu又不会；\n- 配置你的/etc/hosts如下，\n```\n127.0.0.1\tlocalhost\tjayzee.com\n```\n\n为什么hosts要如上配置呢？原因是在邮件发送失败时，sendmail会把邮件返回给sender，在此例子中即`jayzee@jayzee.com`，而由于配置了hosts，相当于收件人其实是`jayzee@127.0.0.1`，这就保证了在邮件发送失败时邮件会回送给本机的jayzee用户，然后便可在本机的`/var/mail/jayzee`回溯到发送失败的详细信息啦。\n\n关于为什么本机会收到邮件，stackoverflow上有一段很好的解释，\n> Just to offer some clarification, it's been the tradition for a long time for UNIX boxes to run a \"locally configured\" mailer daemon that ** doesn't route messages through the Internet, but only copies messages to other users spool directories ** (as @John T mentioned). It is real SMTP-compliant email, it's just not routed over the Internet because it doesn't need to be.\n\n## 使用C语言调用sendmail\n\n使用C语言调用sendmail，\n\n- 首先，准备好mail.txt；\n- 其次，如果你想在调用结束时读取到调用信息，可考虑使用管道，如`popen(...)`；否则，使用`system(...)`就足够了。\n\n## sendmail错误处理\n\n`sysexits.h`标识出了sendmail调用的返回值，但没有一个是标识邮件是否发送成功的。C编程时若要判断sendmail是否发送成功，只能在程序端对回显信息（使用`popen`才取得回显信息）进行分析。\n\n还有一个思路是，专门建一个用户用于发送邮件，且需要保证该用户发送邮件是同步的，这样通过检测`/var/mail/$USER`的文件状态变化（比如配置邮件发送失败才回送，这样该文件的最后修改时间就发生了变化）就能判断是否发送成功了，这里需要在调用sendmail时恰当配置其`-N`选项。\n\n> `-N dsn` Set delivery status notification conditions to dsn, which can be 'never' for no notifications or a comma separated list of the values 'failure' to be notified if  delivery  failed, 'delay' to be notified if delivery is delayed, and 'success' to be notified when the message is successfully delivered.\n\n至于这里为什吗不考虑邮件delay的情况，文章[Why Am I Getting a “Delivery Status Notification (Delay)” on an Email I Sent?](https://askleo.com/why_am_i_getting_a_delay_notification_on_an_email_i_sent-2/)给出解释如下，\n> Delivery Status Notification (Delay)\n> This is an automatically generated Delivery Status Notification.\n> THIS IS A WARNING MESSAGE ONLY.\n> **YOU DO NOT NEED TO RESEND YOUR MESSAGE**.\n> Delivery to the following recipients has been delayed.\n> \n> if you get this “Delivery Status Notification (Delay)” warning, there’s nothing you can really do, other than to **make sure you sent it to the correct address.**\n\n## 伪代码\n\n```c\n#include 相关头文件\n\nint main() {\n    if(网络在线) {\n        stat1=/var/mail/user最后修改时间\n        system(sendmail -N failure -fuser@user.com -vt 收件人邮箱 < mail.txt);\n        stat2=/var/mail/user最后修改时间\n        if(stat1 != stat2) {\n            发送失败\n            清空user@user.com的邮件队列避免重发\n        } else {\n            发送成功\n        }\n    } else {\n        发送失败\n    }\n    return 0;\n}\n```\n\n## 参考文献\n\n\n1. 360converter博客：[基础邮件原理（MUA/MTA/MDA）](http://www.itye.org/archives/1304)\n2. Ask Leo：[Why Am I Getting a “Delivery Status Notification (Delay)” on an Email I Sent?](https://askleo.com/why_am_i_getting_a_delay_notification_on_an_email_i_sent-2/)\n","source":"_posts/2016-08-13-c-sendmail.markdown","raw":"---\nlayout: post\ntitle: 使用C语言调用sendmail的一些注意点\ndate: '2016-08-13 08:46'\ncomments: true\ncategories: ['编程实践']\ntags: ['C/C++', 'Linux']\n---\n\n本文简单介绍C语言调用sendmail遇到的一些问题。\n\n<!--more-->\n\n## sendmail原理\n\n先附上邮件发送的原理图如下，该图转自[基础邮件原理（MUA/MTA/MDA）](http://www.itye.org/archives/1304)，\n\n![mail](/images/pics/mail.jpg)\n\nsendmail作为MTA，在DNS定位到对方的MTA地址后，将邮件发送到对端MTA。\n\n## 使用sendmail注意\n\n笔者在Shell下调用sendmail的语法如下（当然，这不是唯一的调用方式，详细请`man sendmail`），\n\n```\nsendmail -f<sender> -vt receiver < mail.txt\n```\n\n其中，\n\n- `-f`指定发件人邮箱；\n- `receiver`指定收件人邮箱；\n- `-v`表示以调试输出的模式打印；\n- `-t`表示读取mail.txt里面的`To`和`Cc`等字段；\n\n举个实际的例子如下，\n\n```\nsendmail -fjayzee@jayzee.com -vt jayzee@qq.com < mail.txt\n```\n\nmail.txt的内容，\n\n```\nSuject: Hello\n\nWorld\n```\n\n但是，在执行上述语句前，你需要注意以下事项，\n\n- 你的发件邮箱不需要是真实邮箱，但必须符合`xxx@xxx.com`的格式，否则会被你的收件人的邮件服务器拒绝；\n- 将你的发件邮箱添加到收件邮箱的白名单，否则极有可能被当成垃圾邮件拦截；\n- 你的mail.txt的`Subject`表示标题，紧接着是一个空行和正文，建议加上该空行，因为笔者在debian wheezy上使用sendmail发邮件时没有空行会报错，但在ubuntu又不会；\n- 配置你的/etc/hosts如下，\n```\n127.0.0.1\tlocalhost\tjayzee.com\n```\n\n为什么hosts要如上配置呢？原因是在邮件发送失败时，sendmail会把邮件返回给sender，在此例子中即`jayzee@jayzee.com`，而由于配置了hosts，相当于收件人其实是`jayzee@127.0.0.1`，这就保证了在邮件发送失败时邮件会回送给本机的jayzee用户，然后便可在本机的`/var/mail/jayzee`回溯到发送失败的详细信息啦。\n\n关于为什么本机会收到邮件，stackoverflow上有一段很好的解释，\n> Just to offer some clarification, it's been the tradition for a long time for UNIX boxes to run a \"locally configured\" mailer daemon that ** doesn't route messages through the Internet, but only copies messages to other users spool directories ** (as @John T mentioned). It is real SMTP-compliant email, it's just not routed over the Internet because it doesn't need to be.\n\n## 使用C语言调用sendmail\n\n使用C语言调用sendmail，\n\n- 首先，准备好mail.txt；\n- 其次，如果你想在调用结束时读取到调用信息，可考虑使用管道，如`popen(...)`；否则，使用`system(...)`就足够了。\n\n## sendmail错误处理\n\n`sysexits.h`标识出了sendmail调用的返回值，但没有一个是标识邮件是否发送成功的。C编程时若要判断sendmail是否发送成功，只能在程序端对回显信息（使用`popen`才取得回显信息）进行分析。\n\n还有一个思路是，专门建一个用户用于发送邮件，且需要保证该用户发送邮件是同步的，这样通过检测`/var/mail/$USER`的文件状态变化（比如配置邮件发送失败才回送，这样该文件的最后修改时间就发生了变化）就能判断是否发送成功了，这里需要在调用sendmail时恰当配置其`-N`选项。\n\n> `-N dsn` Set delivery status notification conditions to dsn, which can be 'never' for no notifications or a comma separated list of the values 'failure' to be notified if  delivery  failed, 'delay' to be notified if delivery is delayed, and 'success' to be notified when the message is successfully delivered.\n\n至于这里为什吗不考虑邮件delay的情况，文章[Why Am I Getting a “Delivery Status Notification (Delay)” on an Email I Sent?](https://askleo.com/why_am_i_getting_a_delay_notification_on_an_email_i_sent-2/)给出解释如下，\n> Delivery Status Notification (Delay)\n> This is an automatically generated Delivery Status Notification.\n> THIS IS A WARNING MESSAGE ONLY.\n> **YOU DO NOT NEED TO RESEND YOUR MESSAGE**.\n> Delivery to the following recipients has been delayed.\n> \n> if you get this “Delivery Status Notification (Delay)” warning, there’s nothing you can really do, other than to **make sure you sent it to the correct address.**\n\n## 伪代码\n\n```c\n#include 相关头文件\n\nint main() {\n    if(网络在线) {\n        stat1=/var/mail/user最后修改时间\n        system(sendmail -N failure -fuser@user.com -vt 收件人邮箱 < mail.txt);\n        stat2=/var/mail/user最后修改时间\n        if(stat1 != stat2) {\n            发送失败\n            清空user@user.com的邮件队列避免重发\n        } else {\n            发送成功\n        }\n    } else {\n        发送失败\n    }\n    return 0;\n}\n```\n\n## 参考文献\n\n\n1. 360converter博客：[基础邮件原理（MUA/MTA/MDA）](http://www.itye.org/archives/1304)\n2. Ask Leo：[Why Am I Getting a “Delivery Status Notification (Delay)” on an Email I Sent?](https://askleo.com/why_am_i_getting_a_delay_notification_on_an_email_i_sent-2/)\n","slug":"c-sendmail","published":1,"updated":"2017-04-10T15:10:41.000Z","photos":[],"link":"","_id":"cjlza6m5d0027pgupvg35ptxr","content":"<p>本文简单介绍C语言调用sendmail遇到的一些问题。</p>\n<a id=\"more\"></a>\n<h2 id=\"sendmail原理\"><a href=\"#sendmail原理\" class=\"headerlink\" title=\"sendmail原理\"></a>sendmail原理</h2><p>先附上邮件发送的原理图如下，该图转自<a href=\"http://www.itye.org/archives/1304\" target=\"_blank\" rel=\"noopener\">基础邮件原理（MUA/MTA/MDA）</a>，</p>\n<p><img src=\"/images/pics/mail.jpg\" alt=\"mail\"></p>\n<p>sendmail作为MTA，在DNS定位到对方的MTA地址后，将邮件发送到对端MTA。</p>\n<h2 id=\"使用sendmail注意\"><a href=\"#使用sendmail注意\" class=\"headerlink\" title=\"使用sendmail注意\"></a>使用sendmail注意</h2><p>笔者在Shell下调用sendmail的语法如下（当然，这不是唯一的调用方式，详细请<code>man sendmail</code>），</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sendmail -f&lt;sender&gt; -vt receiver &lt; mail.txt</span><br></pre></td></tr></table></figure>\n<p>其中，</p>\n<ul>\n<li><code>-f</code>指定发件人邮箱；</li>\n<li><code>receiver</code>指定收件人邮箱；</li>\n<li><code>-v</code>表示以调试输出的模式打印；</li>\n<li><code>-t</code>表示读取mail.txt里面的<code>To</code>和<code>Cc</code>等字段；</li>\n</ul>\n<p>举个实际的例子如下，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sendmail -fjayzee@jayzee.com -vt jayzee@qq.com &lt; mail.txt</span><br></pre></td></tr></table></figure>\n<p>mail.txt的内容，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Suject: Hello</span><br><span class=\"line\"></span><br><span class=\"line\">World</span><br></pre></td></tr></table></figure>\n<p>但是，在执行上述语句前，你需要注意以下事项，</p>\n<ul>\n<li>你的发件邮箱不需要是真实邮箱，但必须符合<a href=\"mailto:`xxx@xxx.com\" target=\"_blank\" rel=\"noopener\">`xxx@xxx.com</a>`的格式，否则会被你的收件人的邮件服务器拒绝；</li>\n<li>将你的发件邮箱添加到收件邮箱的白名单，否则极有可能被当成垃圾邮件拦截；</li>\n<li>你的mail.txt的<code>Subject</code>表示标题，紧接着是一个空行和正文，建议加上该空行，因为笔者在debian wheezy上使用sendmail发邮件时没有空行会报错，但在ubuntu又不会；</li>\n<li>配置你的/etc/hosts如下，<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1\tlocalhost\tjayzee.com</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>为什么hosts要如上配置呢？原因是在邮件发送失败时，sendmail会把邮件返回给sender，在此例子中即<a href=\"mailto:`jayzee@jayzee.com\" target=\"_blank\" rel=\"noopener\">`jayzee@jayzee.com</a><code>，而由于配置了hosts，相当于收件人其实是</code><a href=\"mailto:jayzee@127.0.0.1\" target=\"_blank\" rel=\"noopener\">jayzee@127.0.0.1</a><code>，这就保证了在邮件发送失败时邮件会回送给本机的jayzee用户，然后便可在本机的</code>/var/mail/jayzee`回溯到发送失败的详细信息啦。</p>\n<p>关于为什么本机会收到邮件，stackoverflow上有一段很好的解释，</p>\n<blockquote>\n<p>Just to offer some clarification, it’s been the tradition for a long time for UNIX boxes to run a “locally configured” mailer daemon that <strong> doesn’t route messages through the Internet, but only copies messages to other users spool directories </strong> (as @John T mentioned). It is real SMTP-compliant email, it’s just not routed over the Internet because it doesn’t need to be.</p>\n</blockquote>\n<h2 id=\"使用C语言调用sendmail\"><a href=\"#使用C语言调用sendmail\" class=\"headerlink\" title=\"使用C语言调用sendmail\"></a>使用C语言调用sendmail</h2><p>使用C语言调用sendmail，</p>\n<ul>\n<li>首先，准备好mail.txt；</li>\n<li>其次，如果你想在调用结束时读取到调用信息，可考虑使用管道，如<code>popen(...)</code>；否则，使用<code>system(...)</code>就足够了。</li>\n</ul>\n<h2 id=\"sendmail错误处理\"><a href=\"#sendmail错误处理\" class=\"headerlink\" title=\"sendmail错误处理\"></a>sendmail错误处理</h2><p><code>sysexits.h</code>标识出了sendmail调用的返回值，但没有一个是标识邮件是否发送成功的。C编程时若要判断sendmail是否发送成功，只能在程序端对回显信息（使用<code>popen</code>才取得回显信息）进行分析。</p>\n<p>还有一个思路是，专门建一个用户用于发送邮件，且需要保证该用户发送邮件是同步的，这样通过检测<code>/var/mail/$USER</code>的文件状态变化（比如配置邮件发送失败才回送，这样该文件的最后修改时间就发生了变化）就能判断是否发送成功了，这里需要在调用sendmail时恰当配置其<code>-N</code>选项。</p>\n<blockquote>\n<p><code>-N dsn</code> Set delivery status notification conditions to dsn, which can be ‘never’ for no notifications or a comma separated list of the values ‘failure’ to be notified if  delivery  failed, ‘delay’ to be notified if delivery is delayed, and ‘success’ to be notified when the message is successfully delivered.</p>\n</blockquote>\n<p>至于这里为什吗不考虑邮件delay的情况，文章<a href=\"https://askleo.com/why_am_i_getting_a_delay_notification_on_an_email_i_sent-2/\" target=\"_blank\" rel=\"noopener\">Why Am I Getting a “Delivery Status Notification (Delay)” on an Email I Sent?</a>给出解释如下，</p>\n<blockquote>\n<p>Delivery Status Notification (Delay)<br>This is an automatically generated Delivery Status Notification.<br>THIS IS A WARNING MESSAGE ONLY.<br><strong>YOU DO NOT NEED TO RESEND YOUR MESSAGE</strong>.<br>Delivery to the following recipients has been delayed.</p>\n<p>if you get this “Delivery Status Notification (Delay)” warning, there’s nothing you can really do, other than to <strong>make sure you sent it to the correct address.</strong></p>\n</blockquote>\n<h2 id=\"伪代码\"><a href=\"#伪代码\" class=\"headerlink\" title=\"伪代码\"></a>伪代码</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> 相关头文件</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(网络在线) &#123;</span><br><span class=\"line\">        stat1=/var/mail/user最后修改时间</span><br><span class=\"line\">        system(sendmail -N failure -fuser@user.com -vt 收件人邮箱 &lt; mail.txt);</span><br><span class=\"line\">        stat2=/var/mail/user最后修改时间</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(stat1 != stat2) &#123;</span><br><span class=\"line\">            发送失败</span><br><span class=\"line\">            清空user@user.com的邮件队列避免重发</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            发送成功</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        发送失败</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h2><ol>\n<li>360converter博客：<a href=\"http://www.itye.org/archives/1304\" target=\"_blank\" rel=\"noopener\">基础邮件原理（MUA/MTA/MDA）</a></li>\n<li>Ask Leo：<a href=\"https://askleo.com/why_am_i_getting_a_delay_notification_on_an_email_i_sent-2/\" target=\"_blank\" rel=\"noopener\">Why Am I Getting a “Delivery Status Notification (Delay)” on an Email I Sent?</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>本文简单介绍C语言调用sendmail遇到的一些问题。</p>","more":"<h2 id=\"sendmail原理\"><a href=\"#sendmail原理\" class=\"headerlink\" title=\"sendmail原理\"></a>sendmail原理</h2><p>先附上邮件发送的原理图如下，该图转自<a href=\"http://www.itye.org/archives/1304\" target=\"_blank\" rel=\"noopener\">基础邮件原理（MUA/MTA/MDA）</a>，</p>\n<p><img src=\"/images/pics/mail.jpg\" alt=\"mail\"></p>\n<p>sendmail作为MTA，在DNS定位到对方的MTA地址后，将邮件发送到对端MTA。</p>\n<h2 id=\"使用sendmail注意\"><a href=\"#使用sendmail注意\" class=\"headerlink\" title=\"使用sendmail注意\"></a>使用sendmail注意</h2><p>笔者在Shell下调用sendmail的语法如下（当然，这不是唯一的调用方式，详细请<code>man sendmail</code>），</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sendmail -f&lt;sender&gt; -vt receiver &lt; mail.txt</span><br></pre></td></tr></table></figure>\n<p>其中，</p>\n<ul>\n<li><code>-f</code>指定发件人邮箱；</li>\n<li><code>receiver</code>指定收件人邮箱；</li>\n<li><code>-v</code>表示以调试输出的模式打印；</li>\n<li><code>-t</code>表示读取mail.txt里面的<code>To</code>和<code>Cc</code>等字段；</li>\n</ul>\n<p>举个实际的例子如下，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sendmail -fjayzee@jayzee.com -vt jayzee@qq.com &lt; mail.txt</span><br></pre></td></tr></table></figure>\n<p>mail.txt的内容，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Suject: Hello</span><br><span class=\"line\"></span><br><span class=\"line\">World</span><br></pre></td></tr></table></figure>\n<p>但是，在执行上述语句前，你需要注意以下事项，</p>\n<ul>\n<li>你的发件邮箱不需要是真实邮箱，但必须符合<a href=\"mailto:`xxx@xxx.com\" target=\"_blank\" rel=\"noopener\">`xxx@xxx.com</a>`的格式，否则会被你的收件人的邮件服务器拒绝；</li>\n<li>将你的发件邮箱添加到收件邮箱的白名单，否则极有可能被当成垃圾邮件拦截；</li>\n<li>你的mail.txt的<code>Subject</code>表示标题，紧接着是一个空行和正文，建议加上该空行，因为笔者在debian wheezy上使用sendmail发邮件时没有空行会报错，但在ubuntu又不会；</li>\n<li>配置你的/etc/hosts如下，<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1\tlocalhost\tjayzee.com</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>为什么hosts要如上配置呢？原因是在邮件发送失败时，sendmail会把邮件返回给sender，在此例子中即<a href=\"mailto:`jayzee@jayzee.com\" target=\"_blank\" rel=\"noopener\">`jayzee@jayzee.com</a><code>，而由于配置了hosts，相当于收件人其实是</code><a href=\"mailto:jayzee@127.0.0.1\" target=\"_blank\" rel=\"noopener\">jayzee@127.0.0.1</a><code>，这就保证了在邮件发送失败时邮件会回送给本机的jayzee用户，然后便可在本机的</code>/var/mail/jayzee`回溯到发送失败的详细信息啦。</p>\n<p>关于为什么本机会收到邮件，stackoverflow上有一段很好的解释，</p>\n<blockquote>\n<p>Just to offer some clarification, it’s been the tradition for a long time for UNIX boxes to run a “locally configured” mailer daemon that <strong> doesn’t route messages through the Internet, but only copies messages to other users spool directories </strong> (as @John T mentioned). It is real SMTP-compliant email, it’s just not routed over the Internet because it doesn’t need to be.</p>\n</blockquote>\n<h2 id=\"使用C语言调用sendmail\"><a href=\"#使用C语言调用sendmail\" class=\"headerlink\" title=\"使用C语言调用sendmail\"></a>使用C语言调用sendmail</h2><p>使用C语言调用sendmail，</p>\n<ul>\n<li>首先，准备好mail.txt；</li>\n<li>其次，如果你想在调用结束时读取到调用信息，可考虑使用管道，如<code>popen(...)</code>；否则，使用<code>system(...)</code>就足够了。</li>\n</ul>\n<h2 id=\"sendmail错误处理\"><a href=\"#sendmail错误处理\" class=\"headerlink\" title=\"sendmail错误处理\"></a>sendmail错误处理</h2><p><code>sysexits.h</code>标识出了sendmail调用的返回值，但没有一个是标识邮件是否发送成功的。C编程时若要判断sendmail是否发送成功，只能在程序端对回显信息（使用<code>popen</code>才取得回显信息）进行分析。</p>\n<p>还有一个思路是，专门建一个用户用于发送邮件，且需要保证该用户发送邮件是同步的，这样通过检测<code>/var/mail/$USER</code>的文件状态变化（比如配置邮件发送失败才回送，这样该文件的最后修改时间就发生了变化）就能判断是否发送成功了，这里需要在调用sendmail时恰当配置其<code>-N</code>选项。</p>\n<blockquote>\n<p><code>-N dsn</code> Set delivery status notification conditions to dsn, which can be ‘never’ for no notifications or a comma separated list of the values ‘failure’ to be notified if  delivery  failed, ‘delay’ to be notified if delivery is delayed, and ‘success’ to be notified when the message is successfully delivered.</p>\n</blockquote>\n<p>至于这里为什吗不考虑邮件delay的情况，文章<a href=\"https://askleo.com/why_am_i_getting_a_delay_notification_on_an_email_i_sent-2/\" target=\"_blank\" rel=\"noopener\">Why Am I Getting a “Delivery Status Notification (Delay)” on an Email I Sent?</a>给出解释如下，</p>\n<blockquote>\n<p>Delivery Status Notification (Delay)<br>This is an automatically generated Delivery Status Notification.<br>THIS IS A WARNING MESSAGE ONLY.<br><strong>YOU DO NOT NEED TO RESEND YOUR MESSAGE</strong>.<br>Delivery to the following recipients has been delayed.</p>\n<p>if you get this “Delivery Status Notification (Delay)” warning, there’s nothing you can really do, other than to <strong>make sure you sent it to the correct address.</strong></p>\n</blockquote>\n<h2 id=\"伪代码\"><a href=\"#伪代码\" class=\"headerlink\" title=\"伪代码\"></a>伪代码</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> 相关头文件</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(网络在线) &#123;</span><br><span class=\"line\">        stat1=/var/mail/user最后修改时间</span><br><span class=\"line\">        system(sendmail -N failure -fuser@user.com -vt 收件人邮箱 &lt; mail.txt);</span><br><span class=\"line\">        stat2=/var/mail/user最后修改时间</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(stat1 != stat2) &#123;</span><br><span class=\"line\">            发送失败</span><br><span class=\"line\">            清空user@user.com的邮件队列避免重发</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            发送成功</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        发送失败</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h2><ol>\n<li>360converter博客：<a href=\"http://www.itye.org/archives/1304\" target=\"_blank\" rel=\"noopener\">基础邮件原理（MUA/MTA/MDA）</a></li>\n<li>Ask Leo：<a href=\"https://askleo.com/why_am_i_getting_a_delay_notification_on_an_email_i_sent-2/\" target=\"_blank\" rel=\"noopener\">Why Am I Getting a “Delivery Status Notification (Delay)” on an Email I Sent?</a></li>\n</ol>"},{"layout":"post","title":"为什么你还不去睡觉","date":"2016-08-28T12:32:40.000Z","comments":1,"_content":"\n为什么你还不去睡觉？\n\n<!--more-->\n\n## 缘起\n\n这几周的周六晚，我总是很晚才入睡——大概是凌晨一点多。这么晚睡我在干嘛呢？或许是看视频，或者是玩手机，总之不是什么正经事就对了。我对这挺介怀，因为这意味着我第二天会很晚醒——大概是上午9点左右。我介怀的原因是：**第二天上午我起码损失了两个小时**，这两个小时我可以用来做很多有意义的事情，比如写博客、冥想或是读书等等。\n\n明明很晚了，而且很困了，为什么我还不去睡觉呢？\n\n## 究其原因\n\n归结一句：**不自律**。\n\n那什么是自律呢？我认为自律是：**自己监督自己，做该做的事情**。这么说其实我介怀的原因是因为没有做该做的事情？\n\n目前看来我是知道该做什么事情的——**可以归结成两个字——“成长”**，我不睡觉做的事情其实是在无所事事的消磨时间——可以归结为两个字——“堕落”，为什么我选择的是“堕落”而不是“成长”呢？明明“成长”给我的好处更多才对呀？\n\n我想可能是以下几个原因，\n\n- “成长”相比“堕落”而言，是辛苦的，**“堕落”不需要投入就能即时获得快感**，所以我的大脑自然而然的选择了后者；\n- 为什么要“成长”，我体会得还不够深刻。**要知道，不“成长”后果可能很严重**。比如像我的一个同事那样，不“成长”可能博士毕不了业；或是像电影《肖申克的救赎》的肖申克那样，不一锤锤凿下去，将永远出不了监狱。反过来亦然，**想要什么，你就得付出什么。**\n- 我把周一至周六当工作日，把周日当休息日，所以突然一下子松懈了。\n\n先声明一点，我是支持“偶尔的放纵”的。既然是“偶尔”，我这频度太高那就算不上了，所以得改，否则影响我的计划和安排，以及我最宝贵的资源之一——注意力。\n\n## 如何改进\n\n虽然我不需要和别人去比较，但我得知道比我优秀得多但还严格要求自己的人多的是，**我即使严格要求自己也算不上什么，因为这其实是常态——努力真的就是一种常态**。\n\n那我该如何改进？\n\n- 防范：周六晚睡前适度放松，听听轻音乐，读一些趣味性读物（不要太引入入胜的那种，否则不读）；\n- 给自己一棍棒：**想想自己因为不努力，而将遭受的不可承受之重？**\n- 再给自己一个甜枣：自我催眠早起可以干很多**有趣的事情**，以及能使我一步步走近我设立的**里程碑**；\n- 周日不“休息”：周日也要折腾，哪能无所事事浪费时间呢？这也是挺难的。\n\n最后告诉自己：**你过什么样的生活，绝对是你自己决定的。**\n\n## 补充\n\n实际上，这是意志力差的表现。而超强意志力的养成，是必须靠自己一点一点去“喂养”出来的。","source":"_posts/2016-08-28-why-not-go-to-sleep.markdown","raw":"---\nlayout: post\ntitle: 为什么你还不去睡觉\ndate: 2016-08-28 20:32:40 +0800\ncomments: true\ncategories: ['一些感悟']\ntags: ['随想']\n---\n\n为什么你还不去睡觉？\n\n<!--more-->\n\n## 缘起\n\n这几周的周六晚，我总是很晚才入睡——大概是凌晨一点多。这么晚睡我在干嘛呢？或许是看视频，或者是玩手机，总之不是什么正经事就对了。我对这挺介怀，因为这意味着我第二天会很晚醒——大概是上午9点左右。我介怀的原因是：**第二天上午我起码损失了两个小时**，这两个小时我可以用来做很多有意义的事情，比如写博客、冥想或是读书等等。\n\n明明很晚了，而且很困了，为什么我还不去睡觉呢？\n\n## 究其原因\n\n归结一句：**不自律**。\n\n那什么是自律呢？我认为自律是：**自己监督自己，做该做的事情**。这么说其实我介怀的原因是因为没有做该做的事情？\n\n目前看来我是知道该做什么事情的——**可以归结成两个字——“成长”**，我不睡觉做的事情其实是在无所事事的消磨时间——可以归结为两个字——“堕落”，为什么我选择的是“堕落”而不是“成长”呢？明明“成长”给我的好处更多才对呀？\n\n我想可能是以下几个原因，\n\n- “成长”相比“堕落”而言，是辛苦的，**“堕落”不需要投入就能即时获得快感**，所以我的大脑自然而然的选择了后者；\n- 为什么要“成长”，我体会得还不够深刻。**要知道，不“成长”后果可能很严重**。比如像我的一个同事那样，不“成长”可能博士毕不了业；或是像电影《肖申克的救赎》的肖申克那样，不一锤锤凿下去，将永远出不了监狱。反过来亦然，**想要什么，你就得付出什么。**\n- 我把周一至周六当工作日，把周日当休息日，所以突然一下子松懈了。\n\n先声明一点，我是支持“偶尔的放纵”的。既然是“偶尔”，我这频度太高那就算不上了，所以得改，否则影响我的计划和安排，以及我最宝贵的资源之一——注意力。\n\n## 如何改进\n\n虽然我不需要和别人去比较，但我得知道比我优秀得多但还严格要求自己的人多的是，**我即使严格要求自己也算不上什么，因为这其实是常态——努力真的就是一种常态**。\n\n那我该如何改进？\n\n- 防范：周六晚睡前适度放松，听听轻音乐，读一些趣味性读物（不要太引入入胜的那种，否则不读）；\n- 给自己一棍棒：**想想自己因为不努力，而将遭受的不可承受之重？**\n- 再给自己一个甜枣：自我催眠早起可以干很多**有趣的事情**，以及能使我一步步走近我设立的**里程碑**；\n- 周日不“休息”：周日也要折腾，哪能无所事事浪费时间呢？这也是挺难的。\n\n最后告诉自己：**你过什么样的生活，绝对是你自己决定的。**\n\n## 补充\n\n实际上，这是意志力差的表现。而超强意志力的养成，是必须靠自己一点一点去“喂养”出来的。","slug":"why-not-go-to-sleep","published":1,"updated":"2017-04-09T14:36:58.000Z","photos":[],"link":"","_id":"cjlza6m5f002apgupfd9kqr3z","content":"<p>为什么你还不去睡觉？</p>\n<a id=\"more\"></a>\n<h2 id=\"缘起\"><a href=\"#缘起\" class=\"headerlink\" title=\"缘起\"></a>缘起</h2><p>这几周的周六晚，我总是很晚才入睡——大概是凌晨一点多。这么晚睡我在干嘛呢？或许是看视频，或者是玩手机，总之不是什么正经事就对了。我对这挺介怀，因为这意味着我第二天会很晚醒——大概是上午9点左右。我介怀的原因是：<strong>第二天上午我起码损失了两个小时</strong>，这两个小时我可以用来做很多有意义的事情，比如写博客、冥想或是读书等等。</p>\n<p>明明很晚了，而且很困了，为什么我还不去睡觉呢？</p>\n<h2 id=\"究其原因\"><a href=\"#究其原因\" class=\"headerlink\" title=\"究其原因\"></a>究其原因</h2><p>归结一句：<strong>不自律</strong>。</p>\n<p>那什么是自律呢？我认为自律是：<strong>自己监督自己，做该做的事情</strong>。这么说其实我介怀的原因是因为没有做该做的事情？</p>\n<p>目前看来我是知道该做什么事情的——<strong>可以归结成两个字——“成长”</strong>，我不睡觉做的事情其实是在无所事事的消磨时间——可以归结为两个字——“堕落”，为什么我选择的是“堕落”而不是“成长”呢？明明“成长”给我的好处更多才对呀？</p>\n<p>我想可能是以下几个原因，</p>\n<ul>\n<li>“成长”相比“堕落”而言，是辛苦的，<strong>“堕落”不需要投入就能即时获得快感</strong>，所以我的大脑自然而然的选择了后者；</li>\n<li>为什么要“成长”，我体会得还不够深刻。<strong>要知道，不“成长”后果可能很严重</strong>。比如像我的一个同事那样，不“成长”可能博士毕不了业；或是像电影《肖申克的救赎》的肖申克那样，不一锤锤凿下去，将永远出不了监狱。反过来亦然，<strong>想要什么，你就得付出什么。</strong></li>\n<li>我把周一至周六当工作日，把周日当休息日，所以突然一下子松懈了。</li>\n</ul>\n<p>先声明一点，我是支持“偶尔的放纵”的。既然是“偶尔”，我这频度太高那就算不上了，所以得改，否则影响我的计划和安排，以及我最宝贵的资源之一——注意力。</p>\n<h2 id=\"如何改进\"><a href=\"#如何改进\" class=\"headerlink\" title=\"如何改进\"></a>如何改进</h2><p>虽然我不需要和别人去比较，但我得知道比我优秀得多但还严格要求自己的人多的是，<strong>我即使严格要求自己也算不上什么，因为这其实是常态——努力真的就是一种常态</strong>。</p>\n<p>那我该如何改进？</p>\n<ul>\n<li>防范：周六晚睡前适度放松，听听轻音乐，读一些趣味性读物（不要太引入入胜的那种，否则不读）；</li>\n<li>给自己一棍棒：<strong>想想自己因为不努力，而将遭受的不可承受之重？</strong></li>\n<li>再给自己一个甜枣：自我催眠早起可以干很多<strong>有趣的事情</strong>，以及能使我一步步走近我设立的<strong>里程碑</strong>；</li>\n<li>周日不“休息”：周日也要折腾，哪能无所事事浪费时间呢？这也是挺难的。</li>\n</ul>\n<p>最后告诉自己：<strong>你过什么样的生活，绝对是你自己决定的。</strong></p>\n<h2 id=\"补充\"><a href=\"#补充\" class=\"headerlink\" title=\"补充\"></a>补充</h2><p>实际上，这是意志力差的表现。而超强意志力的养成，是必须靠自己一点一点去“喂养”出来的。</p>\n","site":{"data":{}},"excerpt":"<p>为什么你还不去睡觉？</p>","more":"<h2 id=\"缘起\"><a href=\"#缘起\" class=\"headerlink\" title=\"缘起\"></a>缘起</h2><p>这几周的周六晚，我总是很晚才入睡——大概是凌晨一点多。这么晚睡我在干嘛呢？或许是看视频，或者是玩手机，总之不是什么正经事就对了。我对这挺介怀，因为这意味着我第二天会很晚醒——大概是上午9点左右。我介怀的原因是：<strong>第二天上午我起码损失了两个小时</strong>，这两个小时我可以用来做很多有意义的事情，比如写博客、冥想或是读书等等。</p>\n<p>明明很晚了，而且很困了，为什么我还不去睡觉呢？</p>\n<h2 id=\"究其原因\"><a href=\"#究其原因\" class=\"headerlink\" title=\"究其原因\"></a>究其原因</h2><p>归结一句：<strong>不自律</strong>。</p>\n<p>那什么是自律呢？我认为自律是：<strong>自己监督自己，做该做的事情</strong>。这么说其实我介怀的原因是因为没有做该做的事情？</p>\n<p>目前看来我是知道该做什么事情的——<strong>可以归结成两个字——“成长”</strong>，我不睡觉做的事情其实是在无所事事的消磨时间——可以归结为两个字——“堕落”，为什么我选择的是“堕落”而不是“成长”呢？明明“成长”给我的好处更多才对呀？</p>\n<p>我想可能是以下几个原因，</p>\n<ul>\n<li>“成长”相比“堕落”而言，是辛苦的，<strong>“堕落”不需要投入就能即时获得快感</strong>，所以我的大脑自然而然的选择了后者；</li>\n<li>为什么要“成长”，我体会得还不够深刻。<strong>要知道，不“成长”后果可能很严重</strong>。比如像我的一个同事那样，不“成长”可能博士毕不了业；或是像电影《肖申克的救赎》的肖申克那样，不一锤锤凿下去，将永远出不了监狱。反过来亦然，<strong>想要什么，你就得付出什么。</strong></li>\n<li>我把周一至周六当工作日，把周日当休息日，所以突然一下子松懈了。</li>\n</ul>\n<p>先声明一点，我是支持“偶尔的放纵”的。既然是“偶尔”，我这频度太高那就算不上了，所以得改，否则影响我的计划和安排，以及我最宝贵的资源之一——注意力。</p>\n<h2 id=\"如何改进\"><a href=\"#如何改进\" class=\"headerlink\" title=\"如何改进\"></a>如何改进</h2><p>虽然我不需要和别人去比较，但我得知道比我优秀得多但还严格要求自己的人多的是，<strong>我即使严格要求自己也算不上什么，因为这其实是常态——努力真的就是一种常态</strong>。</p>\n<p>那我该如何改进？</p>\n<ul>\n<li>防范：周六晚睡前适度放松，听听轻音乐，读一些趣味性读物（不要太引入入胜的那种，否则不读）；</li>\n<li>给自己一棍棒：<strong>想想自己因为不努力，而将遭受的不可承受之重？</strong></li>\n<li>再给自己一个甜枣：自我催眠早起可以干很多<strong>有趣的事情</strong>，以及能使我一步步走近我设立的<strong>里程碑</strong>；</li>\n<li>周日不“休息”：周日也要折腾，哪能无所事事浪费时间呢？这也是挺难的。</li>\n</ul>\n<p>最后告诉自己：<strong>你过什么样的生活，绝对是你自己决定的。</strong></p>\n<h2 id=\"补充\"><a href=\"#补充\" class=\"headerlink\" title=\"补充\"></a>补充</h2><p>实际上，这是意志力差的表现。而超强意志力的养成，是必须靠自己一点一点去“喂养”出来的。</p>"},{"layout":"post","title":"《通往财富自由之路》第01周读书笔记","date":"2016-08-28T12:32:58.000Z","comments":1,"_content":"\n李笑来《通往财富自由之路》读书笔记。第一周的主题为：什么是财富自由、出售时间必须遵守的铁律和注意力。\n\n<!--more-->\n\n## 什么是财富自由\n\n定义：**财富自由指的是一种不再需要为了生存而出售自己时间的状态。**\n\n定理：财富自由本质上是为了**时间的自由**。\n\n证明：**人生只有一回。**\n\n推论：（1）财富自由不是终点，财富自由**只是一个重要里程碑而已**。在达到这个里程碑之前，我们还是不得不出售自己的时间，但在达到这个里程碑之后，**卖什么都不卖自己的时间**。（2）**打工就是在出售自己的时间**，提升出售时间的单价并不是最终的解决办法，而应该是**使得已经出售的时间能源源不断的给你带来收入**。\n\n既然财富自由只是一个里程碑，**那达到这个里程碑之后我们应该关注什么**？这个问题没有标准答案，李笑来给出他自己的答案是**关注成长——不断的成长和重生**，我认为本质上是为了活得更精彩。既然没有标准答案，那么在开始追寻财富自由之前，**最好先想清楚你追寻财富自由的目的是什么，这是你加速向它靠近的前提**。我的答案是：（1）**像李笑来一样“不务正业”，活出很多辈子**。或许我的某一辈子可以是一个教师，一个旅行达人，一个音乐家，一个作家。（2）归结一句：**全身心探索生命的更多可能**。\n\n那么，财富自由到底与什么相关？它是如何达成的？且看下面几个观点先。\n\n- **行动效率决定你的产出**：实际上这点是按照我的理解来总结的，我猜测李笑来是想，\n    - 强调行动的重要性，只是学习而没有践行，只是输入却没有输出，那你什么收获都不会有；\n    - 行动的效率也将使得产出天差地别，试想杀鸡用牛刀和杀鸡用把小刀子会有多大的产出上的差别。\n- **思考质量决定你的行动效率**：然而，你的一切行动必须是由你的思考去指引的，这时候思考的质量就特别重要了。这一点我在工作上体会特深，因为刚参加工作时惯于用试错性思维，导致思考质量非常低下，浪费特别多的时间。\n- **观念决定了你的思考质量**：李笑来举的例子是**“固守型”和“”进取型”**人格，前者相信人的智商是固定的，后者相信人是能够不断变聪明的，这在根本上造就了不同，前者固守现有的一切，后者不断成长和升级。我想起的例子是前段时间看的纪录片《56UP》，不同阶级出生的小孩观念差别真的是太大了，这是他们过上不一样人生的根本原因。李笑来因此认为，**判断一个人是否聪明，就看他是否拥有足够多的正确、明晰的观念（概念），以及这些观念之间的关系是否清晰明了**。\n\n藉此得出的一个重要结论是：**想要变得更聪明，就得不断锤炼自己的观念，去除或者修正错误的、片面的观念，不断习得新的必要的、正确的观念**。那么，变得更聪明，思考得更高水准，行动得更有效率，财富自由想必不是什么大问题吧（**这便是通往财富自由之路的钥匙**）？而且我以为，这已经不是“通往财富自由”这么简单了，这是在教导人们如何更好的活着。\n\n## 出售时间需要遵守的铁律\n\n既然在达到财富自由这个状态前，我们还是不得不出售自己的时间，那么出售时间需要遵循的铁律是什么？李笑来给出以下三条铁律。\n\n1. **重视自己的成长**。出售自己时间前，必须要问自己的问题是：**这能不能给我带来成长？带来多少成长**[注1]？面临抉择时，选择其实变得很简单：**哪个选择能给我带来更多的成长？哪方面的成长？是我想要的成长吗？**\n2. **追求价值而不是估值**。就打工而言，高估值确实是能让你一次卖给好价钱，但假如你不是一家公司呆到老，你必然还需要再次进行交易。追寻高估值是有风险的，下一次交易你未必会有那么好的运气。另外，一味追求高估值可能会导致一些不正当的行为——比如欺骗，你可能会在未来为此买单。李笑来以为，**让你的估值和价值相近是比较明智的做法，那么假如你的估值长期低于你的价值时呢？**\n3. 保持耐心。我认为这一条铁律其实是对前面两条的补充。**什么时候需要耐心？你的选择有利于你的成长，但是估值却长期低于价值时**，这时候你就特别需要耐心了。然而客观来讲，估值是不可能长期低于价值的，就好比一支优秀股票是不可能长期持有却不能给你带来丰厚回报，所以我提的这个问题是有问题的。如果你真的有此疑问，那说明，（1）这可能就是你的真实估值，你可能高估自己了；（2）你对于时间的阀值太过敏感了，这点时间可能算不上长。这里我想强调一个前提，**你必须清楚你的选择真的是能够给你带来你想要的成长的**。你想要成长成什么样子？这是一个观念上的问题。\n\n注1：关于量化成长，李笑来的书《七年就是一辈子》里面有一个很有意思的观念——**成长的量化就是看你过去修正、习得或是重新理解了多少个观念以及多少方法论**。\n\n## 观念的刷新01：注意力\n\n在进入注意力的讨论前，李笑来问：**什么是每个人都拥有但却被忽略的最宝贵的财富？**\n\n回答这个问题之前，他提及了以下三个大坑：（1）**凑热闹**——获得所谓的集体归属感；（2）**随大流**——省去了自己做决策思考的麻烦；（3）**替别人瞎操心**——从管别人的事那里获取成就感。这三个大坑的一个共同点是，它们都无形之中耗费了每个人都拥有的一项宝贵的资源——注意力。\n\n上面的三大坑引出了最开始提的问题的答案，那就是注意力。为什么是答案注意力而不是时间呢？我们不是一直宣称时间就是金钱吗？李笑来的论据是，本质上我们并不拥有时间。那为什么是注意力呢？这个论据也有点意思，\n\n- **时间是游走在我们身体之外的**，不是我们所能控制的，我们最多也只能做到与它同步而已；但**注意力却是游走在我们身体之内，是我们能够选择，我们能够控制的**。所以某种程度来讲，你想过什么样的生活，绝对是你自己可以选择的。\n- **有注意力的倾注才会有产出，注意力带来生产力**。\n\n实际上我还是有些疑问的，因为这种开放式的问题，答案真的是千差万别，当然前提是要能自圆其说。比如说“好奇心”与“哲学性的思考”，这些人与生俱来的能力也是相当重要的啊！然而我发现提的这两者都是注意力的子集，要找出一个与注意力的交集为空的答案是相当不容易的，可见李笑来的心思是何等的缜密。\n\n那注意力与财富自由又有什么关系？李笑来想谈的是如何通过合理消费注意力以早日达到财富自由，他给出了以下三种合理支配注意力的建议：\n\n- **把注意力花在自己的成长上**：把注意力花费在能带来积累效应（**复利**）的事情上，每天不断刻意的去做这些事情。\n- **把注意力花在真爱上**：判断是不是真爱的一个标准是，你愿不愿意将宝贵的注意力“浪费”在其身上。李笑来在书中指的是人，实际上也可以是物。有一个观念很重要：**即使是你的父母或者伴侣，也是需要不断成长的**。\n- **把注意力花在对社会有贡献的事情上**：一个个体对社会的贡献越大，他的价值也就越高。至于价格何时与价值价值一致，那是迟早的事——信息传播的极速提升已使得价格回归大大的加快了。\n\n紧接着李笑来给出了一个重磅级观念：有一个简单但又长期有效的商业模式是，**将大量的廉价的甚至是免费的注意力集中起来高价卖掉**。\n\n最后，问大家三个问题，\n\n1. 你会把注意力花费在哪些与自己成长有关的事情上？\n2. 你会把注意力花费在哪些与自己的真爱有关的事情上？\n3. 你会把注意力花费在哪些对社会有贡献的事情上？","source":"_posts/2016-08-28-attention.markdown","raw":"---\nlayout: post\ntitle: 《通往财富自由之路》第01周读书笔记\ndate: 2016-08-28 20:32:58 +0800\ncomments: true\ncategories: ['读书笔记']\ntags: ['读书', '李笑来', '随想']\n---\n\n李笑来《通往财富自由之路》读书笔记。第一周的主题为：什么是财富自由、出售时间必须遵守的铁律和注意力。\n\n<!--more-->\n\n## 什么是财富自由\n\n定义：**财富自由指的是一种不再需要为了生存而出售自己时间的状态。**\n\n定理：财富自由本质上是为了**时间的自由**。\n\n证明：**人生只有一回。**\n\n推论：（1）财富自由不是终点，财富自由**只是一个重要里程碑而已**。在达到这个里程碑之前，我们还是不得不出售自己的时间，但在达到这个里程碑之后，**卖什么都不卖自己的时间**。（2）**打工就是在出售自己的时间**，提升出售时间的单价并不是最终的解决办法，而应该是**使得已经出售的时间能源源不断的给你带来收入**。\n\n既然财富自由只是一个里程碑，**那达到这个里程碑之后我们应该关注什么**？这个问题没有标准答案，李笑来给出他自己的答案是**关注成长——不断的成长和重生**，我认为本质上是为了活得更精彩。既然没有标准答案，那么在开始追寻财富自由之前，**最好先想清楚你追寻财富自由的目的是什么，这是你加速向它靠近的前提**。我的答案是：（1）**像李笑来一样“不务正业”，活出很多辈子**。或许我的某一辈子可以是一个教师，一个旅行达人，一个音乐家，一个作家。（2）归结一句：**全身心探索生命的更多可能**。\n\n那么，财富自由到底与什么相关？它是如何达成的？且看下面几个观点先。\n\n- **行动效率决定你的产出**：实际上这点是按照我的理解来总结的，我猜测李笑来是想，\n    - 强调行动的重要性，只是学习而没有践行，只是输入却没有输出，那你什么收获都不会有；\n    - 行动的效率也将使得产出天差地别，试想杀鸡用牛刀和杀鸡用把小刀子会有多大的产出上的差别。\n- **思考质量决定你的行动效率**：然而，你的一切行动必须是由你的思考去指引的，这时候思考的质量就特别重要了。这一点我在工作上体会特深，因为刚参加工作时惯于用试错性思维，导致思考质量非常低下，浪费特别多的时间。\n- **观念决定了你的思考质量**：李笑来举的例子是**“固守型”和“”进取型”**人格，前者相信人的智商是固定的，后者相信人是能够不断变聪明的，这在根本上造就了不同，前者固守现有的一切，后者不断成长和升级。我想起的例子是前段时间看的纪录片《56UP》，不同阶级出生的小孩观念差别真的是太大了，这是他们过上不一样人生的根本原因。李笑来因此认为，**判断一个人是否聪明，就看他是否拥有足够多的正确、明晰的观念（概念），以及这些观念之间的关系是否清晰明了**。\n\n藉此得出的一个重要结论是：**想要变得更聪明，就得不断锤炼自己的观念，去除或者修正错误的、片面的观念，不断习得新的必要的、正确的观念**。那么，变得更聪明，思考得更高水准，行动得更有效率，财富自由想必不是什么大问题吧（**这便是通往财富自由之路的钥匙**）？而且我以为，这已经不是“通往财富自由”这么简单了，这是在教导人们如何更好的活着。\n\n## 出售时间需要遵守的铁律\n\n既然在达到财富自由这个状态前，我们还是不得不出售自己的时间，那么出售时间需要遵循的铁律是什么？李笑来给出以下三条铁律。\n\n1. **重视自己的成长**。出售自己时间前，必须要问自己的问题是：**这能不能给我带来成长？带来多少成长**[注1]？面临抉择时，选择其实变得很简单：**哪个选择能给我带来更多的成长？哪方面的成长？是我想要的成长吗？**\n2. **追求价值而不是估值**。就打工而言，高估值确实是能让你一次卖给好价钱，但假如你不是一家公司呆到老，你必然还需要再次进行交易。追寻高估值是有风险的，下一次交易你未必会有那么好的运气。另外，一味追求高估值可能会导致一些不正当的行为——比如欺骗，你可能会在未来为此买单。李笑来以为，**让你的估值和价值相近是比较明智的做法，那么假如你的估值长期低于你的价值时呢？**\n3. 保持耐心。我认为这一条铁律其实是对前面两条的补充。**什么时候需要耐心？你的选择有利于你的成长，但是估值却长期低于价值时**，这时候你就特别需要耐心了。然而客观来讲，估值是不可能长期低于价值的，就好比一支优秀股票是不可能长期持有却不能给你带来丰厚回报，所以我提的这个问题是有问题的。如果你真的有此疑问，那说明，（1）这可能就是你的真实估值，你可能高估自己了；（2）你对于时间的阀值太过敏感了，这点时间可能算不上长。这里我想强调一个前提，**你必须清楚你的选择真的是能够给你带来你想要的成长的**。你想要成长成什么样子？这是一个观念上的问题。\n\n注1：关于量化成长，李笑来的书《七年就是一辈子》里面有一个很有意思的观念——**成长的量化就是看你过去修正、习得或是重新理解了多少个观念以及多少方法论**。\n\n## 观念的刷新01：注意力\n\n在进入注意力的讨论前，李笑来问：**什么是每个人都拥有但却被忽略的最宝贵的财富？**\n\n回答这个问题之前，他提及了以下三个大坑：（1）**凑热闹**——获得所谓的集体归属感；（2）**随大流**——省去了自己做决策思考的麻烦；（3）**替别人瞎操心**——从管别人的事那里获取成就感。这三个大坑的一个共同点是，它们都无形之中耗费了每个人都拥有的一项宝贵的资源——注意力。\n\n上面的三大坑引出了最开始提的问题的答案，那就是注意力。为什么是答案注意力而不是时间呢？我们不是一直宣称时间就是金钱吗？李笑来的论据是，本质上我们并不拥有时间。那为什么是注意力呢？这个论据也有点意思，\n\n- **时间是游走在我们身体之外的**，不是我们所能控制的，我们最多也只能做到与它同步而已；但**注意力却是游走在我们身体之内，是我们能够选择，我们能够控制的**。所以某种程度来讲，你想过什么样的生活，绝对是你自己可以选择的。\n- **有注意力的倾注才会有产出，注意力带来生产力**。\n\n实际上我还是有些疑问的，因为这种开放式的问题，答案真的是千差万别，当然前提是要能自圆其说。比如说“好奇心”与“哲学性的思考”，这些人与生俱来的能力也是相当重要的啊！然而我发现提的这两者都是注意力的子集，要找出一个与注意力的交集为空的答案是相当不容易的，可见李笑来的心思是何等的缜密。\n\n那注意力与财富自由又有什么关系？李笑来想谈的是如何通过合理消费注意力以早日达到财富自由，他给出了以下三种合理支配注意力的建议：\n\n- **把注意力花在自己的成长上**：把注意力花费在能带来积累效应（**复利**）的事情上，每天不断刻意的去做这些事情。\n- **把注意力花在真爱上**：判断是不是真爱的一个标准是，你愿不愿意将宝贵的注意力“浪费”在其身上。李笑来在书中指的是人，实际上也可以是物。有一个观念很重要：**即使是你的父母或者伴侣，也是需要不断成长的**。\n- **把注意力花在对社会有贡献的事情上**：一个个体对社会的贡献越大，他的价值也就越高。至于价格何时与价值价值一致，那是迟早的事——信息传播的极速提升已使得价格回归大大的加快了。\n\n紧接着李笑来给出了一个重磅级观念：有一个简单但又长期有效的商业模式是，**将大量的廉价的甚至是免费的注意力集中起来高价卖掉**。\n\n最后，问大家三个问题，\n\n1. 你会把注意力花费在哪些与自己成长有关的事情上？\n2. 你会把注意力花费在哪些与自己的真爱有关的事情上？\n3. 你会把注意力花费在哪些对社会有贡献的事情上？","slug":"attention","published":1,"updated":"2017-04-09T14:37:22.000Z","photos":[],"link":"","_id":"cjlza6mad0041pgupaqgjyiy6","content":"<p>李笑来《通往财富自由之路》读书笔记。第一周的主题为：什么是财富自由、出售时间必须遵守的铁律和注意力。</p>\n<a id=\"more\"></a>\n<h2 id=\"什么是财富自由\"><a href=\"#什么是财富自由\" class=\"headerlink\" title=\"什么是财富自由\"></a>什么是财富自由</h2><p>定义：<strong>财富自由指的是一种不再需要为了生存而出售自己时间的状态。</strong></p>\n<p>定理：财富自由本质上是为了<strong>时间的自由</strong>。</p>\n<p>证明：<strong>人生只有一回。</strong></p>\n<p>推论：（1）财富自由不是终点，财富自由<strong>只是一个重要里程碑而已</strong>。在达到这个里程碑之前，我们还是不得不出售自己的时间，但在达到这个里程碑之后，<strong>卖什么都不卖自己的时间</strong>。（2）<strong>打工就是在出售自己的时间</strong>，提升出售时间的单价并不是最终的解决办法，而应该是<strong>使得已经出售的时间能源源不断的给你带来收入</strong>。</p>\n<p>既然财富自由只是一个里程碑，<strong>那达到这个里程碑之后我们应该关注什么</strong>？这个问题没有标准答案，李笑来给出他自己的答案是<strong>关注成长——不断的成长和重生</strong>，我认为本质上是为了活得更精彩。既然没有标准答案，那么在开始追寻财富自由之前，<strong>最好先想清楚你追寻财富自由的目的是什么，这是你加速向它靠近的前提</strong>。我的答案是：（1）<strong>像李笑来一样“不务正业”，活出很多辈子</strong>。或许我的某一辈子可以是一个教师，一个旅行达人，一个音乐家，一个作家。（2）归结一句：<strong>全身心探索生命的更多可能</strong>。</p>\n<p>那么，财富自由到底与什么相关？它是如何达成的？且看下面几个观点先。</p>\n<ul>\n<li><strong>行动效率决定你的产出</strong>：实际上这点是按照我的理解来总结的，我猜测李笑来是想，<ul>\n<li>强调行动的重要性，只是学习而没有践行，只是输入却没有输出，那你什么收获都不会有；</li>\n<li>行动的效率也将使得产出天差地别，试想杀鸡用牛刀和杀鸡用把小刀子会有多大的产出上的差别。</li>\n</ul>\n</li>\n<li><strong>思考质量决定你的行动效率</strong>：然而，你的一切行动必须是由你的思考去指引的，这时候思考的质量就特别重要了。这一点我在工作上体会特深，因为刚参加工作时惯于用试错性思维，导致思考质量非常低下，浪费特别多的时间。</li>\n<li><strong>观念决定了你的思考质量</strong>：李笑来举的例子是<strong>“固守型”和“”进取型”</strong>人格，前者相信人的智商是固定的，后者相信人是能够不断变聪明的，这在根本上造就了不同，前者固守现有的一切，后者不断成长和升级。我想起的例子是前段时间看的纪录片《56UP》，不同阶级出生的小孩观念差别真的是太大了，这是他们过上不一样人生的根本原因。李笑来因此认为，<strong>判断一个人是否聪明，就看他是否拥有足够多的正确、明晰的观念（概念），以及这些观念之间的关系是否清晰明了</strong>。</li>\n</ul>\n<p>藉此得出的一个重要结论是：<strong>想要变得更聪明，就得不断锤炼自己的观念，去除或者修正错误的、片面的观念，不断习得新的必要的、正确的观念</strong>。那么，变得更聪明，思考得更高水准，行动得更有效率，财富自由想必不是什么大问题吧（<strong>这便是通往财富自由之路的钥匙</strong>）？而且我以为，这已经不是“通往财富自由”这么简单了，这是在教导人们如何更好的活着。</p>\n<h2 id=\"出售时间需要遵守的铁律\"><a href=\"#出售时间需要遵守的铁律\" class=\"headerlink\" title=\"出售时间需要遵守的铁律\"></a>出售时间需要遵守的铁律</h2><p>既然在达到财富自由这个状态前，我们还是不得不出售自己的时间，那么出售时间需要遵循的铁律是什么？李笑来给出以下三条铁律。</p>\n<ol>\n<li><strong>重视自己的成长</strong>。出售自己时间前，必须要问自己的问题是：<strong>这能不能给我带来成长？带来多少成长</strong>[注1]？面临抉择时，选择其实变得很简单：<strong>哪个选择能给我带来更多的成长？哪方面的成长？是我想要的成长吗？</strong></li>\n<li><strong>追求价值而不是估值</strong>。就打工而言，高估值确实是能让你一次卖给好价钱，但假如你不是一家公司呆到老，你必然还需要再次进行交易。追寻高估值是有风险的，下一次交易你未必会有那么好的运气。另外，一味追求高估值可能会导致一些不正当的行为——比如欺骗，你可能会在未来为此买单。李笑来以为，<strong>让你的估值和价值相近是比较明智的做法，那么假如你的估值长期低于你的价值时呢？</strong></li>\n<li>保持耐心。我认为这一条铁律其实是对前面两条的补充。<strong>什么时候需要耐心？你的选择有利于你的成长，但是估值却长期低于价值时</strong>，这时候你就特别需要耐心了。然而客观来讲，估值是不可能长期低于价值的，就好比一支优秀股票是不可能长期持有却不能给你带来丰厚回报，所以我提的这个问题是有问题的。如果你真的有此疑问，那说明，（1）这可能就是你的真实估值，你可能高估自己了；（2）你对于时间的阀值太过敏感了，这点时间可能算不上长。这里我想强调一个前提，<strong>你必须清楚你的选择真的是能够给你带来你想要的成长的</strong>。你想要成长成什么样子？这是一个观念上的问题。</li>\n</ol>\n<p>注1：关于量化成长，李笑来的书《七年就是一辈子》里面有一个很有意思的观念——<strong>成长的量化就是看你过去修正、习得或是重新理解了多少个观念以及多少方法论</strong>。</p>\n<h2 id=\"观念的刷新01：注意力\"><a href=\"#观念的刷新01：注意力\" class=\"headerlink\" title=\"观念的刷新01：注意力\"></a>观念的刷新01：注意力</h2><p>在进入注意力的讨论前，李笑来问：<strong>什么是每个人都拥有但却被忽略的最宝贵的财富？</strong></p>\n<p>回答这个问题之前，他提及了以下三个大坑：（1）<strong>凑热闹</strong>——获得所谓的集体归属感；（2）<strong>随大流</strong>——省去了自己做决策思考的麻烦；（3）<strong>替别人瞎操心</strong>——从管别人的事那里获取成就感。这三个大坑的一个共同点是，它们都无形之中耗费了每个人都拥有的一项宝贵的资源——注意力。</p>\n<p>上面的三大坑引出了最开始提的问题的答案，那就是注意力。为什么是答案注意力而不是时间呢？我们不是一直宣称时间就是金钱吗？李笑来的论据是，本质上我们并不拥有时间。那为什么是注意力呢？这个论据也有点意思，</p>\n<ul>\n<li><strong>时间是游走在我们身体之外的</strong>，不是我们所能控制的，我们最多也只能做到与它同步而已；但<strong>注意力却是游走在我们身体之内，是我们能够选择，我们能够控制的</strong>。所以某种程度来讲，你想过什么样的生活，绝对是你自己可以选择的。</li>\n<li><strong>有注意力的倾注才会有产出，注意力带来生产力</strong>。</li>\n</ul>\n<p>实际上我还是有些疑问的，因为这种开放式的问题，答案真的是千差万别，当然前提是要能自圆其说。比如说“好奇心”与“哲学性的思考”，这些人与生俱来的能力也是相当重要的啊！然而我发现提的这两者都是注意力的子集，要找出一个与注意力的交集为空的答案是相当不容易的，可见李笑来的心思是何等的缜密。</p>\n<p>那注意力与财富自由又有什么关系？李笑来想谈的是如何通过合理消费注意力以早日达到财富自由，他给出了以下三种合理支配注意力的建议：</p>\n<ul>\n<li><strong>把注意力花在自己的成长上</strong>：把注意力花费在能带来积累效应（<strong>复利</strong>）的事情上，每天不断刻意的去做这些事情。</li>\n<li><strong>把注意力花在真爱上</strong>：判断是不是真爱的一个标准是，你愿不愿意将宝贵的注意力“浪费”在其身上。李笑来在书中指的是人，实际上也可以是物。有一个观念很重要：<strong>即使是你的父母或者伴侣，也是需要不断成长的</strong>。</li>\n<li><strong>把注意力花在对社会有贡献的事情上</strong>：一个个体对社会的贡献越大，他的价值也就越高。至于价格何时与价值价值一致，那是迟早的事——信息传播的极速提升已使得价格回归大大的加快了。</li>\n</ul>\n<p>紧接着李笑来给出了一个重磅级观念：有一个简单但又长期有效的商业模式是，<strong>将大量的廉价的甚至是免费的注意力集中起来高价卖掉</strong>。</p>\n<p>最后，问大家三个问题，</p>\n<ol>\n<li>你会把注意力花费在哪些与自己成长有关的事情上？</li>\n<li>你会把注意力花费在哪些与自己的真爱有关的事情上？</li>\n<li>你会把注意力花费在哪些对社会有贡献的事情上？</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>李笑来《通往财富自由之路》读书笔记。第一周的主题为：什么是财富自由、出售时间必须遵守的铁律和注意力。</p>","more":"<h2 id=\"什么是财富自由\"><a href=\"#什么是财富自由\" class=\"headerlink\" title=\"什么是财富自由\"></a>什么是财富自由</h2><p>定义：<strong>财富自由指的是一种不再需要为了生存而出售自己时间的状态。</strong></p>\n<p>定理：财富自由本质上是为了<strong>时间的自由</strong>。</p>\n<p>证明：<strong>人生只有一回。</strong></p>\n<p>推论：（1）财富自由不是终点，财富自由<strong>只是一个重要里程碑而已</strong>。在达到这个里程碑之前，我们还是不得不出售自己的时间，但在达到这个里程碑之后，<strong>卖什么都不卖自己的时间</strong>。（2）<strong>打工就是在出售自己的时间</strong>，提升出售时间的单价并不是最终的解决办法，而应该是<strong>使得已经出售的时间能源源不断的给你带来收入</strong>。</p>\n<p>既然财富自由只是一个里程碑，<strong>那达到这个里程碑之后我们应该关注什么</strong>？这个问题没有标准答案，李笑来给出他自己的答案是<strong>关注成长——不断的成长和重生</strong>，我认为本质上是为了活得更精彩。既然没有标准答案，那么在开始追寻财富自由之前，<strong>最好先想清楚你追寻财富自由的目的是什么，这是你加速向它靠近的前提</strong>。我的答案是：（1）<strong>像李笑来一样“不务正业”，活出很多辈子</strong>。或许我的某一辈子可以是一个教师，一个旅行达人，一个音乐家，一个作家。（2）归结一句：<strong>全身心探索生命的更多可能</strong>。</p>\n<p>那么，财富自由到底与什么相关？它是如何达成的？且看下面几个观点先。</p>\n<ul>\n<li><strong>行动效率决定你的产出</strong>：实际上这点是按照我的理解来总结的，我猜测李笑来是想，<ul>\n<li>强调行动的重要性，只是学习而没有践行，只是输入却没有输出，那你什么收获都不会有；</li>\n<li>行动的效率也将使得产出天差地别，试想杀鸡用牛刀和杀鸡用把小刀子会有多大的产出上的差别。</li>\n</ul>\n</li>\n<li><strong>思考质量决定你的行动效率</strong>：然而，你的一切行动必须是由你的思考去指引的，这时候思考的质量就特别重要了。这一点我在工作上体会特深，因为刚参加工作时惯于用试错性思维，导致思考质量非常低下，浪费特别多的时间。</li>\n<li><strong>观念决定了你的思考质量</strong>：李笑来举的例子是<strong>“固守型”和“”进取型”</strong>人格，前者相信人的智商是固定的，后者相信人是能够不断变聪明的，这在根本上造就了不同，前者固守现有的一切，后者不断成长和升级。我想起的例子是前段时间看的纪录片《56UP》，不同阶级出生的小孩观念差别真的是太大了，这是他们过上不一样人生的根本原因。李笑来因此认为，<strong>判断一个人是否聪明，就看他是否拥有足够多的正确、明晰的观念（概念），以及这些观念之间的关系是否清晰明了</strong>。</li>\n</ul>\n<p>藉此得出的一个重要结论是：<strong>想要变得更聪明，就得不断锤炼自己的观念，去除或者修正错误的、片面的观念，不断习得新的必要的、正确的观念</strong>。那么，变得更聪明，思考得更高水准，行动得更有效率，财富自由想必不是什么大问题吧（<strong>这便是通往财富自由之路的钥匙</strong>）？而且我以为，这已经不是“通往财富自由”这么简单了，这是在教导人们如何更好的活着。</p>\n<h2 id=\"出售时间需要遵守的铁律\"><a href=\"#出售时间需要遵守的铁律\" class=\"headerlink\" title=\"出售时间需要遵守的铁律\"></a>出售时间需要遵守的铁律</h2><p>既然在达到财富自由这个状态前，我们还是不得不出售自己的时间，那么出售时间需要遵循的铁律是什么？李笑来给出以下三条铁律。</p>\n<ol>\n<li><strong>重视自己的成长</strong>。出售自己时间前，必须要问自己的问题是：<strong>这能不能给我带来成长？带来多少成长</strong>[注1]？面临抉择时，选择其实变得很简单：<strong>哪个选择能给我带来更多的成长？哪方面的成长？是我想要的成长吗？</strong></li>\n<li><strong>追求价值而不是估值</strong>。就打工而言，高估值确实是能让你一次卖给好价钱，但假如你不是一家公司呆到老，你必然还需要再次进行交易。追寻高估值是有风险的，下一次交易你未必会有那么好的运气。另外，一味追求高估值可能会导致一些不正当的行为——比如欺骗，你可能会在未来为此买单。李笑来以为，<strong>让你的估值和价值相近是比较明智的做法，那么假如你的估值长期低于你的价值时呢？</strong></li>\n<li>保持耐心。我认为这一条铁律其实是对前面两条的补充。<strong>什么时候需要耐心？你的选择有利于你的成长，但是估值却长期低于价值时</strong>，这时候你就特别需要耐心了。然而客观来讲，估值是不可能长期低于价值的，就好比一支优秀股票是不可能长期持有却不能给你带来丰厚回报，所以我提的这个问题是有问题的。如果你真的有此疑问，那说明，（1）这可能就是你的真实估值，你可能高估自己了；（2）你对于时间的阀值太过敏感了，这点时间可能算不上长。这里我想强调一个前提，<strong>你必须清楚你的选择真的是能够给你带来你想要的成长的</strong>。你想要成长成什么样子？这是一个观念上的问题。</li>\n</ol>\n<p>注1：关于量化成长，李笑来的书《七年就是一辈子》里面有一个很有意思的观念——<strong>成长的量化就是看你过去修正、习得或是重新理解了多少个观念以及多少方法论</strong>。</p>\n<h2 id=\"观念的刷新01：注意力\"><a href=\"#观念的刷新01：注意力\" class=\"headerlink\" title=\"观念的刷新01：注意力\"></a>观念的刷新01：注意力</h2><p>在进入注意力的讨论前，李笑来问：<strong>什么是每个人都拥有但却被忽略的最宝贵的财富？</strong></p>\n<p>回答这个问题之前，他提及了以下三个大坑：（1）<strong>凑热闹</strong>——获得所谓的集体归属感；（2）<strong>随大流</strong>——省去了自己做决策思考的麻烦；（3）<strong>替别人瞎操心</strong>——从管别人的事那里获取成就感。这三个大坑的一个共同点是，它们都无形之中耗费了每个人都拥有的一项宝贵的资源——注意力。</p>\n<p>上面的三大坑引出了最开始提的问题的答案，那就是注意力。为什么是答案注意力而不是时间呢？我们不是一直宣称时间就是金钱吗？李笑来的论据是，本质上我们并不拥有时间。那为什么是注意力呢？这个论据也有点意思，</p>\n<ul>\n<li><strong>时间是游走在我们身体之外的</strong>，不是我们所能控制的，我们最多也只能做到与它同步而已；但<strong>注意力却是游走在我们身体之内，是我们能够选择，我们能够控制的</strong>。所以某种程度来讲，你想过什么样的生活，绝对是你自己可以选择的。</li>\n<li><strong>有注意力的倾注才会有产出，注意力带来生产力</strong>。</li>\n</ul>\n<p>实际上我还是有些疑问的，因为这种开放式的问题，答案真的是千差万别，当然前提是要能自圆其说。比如说“好奇心”与“哲学性的思考”，这些人与生俱来的能力也是相当重要的啊！然而我发现提的这两者都是注意力的子集，要找出一个与注意力的交集为空的答案是相当不容易的，可见李笑来的心思是何等的缜密。</p>\n<p>那注意力与财富自由又有什么关系？李笑来想谈的是如何通过合理消费注意力以早日达到财富自由，他给出了以下三种合理支配注意力的建议：</p>\n<ul>\n<li><strong>把注意力花在自己的成长上</strong>：把注意力花费在能带来积累效应（<strong>复利</strong>）的事情上，每天不断刻意的去做这些事情。</li>\n<li><strong>把注意力花在真爱上</strong>：判断是不是真爱的一个标准是，你愿不愿意将宝贵的注意力“浪费”在其身上。李笑来在书中指的是人，实际上也可以是物。有一个观念很重要：<strong>即使是你的父母或者伴侣，也是需要不断成长的</strong>。</li>\n<li><strong>把注意力花在对社会有贡献的事情上</strong>：一个个体对社会的贡献越大，他的价值也就越高。至于价格何时与价值价值一致，那是迟早的事——信息传播的极速提升已使得价格回归大大的加快了。</li>\n</ul>\n<p>紧接着李笑来给出了一个重磅级观念：有一个简单但又长期有效的商业模式是，<strong>将大量的廉价的甚至是免费的注意力集中起来高价卖掉</strong>。</p>\n<p>最后，问大家三个问题，</p>\n<ol>\n<li>你会把注意力花费在哪些与自己成长有关的事情上？</li>\n<li>你会把注意力花费在哪些与自己的真爱有关的事情上？</li>\n<li>你会把注意力花费在哪些对社会有贡献的事情上？</li>\n</ol>"},{"layout":"post","title":"《通往财富自由之路》第02周读书笔记","date":"2016-09-11T06:53:33.000Z","comments":1,"_content":"\n李笑来《通往财富自由之路》读书笔记。第二周的主题为：付费就是捡便宜。\n\n<!--more-->\n\n## 主题阐述\n\n本周问题：在上一周的基础上思考一件事，用什么换什么相对划算？答案是：用金钱换注意力相对划算，**付费就是捡便宜**。上一周提到，“注意力”是最宝贵的财富，时间上本质不被我们所拥有，金钱花了可以再赚。因此按照价值重要顺序排列，**注意力 > 时间 > 金钱**，本质上，这就是**低价值换取高价值**。作者的给出一些例证如下，\n> - 花5块钱让“助理来也”帮其买咖啡，节省十来分钟时间，这使得其注意力得以持续，而其10分钟的产出是几百到上千字，作者一篇文章也不过两三千字；\n> - 请小时工是划算的，夫妻因此而不吵架，收获好心情又节省时间；\n> - 花钱请助理是划算的，相当于把自己的低价值工作外包出去；\n\n作者还在文章讲到他二十多年没跟老婆吵架，归结起来就一招：**花足够多的时间在她身上；如果可能，也花足够多的钱在她身上**，本质上还是**低价值换取高价值**。且先来看看他是怎么做到的，\n> - **花大量时间与她进行有效沟通**，且不断重复，让她理解自己的一些观念，并**晓之以利**——这样能给双方带来什么价值。\n\n由于大量的时间投入，作者受其老婆的干扰降到了最低（这是在教我们处理夫妻关系啊！）。作者的观点是：**婚姻失败的根本原因是相互的时间投资太少**。\n\n上面我反复强调了“**低价值换取高价值**”，在作者这里的表述是，\n> - **之所以你的时间能卖出去，就是因为总体上来看花钱买时间更划算啊！**\n> - **凡是能用钱买来的时间就是便宜的；凡是能用时间换来的注意力持续就是有价值的**。\n\n最后，作者给出一个对我而言非常重磅的观点——**现在付费是你以后收费的基础**，由来如下，\n> - 作者曾经到一个即将上市的IT公司做培训，但发现该公司用的几乎全部是盗版软件，自己公司都全是盗版软件了，如何奢望别人付费买自己的软件？\n> - 使用盗版软件的害处在于：（1）你可能会因寻找盗版软件而花去大量时间；（2）**观念上的毒害**：长期使用盗版软件而不是付费软件的人，几乎不太可能投入时间去做属于自己的付费软件，因此就失去了**一次创造长期营收**的可能。\n\n## 问答记录\n\n如何衡量金钱换注意力是否有必要？\n> - 节省出来的这段时间给你带来的**潜在价值**，与你**花去的金钱**进行比较。注意，**不要负债用金钱换注意力**，因为负债给你带来的干扰将使得你注意力难以集中，那这买卖就亏了。\n\n金钱换来的注意力用来干嘛？\n> - 上一周提到的成长、真爱和对社会有贡献的事情，多了去了。\n\n如何让孩子也养成集中集中注意力的好习惯？\n> - **前提是你先养成这个习惯**，孩子自然就会被耳濡目染。\n\n该不该兼职？\n> - 业余人士的收入差价和专业人士的差价非常巨大，高价值的事情应该是不断去深入自己的专业领域。即使要像尝试其他领域，你也应该像正规军一样战斗或者是去加入正规军。兼职的最大问题是，你**藉由兼职形成的对这个行业的认识可能是错误的**。\n\n这里我想举个我自己的例子，大四上学期，我就去到一间非常大的软件公司实习。虽然因为一些原因，我没有继续留着那里，但这间公司给了我非常宝贵的财富——我了解了原来正规军是这样做软件的。\n\n好心说的话没有被别人接受该怎么办？\n> - **有没有人听你说话，很可能不取决于你说的对不对，而在于你有没有说话的资格**。成为让人敬佩的人，能为你赢得尊重，你便成为了那个“能说话的人”。\n\n\n\n## 我的践行情况\n\n- 工作上，我盗版软件用的其实不算多，主要是微软的操作系统和Visio，其他的大部分是付费软件的免费功能。目前我也不打算去为操作系统和Visio付费，因为这样花去我的时间和注意力，但这倒是提醒了我——能通过花钱购买软件服务而提高工作效率的事情，绝对不要手软。这方面我最大的改观是，愿意为一些优质的软件服务付费。\n- 工作上，我还是会时不时被打断注意力。我或许应该向李笑来学习，让我的同事了解我的工作习惯？\n- 想清楚了一件事情，要想把吉他学好，真的得去报个班。一方面有专业老师教学，另一方面有小伙伴共同学习激励。\n- 为换取注意力持续，更舍得花钱去打车而不是去坐公交。","source":"_posts/2016-09-11-saving-your-attention.markdown","raw":"---\nlayout: post\ntitle: \"《通往财富自由之路》第02周读书笔记\"\ndate: 2016-09-11 14:53:33 +0800\ncomments: true\ncategories: ['读书笔记']\ntags: ['读书', '李笑来', '随想']\n---\n\n李笑来《通往财富自由之路》读书笔记。第二周的主题为：付费就是捡便宜。\n\n<!--more-->\n\n## 主题阐述\n\n本周问题：在上一周的基础上思考一件事，用什么换什么相对划算？答案是：用金钱换注意力相对划算，**付费就是捡便宜**。上一周提到，“注意力”是最宝贵的财富，时间上本质不被我们所拥有，金钱花了可以再赚。因此按照价值重要顺序排列，**注意力 > 时间 > 金钱**，本质上，这就是**低价值换取高价值**。作者的给出一些例证如下，\n> - 花5块钱让“助理来也”帮其买咖啡，节省十来分钟时间，这使得其注意力得以持续，而其10分钟的产出是几百到上千字，作者一篇文章也不过两三千字；\n> - 请小时工是划算的，夫妻因此而不吵架，收获好心情又节省时间；\n> - 花钱请助理是划算的，相当于把自己的低价值工作外包出去；\n\n作者还在文章讲到他二十多年没跟老婆吵架，归结起来就一招：**花足够多的时间在她身上；如果可能，也花足够多的钱在她身上**，本质上还是**低价值换取高价值**。且先来看看他是怎么做到的，\n> - **花大量时间与她进行有效沟通**，且不断重复，让她理解自己的一些观念，并**晓之以利**——这样能给双方带来什么价值。\n\n由于大量的时间投入，作者受其老婆的干扰降到了最低（这是在教我们处理夫妻关系啊！）。作者的观点是：**婚姻失败的根本原因是相互的时间投资太少**。\n\n上面我反复强调了“**低价值换取高价值**”，在作者这里的表述是，\n> - **之所以你的时间能卖出去，就是因为总体上来看花钱买时间更划算啊！**\n> - **凡是能用钱买来的时间就是便宜的；凡是能用时间换来的注意力持续就是有价值的**。\n\n最后，作者给出一个对我而言非常重磅的观点——**现在付费是你以后收费的基础**，由来如下，\n> - 作者曾经到一个即将上市的IT公司做培训，但发现该公司用的几乎全部是盗版软件，自己公司都全是盗版软件了，如何奢望别人付费买自己的软件？\n> - 使用盗版软件的害处在于：（1）你可能会因寻找盗版软件而花去大量时间；（2）**观念上的毒害**：长期使用盗版软件而不是付费软件的人，几乎不太可能投入时间去做属于自己的付费软件，因此就失去了**一次创造长期营收**的可能。\n\n## 问答记录\n\n如何衡量金钱换注意力是否有必要？\n> - 节省出来的这段时间给你带来的**潜在价值**，与你**花去的金钱**进行比较。注意，**不要负债用金钱换注意力**，因为负债给你带来的干扰将使得你注意力难以集中，那这买卖就亏了。\n\n金钱换来的注意力用来干嘛？\n> - 上一周提到的成长、真爱和对社会有贡献的事情，多了去了。\n\n如何让孩子也养成集中集中注意力的好习惯？\n> - **前提是你先养成这个习惯**，孩子自然就会被耳濡目染。\n\n该不该兼职？\n> - 业余人士的收入差价和专业人士的差价非常巨大，高价值的事情应该是不断去深入自己的专业领域。即使要像尝试其他领域，你也应该像正规军一样战斗或者是去加入正规军。兼职的最大问题是，你**藉由兼职形成的对这个行业的认识可能是错误的**。\n\n这里我想举个我自己的例子，大四上学期，我就去到一间非常大的软件公司实习。虽然因为一些原因，我没有继续留着那里，但这间公司给了我非常宝贵的财富——我了解了原来正规军是这样做软件的。\n\n好心说的话没有被别人接受该怎么办？\n> - **有没有人听你说话，很可能不取决于你说的对不对，而在于你有没有说话的资格**。成为让人敬佩的人，能为你赢得尊重，你便成为了那个“能说话的人”。\n\n\n\n## 我的践行情况\n\n- 工作上，我盗版软件用的其实不算多，主要是微软的操作系统和Visio，其他的大部分是付费软件的免费功能。目前我也不打算去为操作系统和Visio付费，因为这样花去我的时间和注意力，但这倒是提醒了我——能通过花钱购买软件服务而提高工作效率的事情，绝对不要手软。这方面我最大的改观是，愿意为一些优质的软件服务付费。\n- 工作上，我还是会时不时被打断注意力。我或许应该向李笑来学习，让我的同事了解我的工作习惯？\n- 想清楚了一件事情，要想把吉他学好，真的得去报个班。一方面有专业老师教学，另一方面有小伙伴共同学习激励。\n- 为换取注意力持续，更舍得花钱去打车而不是去坐公交。","slug":"saving-your-attention","published":1,"updated":"2017-04-09T14:37:09.000Z","photos":[],"link":"","_id":"cjlza6maf0042pgup9bxtl3du","content":"<p>李笑来《通往财富自由之路》读书笔记。第二周的主题为：付费就是捡便宜。</p>\n<a id=\"more\"></a>\n<h2 id=\"主题阐述\"><a href=\"#主题阐述\" class=\"headerlink\" title=\"主题阐述\"></a>主题阐述</h2><p>本周问题：在上一周的基础上思考一件事，用什么换什么相对划算？答案是：用金钱换注意力相对划算，<strong>付费就是捡便宜</strong>。上一周提到，“注意力”是最宝贵的财富，时间上本质不被我们所拥有，金钱花了可以再赚。因此按照价值重要顺序排列，<strong>注意力 &gt; 时间 &gt; 金钱</strong>，本质上，这就是<strong>低价值换取高价值</strong>。作者的给出一些例证如下，</p>\n<blockquote>\n<ul>\n<li>花5块钱让“助理来也”帮其买咖啡，节省十来分钟时间，这使得其注意力得以持续，而其10分钟的产出是几百到上千字，作者一篇文章也不过两三千字；</li>\n<li>请小时工是划算的，夫妻因此而不吵架，收获好心情又节省时间；</li>\n<li>花钱请助理是划算的，相当于把自己的低价值工作外包出去；</li>\n</ul>\n</blockquote>\n<p>作者还在文章讲到他二十多年没跟老婆吵架，归结起来就一招：<strong>花足够多的时间在她身上；如果可能，也花足够多的钱在她身上</strong>，本质上还是<strong>低价值换取高价值</strong>。且先来看看他是怎么做到的，</p>\n<blockquote>\n<ul>\n<li><strong>花大量时间与她进行有效沟通</strong>，且不断重复，让她理解自己的一些观念，并<strong>晓之以利</strong>——这样能给双方带来什么价值。</li>\n</ul>\n</blockquote>\n<p>由于大量的时间投入，作者受其老婆的干扰降到了最低（这是在教我们处理夫妻关系啊！）。作者的观点是：<strong>婚姻失败的根本原因是相互的时间投资太少</strong>。</p>\n<p>上面我反复强调了“<strong>低价值换取高价值</strong>”，在作者这里的表述是，</p>\n<blockquote>\n<ul>\n<li><strong>之所以你的时间能卖出去，就是因为总体上来看花钱买时间更划算啊！</strong></li>\n<li><strong>凡是能用钱买来的时间就是便宜的；凡是能用时间换来的注意力持续就是有价值的</strong>。</li>\n</ul>\n</blockquote>\n<p>最后，作者给出一个对我而言非常重磅的观点——<strong>现在付费是你以后收费的基础</strong>，由来如下，</p>\n<blockquote>\n<ul>\n<li>作者曾经到一个即将上市的IT公司做培训，但发现该公司用的几乎全部是盗版软件，自己公司都全是盗版软件了，如何奢望别人付费买自己的软件？</li>\n<li>使用盗版软件的害处在于：（1）你可能会因寻找盗版软件而花去大量时间；（2）<strong>观念上的毒害</strong>：长期使用盗版软件而不是付费软件的人，几乎不太可能投入时间去做属于自己的付费软件，因此就失去了<strong>一次创造长期营收</strong>的可能。</li>\n</ul>\n</blockquote>\n<h2 id=\"问答记录\"><a href=\"#问答记录\" class=\"headerlink\" title=\"问答记录\"></a>问答记录</h2><p>如何衡量金钱换注意力是否有必要？</p>\n<blockquote>\n<ul>\n<li>节省出来的这段时间给你带来的<strong>潜在价值</strong>，与你<strong>花去的金钱</strong>进行比较。注意，<strong>不要负债用金钱换注意力</strong>，因为负债给你带来的干扰将使得你注意力难以集中，那这买卖就亏了。</li>\n</ul>\n</blockquote>\n<p>金钱换来的注意力用来干嘛？</p>\n<blockquote>\n<ul>\n<li>上一周提到的成长、真爱和对社会有贡献的事情，多了去了。</li>\n</ul>\n</blockquote>\n<p>如何让孩子也养成集中集中注意力的好习惯？</p>\n<blockquote>\n<ul>\n<li><strong>前提是你先养成这个习惯</strong>，孩子自然就会被耳濡目染。</li>\n</ul>\n</blockquote>\n<p>该不该兼职？</p>\n<blockquote>\n<ul>\n<li>业余人士的收入差价和专业人士的差价非常巨大，高价值的事情应该是不断去深入自己的专业领域。即使要像尝试其他领域，你也应该像正规军一样战斗或者是去加入正规军。兼职的最大问题是，你<strong>藉由兼职形成的对这个行业的认识可能是错误的</strong>。</li>\n</ul>\n</blockquote>\n<p>这里我想举个我自己的例子，大四上学期，我就去到一间非常大的软件公司实习。虽然因为一些原因，我没有继续留着那里，但这间公司给了我非常宝贵的财富——我了解了原来正规军是这样做软件的。</p>\n<p>好心说的话没有被别人接受该怎么办？</p>\n<blockquote>\n<ul>\n<li><strong>有没有人听你说话，很可能不取决于你说的对不对，而在于你有没有说话的资格</strong>。成为让人敬佩的人，能为你赢得尊重，你便成为了那个“能说话的人”。</li>\n</ul>\n</blockquote>\n<h2 id=\"我的践行情况\"><a href=\"#我的践行情况\" class=\"headerlink\" title=\"我的践行情况\"></a>我的践行情况</h2><ul>\n<li>工作上，我盗版软件用的其实不算多，主要是微软的操作系统和Visio，其他的大部分是付费软件的免费功能。目前我也不打算去为操作系统和Visio付费，因为这样花去我的时间和注意力，但这倒是提醒了我——能通过花钱购买软件服务而提高工作效率的事情，绝对不要手软。这方面我最大的改观是，愿意为一些优质的软件服务付费。</li>\n<li>工作上，我还是会时不时被打断注意力。我或许应该向李笑来学习，让我的同事了解我的工作习惯？</li>\n<li>想清楚了一件事情，要想把吉他学好，真的得去报个班。一方面有专业老师教学，另一方面有小伙伴共同学习激励。</li>\n<li>为换取注意力持续，更舍得花钱去打车而不是去坐公交。</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>李笑来《通往财富自由之路》读书笔记。第二周的主题为：付费就是捡便宜。</p>","more":"<h2 id=\"主题阐述\"><a href=\"#主题阐述\" class=\"headerlink\" title=\"主题阐述\"></a>主题阐述</h2><p>本周问题：在上一周的基础上思考一件事，用什么换什么相对划算？答案是：用金钱换注意力相对划算，<strong>付费就是捡便宜</strong>。上一周提到，“注意力”是最宝贵的财富，时间上本质不被我们所拥有，金钱花了可以再赚。因此按照价值重要顺序排列，<strong>注意力 &gt; 时间 &gt; 金钱</strong>，本质上，这就是<strong>低价值换取高价值</strong>。作者的给出一些例证如下，</p>\n<blockquote>\n<ul>\n<li>花5块钱让“助理来也”帮其买咖啡，节省十来分钟时间，这使得其注意力得以持续，而其10分钟的产出是几百到上千字，作者一篇文章也不过两三千字；</li>\n<li>请小时工是划算的，夫妻因此而不吵架，收获好心情又节省时间；</li>\n<li>花钱请助理是划算的，相当于把自己的低价值工作外包出去；</li>\n</ul>\n</blockquote>\n<p>作者还在文章讲到他二十多年没跟老婆吵架，归结起来就一招：<strong>花足够多的时间在她身上；如果可能，也花足够多的钱在她身上</strong>，本质上还是<strong>低价值换取高价值</strong>。且先来看看他是怎么做到的，</p>\n<blockquote>\n<ul>\n<li><strong>花大量时间与她进行有效沟通</strong>，且不断重复，让她理解自己的一些观念，并<strong>晓之以利</strong>——这样能给双方带来什么价值。</li>\n</ul>\n</blockquote>\n<p>由于大量的时间投入，作者受其老婆的干扰降到了最低（这是在教我们处理夫妻关系啊！）。作者的观点是：<strong>婚姻失败的根本原因是相互的时间投资太少</strong>。</p>\n<p>上面我反复强调了“<strong>低价值换取高价值</strong>”，在作者这里的表述是，</p>\n<blockquote>\n<ul>\n<li><strong>之所以你的时间能卖出去，就是因为总体上来看花钱买时间更划算啊！</strong></li>\n<li><strong>凡是能用钱买来的时间就是便宜的；凡是能用时间换来的注意力持续就是有价值的</strong>。</li>\n</ul>\n</blockquote>\n<p>最后，作者给出一个对我而言非常重磅的观点——<strong>现在付费是你以后收费的基础</strong>，由来如下，</p>\n<blockquote>\n<ul>\n<li>作者曾经到一个即将上市的IT公司做培训，但发现该公司用的几乎全部是盗版软件，自己公司都全是盗版软件了，如何奢望别人付费买自己的软件？</li>\n<li>使用盗版软件的害处在于：（1）你可能会因寻找盗版软件而花去大量时间；（2）<strong>观念上的毒害</strong>：长期使用盗版软件而不是付费软件的人，几乎不太可能投入时间去做属于自己的付费软件，因此就失去了<strong>一次创造长期营收</strong>的可能。</li>\n</ul>\n</blockquote>\n<h2 id=\"问答记录\"><a href=\"#问答记录\" class=\"headerlink\" title=\"问答记录\"></a>问答记录</h2><p>如何衡量金钱换注意力是否有必要？</p>\n<blockquote>\n<ul>\n<li>节省出来的这段时间给你带来的<strong>潜在价值</strong>，与你<strong>花去的金钱</strong>进行比较。注意，<strong>不要负债用金钱换注意力</strong>，因为负债给你带来的干扰将使得你注意力难以集中，那这买卖就亏了。</li>\n</ul>\n</blockquote>\n<p>金钱换来的注意力用来干嘛？</p>\n<blockquote>\n<ul>\n<li>上一周提到的成长、真爱和对社会有贡献的事情，多了去了。</li>\n</ul>\n</blockquote>\n<p>如何让孩子也养成集中集中注意力的好习惯？</p>\n<blockquote>\n<ul>\n<li><strong>前提是你先养成这个习惯</strong>，孩子自然就会被耳濡目染。</li>\n</ul>\n</blockquote>\n<p>该不该兼职？</p>\n<blockquote>\n<ul>\n<li>业余人士的收入差价和专业人士的差价非常巨大，高价值的事情应该是不断去深入自己的专业领域。即使要像尝试其他领域，你也应该像正规军一样战斗或者是去加入正规军。兼职的最大问题是，你<strong>藉由兼职形成的对这个行业的认识可能是错误的</strong>。</li>\n</ul>\n</blockquote>\n<p>这里我想举个我自己的例子，大四上学期，我就去到一间非常大的软件公司实习。虽然因为一些原因，我没有继续留着那里，但这间公司给了我非常宝贵的财富——我了解了原来正规军是这样做软件的。</p>\n<p>好心说的话没有被别人接受该怎么办？</p>\n<blockquote>\n<ul>\n<li><strong>有没有人听你说话，很可能不取决于你说的对不对，而在于你有没有说话的资格</strong>。成为让人敬佩的人，能为你赢得尊重，你便成为了那个“能说话的人”。</li>\n</ul>\n</blockquote>\n<h2 id=\"我的践行情况\"><a href=\"#我的践行情况\" class=\"headerlink\" title=\"我的践行情况\"></a>我的践行情况</h2><ul>\n<li>工作上，我盗版软件用的其实不算多，主要是微软的操作系统和Visio，其他的大部分是付费软件的免费功能。目前我也不打算去为操作系统和Visio付费，因为这样花去我的时间和注意力，但这倒是提醒了我——能通过花钱购买软件服务而提高工作效率的事情，绝对不要手软。这方面我最大的改观是，愿意为一些优质的软件服务付费。</li>\n<li>工作上，我还是会时不时被打断注意力。我或许应该向李笑来学习，让我的同事了解我的工作习惯？</li>\n<li>想清楚了一件事情，要想把吉他学好，真的得去报个班。一方面有专业老师教学，另一方面有小伙伴共同学习激励。</li>\n<li>为换取注意力持续，更舍得花钱去打车而不是去坐公交。</li>\n</ul>"},{"layout":"post","title":"《通往财富自由之路》第04周读书笔记","date":"2016-10-16T07:18:49.000Z","comments":1,"_content":"李笑来《通往财富自由之路》读书笔记。第四周的主题为：我们生活的根基应该是什么？\n\n<!--more-->\n\n## 主题阐述\n\n笑来老师直接把“活在当下”定义成“被困在永恒的当下”，并引出我们生活的根基应该是“活在未来”。\n\n首先，我对“活在当下”的定义是，\n>- 不做无用功；\n- 有非常清晰的目标，知道自己距离目标还有多远；\n- 懂得休息。\n\n尽管定义不同，但我能理解其想要传达的含义：不得过且过，不浑浑噩噩，不一辈子舒舒服服的躲在舒适区内。那“活在未来”又是指什么？我认为是一种前瞻性，主动积极的去预测自己的未来，活成自己想要成为的样子。\n\n那如何“活在未来”呢？我将文中的方法论总结为以下三点：\n>- 预测：尊重事实，运用严谨的逻辑对未来做出预测；\n- 笃信：笃信这个预测一定能够实现；\n- 行动：用行动去验证自己的预测，在这个过程中，不断修正自己的想法。\n\n作者更是提出，\n> 甚至不需要预测，只需认真对待那些简单、朴素而又深刻的道理，若是经过思考认为它们是正确的，那么就要笃信，并且按照那些道理践行自己的生活。\n\n实际上，我对作者用的是“预测”而不是“目标”有点奇怪。“预测”指的是在现有信息的基础上，运用一定的方法对未来进行推测，以得出事情发展的过程和结果，作者使用“预测”这个词时更强调的是趋势。“目标”指的是想要达成的结果，是主观的一种意愿。我认为，“改为预测之后得出的目标”，会更合适一些，这提醒我在订目标的同时要注意是否与趋势趋同。\n\n最后，“活在未来”一定能成功吗？作者的观点是，“活在未来”不一定会成功，但总体而言是划算的，因为“活在未来”就如同一种投资，实质上是拿你的现在去换取你想要的未来。只要你尊重事实，相信逻辑，终归是会有所收获的。\n\n## 观点记录\n\n>- 基础知识固然重要，但是不要忽略对于自己专业趋势的研究。（这个观点提醒了我，储备计算机的基础知识固然重要，但把握计算机的浪潮，跟着这个浪潮前进也同样重要。）\n- 如果你希望成为什么样的人，不要等待任何时机的成熟，今天就按照那个标准要求自己。开始就“玩真的”，绝对不把自己当业余选手。只有开始就努力像专业人士一样生活，你才有机会最终真的那么生活。\n- 在成长的过程中，所有的人都是外人。在这个过程，正确的态度是：默认没有人鼓励你，把别人的鼓励当作额外赠送的。\n- 大部分人只停留在“想一想”的阶段，因为没有做过深入思考，因此无法笃信自己的预测。\n\n## 践行情况\n\n“活在未来”或说制定长远目标，一直就是我所不擅长的，需要刻意去训练的能力。但这些天来，确实也有些收获，起码我想明白了自己这一辈子想要做成一些什么事情，接下来要做的工作是将其描绘得更细化和更具体。","source":"_posts/2016-10-16-living-in-the-future.markdown","raw":"---\nlayout: post\ntitle: \"《通往财富自由之路》第04周读书笔记\"\ndate: 2016-10-16 15:18:49 +0800\ncomments: true\ncategories: ['读书笔记']\ntags: ['读书', '李笑来', '随想']\n---\n李笑来《通往财富自由之路》读书笔记。第四周的主题为：我们生活的根基应该是什么？\n\n<!--more-->\n\n## 主题阐述\n\n笑来老师直接把“活在当下”定义成“被困在永恒的当下”，并引出我们生活的根基应该是“活在未来”。\n\n首先，我对“活在当下”的定义是，\n>- 不做无用功；\n- 有非常清晰的目标，知道自己距离目标还有多远；\n- 懂得休息。\n\n尽管定义不同，但我能理解其想要传达的含义：不得过且过，不浑浑噩噩，不一辈子舒舒服服的躲在舒适区内。那“活在未来”又是指什么？我认为是一种前瞻性，主动积极的去预测自己的未来，活成自己想要成为的样子。\n\n那如何“活在未来”呢？我将文中的方法论总结为以下三点：\n>- 预测：尊重事实，运用严谨的逻辑对未来做出预测；\n- 笃信：笃信这个预测一定能够实现；\n- 行动：用行动去验证自己的预测，在这个过程中，不断修正自己的想法。\n\n作者更是提出，\n> 甚至不需要预测，只需认真对待那些简单、朴素而又深刻的道理，若是经过思考认为它们是正确的，那么就要笃信，并且按照那些道理践行自己的生活。\n\n实际上，我对作者用的是“预测”而不是“目标”有点奇怪。“预测”指的是在现有信息的基础上，运用一定的方法对未来进行推测，以得出事情发展的过程和结果，作者使用“预测”这个词时更强调的是趋势。“目标”指的是想要达成的结果，是主观的一种意愿。我认为，“改为预测之后得出的目标”，会更合适一些，这提醒我在订目标的同时要注意是否与趋势趋同。\n\n最后，“活在未来”一定能成功吗？作者的观点是，“活在未来”不一定会成功，但总体而言是划算的，因为“活在未来”就如同一种投资，实质上是拿你的现在去换取你想要的未来。只要你尊重事实，相信逻辑，终归是会有所收获的。\n\n## 观点记录\n\n>- 基础知识固然重要，但是不要忽略对于自己专业趋势的研究。（这个观点提醒了我，储备计算机的基础知识固然重要，但把握计算机的浪潮，跟着这个浪潮前进也同样重要。）\n- 如果你希望成为什么样的人，不要等待任何时机的成熟，今天就按照那个标准要求自己。开始就“玩真的”，绝对不把自己当业余选手。只有开始就努力像专业人士一样生活，你才有机会最终真的那么生活。\n- 在成长的过程中，所有的人都是外人。在这个过程，正确的态度是：默认没有人鼓励你，把别人的鼓励当作额外赠送的。\n- 大部分人只停留在“想一想”的阶段，因为没有做过深入思考，因此无法笃信自己的预测。\n\n## 践行情况\n\n“活在未来”或说制定长远目标，一直就是我所不擅长的，需要刻意去训练的能力。但这些天来，确实也有些收获，起码我想明白了自己这一辈子想要做成一些什么事情，接下来要做的工作是将其描绘得更细化和更具体。","slug":"living-in-the-future","published":1,"updated":"2017-04-09T14:43:51.000Z","photos":[],"link":"","_id":"cjlza6mai0044pgupakxw6sby","content":"<p>李笑来《通往财富自由之路》读书笔记。第四周的主题为：我们生活的根基应该是什么？</p>\n<a id=\"more\"></a>\n<h2 id=\"主题阐述\"><a href=\"#主题阐述\" class=\"headerlink\" title=\"主题阐述\"></a>主题阐述</h2><p>笑来老师直接把“活在当下”定义成“被困在永恒的当下”，并引出我们生活的根基应该是“活在未来”。</p>\n<p>首先，我对“活在当下”的定义是，</p>\n<blockquote>\n<ul>\n<li>不做无用功；</li>\n<li>有非常清晰的目标，知道自己距离目标还有多远；</li>\n<li>懂得休息。</li>\n</ul>\n</blockquote>\n<p>尽管定义不同，但我能理解其想要传达的含义：不得过且过，不浑浑噩噩，不一辈子舒舒服服的躲在舒适区内。那“活在未来”又是指什么？我认为是一种前瞻性，主动积极的去预测自己的未来，活成自己想要成为的样子。</p>\n<p>那如何“活在未来”呢？我将文中的方法论总结为以下三点：</p>\n<blockquote>\n<ul>\n<li>预测：尊重事实，运用严谨的逻辑对未来做出预测；</li>\n<li>笃信：笃信这个预测一定能够实现；</li>\n<li>行动：用行动去验证自己的预测，在这个过程中，不断修正自己的想法。</li>\n</ul>\n</blockquote>\n<p>作者更是提出，</p>\n<blockquote>\n<p>甚至不需要预测，只需认真对待那些简单、朴素而又深刻的道理，若是经过思考认为它们是正确的，那么就要笃信，并且按照那些道理践行自己的生活。</p>\n</blockquote>\n<p>实际上，我对作者用的是“预测”而不是“目标”有点奇怪。“预测”指的是在现有信息的基础上，运用一定的方法对未来进行推测，以得出事情发展的过程和结果，作者使用“预测”这个词时更强调的是趋势。“目标”指的是想要达成的结果，是主观的一种意愿。我认为，“改为预测之后得出的目标”，会更合适一些，这提醒我在订目标的同时要注意是否与趋势趋同。</p>\n<p>最后，“活在未来”一定能成功吗？作者的观点是，“活在未来”不一定会成功，但总体而言是划算的，因为“活在未来”就如同一种投资，实质上是拿你的现在去换取你想要的未来。只要你尊重事实，相信逻辑，终归是会有所收获的。</p>\n<h2 id=\"观点记录\"><a href=\"#观点记录\" class=\"headerlink\" title=\"观点记录\"></a>观点记录</h2><blockquote>\n<ul>\n<li>基础知识固然重要，但是不要忽略对于自己专业趋势的研究。（这个观点提醒了我，储备计算机的基础知识固然重要，但把握计算机的浪潮，跟着这个浪潮前进也同样重要。）</li>\n<li>如果你希望成为什么样的人，不要等待任何时机的成熟，今天就按照那个标准要求自己。开始就“玩真的”，绝对不把自己当业余选手。只有开始就努力像专业人士一样生活，你才有机会最终真的那么生活。</li>\n<li>在成长的过程中，所有的人都是外人。在这个过程，正确的态度是：默认没有人鼓励你，把别人的鼓励当作额外赠送的。</li>\n<li>大部分人只停留在“想一想”的阶段，因为没有做过深入思考，因此无法笃信自己的预测。</li>\n</ul>\n</blockquote>\n<h2 id=\"践行情况\"><a href=\"#践行情况\" class=\"headerlink\" title=\"践行情况\"></a>践行情况</h2><p>“活在未来”或说制定长远目标，一直就是我所不擅长的，需要刻意去训练的能力。但这些天来，确实也有些收获，起码我想明白了自己这一辈子想要做成一些什么事情，接下来要做的工作是将其描绘得更细化和更具体。</p>\n","site":{"data":{}},"excerpt":"<p>李笑来《通往财富自由之路》读书笔记。第四周的主题为：我们生活的根基应该是什么？</p>","more":"<h2 id=\"主题阐述\"><a href=\"#主题阐述\" class=\"headerlink\" title=\"主题阐述\"></a>主题阐述</h2><p>笑来老师直接把“活在当下”定义成“被困在永恒的当下”，并引出我们生活的根基应该是“活在未来”。</p>\n<p>首先，我对“活在当下”的定义是，</p>\n<blockquote>\n<ul>\n<li>不做无用功；</li>\n<li>有非常清晰的目标，知道自己距离目标还有多远；</li>\n<li>懂得休息。</li>\n</ul>\n</blockquote>\n<p>尽管定义不同，但我能理解其想要传达的含义：不得过且过，不浑浑噩噩，不一辈子舒舒服服的躲在舒适区内。那“活在未来”又是指什么？我认为是一种前瞻性，主动积极的去预测自己的未来，活成自己想要成为的样子。</p>\n<p>那如何“活在未来”呢？我将文中的方法论总结为以下三点：</p>\n<blockquote>\n<ul>\n<li>预测：尊重事实，运用严谨的逻辑对未来做出预测；</li>\n<li>笃信：笃信这个预测一定能够实现；</li>\n<li>行动：用行动去验证自己的预测，在这个过程中，不断修正自己的想法。</li>\n</ul>\n</blockquote>\n<p>作者更是提出，</p>\n<blockquote>\n<p>甚至不需要预测，只需认真对待那些简单、朴素而又深刻的道理，若是经过思考认为它们是正确的，那么就要笃信，并且按照那些道理践行自己的生活。</p>\n</blockquote>\n<p>实际上，我对作者用的是“预测”而不是“目标”有点奇怪。“预测”指的是在现有信息的基础上，运用一定的方法对未来进行推测，以得出事情发展的过程和结果，作者使用“预测”这个词时更强调的是趋势。“目标”指的是想要达成的结果，是主观的一种意愿。我认为，“改为预测之后得出的目标”，会更合适一些，这提醒我在订目标的同时要注意是否与趋势趋同。</p>\n<p>最后，“活在未来”一定能成功吗？作者的观点是，“活在未来”不一定会成功，但总体而言是划算的，因为“活在未来”就如同一种投资，实质上是拿你的现在去换取你想要的未来。只要你尊重事实，相信逻辑，终归是会有所收获的。</p>\n<h2 id=\"观点记录\"><a href=\"#观点记录\" class=\"headerlink\" title=\"观点记录\"></a>观点记录</h2><blockquote>\n<ul>\n<li>基础知识固然重要，但是不要忽略对于自己专业趋势的研究。（这个观点提醒了我，储备计算机的基础知识固然重要，但把握计算机的浪潮，跟着这个浪潮前进也同样重要。）</li>\n<li>如果你希望成为什么样的人，不要等待任何时机的成熟，今天就按照那个标准要求自己。开始就“玩真的”，绝对不把自己当业余选手。只有开始就努力像专业人士一样生活，你才有机会最终真的那么生活。</li>\n<li>在成长的过程中，所有的人都是外人。在这个过程，正确的态度是：默认没有人鼓励你，把别人的鼓励当作额外赠送的。</li>\n<li>大部分人只停留在“想一想”的阶段，因为没有做过深入思考，因此无法笃信自己的预测。</li>\n</ul>\n</blockquote>\n<h2 id=\"践行情况\"><a href=\"#践行情况\" class=\"headerlink\" title=\"践行情况\"></a>践行情况</h2><p>“活在未来”或说制定长远目标，一直就是我所不擅长的，需要刻意去训练的能力。但这些天来，确实也有些收获，起码我想明白了自己这一辈子想要做成一些什么事情，接下来要做的工作是将其描绘得更细化和更具体。</p>"},{"layout":"post","title":"《通往财富自由之路》第03周读书笔记","date":"2016-09-11T09:16:17.000Z","comments":1,"_content":"\n李笑来《通往财富自由之路》读书笔记。第三周的主题为：你人生最重的枷锁是什么？\n\n<!--more-->\n\n## 主题阐述\n\n问题：你人生最重的枷锁是什么？作者给出的答案是：安全感。论据如下，\n> - 国外专门有学者研究动物眼睛的位置对动物进化的影响，得出了非常有意思的结论。那些全视角的动物，对环境的反应很灵敏，能及时的判断到危险的存在，繁衍能力很强，但却没有进化出智力。而那些非全视角的动物，却进化出了智能。全视角的动物，不知道自己的过去，也不知道自己的未来在何方，唯一目的就是活下去，它们被困在了永恒的当下。\n> - 互联网把我们拉回了全视角。足不出户知天下事，今天你为这个而担忧，明天你又为那个而操心，那跟全视角的动物还有什么分别？\n\n作者归结出以下两条结论，\n> 1. **追求百分之百的安全感，肯定会把自己困在永恒的当下**。\n> 1. **我们必须放弃一部分安全感，才能深入长期地观察、思考**。\n\n那些放弃了部分安全感的人，有更多的时间去思考，那道他们就没办法补全失去的这部分安全感？\n> **他们不孤立行动，选择与人合作，或者称之为有效社交**。\n\n基于以上的阐述，作者带领我们重新理解了以下几个概念，\n> - 合作与信任：本质上就是各自交出一部分安全感，交给对方保管。不要和没安全感的人合作，因为他会毁了你交出去的那部分安全感的。\n> - 勇敢：勇敢指的是在孑然一身的情况下，还能够主动放弃一些安全感。勇敢是可以习得的，只要你能主动放弃安全感，不用很多，一点点就够了。（百度词条对于“勇敢”的定义是：不怕危险和困难，不退缩）\n> - 大智若愚：在作者看来，“若愚”更像是原因，“大智”更像是结果。正是因为在某些领域选择了“若愚”，才能在一些领域做到“大智”，这是主动选择的结果，同样意味着需要在一些领域放弃安全感。\n\n## 问答记录\n\n该不该刷微信？\n> - 刷微信的目的是为了不漏过重要信息，而不漏过重要信息是为了维持人际关系。但维持人际关系，**价值交换才是核心**。如果你不能够给别人带来价值，微信上再紧密的互动又有什么作用？所以关键是提高自己的价值。\n> - 朋友圈几乎都是每个人精选之后发上去的状态，有句话“朋友圈的每个人都过得比我好”就说明了这一点，这跟看新闻联播没什么分别。\n> - **你花多少时间在朋友圈，关键要看你朋友圈的质量如何**，如果噪音远大于价值，那不是违背了注重注意力的原则？\n\n觉得自己的专业不好？\n> - 有一个专业人人喜欢，叫做“别人的专业”。若是笃定自己专业不好，那就赶紧申请换专业，但前提是得先把自己专业学好，否则你没资格申请。最怕的是，你不做选择，然后一味抱怨，把时间白白浪费。\n\n有点完美主义者，一直不敢迈出第一步该怎么办？\n> - 完美主义者有个特性：脆弱。**没人能够一开始就做好**，不动手你永远不知道自己行不行。\n\n我该不该顺从父母帮我做的选择？\n> - 你是顺从父母还是顺从**他们带给你的安全感**？如果你的选择真是发自内心，不妨以此作为检验，即使失败也能扛起责任。\n\n特别好面子该怎么办？\n> - 完全不好面子是不可能的，太好面子是因为分不清**别人眼中“好形象”**带来的快感和**自身进步**带来的喜悦哪个更强烈，关键是要切身体会进步带来的喜悦。\n\n有条评论给了我很大的启发：**家长对于安全感的追求会影响孩子一辈子**。他可能会潜意识认为这个世界是危险的，做任何决策都把安全感列为较高权重，不敢去尝试和冒险；他们也可能知道一些危险不可触碰，但相比前一类孩子更勇于去尝试。\n\n## 践行情况\n\n- 结合最近反复听到的一个词“刻意练习”，一有时间就对自己进行概念训练，不断试图去想清楚一个概念；\n- 我喜欢写字，而且想成为简书的签约作者，不试试怎么知道不行呢？买了一本《文心》开始学习写作。\n- 想动手重构通信程序已经很久了，起码迈出了第一步——读优秀C++程序的源码。\n- 知道自己不擅长计划，但逼着自己去思考计划和做计划。","source":"_posts/2016-09-11-security-sense.markdown","raw":"---\nlayout: post\ntitle: \"《通往财富自由之路》第03周读书笔记\"\ndate: 2016-09-11 17:16:17 +0800\ncomments: true\ncategories: ['读书笔记']\ntags: ['读书', '李笑来', '随想']\n---\n\n李笑来《通往财富自由之路》读书笔记。第三周的主题为：你人生最重的枷锁是什么？\n\n<!--more-->\n\n## 主题阐述\n\n问题：你人生最重的枷锁是什么？作者给出的答案是：安全感。论据如下，\n> - 国外专门有学者研究动物眼睛的位置对动物进化的影响，得出了非常有意思的结论。那些全视角的动物，对环境的反应很灵敏，能及时的判断到危险的存在，繁衍能力很强，但却没有进化出智力。而那些非全视角的动物，却进化出了智能。全视角的动物，不知道自己的过去，也不知道自己的未来在何方，唯一目的就是活下去，它们被困在了永恒的当下。\n> - 互联网把我们拉回了全视角。足不出户知天下事，今天你为这个而担忧，明天你又为那个而操心，那跟全视角的动物还有什么分别？\n\n作者归结出以下两条结论，\n> 1. **追求百分之百的安全感，肯定会把自己困在永恒的当下**。\n> 1. **我们必须放弃一部分安全感，才能深入长期地观察、思考**。\n\n那些放弃了部分安全感的人，有更多的时间去思考，那道他们就没办法补全失去的这部分安全感？\n> **他们不孤立行动，选择与人合作，或者称之为有效社交**。\n\n基于以上的阐述，作者带领我们重新理解了以下几个概念，\n> - 合作与信任：本质上就是各自交出一部分安全感，交给对方保管。不要和没安全感的人合作，因为他会毁了你交出去的那部分安全感的。\n> - 勇敢：勇敢指的是在孑然一身的情况下，还能够主动放弃一些安全感。勇敢是可以习得的，只要你能主动放弃安全感，不用很多，一点点就够了。（百度词条对于“勇敢”的定义是：不怕危险和困难，不退缩）\n> - 大智若愚：在作者看来，“若愚”更像是原因，“大智”更像是结果。正是因为在某些领域选择了“若愚”，才能在一些领域做到“大智”，这是主动选择的结果，同样意味着需要在一些领域放弃安全感。\n\n## 问答记录\n\n该不该刷微信？\n> - 刷微信的目的是为了不漏过重要信息，而不漏过重要信息是为了维持人际关系。但维持人际关系，**价值交换才是核心**。如果你不能够给别人带来价值，微信上再紧密的互动又有什么作用？所以关键是提高自己的价值。\n> - 朋友圈几乎都是每个人精选之后发上去的状态，有句话“朋友圈的每个人都过得比我好”就说明了这一点，这跟看新闻联播没什么分别。\n> - **你花多少时间在朋友圈，关键要看你朋友圈的质量如何**，如果噪音远大于价值，那不是违背了注重注意力的原则？\n\n觉得自己的专业不好？\n> - 有一个专业人人喜欢，叫做“别人的专业”。若是笃定自己专业不好，那就赶紧申请换专业，但前提是得先把自己专业学好，否则你没资格申请。最怕的是，你不做选择，然后一味抱怨，把时间白白浪费。\n\n有点完美主义者，一直不敢迈出第一步该怎么办？\n> - 完美主义者有个特性：脆弱。**没人能够一开始就做好**，不动手你永远不知道自己行不行。\n\n我该不该顺从父母帮我做的选择？\n> - 你是顺从父母还是顺从**他们带给你的安全感**？如果你的选择真是发自内心，不妨以此作为检验，即使失败也能扛起责任。\n\n特别好面子该怎么办？\n> - 完全不好面子是不可能的，太好面子是因为分不清**别人眼中“好形象”**带来的快感和**自身进步**带来的喜悦哪个更强烈，关键是要切身体会进步带来的喜悦。\n\n有条评论给了我很大的启发：**家长对于安全感的追求会影响孩子一辈子**。他可能会潜意识认为这个世界是危险的，做任何决策都把安全感列为较高权重，不敢去尝试和冒险；他们也可能知道一些危险不可触碰，但相比前一类孩子更勇于去尝试。\n\n## 践行情况\n\n- 结合最近反复听到的一个词“刻意练习”，一有时间就对自己进行概念训练，不断试图去想清楚一个概念；\n- 我喜欢写字，而且想成为简书的签约作者，不试试怎么知道不行呢？买了一本《文心》开始学习写作。\n- 想动手重构通信程序已经很久了，起码迈出了第一步——读优秀C++程序的源码。\n- 知道自己不擅长计划，但逼着自己去思考计划和做计划。","slug":"security-sense","published":1,"updated":"2017-04-09T14:37:18.000Z","photos":[],"link":"","_id":"cjlza6mak0045pgupnnjtyysz","content":"<p>李笑来《通往财富自由之路》读书笔记。第三周的主题为：你人生最重的枷锁是什么？</p>\n<a id=\"more\"></a>\n<h2 id=\"主题阐述\"><a href=\"#主题阐述\" class=\"headerlink\" title=\"主题阐述\"></a>主题阐述</h2><p>问题：你人生最重的枷锁是什么？作者给出的答案是：安全感。论据如下，</p>\n<blockquote>\n<ul>\n<li>国外专门有学者研究动物眼睛的位置对动物进化的影响，得出了非常有意思的结论。那些全视角的动物，对环境的反应很灵敏，能及时的判断到危险的存在，繁衍能力很强，但却没有进化出智力。而那些非全视角的动物，却进化出了智能。全视角的动物，不知道自己的过去，也不知道自己的未来在何方，唯一目的就是活下去，它们被困在了永恒的当下。</li>\n<li>互联网把我们拉回了全视角。足不出户知天下事，今天你为这个而担忧，明天你又为那个而操心，那跟全视角的动物还有什么分别？</li>\n</ul>\n</blockquote>\n<p>作者归结出以下两条结论，</p>\n<blockquote>\n<ol>\n<li><strong>追求百分之百的安全感，肯定会把自己困在永恒的当下</strong>。</li>\n<li><strong>我们必须放弃一部分安全感，才能深入长期地观察、思考</strong>。</li>\n</ol>\n</blockquote>\n<p>那些放弃了部分安全感的人，有更多的时间去思考，那道他们就没办法补全失去的这部分安全感？</p>\n<blockquote>\n<p><strong>他们不孤立行动，选择与人合作，或者称之为有效社交</strong>。</p>\n</blockquote>\n<p>基于以上的阐述，作者带领我们重新理解了以下几个概念，</p>\n<blockquote>\n<ul>\n<li>合作与信任：本质上就是各自交出一部分安全感，交给对方保管。不要和没安全感的人合作，因为他会毁了你交出去的那部分安全感的。</li>\n<li>勇敢：勇敢指的是在孑然一身的情况下，还能够主动放弃一些安全感。勇敢是可以习得的，只要你能主动放弃安全感，不用很多，一点点就够了。（百度词条对于“勇敢”的定义是：不怕危险和困难，不退缩）</li>\n<li>大智若愚：在作者看来，“若愚”更像是原因，“大智”更像是结果。正是因为在某些领域选择了“若愚”，才能在一些领域做到“大智”，这是主动选择的结果，同样意味着需要在一些领域放弃安全感。</li>\n</ul>\n</blockquote>\n<h2 id=\"问答记录\"><a href=\"#问答记录\" class=\"headerlink\" title=\"问答记录\"></a>问答记录</h2><p>该不该刷微信？</p>\n<blockquote>\n<ul>\n<li>刷微信的目的是为了不漏过重要信息，而不漏过重要信息是为了维持人际关系。但维持人际关系，<strong>价值交换才是核心</strong>。如果你不能够给别人带来价值，微信上再紧密的互动又有什么作用？所以关键是提高自己的价值。</li>\n<li>朋友圈几乎都是每个人精选之后发上去的状态，有句话“朋友圈的每个人都过得比我好”就说明了这一点，这跟看新闻联播没什么分别。</li>\n<li><strong>你花多少时间在朋友圈，关键要看你朋友圈的质量如何</strong>，如果噪音远大于价值，那不是违背了注重注意力的原则？</li>\n</ul>\n</blockquote>\n<p>觉得自己的专业不好？</p>\n<blockquote>\n<ul>\n<li>有一个专业人人喜欢，叫做“别人的专业”。若是笃定自己专业不好，那就赶紧申请换专业，但前提是得先把自己专业学好，否则你没资格申请。最怕的是，你不做选择，然后一味抱怨，把时间白白浪费。</li>\n</ul>\n</blockquote>\n<p>有点完美主义者，一直不敢迈出第一步该怎么办？</p>\n<blockquote>\n<ul>\n<li>完美主义者有个特性：脆弱。<strong>没人能够一开始就做好</strong>，不动手你永远不知道自己行不行。</li>\n</ul>\n</blockquote>\n<p>我该不该顺从父母帮我做的选择？</p>\n<blockquote>\n<ul>\n<li>你是顺从父母还是顺从<strong>他们带给你的安全感</strong>？如果你的选择真是发自内心，不妨以此作为检验，即使失败也能扛起责任。</li>\n</ul>\n</blockquote>\n<p>特别好面子该怎么办？</p>\n<blockquote>\n<ul>\n<li>完全不好面子是不可能的，太好面子是因为分不清<strong>别人眼中“好形象”</strong>带来的快感和<strong>自身进步</strong>带来的喜悦哪个更强烈，关键是要切身体会进步带来的喜悦。</li>\n</ul>\n</blockquote>\n<p>有条评论给了我很大的启发：<strong>家长对于安全感的追求会影响孩子一辈子</strong>。他可能会潜意识认为这个世界是危险的，做任何决策都把安全感列为较高权重，不敢去尝试和冒险；他们也可能知道一些危险不可触碰，但相比前一类孩子更勇于去尝试。</p>\n<h2 id=\"践行情况\"><a href=\"#践行情况\" class=\"headerlink\" title=\"践行情况\"></a>践行情况</h2><ul>\n<li>结合最近反复听到的一个词“刻意练习”，一有时间就对自己进行概念训练，不断试图去想清楚一个概念；</li>\n<li>我喜欢写字，而且想成为简书的签约作者，不试试怎么知道不行呢？买了一本《文心》开始学习写作。</li>\n<li>想动手重构通信程序已经很久了，起码迈出了第一步——读优秀C++程序的源码。</li>\n<li>知道自己不擅长计划，但逼着自己去思考计划和做计划。</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>李笑来《通往财富自由之路》读书笔记。第三周的主题为：你人生最重的枷锁是什么？</p>","more":"<h2 id=\"主题阐述\"><a href=\"#主题阐述\" class=\"headerlink\" title=\"主题阐述\"></a>主题阐述</h2><p>问题：你人生最重的枷锁是什么？作者给出的答案是：安全感。论据如下，</p>\n<blockquote>\n<ul>\n<li>国外专门有学者研究动物眼睛的位置对动物进化的影响，得出了非常有意思的结论。那些全视角的动物，对环境的反应很灵敏，能及时的判断到危险的存在，繁衍能力很强，但却没有进化出智力。而那些非全视角的动物，却进化出了智能。全视角的动物，不知道自己的过去，也不知道自己的未来在何方，唯一目的就是活下去，它们被困在了永恒的当下。</li>\n<li>互联网把我们拉回了全视角。足不出户知天下事，今天你为这个而担忧，明天你又为那个而操心，那跟全视角的动物还有什么分别？</li>\n</ul>\n</blockquote>\n<p>作者归结出以下两条结论，</p>\n<blockquote>\n<ol>\n<li><strong>追求百分之百的安全感，肯定会把自己困在永恒的当下</strong>。</li>\n<li><strong>我们必须放弃一部分安全感，才能深入长期地观察、思考</strong>。</li>\n</ol>\n</blockquote>\n<p>那些放弃了部分安全感的人，有更多的时间去思考，那道他们就没办法补全失去的这部分安全感？</p>\n<blockquote>\n<p><strong>他们不孤立行动，选择与人合作，或者称之为有效社交</strong>。</p>\n</blockquote>\n<p>基于以上的阐述，作者带领我们重新理解了以下几个概念，</p>\n<blockquote>\n<ul>\n<li>合作与信任：本质上就是各自交出一部分安全感，交给对方保管。不要和没安全感的人合作，因为他会毁了你交出去的那部分安全感的。</li>\n<li>勇敢：勇敢指的是在孑然一身的情况下，还能够主动放弃一些安全感。勇敢是可以习得的，只要你能主动放弃安全感，不用很多，一点点就够了。（百度词条对于“勇敢”的定义是：不怕危险和困难，不退缩）</li>\n<li>大智若愚：在作者看来，“若愚”更像是原因，“大智”更像是结果。正是因为在某些领域选择了“若愚”，才能在一些领域做到“大智”，这是主动选择的结果，同样意味着需要在一些领域放弃安全感。</li>\n</ul>\n</blockquote>\n<h2 id=\"问答记录\"><a href=\"#问答记录\" class=\"headerlink\" title=\"问答记录\"></a>问答记录</h2><p>该不该刷微信？</p>\n<blockquote>\n<ul>\n<li>刷微信的目的是为了不漏过重要信息，而不漏过重要信息是为了维持人际关系。但维持人际关系，<strong>价值交换才是核心</strong>。如果你不能够给别人带来价值，微信上再紧密的互动又有什么作用？所以关键是提高自己的价值。</li>\n<li>朋友圈几乎都是每个人精选之后发上去的状态，有句话“朋友圈的每个人都过得比我好”就说明了这一点，这跟看新闻联播没什么分别。</li>\n<li><strong>你花多少时间在朋友圈，关键要看你朋友圈的质量如何</strong>，如果噪音远大于价值，那不是违背了注重注意力的原则？</li>\n</ul>\n</blockquote>\n<p>觉得自己的专业不好？</p>\n<blockquote>\n<ul>\n<li>有一个专业人人喜欢，叫做“别人的专业”。若是笃定自己专业不好，那就赶紧申请换专业，但前提是得先把自己专业学好，否则你没资格申请。最怕的是，你不做选择，然后一味抱怨，把时间白白浪费。</li>\n</ul>\n</blockquote>\n<p>有点完美主义者，一直不敢迈出第一步该怎么办？</p>\n<blockquote>\n<ul>\n<li>完美主义者有个特性：脆弱。<strong>没人能够一开始就做好</strong>，不动手你永远不知道自己行不行。</li>\n</ul>\n</blockquote>\n<p>我该不该顺从父母帮我做的选择？</p>\n<blockquote>\n<ul>\n<li>你是顺从父母还是顺从<strong>他们带给你的安全感</strong>？如果你的选择真是发自内心，不妨以此作为检验，即使失败也能扛起责任。</li>\n</ul>\n</blockquote>\n<p>特别好面子该怎么办？</p>\n<blockquote>\n<ul>\n<li>完全不好面子是不可能的，太好面子是因为分不清<strong>别人眼中“好形象”</strong>带来的快感和<strong>自身进步</strong>带来的喜悦哪个更强烈，关键是要切身体会进步带来的喜悦。</li>\n</ul>\n</blockquote>\n<p>有条评论给了我很大的启发：<strong>家长对于安全感的追求会影响孩子一辈子</strong>。他可能会潜意识认为这个世界是危险的，做任何决策都把安全感列为较高权重，不敢去尝试和冒险；他们也可能知道一些危险不可触碰，但相比前一类孩子更勇于去尝试。</p>\n<h2 id=\"践行情况\"><a href=\"#践行情况\" class=\"headerlink\" title=\"践行情况\"></a>践行情况</h2><ul>\n<li>结合最近反复听到的一个词“刻意练习”，一有时间就对自己进行概念训练，不断试图去想清楚一个概念；</li>\n<li>我喜欢写字，而且想成为简书的签约作者，不试试怎么知道不行呢？买了一本《文心》开始学习写作。</li>\n<li>想动手重构通信程序已经很久了，起码迈出了第一步——读优秀C++程序的源码。</li>\n<li>知道自己不擅长计划，但逼着自己去思考计划和做计划。</li>\n</ul>"},{"title":"「5分钟商学院」002|不要为打翻的牛奶哭泣","date":"2017-04-22T13:35:52.000Z","comments":1,"_content":"\n得到专栏刘润《5分钟商学院》第二课的读书笔记。\n\n<!--more-->\n\n## 概念：沉没成本\n\n> 刘润：人们在决定是否做一件事的时候，不仅仅是看这件事情未来对他是不是有好处，同时也会注意自己是不是在过去，已经在这件事情上面有过投入，这是一种非常有趣而顽固的非理性的心理，我们称之为叫做沉没成本，也叫协和效应。\n\n> 维基百科：沉没成本代指**已经付出不可收回**的成本。\n\n> 张五常：**已经付出的资源不再计入成本**。\n\n## 沉没成本的由来\n\n> 维基百科：在经济学和商业决策制定过程中，会用到“沉没成本（Sunk Cost）”（或称沉淀成本或既定成本）的概念，代指已经付出且不可收回的成本。沉没成本常用来和可变成本（Prospective costs）作比较，可变成本可以被改变，而沉没成本则不能被改变。在微观经济学理论中，**做决策时仅需要考虑可变成本。如果同时考虑到沉没成本（这被微观经济学理论认为是错误的），那结论就不是纯粹基于事物的价值作出的。**\n\n## 沉没成本的运用\n\n> 刘润：很多商家会在顾客稍微有点购买欲时收取一点点订金，这样即使客户购买欲望消失，为了不损失那一点点订金，会更倾向于购买商品。\n\n> 刘润：举办盛大婚礼以及生育小孩，投入大量时间、精力、金钱等，以后因为一次吵架闹离婚的概率就比较低，因为双方都投入巨多。\n\n> 读者：房地产商开盘时先让客户去认筹，交多少现金抵多少万，过几天再邀请你去参加发布会，到现场发抵扣卷而不是直接打折，既让你投入资本，又让你投入时间和注意力，这都是套路啊！\n\n> 读者：最近在找房地产公司购买二手房，几天时间带我看了6套房，感觉一个比一个好，昨天确定了最优的那个，却被我爸否定了，他坚持要去别的区买。可能是因为在我身上投入太多，中介公司给我找了个最优性价比的房子，我爸爸一下子满意了。我想这是中介公司的沉没成本突然变高导致的。\n> 刘润：反过来说，你也投入了很大的沉没成本，会更倾向于和他成交。\n\n## 与沉没成本相关的概念\n\n与「沉没成本」相关的几个概念是「损失规避」、「沉没成本悖论」和「机会成本」。\n\n> 损失规避：人们面对同样数量的收益和损失时，认为损失令他们更加难受。损失带来的负效用为收益正效用的2至2.5倍。试验表明，人们倾向于无风险获得3000刀，而不会选择有80%的机会赢得4000刀的赌博。涉及收益时，人们表现为风险厌恶。\n\n然而正是这种「损失规避」的风险厌恶心理，会让人越陷越深，不断的追加成本。\n\n> 沉没成本悖论：当有更好的投资项目时，对亏损账户进行额外投资的决策被称为沉没成本悖论。\n\n我想，「损失规避」导致的风险厌恶心理，便是此悖论内在的原因。这个概念告诉我们判断到趋势不对时，要**及时止损**，而不是继续追加成本。\n\n> 机会成本：做出一个选择，损失另外一个选项的成本。比如你选择年薪12万的A工作，放弃年薪18万的B工作，从当下年薪来讲你的机会成本是6万。\n\n机会成本告诉我们，必须在选择时确定**得到的比机会成本多**，否则就亏本了。\n\n## 小结\n\n> 刘润：（1）沉没成本其实没有好坏的区别，可以把它叫做既定成本，或是已发生的花费；（2）基于人类心理的这种倾向，**有目的性制造对方的沉没成本，有利于提高交易的成功率**。反过来说，如果你能客服沉没成本带来的心理偏见，不被其左右，将有可能做出更加理性的决策。\n\n然而，我们之所以继续追加成本，更多是因为「不确定」。如果你清清楚楚知道两个选项的差别，选择是轻而易举的事情。因此，**提升自己的判断力**才是关键啊！\n","source":"_posts/2017-04-22-dont-cry-over-spilt-milk.md","raw":"---\ntitle: 「5分钟商学院」002|不要为打翻的牛奶哭泣\ndate: 2017-04-22 21:35:52\ntags: ['5分钟商学院', '刘润', '商业知识']\ncomments: true\ncategories: ['读书笔记']\n---\n\n得到专栏刘润《5分钟商学院》第二课的读书笔记。\n\n<!--more-->\n\n## 概念：沉没成本\n\n> 刘润：人们在决定是否做一件事的时候，不仅仅是看这件事情未来对他是不是有好处，同时也会注意自己是不是在过去，已经在这件事情上面有过投入，这是一种非常有趣而顽固的非理性的心理，我们称之为叫做沉没成本，也叫协和效应。\n\n> 维基百科：沉没成本代指**已经付出不可收回**的成本。\n\n> 张五常：**已经付出的资源不再计入成本**。\n\n## 沉没成本的由来\n\n> 维基百科：在经济学和商业决策制定过程中，会用到“沉没成本（Sunk Cost）”（或称沉淀成本或既定成本）的概念，代指已经付出且不可收回的成本。沉没成本常用来和可变成本（Prospective costs）作比较，可变成本可以被改变，而沉没成本则不能被改变。在微观经济学理论中，**做决策时仅需要考虑可变成本。如果同时考虑到沉没成本（这被微观经济学理论认为是错误的），那结论就不是纯粹基于事物的价值作出的。**\n\n## 沉没成本的运用\n\n> 刘润：很多商家会在顾客稍微有点购买欲时收取一点点订金，这样即使客户购买欲望消失，为了不损失那一点点订金，会更倾向于购买商品。\n\n> 刘润：举办盛大婚礼以及生育小孩，投入大量时间、精力、金钱等，以后因为一次吵架闹离婚的概率就比较低，因为双方都投入巨多。\n\n> 读者：房地产商开盘时先让客户去认筹，交多少现金抵多少万，过几天再邀请你去参加发布会，到现场发抵扣卷而不是直接打折，既让你投入资本，又让你投入时间和注意力，这都是套路啊！\n\n> 读者：最近在找房地产公司购买二手房，几天时间带我看了6套房，感觉一个比一个好，昨天确定了最优的那个，却被我爸否定了，他坚持要去别的区买。可能是因为在我身上投入太多，中介公司给我找了个最优性价比的房子，我爸爸一下子满意了。我想这是中介公司的沉没成本突然变高导致的。\n> 刘润：反过来说，你也投入了很大的沉没成本，会更倾向于和他成交。\n\n## 与沉没成本相关的概念\n\n与「沉没成本」相关的几个概念是「损失规避」、「沉没成本悖论」和「机会成本」。\n\n> 损失规避：人们面对同样数量的收益和损失时，认为损失令他们更加难受。损失带来的负效用为收益正效用的2至2.5倍。试验表明，人们倾向于无风险获得3000刀，而不会选择有80%的机会赢得4000刀的赌博。涉及收益时，人们表现为风险厌恶。\n\n然而正是这种「损失规避」的风险厌恶心理，会让人越陷越深，不断的追加成本。\n\n> 沉没成本悖论：当有更好的投资项目时，对亏损账户进行额外投资的决策被称为沉没成本悖论。\n\n我想，「损失规避」导致的风险厌恶心理，便是此悖论内在的原因。这个概念告诉我们判断到趋势不对时，要**及时止损**，而不是继续追加成本。\n\n> 机会成本：做出一个选择，损失另外一个选项的成本。比如你选择年薪12万的A工作，放弃年薪18万的B工作，从当下年薪来讲你的机会成本是6万。\n\n机会成本告诉我们，必须在选择时确定**得到的比机会成本多**，否则就亏本了。\n\n## 小结\n\n> 刘润：（1）沉没成本其实没有好坏的区别，可以把它叫做既定成本，或是已发生的花费；（2）基于人类心理的这种倾向，**有目的性制造对方的沉没成本，有利于提高交易的成功率**。反过来说，如果你能客服沉没成本带来的心理偏见，不被其左右，将有可能做出更加理性的决策。\n\n然而，我们之所以继续追加成本，更多是因为「不确定」。如果你清清楚楚知道两个选项的差别，选择是轻而易举的事情。因此，**提升自己的判断力**才是关键啊！\n","slug":"dont-cry-over-spilt-milk","published":1,"updated":"2017-06-03T07:00:12.000Z","layout":"post","photos":[],"link":"","_id":"cjlza6mal0047pgup6fvhxccf","content":"<p>得到专栏刘润《5分钟商学院》第二课的读书笔记。</p>\n<a id=\"more\"></a>\n<h2 id=\"概念：沉没成本\"><a href=\"#概念：沉没成本\" class=\"headerlink\" title=\"概念：沉没成本\"></a>概念：沉没成本</h2><blockquote>\n<p>刘润：人们在决定是否做一件事的时候，不仅仅是看这件事情未来对他是不是有好处，同时也会注意自己是不是在过去，已经在这件事情上面有过投入，这是一种非常有趣而顽固的非理性的心理，我们称之为叫做沉没成本，也叫协和效应。</p>\n</blockquote>\n<blockquote>\n<p>维基百科：沉没成本代指<strong>已经付出不可收回</strong>的成本。</p>\n</blockquote>\n<blockquote>\n<p>张五常：<strong>已经付出的资源不再计入成本</strong>。</p>\n</blockquote>\n<h2 id=\"沉没成本的由来\"><a href=\"#沉没成本的由来\" class=\"headerlink\" title=\"沉没成本的由来\"></a>沉没成本的由来</h2><blockquote>\n<p>维基百科：在经济学和商业决策制定过程中，会用到“沉没成本（Sunk Cost）”（或称沉淀成本或既定成本）的概念，代指已经付出且不可收回的成本。沉没成本常用来和可变成本（Prospective costs）作比较，可变成本可以被改变，而沉没成本则不能被改变。在微观经济学理论中，<strong>做决策时仅需要考虑可变成本。如果同时考虑到沉没成本（这被微观经济学理论认为是错误的），那结论就不是纯粹基于事物的价值作出的。</strong></p>\n</blockquote>\n<h2 id=\"沉没成本的运用\"><a href=\"#沉没成本的运用\" class=\"headerlink\" title=\"沉没成本的运用\"></a>沉没成本的运用</h2><blockquote>\n<p>刘润：很多商家会在顾客稍微有点购买欲时收取一点点订金，这样即使客户购买欲望消失，为了不损失那一点点订金，会更倾向于购买商品。</p>\n</blockquote>\n<blockquote>\n<p>刘润：举办盛大婚礼以及生育小孩，投入大量时间、精力、金钱等，以后因为一次吵架闹离婚的概率就比较低，因为双方都投入巨多。</p>\n</blockquote>\n<blockquote>\n<p>读者：房地产商开盘时先让客户去认筹，交多少现金抵多少万，过几天再邀请你去参加发布会，到现场发抵扣卷而不是直接打折，既让你投入资本，又让你投入时间和注意力，这都是套路啊！</p>\n</blockquote>\n<blockquote>\n<p>读者：最近在找房地产公司购买二手房，几天时间带我看了6套房，感觉一个比一个好，昨天确定了最优的那个，却被我爸否定了，他坚持要去别的区买。可能是因为在我身上投入太多，中介公司给我找了个最优性价比的房子，我爸爸一下子满意了。我想这是中介公司的沉没成本突然变高导致的。<br>刘润：反过来说，你也投入了很大的沉没成本，会更倾向于和他成交。</p>\n</blockquote>\n<h2 id=\"与沉没成本相关的概念\"><a href=\"#与沉没成本相关的概念\" class=\"headerlink\" title=\"与沉没成本相关的概念\"></a>与沉没成本相关的概念</h2><p>与「沉没成本」相关的几个概念是「损失规避」、「沉没成本悖论」和「机会成本」。</p>\n<blockquote>\n<p>损失规避：人们面对同样数量的收益和损失时，认为损失令他们更加难受。损失带来的负效用为收益正效用的2至2.5倍。试验表明，人们倾向于无风险获得3000刀，而不会选择有80%的机会赢得4000刀的赌博。涉及收益时，人们表现为风险厌恶。</p>\n</blockquote>\n<p>然而正是这种「损失规避」的风险厌恶心理，会让人越陷越深，不断的追加成本。</p>\n<blockquote>\n<p>沉没成本悖论：当有更好的投资项目时，对亏损账户进行额外投资的决策被称为沉没成本悖论。</p>\n</blockquote>\n<p>我想，「损失规避」导致的风险厌恶心理，便是此悖论内在的原因。这个概念告诉我们判断到趋势不对时，要<strong>及时止损</strong>，而不是继续追加成本。</p>\n<blockquote>\n<p>机会成本：做出一个选择，损失另外一个选项的成本。比如你选择年薪12万的A工作，放弃年薪18万的B工作，从当下年薪来讲你的机会成本是6万。</p>\n</blockquote>\n<p>机会成本告诉我们，必须在选择时确定<strong>得到的比机会成本多</strong>，否则就亏本了。</p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><blockquote>\n<p>刘润：（1）沉没成本其实没有好坏的区别，可以把它叫做既定成本，或是已发生的花费；（2）基于人类心理的这种倾向，<strong>有目的性制造对方的沉没成本，有利于提高交易的成功率</strong>。反过来说，如果你能客服沉没成本带来的心理偏见，不被其左右，将有可能做出更加理性的决策。</p>\n</blockquote>\n<p>然而，我们之所以继续追加成本，更多是因为「不确定」。如果你清清楚楚知道两个选项的差别，选择是轻而易举的事情。因此，<strong>提升自己的判断力</strong>才是关键啊！</p>\n","site":{"data":{}},"excerpt":"<p>得到专栏刘润《5分钟商学院》第二课的读书笔记。</p>","more":"<h2 id=\"概念：沉没成本\"><a href=\"#概念：沉没成本\" class=\"headerlink\" title=\"概念：沉没成本\"></a>概念：沉没成本</h2><blockquote>\n<p>刘润：人们在决定是否做一件事的时候，不仅仅是看这件事情未来对他是不是有好处，同时也会注意自己是不是在过去，已经在这件事情上面有过投入，这是一种非常有趣而顽固的非理性的心理，我们称之为叫做沉没成本，也叫协和效应。</p>\n</blockquote>\n<blockquote>\n<p>维基百科：沉没成本代指<strong>已经付出不可收回</strong>的成本。</p>\n</blockquote>\n<blockquote>\n<p>张五常：<strong>已经付出的资源不再计入成本</strong>。</p>\n</blockquote>\n<h2 id=\"沉没成本的由来\"><a href=\"#沉没成本的由来\" class=\"headerlink\" title=\"沉没成本的由来\"></a>沉没成本的由来</h2><blockquote>\n<p>维基百科：在经济学和商业决策制定过程中，会用到“沉没成本（Sunk Cost）”（或称沉淀成本或既定成本）的概念，代指已经付出且不可收回的成本。沉没成本常用来和可变成本（Prospective costs）作比较，可变成本可以被改变，而沉没成本则不能被改变。在微观经济学理论中，<strong>做决策时仅需要考虑可变成本。如果同时考虑到沉没成本（这被微观经济学理论认为是错误的），那结论就不是纯粹基于事物的价值作出的。</strong></p>\n</blockquote>\n<h2 id=\"沉没成本的运用\"><a href=\"#沉没成本的运用\" class=\"headerlink\" title=\"沉没成本的运用\"></a>沉没成本的运用</h2><blockquote>\n<p>刘润：很多商家会在顾客稍微有点购买欲时收取一点点订金，这样即使客户购买欲望消失，为了不损失那一点点订金，会更倾向于购买商品。</p>\n</blockquote>\n<blockquote>\n<p>刘润：举办盛大婚礼以及生育小孩，投入大量时间、精力、金钱等，以后因为一次吵架闹离婚的概率就比较低，因为双方都投入巨多。</p>\n</blockquote>\n<blockquote>\n<p>读者：房地产商开盘时先让客户去认筹，交多少现金抵多少万，过几天再邀请你去参加发布会，到现场发抵扣卷而不是直接打折，既让你投入资本，又让你投入时间和注意力，这都是套路啊！</p>\n</blockquote>\n<blockquote>\n<p>读者：最近在找房地产公司购买二手房，几天时间带我看了6套房，感觉一个比一个好，昨天确定了最优的那个，却被我爸否定了，他坚持要去别的区买。可能是因为在我身上投入太多，中介公司给我找了个最优性价比的房子，我爸爸一下子满意了。我想这是中介公司的沉没成本突然变高导致的。<br>刘润：反过来说，你也投入了很大的沉没成本，会更倾向于和他成交。</p>\n</blockquote>\n<h2 id=\"与沉没成本相关的概念\"><a href=\"#与沉没成本相关的概念\" class=\"headerlink\" title=\"与沉没成本相关的概念\"></a>与沉没成本相关的概念</h2><p>与「沉没成本」相关的几个概念是「损失规避」、「沉没成本悖论」和「机会成本」。</p>\n<blockquote>\n<p>损失规避：人们面对同样数量的收益和损失时，认为损失令他们更加难受。损失带来的负效用为收益正效用的2至2.5倍。试验表明，人们倾向于无风险获得3000刀，而不会选择有80%的机会赢得4000刀的赌博。涉及收益时，人们表现为风险厌恶。</p>\n</blockquote>\n<p>然而正是这种「损失规避」的风险厌恶心理，会让人越陷越深，不断的追加成本。</p>\n<blockquote>\n<p>沉没成本悖论：当有更好的投资项目时，对亏损账户进行额外投资的决策被称为沉没成本悖论。</p>\n</blockquote>\n<p>我想，「损失规避」导致的风险厌恶心理，便是此悖论内在的原因。这个概念告诉我们判断到趋势不对时，要<strong>及时止损</strong>，而不是继续追加成本。</p>\n<blockquote>\n<p>机会成本：做出一个选择，损失另外一个选项的成本。比如你选择年薪12万的A工作，放弃年薪18万的B工作，从当下年薪来讲你的机会成本是6万。</p>\n</blockquote>\n<p>机会成本告诉我们，必须在选择时确定<strong>得到的比机会成本多</strong>，否则就亏本了。</p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><blockquote>\n<p>刘润：（1）沉没成本其实没有好坏的区别，可以把它叫做既定成本，或是已发生的花费；（2）基于人类心理的这种倾向，<strong>有目的性制造对方的沉没成本，有利于提高交易的成功率</strong>。反过来说，如果你能客服沉没成本带来的心理偏见，不被其左右，将有可能做出更加理性的决策。</p>\n</blockquote>\n<p>然而，我们之所以继续追加成本，更多是因为「不确定」。如果你清清楚楚知道两个选项的差别，选择是轻而易举的事情。因此，<strong>提升自己的判断力</strong>才是关键啊！</p>"},{"title":"2015与2016年总结","date":"2017-04-14T13:15:24.000Z","comments":1,"_content":"\n> 若想预见数学的未来，恰当的方式是研究它的历史和现状。——庞加莱\n\n<!-- more -->\n\n回顾已过去的两年，是为了改进做得不好的，以及把优秀的继续发扬光大。依据黑格尔的理论，理性是动态发展的，有正便有反，发展到一定程度正反合在一起，便又开始了新一轮的正反合。对于逝去的过往，同样符合这个理论。\n\n原本已经写了一份年总结的，但不知怎的被我误删，而且使用恢复软件也找不回来，逼得我不得不重写。然而正是因为这次更为认真的重写，我得到了更多。\n\n## 「职业发展/自我实现」\n\n### 正反\n\n两年时间，把在NQ时的云平台系列产品重新造了出来，当然有相当大一部分是复用。我对这个结果不满意，两年时间只做了这么点事对于我和公司都是浪费。导致这个结果的原因是什么？\n- 需求有变化实属正常，问题在于我没有分辨需求的能力。需求有“需要”和“想要”之分，即刚需和非刚需之分，分辨能力太差的结果是我把所有需求当刚需，因此淹没了真正重要的需求。**一言概之，没有把时间花在真正重要的事情上**。然而也正是因为也这样的经历，我学会了如何去分辨和推敲需求。\n- 业务初期赶进度欠下太多技术债。在基础阶段**取巧以及缺乏推敲**，导致后期有大量问题需要完善。本质上这是能力的欠缺，至少现在我现在敢说考虑问题比两年前全面多了。\n- 没有发挥团队应有的力量，使得一加一小于二。有相当一段时间没处理好和LG的关系，关系拧巴。同时又没把DYF培养好，使其无论是知识储备、思维能力还是责任心，都没有太大的提升。现在回头看，LZ之前夸我有管理天赋是抬举了，可笑的是我信以为真了。现在反思，其实是自己的问题。一是**逃避真正的思考**，没有深入思考去解决和LG的分工问题，扯来扯去大家都难受；二是**太过亲力亲为以及疑虑心太重**，自己累不说，下属失去了成长的机会，如果我一早就充分放权就不是现在这样子了。我在NQ之所以能管理做得很好，一是因为个体足够优秀，二是无为而治——不懂导致自己充分放权。\n\n### 合\n\n#### 工作重心\n\n这两年的工作，可总结成一句话——**低水平重复**，我现在会的东西两年前也会。接下来的工作，有几个重心：\n\n- **带好团队**：让DYF真正成长起来，能够独当一面。目标是假如我离开，他完全能把现在的事情都接过去。\n- **规划好产品的迭代**：首先，分辨需求这里我必须严格把关，之前犯的错不能再犯；其次，不管是自己还是下面的人，做成什么样也必须严格把关，否则极有可能投入又是白费的；最后，做好产品，标准是我自己用起来都觉得挺棒的。\n- **逃离舒适区**：投身到那些重要而不紧急的事情去，且最好是我还不擅长的部分。现有工作有哪些是我不擅长而且比较重要的呢？\n    - 通信系软件：C++我还并不是特别得心应手； \n    - 集群系软件：Hadoop系有好多东西是值得去学习并应用起来，提升效率的，这个需要花时间去研究；\n    - 大型软件架构：作为一个大型软件，要考虑的问题其实是全方位的，性能、安全、负载均衡、监控、自动化部署等，这些其实都不是我特别熟悉的领域；\n    - 产品的设计：这里需要部分电气基础知识，恰巧我现在学的都能用上；\n    - 软件的交互设计：整个软件其实是缺乏设计的，既不好看又不好用，未必是我亲自去解决这些问题，**但我需要能提得出问题呀**！\n    - 算法的研究和转化：这亦是需要我去学习的。\n\n#### 刨根问底\n\n再深入些思考，在职业路上，我究竟想要成长为什么样子？先来回顾下我过去曾有过的强烈愿望：\n\n- 做一个技术经理人：这一点其实是以我的前任上司的位置来锚定的，因为当时在我之上便是他了。但若你问我如何定义技术经理人，这绝对是我之前没有深入思考过的。\n- 做一名优秀的科技工作者：这一点其实是以HWQ的位置来锚定的，而且是LLS在一次谈话提出的。HWQ确实很优秀，基础扎实，思维模型又完备，极少的思维定式，但我想成长为这样的人吗？\n\n**语言学家告诉我们，如果我们脑子里没有一个概念的话，我们的脑子就会倾向于不去想那个事情**。对于「在职业路上，我究竟想要成长为什么样子」，我是极度不清晰的。仔细审视下这个问题：\n\n- 「在职业路上」这个修饰定语是必须的，它是一个基本前提——必须能养活我自己；\n- 「我想成长为什么样子」描述的到底是能力圈、职业标签、做成什么样的事、为他人创造了什么价值，还是赚很多少钱？这是一个非常主观的问题。对于我而言，所谓CTO、架构师和技术经理人之类的职业标签带不来长久的满足感；能力圈足够广阔也不是，比如我会编程，但并不是会编程本身给我带来快乐；**做什么样的事，为他人创造了什么价值算是我所追求的，能带来长久满足感的**；乔布斯在二十几岁的时候就赚得盆满钵满，赚钱显然不是他最大满足感的来源，而且我也不太相信如果你为他人创造了价值却赚不到钱。\n\n思考到这里，问题变成了**「我想做成什么样的事」**，且这件事情必须是我认可且能够为他人创造价值的。这跟乔布斯的观点其实是不谋而合的。\n\n> Steven Jobs : Your work is going to **fill a large part of your life**, and the only way to be truly satisfied is to do what you believe is great work. And **the only way to do great work is to love what you do. If you haven't found it yet, keep looking. Don't settle**. As with all matters of the heart, you'll know when you find it. And, like any great relationship, it just gets better and better as the years roll on. So keep looking until you find it. Don't settle.\n\n注意乔布斯这里用的是「Love what you do」，而不是「Do what you love」，WHY？假如你有这样一个朋友，他干了几个月销售工作，然后跳槽去干IT，干没几个月又跳槽去卖保险，然后不断重复。你问他为什么频繁跳槽，他很理直气壮的告诉你——我不喜欢啊！那这又算什么？显然，一味强调「Do what you love」**可能成为你逃避深入的幌子**，而「Love what you do」的事情未必是你一开始就喜欢的，可能是因为你做得越来越好，并从中发现乐趣。至此，我为「我想做成什么样的事」添加了如下几个必要条件：\n\n- **满足基本生存需要**；\n- **great work/伟大的工作**；\n- **我现在或将来可能热爱它**；\n- **为他人创造价值**。\n\n我还没有找到它，但至少我有了方向，它可能是「写作」，也可能是「Make some great product」。我坚信能为他人创造价值的「写作」是一项伟大的工作，我对其热爱的体现是写作时几乎感受不到时间的流逝，但它现在还没办法「满足基本生存需要」，或者说还有一定距离。至于「Make some great product」，是因为我从类似「知乎」和「得到」之类的产品上获益不少，**总得叫人也得我点好处吧**（这点是胡适先生对我的影响，不朽的影响）！大学和工作时，对于某些自己喜欢的编程工作，绝对是不舍昼夜、不知疲倦。终有一天，我也能做一个这样的产品出来。\n\n至于为什么一再强调为他人创造价值，这也算[查理芒格老先生](http://baike.baidu.com/link?url=-NbUYB9KkHS0LoSwnsBmFJIgLuTA4_HAVrYKM7SfyHivevAlKrlatetVVayoqbcKWjOLFiSaxWfxE1Ao0lxiMeyQyqlx34XgnjnSnNHUBAXBdMbHZGNaBVo9SbzTCdAHfp1A47WrOT9z77e6r2qkVC-q12euDP4dZKNPL7H15nXXJuwCMTv4OpaSGb9OzlR8kZ46cO5VVpmsbU4AG2wZTMM_9fCwJPKlKlalHADtcLy)对我的一点影响。芒格先生是「**商才士魂**」的典范，商业上取得了巨大的成功，为人上却更像是个学富五车的学者。《穷查理宝典》里面有一句话大意是这样的：古人讲「正心，修身，齐家，治国，平天下」，在当下的时代背景「**正心，修身，齐家，治业，助天下**」更为恰当。芒格先生正是这样的一个人，当你被其魅力深深吸引，你就会不自觉的也想成为这样的人。\n\n## 「个人成长」\n\n### 正反\n \n思维能力上，回首两年前自己混沌的状态，我恨不得去撞墙，至少这方面我是有所成长的，这得益于我掉进去的很多坑以及不间断的反思。过去两年一直坚持用印象笔记写日记，不敢说天天写写，但至少每周都写。在日记里，**除了主动做出反思，我还不断将我吸收到的一些知识输出为文字**，这对我的帮助真的很大。举一些例子吧！以下几点我现在几乎很少再犯了——\n\n- 两年前，说话时思维是没有结构的，想到什么说什么，经常说错话或者说一些不该说的话；\n- 两年前，基本是人云亦云的状态，别人说什么就是什么，自己很少主动的去思考或质疑；\n- 两年前，稍稍不注意就犯「定义不清晰」的错误，和别人沟通时经常被误解，讲半天话都讲不清楚；\n- 两年前，管理不好自己的情绪，经常性的UP AND DOWN；\n- 两年前，疑虑心很重；\n- 两年前，经常在一些「不是最重要」的事情上折腾；\n- 两年前，……\n\n技术能力上，并没有质的飞跃，我现在做的事情我在两年前几乎都接触过了。是有学了一些东西，如备考研时把数学和4门计算机基础课全滚了一遍，如对Linux环境下编程的熟悉，只是细数之下真的少得可怜。不客气的讲，我在技术能力上的成长真的太少了，**这从客观上反映了我过去两年的懒惰和自欺欺人（一直自我感觉良好）**。两年下来，技术博客寥寥几篇，没有创造什么个人软件作品，电和数学等跨学科学习也并没有推进太多。\n\n个人爱好上，吉他是很大的一个缺憾，好多次拿起又放下，拿起又放下。最长的一次坚持了至少有3个月左右，弹吉他时我真的很快乐，为什么放下呢？\n\n- **目的不够清晰**：到底目标是指弹还是弹唱？我并没有想清楚。\n- **进步不大，没有成就感**：首先，照着卢家宏指弹吉他书籍练了几月，突然发现缺了一章，指弹就没再进行下去了，现在想来其实是我受不了指弹的枯燥练习。其次，连续练了几个月，竟然没有一首曲子是能独奏的，这真的有点不应该，现在回想当时的策略应先把一首曲子攻克，这样自己也有成就感很多。\n\n个人爱好的另外一个缺憾是摄影，是很想把照片拍好，但我在这上面投入的时间真的太少，这说明了其实是不够热爱。\n\n### 合\n\n思维上，通过过去两年的反思，我深刻认识到一件事情：**我是一个偏向于感性思维的人，并且基本逻辑不强**。除了不断的读书、思考和主动输出，没有更好的锻炼方式了。过去两年读的书真的是太少了，今年我要「好好读书」。\n\n专业上，目前我最大的问题是**没有核心竞争力**，我现在会的DYF花点时间基本也都会了，我还没什么足以自傲的呢！未来我该如何努力呢？我想有以下几点：\n\n- **巩固基础**：计算机的几门**基础课程**我并没有融会贯通，必须再滚一遍。同时亦没有一门**语言**是特别深入的，这也是需要花时间学习的。\n- **跨专业**：跨专业的目的不是说我能把数学和电学得多么厉害，而是要学习这些学科的基本思想。一是给自己融会贯通的机会，二是提高多维思考的素材。跨专业学习，目的是像[查理芒格老先生](http://baike.baidu.com/link?url=-NbUYB9KkHS0LoSwnsBmFJIgLuTA4_HAVrYKM7SfyHivevAlKrlatetVVayoqbcKWjOLFiSaxWfxE1Ao0lxiMeyQyqlx34XgnjnSnNHUBAXBdMbHZGNaBVo9SbzTCdAHfp1A47WrOT9z77e6r2qkVC-q12euDP4dZKNPL7H15nXXJuwCMTv4OpaSGb9OzlR8kZ46cO5VVpmsbU4AG2wZTMM_9fCwJPKlKlalHADtcLy)那样，具备**多元的思维模型**，然后用这个模型去处理所有问题。\n- **「主动输出以及解决问题」倒逼输入**：刘老师提醒我，具体一门技术的使用，其实我已经不需要刻意花很多时间去学习了。未来的提高方式，可以是主动输出去创作一些东西，或是去解决一些撩人的问题。\n\n\t实际上，专业的提高和思维的提高其实是相辅相成的。\n\n个人爱好上，吉他我想要重新捡起来。因此之前的两个问题必须解决，\n\n- **目的性极强**：我的目的是学会弹唱几首曲子（非纯扫弦类），然后加入到一些吉他社群中去，一起唱歌一起玩；\n- **收获成就感**：一首曲子一首曲子来，各个击破。\n\n## 「财务状况」\n\n先说说「节流」。16年4月11时我算过数，除去家用4万，我超支消费至少5万，平均一年超支消费1万7。现在是17年4月14，按照50%收入用于开支来计算，我超支消费也是1万7。也就是说从13年7月参加工作至17年4月，我共计超支消费67000，平均下来是每个月2977，**这是个多么可怕的数字啊**！可见，「节流」是多么的重要啊！17年，我的节流目标是每月开支不超3000，并建立8000左右的专项旅行基金。\n\n再说说「开源」。我的家庭乃至我的家族，都没有经商的基因，都是过的中规中矩的营生。过去几年，我的思维方式是：**好好工作，钱的事情公司会帮我解决的**。真的，我就是这么想的，现在回想简直可怕，我这不是疯了吗？公司一定需要为你的「钱途」负责吗？就算不负责，也不犯法啊！想到这点，我的观念转变了，**赚钱这事情，只能靠自己**。按照[查理芒格老先生](http://baike.baidu.com/link?url=-NbUYB9KkHS0LoSwnsBmFJIgLuTA4_HAVrYKM7SfyHivevAlKrlatetVVayoqbcKWjOLFiSaxWfxE1Ao0lxiMeyQyqlx34XgnjnSnNHUBAXBdMbHZGNaBVo9SbzTCdAHfp1A47WrOT9z77e6r2qkVC-q12euDP4dZKNPL7H15nXXJuwCMTv4OpaSGb9OzlR8kZ46cO5VVpmsbU4AG2wZTMM_9fCwJPKlKlalHADtcLy)的观点，**「任何一个问题，都可以使用正确的方法通过自学完全掌握，并可以在前人的基础上创新」**。我相信赚钱绝对也是如此，虽然我还没在工作之外创造过收入，但我坚信这是可行的。另有一点是[吴军](http://paper.people.com.cn/hqrw/html/2014-08/16/content_1497404.htm)先生点醒我的，「**职业和谋生手段可以分开**」，吴军先生本人的职业是计算机科学家兼作家，但他谋生的方式却是基金投资。能做到这两者合一确实难得，既然做不到那分开来也是自然而然的。开源这方面，我的目标是在17年创造出工作之外的收入，如果非要定一个数字，那就是6万元（这个数字是按照我今年的一项计划精心算出来的）。\n\n## 「健康」\n\n过去两年，跑步、咏春拳和平板支撑都断断续续坚持过一段时间，但却没长久的坚持下来。今年有以下几个健康目标：\n\n- 一定要重新捡起来的健康计划是「跑步」，跟在萝岗时长期坚持跑步的身体状态比，我现在身体状况可以用差劲这两个字来形容；\n- 专项练习：一是瘦腹，二是核心肌肉群的锻炼，三是增强手臂力量。\n\n## 「娱乐休闲」\n\n这方面，这两年下来最值得留恋的是16年国庆时的草原之行。言语无法形容的草原之美，至今想来仍然十分的美好。长途旅行是特别能提高生活质量的一件事，今年定个小目标——再去长途旅行一次。\n\n## 「朋友及重要他人」\n\n这两年来，不可避免的，和一些朋友还是慢慢的疏远了，而且这两年中几乎也没有结识新的朋友，圈子完全是闭塞的状态。今年关于这方面的目标是：\n\n- 定期和旧友们联络；\n- 加入一些社群或者组织，**结识新的朋友**。\n\n## 「家庭」\n\n这两年为家庭做的主要贡献是帮助老爸买房，现已在县城安了家。\n\n15年过年时，小妞爸爸的否定深深的打击了我，这也是我15年非常之迷茫的主要原因之一。通过思考和阅读，我走出了迷茫，这当然也少不了小妞的鼓励。和小妞恋爱已近三年，她潜移默化的影响了我许多。我对她的感觉也一直没变，我坚信她是对的那个人，今年的愿望之一便是步入婚姻的殿堂。\n\n## Reference\n\n列举几本这两年帮助我成长的一些书：\n\n- [彼得考夫曼《穷查理宝典》](https://book.douban.com/subject/5346110/)\n- [李笑来《把时间当作朋友》](https://book.douban.com/subject/3609132/)\n- [李笑来《七年就是一辈子》](http://www.zhibimo.com/books/xiaolai/reborn-every-7-years)\n- [胡适《我们能做什么》](https://book.douban.com/subject/25911858/)\n- [得到App：李笑来《通往财富自由之路》](https://zhangjunjia.github.io/2016/08/28/attention/)\n- [乔斯坦·贾德《苏菲的世界》](https://book.douban.com/subject/1045818/)\n- [张五常《经济解释卷一： 科学说需求》](https://book.douban.com/subject/4860448/)","source":"_posts/2017-04-14-2015-2016-summary.md","raw":"---\ntitle: 2015与2016年总结\ndate: 2017-04-14 21:15:24\ntags: ['年总结']\ncomments: true\ncategories: ['一些感悟']\n---\n\n> 若想预见数学的未来，恰当的方式是研究它的历史和现状。——庞加莱\n\n<!-- more -->\n\n回顾已过去的两年，是为了改进做得不好的，以及把优秀的继续发扬光大。依据黑格尔的理论，理性是动态发展的，有正便有反，发展到一定程度正反合在一起，便又开始了新一轮的正反合。对于逝去的过往，同样符合这个理论。\n\n原本已经写了一份年总结的，但不知怎的被我误删，而且使用恢复软件也找不回来，逼得我不得不重写。然而正是因为这次更为认真的重写，我得到了更多。\n\n## 「职业发展/自我实现」\n\n### 正反\n\n两年时间，把在NQ时的云平台系列产品重新造了出来，当然有相当大一部分是复用。我对这个结果不满意，两年时间只做了这么点事对于我和公司都是浪费。导致这个结果的原因是什么？\n- 需求有变化实属正常，问题在于我没有分辨需求的能力。需求有“需要”和“想要”之分，即刚需和非刚需之分，分辨能力太差的结果是我把所有需求当刚需，因此淹没了真正重要的需求。**一言概之，没有把时间花在真正重要的事情上**。然而也正是因为也这样的经历，我学会了如何去分辨和推敲需求。\n- 业务初期赶进度欠下太多技术债。在基础阶段**取巧以及缺乏推敲**，导致后期有大量问题需要完善。本质上这是能力的欠缺，至少现在我现在敢说考虑问题比两年前全面多了。\n- 没有发挥团队应有的力量，使得一加一小于二。有相当一段时间没处理好和LG的关系，关系拧巴。同时又没把DYF培养好，使其无论是知识储备、思维能力还是责任心，都没有太大的提升。现在回头看，LZ之前夸我有管理天赋是抬举了，可笑的是我信以为真了。现在反思，其实是自己的问题。一是**逃避真正的思考**，没有深入思考去解决和LG的分工问题，扯来扯去大家都难受；二是**太过亲力亲为以及疑虑心太重**，自己累不说，下属失去了成长的机会，如果我一早就充分放权就不是现在这样子了。我在NQ之所以能管理做得很好，一是因为个体足够优秀，二是无为而治——不懂导致自己充分放权。\n\n### 合\n\n#### 工作重心\n\n这两年的工作，可总结成一句话——**低水平重复**，我现在会的东西两年前也会。接下来的工作，有几个重心：\n\n- **带好团队**：让DYF真正成长起来，能够独当一面。目标是假如我离开，他完全能把现在的事情都接过去。\n- **规划好产品的迭代**：首先，分辨需求这里我必须严格把关，之前犯的错不能再犯；其次，不管是自己还是下面的人，做成什么样也必须严格把关，否则极有可能投入又是白费的；最后，做好产品，标准是我自己用起来都觉得挺棒的。\n- **逃离舒适区**：投身到那些重要而不紧急的事情去，且最好是我还不擅长的部分。现有工作有哪些是我不擅长而且比较重要的呢？\n    - 通信系软件：C++我还并不是特别得心应手； \n    - 集群系软件：Hadoop系有好多东西是值得去学习并应用起来，提升效率的，这个需要花时间去研究；\n    - 大型软件架构：作为一个大型软件，要考虑的问题其实是全方位的，性能、安全、负载均衡、监控、自动化部署等，这些其实都不是我特别熟悉的领域；\n    - 产品的设计：这里需要部分电气基础知识，恰巧我现在学的都能用上；\n    - 软件的交互设计：整个软件其实是缺乏设计的，既不好看又不好用，未必是我亲自去解决这些问题，**但我需要能提得出问题呀**！\n    - 算法的研究和转化：这亦是需要我去学习的。\n\n#### 刨根问底\n\n再深入些思考，在职业路上，我究竟想要成长为什么样子？先来回顾下我过去曾有过的强烈愿望：\n\n- 做一个技术经理人：这一点其实是以我的前任上司的位置来锚定的，因为当时在我之上便是他了。但若你问我如何定义技术经理人，这绝对是我之前没有深入思考过的。\n- 做一名优秀的科技工作者：这一点其实是以HWQ的位置来锚定的，而且是LLS在一次谈话提出的。HWQ确实很优秀，基础扎实，思维模型又完备，极少的思维定式，但我想成长为这样的人吗？\n\n**语言学家告诉我们，如果我们脑子里没有一个概念的话，我们的脑子就会倾向于不去想那个事情**。对于「在职业路上，我究竟想要成长为什么样子」，我是极度不清晰的。仔细审视下这个问题：\n\n- 「在职业路上」这个修饰定语是必须的，它是一个基本前提——必须能养活我自己；\n- 「我想成长为什么样子」描述的到底是能力圈、职业标签、做成什么样的事、为他人创造了什么价值，还是赚很多少钱？这是一个非常主观的问题。对于我而言，所谓CTO、架构师和技术经理人之类的职业标签带不来长久的满足感；能力圈足够广阔也不是，比如我会编程，但并不是会编程本身给我带来快乐；**做什么样的事，为他人创造了什么价值算是我所追求的，能带来长久满足感的**；乔布斯在二十几岁的时候就赚得盆满钵满，赚钱显然不是他最大满足感的来源，而且我也不太相信如果你为他人创造了价值却赚不到钱。\n\n思考到这里，问题变成了**「我想做成什么样的事」**，且这件事情必须是我认可且能够为他人创造价值的。这跟乔布斯的观点其实是不谋而合的。\n\n> Steven Jobs : Your work is going to **fill a large part of your life**, and the only way to be truly satisfied is to do what you believe is great work. And **the only way to do great work is to love what you do. If you haven't found it yet, keep looking. Don't settle**. As with all matters of the heart, you'll know when you find it. And, like any great relationship, it just gets better and better as the years roll on. So keep looking until you find it. Don't settle.\n\n注意乔布斯这里用的是「Love what you do」，而不是「Do what you love」，WHY？假如你有这样一个朋友，他干了几个月销售工作，然后跳槽去干IT，干没几个月又跳槽去卖保险，然后不断重复。你问他为什么频繁跳槽，他很理直气壮的告诉你——我不喜欢啊！那这又算什么？显然，一味强调「Do what you love」**可能成为你逃避深入的幌子**，而「Love what you do」的事情未必是你一开始就喜欢的，可能是因为你做得越来越好，并从中发现乐趣。至此，我为「我想做成什么样的事」添加了如下几个必要条件：\n\n- **满足基本生存需要**；\n- **great work/伟大的工作**；\n- **我现在或将来可能热爱它**；\n- **为他人创造价值**。\n\n我还没有找到它，但至少我有了方向，它可能是「写作」，也可能是「Make some great product」。我坚信能为他人创造价值的「写作」是一项伟大的工作，我对其热爱的体现是写作时几乎感受不到时间的流逝，但它现在还没办法「满足基本生存需要」，或者说还有一定距离。至于「Make some great product」，是因为我从类似「知乎」和「得到」之类的产品上获益不少，**总得叫人也得我点好处吧**（这点是胡适先生对我的影响，不朽的影响）！大学和工作时，对于某些自己喜欢的编程工作，绝对是不舍昼夜、不知疲倦。终有一天，我也能做一个这样的产品出来。\n\n至于为什么一再强调为他人创造价值，这也算[查理芒格老先生](http://baike.baidu.com/link?url=-NbUYB9KkHS0LoSwnsBmFJIgLuTA4_HAVrYKM7SfyHivevAlKrlatetVVayoqbcKWjOLFiSaxWfxE1Ao0lxiMeyQyqlx34XgnjnSnNHUBAXBdMbHZGNaBVo9SbzTCdAHfp1A47WrOT9z77e6r2qkVC-q12euDP4dZKNPL7H15nXXJuwCMTv4OpaSGb9OzlR8kZ46cO5VVpmsbU4AG2wZTMM_9fCwJPKlKlalHADtcLy)对我的一点影响。芒格先生是「**商才士魂**」的典范，商业上取得了巨大的成功，为人上却更像是个学富五车的学者。《穷查理宝典》里面有一句话大意是这样的：古人讲「正心，修身，齐家，治国，平天下」，在当下的时代背景「**正心，修身，齐家，治业，助天下**」更为恰当。芒格先生正是这样的一个人，当你被其魅力深深吸引，你就会不自觉的也想成为这样的人。\n\n## 「个人成长」\n\n### 正反\n \n思维能力上，回首两年前自己混沌的状态，我恨不得去撞墙，至少这方面我是有所成长的，这得益于我掉进去的很多坑以及不间断的反思。过去两年一直坚持用印象笔记写日记，不敢说天天写写，但至少每周都写。在日记里，**除了主动做出反思，我还不断将我吸收到的一些知识输出为文字**，这对我的帮助真的很大。举一些例子吧！以下几点我现在几乎很少再犯了——\n\n- 两年前，说话时思维是没有结构的，想到什么说什么，经常说错话或者说一些不该说的话；\n- 两年前，基本是人云亦云的状态，别人说什么就是什么，自己很少主动的去思考或质疑；\n- 两年前，稍稍不注意就犯「定义不清晰」的错误，和别人沟通时经常被误解，讲半天话都讲不清楚；\n- 两年前，管理不好自己的情绪，经常性的UP AND DOWN；\n- 两年前，疑虑心很重；\n- 两年前，经常在一些「不是最重要」的事情上折腾；\n- 两年前，……\n\n技术能力上，并没有质的飞跃，我现在做的事情我在两年前几乎都接触过了。是有学了一些东西，如备考研时把数学和4门计算机基础课全滚了一遍，如对Linux环境下编程的熟悉，只是细数之下真的少得可怜。不客气的讲，我在技术能力上的成长真的太少了，**这从客观上反映了我过去两年的懒惰和自欺欺人（一直自我感觉良好）**。两年下来，技术博客寥寥几篇，没有创造什么个人软件作品，电和数学等跨学科学习也并没有推进太多。\n\n个人爱好上，吉他是很大的一个缺憾，好多次拿起又放下，拿起又放下。最长的一次坚持了至少有3个月左右，弹吉他时我真的很快乐，为什么放下呢？\n\n- **目的不够清晰**：到底目标是指弹还是弹唱？我并没有想清楚。\n- **进步不大，没有成就感**：首先，照着卢家宏指弹吉他书籍练了几月，突然发现缺了一章，指弹就没再进行下去了，现在想来其实是我受不了指弹的枯燥练习。其次，连续练了几个月，竟然没有一首曲子是能独奏的，这真的有点不应该，现在回想当时的策略应先把一首曲子攻克，这样自己也有成就感很多。\n\n个人爱好的另外一个缺憾是摄影，是很想把照片拍好，但我在这上面投入的时间真的太少，这说明了其实是不够热爱。\n\n### 合\n\n思维上，通过过去两年的反思，我深刻认识到一件事情：**我是一个偏向于感性思维的人，并且基本逻辑不强**。除了不断的读书、思考和主动输出，没有更好的锻炼方式了。过去两年读的书真的是太少了，今年我要「好好读书」。\n\n专业上，目前我最大的问题是**没有核心竞争力**，我现在会的DYF花点时间基本也都会了，我还没什么足以自傲的呢！未来我该如何努力呢？我想有以下几点：\n\n- **巩固基础**：计算机的几门**基础课程**我并没有融会贯通，必须再滚一遍。同时亦没有一门**语言**是特别深入的，这也是需要花时间学习的。\n- **跨专业**：跨专业的目的不是说我能把数学和电学得多么厉害，而是要学习这些学科的基本思想。一是给自己融会贯通的机会，二是提高多维思考的素材。跨专业学习，目的是像[查理芒格老先生](http://baike.baidu.com/link?url=-NbUYB9KkHS0LoSwnsBmFJIgLuTA4_HAVrYKM7SfyHivevAlKrlatetVVayoqbcKWjOLFiSaxWfxE1Ao0lxiMeyQyqlx34XgnjnSnNHUBAXBdMbHZGNaBVo9SbzTCdAHfp1A47WrOT9z77e6r2qkVC-q12euDP4dZKNPL7H15nXXJuwCMTv4OpaSGb9OzlR8kZ46cO5VVpmsbU4AG2wZTMM_9fCwJPKlKlalHADtcLy)那样，具备**多元的思维模型**，然后用这个模型去处理所有问题。\n- **「主动输出以及解决问题」倒逼输入**：刘老师提醒我，具体一门技术的使用，其实我已经不需要刻意花很多时间去学习了。未来的提高方式，可以是主动输出去创作一些东西，或是去解决一些撩人的问题。\n\n\t实际上，专业的提高和思维的提高其实是相辅相成的。\n\n个人爱好上，吉他我想要重新捡起来。因此之前的两个问题必须解决，\n\n- **目的性极强**：我的目的是学会弹唱几首曲子（非纯扫弦类），然后加入到一些吉他社群中去，一起唱歌一起玩；\n- **收获成就感**：一首曲子一首曲子来，各个击破。\n\n## 「财务状况」\n\n先说说「节流」。16年4月11时我算过数，除去家用4万，我超支消费至少5万，平均一年超支消费1万7。现在是17年4月14，按照50%收入用于开支来计算，我超支消费也是1万7。也就是说从13年7月参加工作至17年4月，我共计超支消费67000，平均下来是每个月2977，**这是个多么可怕的数字啊**！可见，「节流」是多么的重要啊！17年，我的节流目标是每月开支不超3000，并建立8000左右的专项旅行基金。\n\n再说说「开源」。我的家庭乃至我的家族，都没有经商的基因，都是过的中规中矩的营生。过去几年，我的思维方式是：**好好工作，钱的事情公司会帮我解决的**。真的，我就是这么想的，现在回想简直可怕，我这不是疯了吗？公司一定需要为你的「钱途」负责吗？就算不负责，也不犯法啊！想到这点，我的观念转变了，**赚钱这事情，只能靠自己**。按照[查理芒格老先生](http://baike.baidu.com/link?url=-NbUYB9KkHS0LoSwnsBmFJIgLuTA4_HAVrYKM7SfyHivevAlKrlatetVVayoqbcKWjOLFiSaxWfxE1Ao0lxiMeyQyqlx34XgnjnSnNHUBAXBdMbHZGNaBVo9SbzTCdAHfp1A47WrOT9z77e6r2qkVC-q12euDP4dZKNPL7H15nXXJuwCMTv4OpaSGb9OzlR8kZ46cO5VVpmsbU4AG2wZTMM_9fCwJPKlKlalHADtcLy)的观点，**「任何一个问题，都可以使用正确的方法通过自学完全掌握，并可以在前人的基础上创新」**。我相信赚钱绝对也是如此，虽然我还没在工作之外创造过收入，但我坚信这是可行的。另有一点是[吴军](http://paper.people.com.cn/hqrw/html/2014-08/16/content_1497404.htm)先生点醒我的，「**职业和谋生手段可以分开**」，吴军先生本人的职业是计算机科学家兼作家，但他谋生的方式却是基金投资。能做到这两者合一确实难得，既然做不到那分开来也是自然而然的。开源这方面，我的目标是在17年创造出工作之外的收入，如果非要定一个数字，那就是6万元（这个数字是按照我今年的一项计划精心算出来的）。\n\n## 「健康」\n\n过去两年，跑步、咏春拳和平板支撑都断断续续坚持过一段时间，但却没长久的坚持下来。今年有以下几个健康目标：\n\n- 一定要重新捡起来的健康计划是「跑步」，跟在萝岗时长期坚持跑步的身体状态比，我现在身体状况可以用差劲这两个字来形容；\n- 专项练习：一是瘦腹，二是核心肌肉群的锻炼，三是增强手臂力量。\n\n## 「娱乐休闲」\n\n这方面，这两年下来最值得留恋的是16年国庆时的草原之行。言语无法形容的草原之美，至今想来仍然十分的美好。长途旅行是特别能提高生活质量的一件事，今年定个小目标——再去长途旅行一次。\n\n## 「朋友及重要他人」\n\n这两年来，不可避免的，和一些朋友还是慢慢的疏远了，而且这两年中几乎也没有结识新的朋友，圈子完全是闭塞的状态。今年关于这方面的目标是：\n\n- 定期和旧友们联络；\n- 加入一些社群或者组织，**结识新的朋友**。\n\n## 「家庭」\n\n这两年为家庭做的主要贡献是帮助老爸买房，现已在县城安了家。\n\n15年过年时，小妞爸爸的否定深深的打击了我，这也是我15年非常之迷茫的主要原因之一。通过思考和阅读，我走出了迷茫，这当然也少不了小妞的鼓励。和小妞恋爱已近三年，她潜移默化的影响了我许多。我对她的感觉也一直没变，我坚信她是对的那个人，今年的愿望之一便是步入婚姻的殿堂。\n\n## Reference\n\n列举几本这两年帮助我成长的一些书：\n\n- [彼得考夫曼《穷查理宝典》](https://book.douban.com/subject/5346110/)\n- [李笑来《把时间当作朋友》](https://book.douban.com/subject/3609132/)\n- [李笑来《七年就是一辈子》](http://www.zhibimo.com/books/xiaolai/reborn-every-7-years)\n- [胡适《我们能做什么》](https://book.douban.com/subject/25911858/)\n- [得到App：李笑来《通往财富自由之路》](https://zhangjunjia.github.io/2016/08/28/attention/)\n- [乔斯坦·贾德《苏菲的世界》](https://book.douban.com/subject/1045818/)\n- [张五常《经济解释卷一： 科学说需求》](https://book.douban.com/subject/4860448/)","slug":"2015-2016-summary","published":1,"updated":"2017-04-16T03:19:34.000Z","layout":"post","photos":[],"link":"","_id":"cjlza6mao004bpgupb53nvqhe","content":"<blockquote>\n<p>若想预见数学的未来，恰当的方式是研究它的历史和现状。——庞加莱</p>\n</blockquote>\n<a id=\"more\"></a>\n<p>回顾已过去的两年，是为了改进做得不好的，以及把优秀的继续发扬光大。依据黑格尔的理论，理性是动态发展的，有正便有反，发展到一定程度正反合在一起，便又开始了新一轮的正反合。对于逝去的过往，同样符合这个理论。</p>\n<p>原本已经写了一份年总结的，但不知怎的被我误删，而且使用恢复软件也找不回来，逼得我不得不重写。然而正是因为这次更为认真的重写，我得到了更多。</p>\n<h2 id=\"「职业发展-自我实现」\"><a href=\"#「职业发展-自我实现」\" class=\"headerlink\" title=\"「职业发展/自我实现」\"></a>「职业发展/自我实现」</h2><h3 id=\"正反\"><a href=\"#正反\" class=\"headerlink\" title=\"正反\"></a>正反</h3><p>两年时间，把在NQ时的云平台系列产品重新造了出来，当然有相当大一部分是复用。我对这个结果不满意，两年时间只做了这么点事对于我和公司都是浪费。导致这个结果的原因是什么？</p>\n<ul>\n<li>需求有变化实属正常，问题在于我没有分辨需求的能力。需求有“需要”和“想要”之分，即刚需和非刚需之分，分辨能力太差的结果是我把所有需求当刚需，因此淹没了真正重要的需求。<strong>一言概之，没有把时间花在真正重要的事情上</strong>。然而也正是因为也这样的经历，我学会了如何去分辨和推敲需求。</li>\n<li>业务初期赶进度欠下太多技术债。在基础阶段<strong>取巧以及缺乏推敲</strong>，导致后期有大量问题需要完善。本质上这是能力的欠缺，至少现在我现在敢说考虑问题比两年前全面多了。</li>\n<li>没有发挥团队应有的力量，使得一加一小于二。有相当一段时间没处理好和LG的关系，关系拧巴。同时又没把DYF培养好，使其无论是知识储备、思维能力还是责任心，都没有太大的提升。现在回头看，LZ之前夸我有管理天赋是抬举了，可笑的是我信以为真了。现在反思，其实是自己的问题。一是<strong>逃避真正的思考</strong>，没有深入思考去解决和LG的分工问题，扯来扯去大家都难受；二是<strong>太过亲力亲为以及疑虑心太重</strong>，自己累不说，下属失去了成长的机会，如果我一早就充分放权就不是现在这样子了。我在NQ之所以能管理做得很好，一是因为个体足够优秀，二是无为而治——不懂导致自己充分放权。</li>\n</ul>\n<h3 id=\"合\"><a href=\"#合\" class=\"headerlink\" title=\"合\"></a>合</h3><h4 id=\"工作重心\"><a href=\"#工作重心\" class=\"headerlink\" title=\"工作重心\"></a>工作重心</h4><p>这两年的工作，可总结成一句话——<strong>低水平重复</strong>，我现在会的东西两年前也会。接下来的工作，有几个重心：</p>\n<ul>\n<li><strong>带好团队</strong>：让DYF真正成长起来，能够独当一面。目标是假如我离开，他完全能把现在的事情都接过去。</li>\n<li><strong>规划好产品的迭代</strong>：首先，分辨需求这里我必须严格把关，之前犯的错不能再犯；其次，不管是自己还是下面的人，做成什么样也必须严格把关，否则极有可能投入又是白费的；最后，做好产品，标准是我自己用起来都觉得挺棒的。</li>\n<li><strong>逃离舒适区</strong>：投身到那些重要而不紧急的事情去，且最好是我还不擅长的部分。现有工作有哪些是我不擅长而且比较重要的呢？<ul>\n<li>通信系软件：C++我还并不是特别得心应手； </li>\n<li>集群系软件：Hadoop系有好多东西是值得去学习并应用起来，提升效率的，这个需要花时间去研究；</li>\n<li>大型软件架构：作为一个大型软件，要考虑的问题其实是全方位的，性能、安全、负载均衡、监控、自动化部署等，这些其实都不是我特别熟悉的领域；</li>\n<li>产品的设计：这里需要部分电气基础知识，恰巧我现在学的都能用上；</li>\n<li>软件的交互设计：整个软件其实是缺乏设计的，既不好看又不好用，未必是我亲自去解决这些问题，<strong>但我需要能提得出问题呀</strong>！</li>\n<li>算法的研究和转化：这亦是需要我去学习的。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"刨根问底\"><a href=\"#刨根问底\" class=\"headerlink\" title=\"刨根问底\"></a>刨根问底</h4><p>再深入些思考，在职业路上，我究竟想要成长为什么样子？先来回顾下我过去曾有过的强烈愿望：</p>\n<ul>\n<li>做一个技术经理人：这一点其实是以我的前任上司的位置来锚定的，因为当时在我之上便是他了。但若你问我如何定义技术经理人，这绝对是我之前没有深入思考过的。</li>\n<li>做一名优秀的科技工作者：这一点其实是以HWQ的位置来锚定的，而且是LLS在一次谈话提出的。HWQ确实很优秀，基础扎实，思维模型又完备，极少的思维定式，但我想成长为这样的人吗？</li>\n</ul>\n<p><strong>语言学家告诉我们，如果我们脑子里没有一个概念的话，我们的脑子就会倾向于不去想那个事情</strong>。对于「在职业路上，我究竟想要成长为什么样子」，我是极度不清晰的。仔细审视下这个问题：</p>\n<ul>\n<li>「在职业路上」这个修饰定语是必须的，它是一个基本前提——必须能养活我自己；</li>\n<li>「我想成长为什么样子」描述的到底是能力圈、职业标签、做成什么样的事、为他人创造了什么价值，还是赚很多少钱？这是一个非常主观的问题。对于我而言，所谓CTO、架构师和技术经理人之类的职业标签带不来长久的满足感；能力圈足够广阔也不是，比如我会编程，但并不是会编程本身给我带来快乐；<strong>做什么样的事，为他人创造了什么价值算是我所追求的，能带来长久满足感的</strong>；乔布斯在二十几岁的时候就赚得盆满钵满，赚钱显然不是他最大满足感的来源，而且我也不太相信如果你为他人创造了价值却赚不到钱。</li>\n</ul>\n<p>思考到这里，问题变成了<strong>「我想做成什么样的事」</strong>，且这件事情必须是我认可且能够为他人创造价值的。这跟乔布斯的观点其实是不谋而合的。</p>\n<blockquote>\n<p>Steven Jobs : Your work is going to <strong>fill a large part of your life</strong>, and the only way to be truly satisfied is to do what you believe is great work. And <strong>the only way to do great work is to love what you do. If you haven’t found it yet, keep looking. Don’t settle</strong>. As with all matters of the heart, you’ll know when you find it. And, like any great relationship, it just gets better and better as the years roll on. So keep looking until you find it. Don’t settle.</p>\n</blockquote>\n<p>注意乔布斯这里用的是「Love what you do」，而不是「Do what you love」，WHY？假如你有这样一个朋友，他干了几个月销售工作，然后跳槽去干IT，干没几个月又跳槽去卖保险，然后不断重复。你问他为什么频繁跳槽，他很理直气壮的告诉你——我不喜欢啊！那这又算什么？显然，一味强调「Do what you love」<strong>可能成为你逃避深入的幌子</strong>，而「Love what you do」的事情未必是你一开始就喜欢的，可能是因为你做得越来越好，并从中发现乐趣。至此，我为「我想做成什么样的事」添加了如下几个必要条件：</p>\n<ul>\n<li><strong>满足基本生存需要</strong>；</li>\n<li><strong>great work/伟大的工作</strong>；</li>\n<li><strong>我现在或将来可能热爱它</strong>；</li>\n<li><strong>为他人创造价值</strong>。</li>\n</ul>\n<p>我还没有找到它，但至少我有了方向，它可能是「写作」，也可能是「Make some great product」。我坚信能为他人创造价值的「写作」是一项伟大的工作，我对其热爱的体现是写作时几乎感受不到时间的流逝，但它现在还没办法「满足基本生存需要」，或者说还有一定距离。至于「Make some great product」，是因为我从类似「知乎」和「得到」之类的产品上获益不少，<strong>总得叫人也得我点好处吧</strong>（这点是胡适先生对我的影响，不朽的影响）！大学和工作时，对于某些自己喜欢的编程工作，绝对是不舍昼夜、不知疲倦。终有一天，我也能做一个这样的产品出来。</p>\n<p>至于为什么一再强调为他人创造价值，这也算<a href=\"http://baike.baidu.com/link?url=-NbUYB9KkHS0LoSwnsBmFJIgLuTA4_HAVrYKM7SfyHivevAlKrlatetVVayoqbcKWjOLFiSaxWfxE1Ao0lxiMeyQyqlx34XgnjnSnNHUBAXBdMbHZGNaBVo9SbzTCdAHfp1A47WrOT9z77e6r2qkVC-q12euDP4dZKNPL7H15nXXJuwCMTv4OpaSGb9OzlR8kZ46cO5VVpmsbU4AG2wZTMM_9fCwJPKlKlalHADtcLy\" target=\"_blank\" rel=\"noopener\">查理芒格老先生</a>对我的一点影响。芒格先生是「<strong>商才士魂</strong>」的典范，商业上取得了巨大的成功，为人上却更像是个学富五车的学者。《穷查理宝典》里面有一句话大意是这样的：古人讲「正心，修身，齐家，治国，平天下」，在当下的时代背景「<strong>正心，修身，齐家，治业，助天下</strong>」更为恰当。芒格先生正是这样的一个人，当你被其魅力深深吸引，你就会不自觉的也想成为这样的人。</p>\n<h2 id=\"「个人成长」\"><a href=\"#「个人成长」\" class=\"headerlink\" title=\"「个人成长」\"></a>「个人成长」</h2><h3 id=\"正反-1\"><a href=\"#正反-1\" class=\"headerlink\" title=\"正反\"></a>正反</h3><p>思维能力上，回首两年前自己混沌的状态，我恨不得去撞墙，至少这方面我是有所成长的，这得益于我掉进去的很多坑以及不间断的反思。过去两年一直坚持用印象笔记写日记，不敢说天天写写，但至少每周都写。在日记里，<strong>除了主动做出反思，我还不断将我吸收到的一些知识输出为文字</strong>，这对我的帮助真的很大。举一些例子吧！以下几点我现在几乎很少再犯了——</p>\n<ul>\n<li>两年前，说话时思维是没有结构的，想到什么说什么，经常说错话或者说一些不该说的话；</li>\n<li>两年前，基本是人云亦云的状态，别人说什么就是什么，自己很少主动的去思考或质疑；</li>\n<li>两年前，稍稍不注意就犯「定义不清晰」的错误，和别人沟通时经常被误解，讲半天话都讲不清楚；</li>\n<li>两年前，管理不好自己的情绪，经常性的UP AND DOWN；</li>\n<li>两年前，疑虑心很重；</li>\n<li>两年前，经常在一些「不是最重要」的事情上折腾；</li>\n<li>两年前，……</li>\n</ul>\n<p>技术能力上，并没有质的飞跃，我现在做的事情我在两年前几乎都接触过了。是有学了一些东西，如备考研时把数学和4门计算机基础课全滚了一遍，如对Linux环境下编程的熟悉，只是细数之下真的少得可怜。不客气的讲，我在技术能力上的成长真的太少了，<strong>这从客观上反映了我过去两年的懒惰和自欺欺人（一直自我感觉良好）</strong>。两年下来，技术博客寥寥几篇，没有创造什么个人软件作品，电和数学等跨学科学习也并没有推进太多。</p>\n<p>个人爱好上，吉他是很大的一个缺憾，好多次拿起又放下，拿起又放下。最长的一次坚持了至少有3个月左右，弹吉他时我真的很快乐，为什么放下呢？</p>\n<ul>\n<li><strong>目的不够清晰</strong>：到底目标是指弹还是弹唱？我并没有想清楚。</li>\n<li><strong>进步不大，没有成就感</strong>：首先，照着卢家宏指弹吉他书籍练了几月，突然发现缺了一章，指弹就没再进行下去了，现在想来其实是我受不了指弹的枯燥练习。其次，连续练了几个月，竟然没有一首曲子是能独奏的，这真的有点不应该，现在回想当时的策略应先把一首曲子攻克，这样自己也有成就感很多。</li>\n</ul>\n<p>个人爱好的另外一个缺憾是摄影，是很想把照片拍好，但我在这上面投入的时间真的太少，这说明了其实是不够热爱。</p>\n<h3 id=\"合-1\"><a href=\"#合-1\" class=\"headerlink\" title=\"合\"></a>合</h3><p>思维上，通过过去两年的反思，我深刻认识到一件事情：<strong>我是一个偏向于感性思维的人，并且基本逻辑不强</strong>。除了不断的读书、思考和主动输出，没有更好的锻炼方式了。过去两年读的书真的是太少了，今年我要「好好读书」。</p>\n<p>专业上，目前我最大的问题是<strong>没有核心竞争力</strong>，我现在会的DYF花点时间基本也都会了，我还没什么足以自傲的呢！未来我该如何努力呢？我想有以下几点：</p>\n<ul>\n<li><strong>巩固基础</strong>：计算机的几门<strong>基础课程</strong>我并没有融会贯通，必须再滚一遍。同时亦没有一门<strong>语言</strong>是特别深入的，这也是需要花时间学习的。</li>\n<li><strong>跨专业</strong>：跨专业的目的不是说我能把数学和电学得多么厉害，而是要学习这些学科的基本思想。一是给自己融会贯通的机会，二是提高多维思考的素材。跨专业学习，目的是像<a href=\"http://baike.baidu.com/link?url=-NbUYB9KkHS0LoSwnsBmFJIgLuTA4_HAVrYKM7SfyHivevAlKrlatetVVayoqbcKWjOLFiSaxWfxE1Ao0lxiMeyQyqlx34XgnjnSnNHUBAXBdMbHZGNaBVo9SbzTCdAHfp1A47WrOT9z77e6r2qkVC-q12euDP4dZKNPL7H15nXXJuwCMTv4OpaSGb9OzlR8kZ46cO5VVpmsbU4AG2wZTMM_9fCwJPKlKlalHADtcLy\" target=\"_blank\" rel=\"noopener\">查理芒格老先生</a>那样，具备<strong>多元的思维模型</strong>，然后用这个模型去处理所有问题。</li>\n<li><p><strong>「主动输出以及解决问题」倒逼输入</strong>：刘老师提醒我，具体一门技术的使用，其实我已经不需要刻意花很多时间去学习了。未来的提高方式，可以是主动输出去创作一些东西，或是去解决一些撩人的问题。</p>\n<p>  实际上，专业的提高和思维的提高其实是相辅相成的。</p>\n</li>\n</ul>\n<p>个人爱好上，吉他我想要重新捡起来。因此之前的两个问题必须解决，</p>\n<ul>\n<li><strong>目的性极强</strong>：我的目的是学会弹唱几首曲子（非纯扫弦类），然后加入到一些吉他社群中去，一起唱歌一起玩；</li>\n<li><strong>收获成就感</strong>：一首曲子一首曲子来，各个击破。</li>\n</ul>\n<h2 id=\"「财务状况」\"><a href=\"#「财务状况」\" class=\"headerlink\" title=\"「财务状况」\"></a>「财务状况」</h2><p>先说说「节流」。16年4月11时我算过数，除去家用4万，我超支消费至少5万，平均一年超支消费1万7。现在是17年4月14，按照50%收入用于开支来计算，我超支消费也是1万7。也就是说从13年7月参加工作至17年4月，我共计超支消费67000，平均下来是每个月2977，<strong>这是个多么可怕的数字啊</strong>！可见，「节流」是多么的重要啊！17年，我的节流目标是每月开支不超3000，并建立8000左右的专项旅行基金。</p>\n<p>再说说「开源」。我的家庭乃至我的家族，都没有经商的基因，都是过的中规中矩的营生。过去几年，我的思维方式是：<strong>好好工作，钱的事情公司会帮我解决的</strong>。真的，我就是这么想的，现在回想简直可怕，我这不是疯了吗？公司一定需要为你的「钱途」负责吗？就算不负责，也不犯法啊！想到这点，我的观念转变了，<strong>赚钱这事情，只能靠自己</strong>。按照<a href=\"http://baike.baidu.com/link?url=-NbUYB9KkHS0LoSwnsBmFJIgLuTA4_HAVrYKM7SfyHivevAlKrlatetVVayoqbcKWjOLFiSaxWfxE1Ao0lxiMeyQyqlx34XgnjnSnNHUBAXBdMbHZGNaBVo9SbzTCdAHfp1A47WrOT9z77e6r2qkVC-q12euDP4dZKNPL7H15nXXJuwCMTv4OpaSGb9OzlR8kZ46cO5VVpmsbU4AG2wZTMM_9fCwJPKlKlalHADtcLy\" target=\"_blank\" rel=\"noopener\">查理芒格老先生</a>的观点，<strong>「任何一个问题，都可以使用正确的方法通过自学完全掌握，并可以在前人的基础上创新」</strong>。我相信赚钱绝对也是如此，虽然我还没在工作之外创造过收入，但我坚信这是可行的。另有一点是<a href=\"http://paper.people.com.cn/hqrw/html/2014-08/16/content_1497404.htm\" target=\"_blank\" rel=\"noopener\">吴军</a>先生点醒我的，「<strong>职业和谋生手段可以分开</strong>」，吴军先生本人的职业是计算机科学家兼作家，但他谋生的方式却是基金投资。能做到这两者合一确实难得，既然做不到那分开来也是自然而然的。开源这方面，我的目标是在17年创造出工作之外的收入，如果非要定一个数字，那就是6万元（这个数字是按照我今年的一项计划精心算出来的）。</p>\n<h2 id=\"「健康」\"><a href=\"#「健康」\" class=\"headerlink\" title=\"「健康」\"></a>「健康」</h2><p>过去两年，跑步、咏春拳和平板支撑都断断续续坚持过一段时间，但却没长久的坚持下来。今年有以下几个健康目标：</p>\n<ul>\n<li>一定要重新捡起来的健康计划是「跑步」，跟在萝岗时长期坚持跑步的身体状态比，我现在身体状况可以用差劲这两个字来形容；</li>\n<li>专项练习：一是瘦腹，二是核心肌肉群的锻炼，三是增强手臂力量。</li>\n</ul>\n<h2 id=\"「娱乐休闲」\"><a href=\"#「娱乐休闲」\" class=\"headerlink\" title=\"「娱乐休闲」\"></a>「娱乐休闲」</h2><p>这方面，这两年下来最值得留恋的是16年国庆时的草原之行。言语无法形容的草原之美，至今想来仍然十分的美好。长途旅行是特别能提高生活质量的一件事，今年定个小目标——再去长途旅行一次。</p>\n<h2 id=\"「朋友及重要他人」\"><a href=\"#「朋友及重要他人」\" class=\"headerlink\" title=\"「朋友及重要他人」\"></a>「朋友及重要他人」</h2><p>这两年来，不可避免的，和一些朋友还是慢慢的疏远了，而且这两年中几乎也没有结识新的朋友，圈子完全是闭塞的状态。今年关于这方面的目标是：</p>\n<ul>\n<li>定期和旧友们联络；</li>\n<li>加入一些社群或者组织，<strong>结识新的朋友</strong>。</li>\n</ul>\n<h2 id=\"「家庭」\"><a href=\"#「家庭」\" class=\"headerlink\" title=\"「家庭」\"></a>「家庭」</h2><p>这两年为家庭做的主要贡献是帮助老爸买房，现已在县城安了家。</p>\n<p>15年过年时，小妞爸爸的否定深深的打击了我，这也是我15年非常之迷茫的主要原因之一。通过思考和阅读，我走出了迷茫，这当然也少不了小妞的鼓励。和小妞恋爱已近三年，她潜移默化的影响了我许多。我对她的感觉也一直没变，我坚信她是对的那个人，今年的愿望之一便是步入婚姻的殿堂。</p>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><p>列举几本这两年帮助我成长的一些书：</p>\n<ul>\n<li><a href=\"https://book.douban.com/subject/5346110/\" target=\"_blank\" rel=\"noopener\">彼得考夫曼《穷查理宝典》</a></li>\n<li><a href=\"https://book.douban.com/subject/3609132/\" target=\"_blank\" rel=\"noopener\">李笑来《把时间当作朋友》</a></li>\n<li><a href=\"http://www.zhibimo.com/books/xiaolai/reborn-every-7-years\" target=\"_blank\" rel=\"noopener\">李笑来《七年就是一辈子》</a></li>\n<li><a href=\"https://book.douban.com/subject/25911858/\" target=\"_blank\" rel=\"noopener\">胡适《我们能做什么》</a></li>\n<li><a href=\"https://zhangjunjia.github.io/2016/08/28/attention/\">得到App：李笑来《通往财富自由之路》</a></li>\n<li><a href=\"https://book.douban.com/subject/1045818/\" target=\"_blank\" rel=\"noopener\">乔斯坦·贾德《苏菲的世界》</a></li>\n<li><a href=\"https://book.douban.com/subject/4860448/\" target=\"_blank\" rel=\"noopener\">张五常《经济解释卷一： 科学说需求》</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>若想预见数学的未来，恰当的方式是研究它的历史和现状。——庞加莱</p>\n</blockquote>","more":"<p>回顾已过去的两年，是为了改进做得不好的，以及把优秀的继续发扬光大。依据黑格尔的理论，理性是动态发展的，有正便有反，发展到一定程度正反合在一起，便又开始了新一轮的正反合。对于逝去的过往，同样符合这个理论。</p>\n<p>原本已经写了一份年总结的，但不知怎的被我误删，而且使用恢复软件也找不回来，逼得我不得不重写。然而正是因为这次更为认真的重写，我得到了更多。</p>\n<h2 id=\"「职业发展-自我实现」\"><a href=\"#「职业发展-自我实现」\" class=\"headerlink\" title=\"「职业发展/自我实现」\"></a>「职业发展/自我实现」</h2><h3 id=\"正反\"><a href=\"#正反\" class=\"headerlink\" title=\"正反\"></a>正反</h3><p>两年时间，把在NQ时的云平台系列产品重新造了出来，当然有相当大一部分是复用。我对这个结果不满意，两年时间只做了这么点事对于我和公司都是浪费。导致这个结果的原因是什么？</p>\n<ul>\n<li>需求有变化实属正常，问题在于我没有分辨需求的能力。需求有“需要”和“想要”之分，即刚需和非刚需之分，分辨能力太差的结果是我把所有需求当刚需，因此淹没了真正重要的需求。<strong>一言概之，没有把时间花在真正重要的事情上</strong>。然而也正是因为也这样的经历，我学会了如何去分辨和推敲需求。</li>\n<li>业务初期赶进度欠下太多技术债。在基础阶段<strong>取巧以及缺乏推敲</strong>，导致后期有大量问题需要完善。本质上这是能力的欠缺，至少现在我现在敢说考虑问题比两年前全面多了。</li>\n<li>没有发挥团队应有的力量，使得一加一小于二。有相当一段时间没处理好和LG的关系，关系拧巴。同时又没把DYF培养好，使其无论是知识储备、思维能力还是责任心，都没有太大的提升。现在回头看，LZ之前夸我有管理天赋是抬举了，可笑的是我信以为真了。现在反思，其实是自己的问题。一是<strong>逃避真正的思考</strong>，没有深入思考去解决和LG的分工问题，扯来扯去大家都难受；二是<strong>太过亲力亲为以及疑虑心太重</strong>，自己累不说，下属失去了成长的机会，如果我一早就充分放权就不是现在这样子了。我在NQ之所以能管理做得很好，一是因为个体足够优秀，二是无为而治——不懂导致自己充分放权。</li>\n</ul>\n<h3 id=\"合\"><a href=\"#合\" class=\"headerlink\" title=\"合\"></a>合</h3><h4 id=\"工作重心\"><a href=\"#工作重心\" class=\"headerlink\" title=\"工作重心\"></a>工作重心</h4><p>这两年的工作，可总结成一句话——<strong>低水平重复</strong>，我现在会的东西两年前也会。接下来的工作，有几个重心：</p>\n<ul>\n<li><strong>带好团队</strong>：让DYF真正成长起来，能够独当一面。目标是假如我离开，他完全能把现在的事情都接过去。</li>\n<li><strong>规划好产品的迭代</strong>：首先，分辨需求这里我必须严格把关，之前犯的错不能再犯；其次，不管是自己还是下面的人，做成什么样也必须严格把关，否则极有可能投入又是白费的；最后，做好产品，标准是我自己用起来都觉得挺棒的。</li>\n<li><strong>逃离舒适区</strong>：投身到那些重要而不紧急的事情去，且最好是我还不擅长的部分。现有工作有哪些是我不擅长而且比较重要的呢？<ul>\n<li>通信系软件：C++我还并不是特别得心应手； </li>\n<li>集群系软件：Hadoop系有好多东西是值得去学习并应用起来，提升效率的，这个需要花时间去研究；</li>\n<li>大型软件架构：作为一个大型软件，要考虑的问题其实是全方位的，性能、安全、负载均衡、监控、自动化部署等，这些其实都不是我特别熟悉的领域；</li>\n<li>产品的设计：这里需要部分电气基础知识，恰巧我现在学的都能用上；</li>\n<li>软件的交互设计：整个软件其实是缺乏设计的，既不好看又不好用，未必是我亲自去解决这些问题，<strong>但我需要能提得出问题呀</strong>！</li>\n<li>算法的研究和转化：这亦是需要我去学习的。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"刨根问底\"><a href=\"#刨根问底\" class=\"headerlink\" title=\"刨根问底\"></a>刨根问底</h4><p>再深入些思考，在职业路上，我究竟想要成长为什么样子？先来回顾下我过去曾有过的强烈愿望：</p>\n<ul>\n<li>做一个技术经理人：这一点其实是以我的前任上司的位置来锚定的，因为当时在我之上便是他了。但若你问我如何定义技术经理人，这绝对是我之前没有深入思考过的。</li>\n<li>做一名优秀的科技工作者：这一点其实是以HWQ的位置来锚定的，而且是LLS在一次谈话提出的。HWQ确实很优秀，基础扎实，思维模型又完备，极少的思维定式，但我想成长为这样的人吗？</li>\n</ul>\n<p><strong>语言学家告诉我们，如果我们脑子里没有一个概念的话，我们的脑子就会倾向于不去想那个事情</strong>。对于「在职业路上，我究竟想要成长为什么样子」，我是极度不清晰的。仔细审视下这个问题：</p>\n<ul>\n<li>「在职业路上」这个修饰定语是必须的，它是一个基本前提——必须能养活我自己；</li>\n<li>「我想成长为什么样子」描述的到底是能力圈、职业标签、做成什么样的事、为他人创造了什么价值，还是赚很多少钱？这是一个非常主观的问题。对于我而言，所谓CTO、架构师和技术经理人之类的职业标签带不来长久的满足感；能力圈足够广阔也不是，比如我会编程，但并不是会编程本身给我带来快乐；<strong>做什么样的事，为他人创造了什么价值算是我所追求的，能带来长久满足感的</strong>；乔布斯在二十几岁的时候就赚得盆满钵满，赚钱显然不是他最大满足感的来源，而且我也不太相信如果你为他人创造了价值却赚不到钱。</li>\n</ul>\n<p>思考到这里，问题变成了<strong>「我想做成什么样的事」</strong>，且这件事情必须是我认可且能够为他人创造价值的。这跟乔布斯的观点其实是不谋而合的。</p>\n<blockquote>\n<p>Steven Jobs : Your work is going to <strong>fill a large part of your life</strong>, and the only way to be truly satisfied is to do what you believe is great work. And <strong>the only way to do great work is to love what you do. If you haven’t found it yet, keep looking. Don’t settle</strong>. As with all matters of the heart, you’ll know when you find it. And, like any great relationship, it just gets better and better as the years roll on. So keep looking until you find it. Don’t settle.</p>\n</blockquote>\n<p>注意乔布斯这里用的是「Love what you do」，而不是「Do what you love」，WHY？假如你有这样一个朋友，他干了几个月销售工作，然后跳槽去干IT，干没几个月又跳槽去卖保险，然后不断重复。你问他为什么频繁跳槽，他很理直气壮的告诉你——我不喜欢啊！那这又算什么？显然，一味强调「Do what you love」<strong>可能成为你逃避深入的幌子</strong>，而「Love what you do」的事情未必是你一开始就喜欢的，可能是因为你做得越来越好，并从中发现乐趣。至此，我为「我想做成什么样的事」添加了如下几个必要条件：</p>\n<ul>\n<li><strong>满足基本生存需要</strong>；</li>\n<li><strong>great work/伟大的工作</strong>；</li>\n<li><strong>我现在或将来可能热爱它</strong>；</li>\n<li><strong>为他人创造价值</strong>。</li>\n</ul>\n<p>我还没有找到它，但至少我有了方向，它可能是「写作」，也可能是「Make some great product」。我坚信能为他人创造价值的「写作」是一项伟大的工作，我对其热爱的体现是写作时几乎感受不到时间的流逝，但它现在还没办法「满足基本生存需要」，或者说还有一定距离。至于「Make some great product」，是因为我从类似「知乎」和「得到」之类的产品上获益不少，<strong>总得叫人也得我点好处吧</strong>（这点是胡适先生对我的影响，不朽的影响）！大学和工作时，对于某些自己喜欢的编程工作，绝对是不舍昼夜、不知疲倦。终有一天，我也能做一个这样的产品出来。</p>\n<p>至于为什么一再强调为他人创造价值，这也算<a href=\"http://baike.baidu.com/link?url=-NbUYB9KkHS0LoSwnsBmFJIgLuTA4_HAVrYKM7SfyHivevAlKrlatetVVayoqbcKWjOLFiSaxWfxE1Ao0lxiMeyQyqlx34XgnjnSnNHUBAXBdMbHZGNaBVo9SbzTCdAHfp1A47WrOT9z77e6r2qkVC-q12euDP4dZKNPL7H15nXXJuwCMTv4OpaSGb9OzlR8kZ46cO5VVpmsbU4AG2wZTMM_9fCwJPKlKlalHADtcLy\" target=\"_blank\" rel=\"noopener\">查理芒格老先生</a>对我的一点影响。芒格先生是「<strong>商才士魂</strong>」的典范，商业上取得了巨大的成功，为人上却更像是个学富五车的学者。《穷查理宝典》里面有一句话大意是这样的：古人讲「正心，修身，齐家，治国，平天下」，在当下的时代背景「<strong>正心，修身，齐家，治业，助天下</strong>」更为恰当。芒格先生正是这样的一个人，当你被其魅力深深吸引，你就会不自觉的也想成为这样的人。</p>\n<h2 id=\"「个人成长」\"><a href=\"#「个人成长」\" class=\"headerlink\" title=\"「个人成长」\"></a>「个人成长」</h2><h3 id=\"正反-1\"><a href=\"#正反-1\" class=\"headerlink\" title=\"正反\"></a>正反</h3><p>思维能力上，回首两年前自己混沌的状态，我恨不得去撞墙，至少这方面我是有所成长的，这得益于我掉进去的很多坑以及不间断的反思。过去两年一直坚持用印象笔记写日记，不敢说天天写写，但至少每周都写。在日记里，<strong>除了主动做出反思，我还不断将我吸收到的一些知识输出为文字</strong>，这对我的帮助真的很大。举一些例子吧！以下几点我现在几乎很少再犯了——</p>\n<ul>\n<li>两年前，说话时思维是没有结构的，想到什么说什么，经常说错话或者说一些不该说的话；</li>\n<li>两年前，基本是人云亦云的状态，别人说什么就是什么，自己很少主动的去思考或质疑；</li>\n<li>两年前，稍稍不注意就犯「定义不清晰」的错误，和别人沟通时经常被误解，讲半天话都讲不清楚；</li>\n<li>两年前，管理不好自己的情绪，经常性的UP AND DOWN；</li>\n<li>两年前，疑虑心很重；</li>\n<li>两年前，经常在一些「不是最重要」的事情上折腾；</li>\n<li>两年前，……</li>\n</ul>\n<p>技术能力上，并没有质的飞跃，我现在做的事情我在两年前几乎都接触过了。是有学了一些东西，如备考研时把数学和4门计算机基础课全滚了一遍，如对Linux环境下编程的熟悉，只是细数之下真的少得可怜。不客气的讲，我在技术能力上的成长真的太少了，<strong>这从客观上反映了我过去两年的懒惰和自欺欺人（一直自我感觉良好）</strong>。两年下来，技术博客寥寥几篇，没有创造什么个人软件作品，电和数学等跨学科学习也并没有推进太多。</p>\n<p>个人爱好上，吉他是很大的一个缺憾，好多次拿起又放下，拿起又放下。最长的一次坚持了至少有3个月左右，弹吉他时我真的很快乐，为什么放下呢？</p>\n<ul>\n<li><strong>目的不够清晰</strong>：到底目标是指弹还是弹唱？我并没有想清楚。</li>\n<li><strong>进步不大，没有成就感</strong>：首先，照着卢家宏指弹吉他书籍练了几月，突然发现缺了一章，指弹就没再进行下去了，现在想来其实是我受不了指弹的枯燥练习。其次，连续练了几个月，竟然没有一首曲子是能独奏的，这真的有点不应该，现在回想当时的策略应先把一首曲子攻克，这样自己也有成就感很多。</li>\n</ul>\n<p>个人爱好的另外一个缺憾是摄影，是很想把照片拍好，但我在这上面投入的时间真的太少，这说明了其实是不够热爱。</p>\n<h3 id=\"合-1\"><a href=\"#合-1\" class=\"headerlink\" title=\"合\"></a>合</h3><p>思维上，通过过去两年的反思，我深刻认识到一件事情：<strong>我是一个偏向于感性思维的人，并且基本逻辑不强</strong>。除了不断的读书、思考和主动输出，没有更好的锻炼方式了。过去两年读的书真的是太少了，今年我要「好好读书」。</p>\n<p>专业上，目前我最大的问题是<strong>没有核心竞争力</strong>，我现在会的DYF花点时间基本也都会了，我还没什么足以自傲的呢！未来我该如何努力呢？我想有以下几点：</p>\n<ul>\n<li><strong>巩固基础</strong>：计算机的几门<strong>基础课程</strong>我并没有融会贯通，必须再滚一遍。同时亦没有一门<strong>语言</strong>是特别深入的，这也是需要花时间学习的。</li>\n<li><strong>跨专业</strong>：跨专业的目的不是说我能把数学和电学得多么厉害，而是要学习这些学科的基本思想。一是给自己融会贯通的机会，二是提高多维思考的素材。跨专业学习，目的是像<a href=\"http://baike.baidu.com/link?url=-NbUYB9KkHS0LoSwnsBmFJIgLuTA4_HAVrYKM7SfyHivevAlKrlatetVVayoqbcKWjOLFiSaxWfxE1Ao0lxiMeyQyqlx34XgnjnSnNHUBAXBdMbHZGNaBVo9SbzTCdAHfp1A47WrOT9z77e6r2qkVC-q12euDP4dZKNPL7H15nXXJuwCMTv4OpaSGb9OzlR8kZ46cO5VVpmsbU4AG2wZTMM_9fCwJPKlKlalHADtcLy\" target=\"_blank\" rel=\"noopener\">查理芒格老先生</a>那样，具备<strong>多元的思维模型</strong>，然后用这个模型去处理所有问题。</li>\n<li><p><strong>「主动输出以及解决问题」倒逼输入</strong>：刘老师提醒我，具体一门技术的使用，其实我已经不需要刻意花很多时间去学习了。未来的提高方式，可以是主动输出去创作一些东西，或是去解决一些撩人的问题。</p>\n<p>  实际上，专业的提高和思维的提高其实是相辅相成的。</p>\n</li>\n</ul>\n<p>个人爱好上，吉他我想要重新捡起来。因此之前的两个问题必须解决，</p>\n<ul>\n<li><strong>目的性极强</strong>：我的目的是学会弹唱几首曲子（非纯扫弦类），然后加入到一些吉他社群中去，一起唱歌一起玩；</li>\n<li><strong>收获成就感</strong>：一首曲子一首曲子来，各个击破。</li>\n</ul>\n<h2 id=\"「财务状况」\"><a href=\"#「财务状况」\" class=\"headerlink\" title=\"「财务状况」\"></a>「财务状况」</h2><p>先说说「节流」。16年4月11时我算过数，除去家用4万，我超支消费至少5万，平均一年超支消费1万7。现在是17年4月14，按照50%收入用于开支来计算，我超支消费也是1万7。也就是说从13年7月参加工作至17年4月，我共计超支消费67000，平均下来是每个月2977，<strong>这是个多么可怕的数字啊</strong>！可见，「节流」是多么的重要啊！17年，我的节流目标是每月开支不超3000，并建立8000左右的专项旅行基金。</p>\n<p>再说说「开源」。我的家庭乃至我的家族，都没有经商的基因，都是过的中规中矩的营生。过去几年，我的思维方式是：<strong>好好工作，钱的事情公司会帮我解决的</strong>。真的，我就是这么想的，现在回想简直可怕，我这不是疯了吗？公司一定需要为你的「钱途」负责吗？就算不负责，也不犯法啊！想到这点，我的观念转变了，<strong>赚钱这事情，只能靠自己</strong>。按照<a href=\"http://baike.baidu.com/link?url=-NbUYB9KkHS0LoSwnsBmFJIgLuTA4_HAVrYKM7SfyHivevAlKrlatetVVayoqbcKWjOLFiSaxWfxE1Ao0lxiMeyQyqlx34XgnjnSnNHUBAXBdMbHZGNaBVo9SbzTCdAHfp1A47WrOT9z77e6r2qkVC-q12euDP4dZKNPL7H15nXXJuwCMTv4OpaSGb9OzlR8kZ46cO5VVpmsbU4AG2wZTMM_9fCwJPKlKlalHADtcLy\" target=\"_blank\" rel=\"noopener\">查理芒格老先生</a>的观点，<strong>「任何一个问题，都可以使用正确的方法通过自学完全掌握，并可以在前人的基础上创新」</strong>。我相信赚钱绝对也是如此，虽然我还没在工作之外创造过收入，但我坚信这是可行的。另有一点是<a href=\"http://paper.people.com.cn/hqrw/html/2014-08/16/content_1497404.htm\" target=\"_blank\" rel=\"noopener\">吴军</a>先生点醒我的，「<strong>职业和谋生手段可以分开</strong>」，吴军先生本人的职业是计算机科学家兼作家，但他谋生的方式却是基金投资。能做到这两者合一确实难得，既然做不到那分开来也是自然而然的。开源这方面，我的目标是在17年创造出工作之外的收入，如果非要定一个数字，那就是6万元（这个数字是按照我今年的一项计划精心算出来的）。</p>\n<h2 id=\"「健康」\"><a href=\"#「健康」\" class=\"headerlink\" title=\"「健康」\"></a>「健康」</h2><p>过去两年，跑步、咏春拳和平板支撑都断断续续坚持过一段时间，但却没长久的坚持下来。今年有以下几个健康目标：</p>\n<ul>\n<li>一定要重新捡起来的健康计划是「跑步」，跟在萝岗时长期坚持跑步的身体状态比，我现在身体状况可以用差劲这两个字来形容；</li>\n<li>专项练习：一是瘦腹，二是核心肌肉群的锻炼，三是增强手臂力量。</li>\n</ul>\n<h2 id=\"「娱乐休闲」\"><a href=\"#「娱乐休闲」\" class=\"headerlink\" title=\"「娱乐休闲」\"></a>「娱乐休闲」</h2><p>这方面，这两年下来最值得留恋的是16年国庆时的草原之行。言语无法形容的草原之美，至今想来仍然十分的美好。长途旅行是特别能提高生活质量的一件事，今年定个小目标——再去长途旅行一次。</p>\n<h2 id=\"「朋友及重要他人」\"><a href=\"#「朋友及重要他人」\" class=\"headerlink\" title=\"「朋友及重要他人」\"></a>「朋友及重要他人」</h2><p>这两年来，不可避免的，和一些朋友还是慢慢的疏远了，而且这两年中几乎也没有结识新的朋友，圈子完全是闭塞的状态。今年关于这方面的目标是：</p>\n<ul>\n<li>定期和旧友们联络；</li>\n<li>加入一些社群或者组织，<strong>结识新的朋友</strong>。</li>\n</ul>\n<h2 id=\"「家庭」\"><a href=\"#「家庭」\" class=\"headerlink\" title=\"「家庭」\"></a>「家庭」</h2><p>这两年为家庭做的主要贡献是帮助老爸买房，现已在县城安了家。</p>\n<p>15年过年时，小妞爸爸的否定深深的打击了我，这也是我15年非常之迷茫的主要原因之一。通过思考和阅读，我走出了迷茫，这当然也少不了小妞的鼓励。和小妞恋爱已近三年，她潜移默化的影响了我许多。我对她的感觉也一直没变，我坚信她是对的那个人，今年的愿望之一便是步入婚姻的殿堂。</p>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><p>列举几本这两年帮助我成长的一些书：</p>\n<ul>\n<li><a href=\"https://book.douban.com/subject/5346110/\" target=\"_blank\" rel=\"noopener\">彼得考夫曼《穷查理宝典》</a></li>\n<li><a href=\"https://book.douban.com/subject/3609132/\" target=\"_blank\" rel=\"noopener\">李笑来《把时间当作朋友》</a></li>\n<li><a href=\"http://www.zhibimo.com/books/xiaolai/reborn-every-7-years\" target=\"_blank\" rel=\"noopener\">李笑来《七年就是一辈子》</a></li>\n<li><a href=\"https://book.douban.com/subject/25911858/\" target=\"_blank\" rel=\"noopener\">胡适《我们能做什么》</a></li>\n<li><a href=\"https://zhangjunjia.github.io/2016/08/28/attention/\">得到App：李笑来《通往财富自由之路》</a></li>\n<li><a href=\"https://book.douban.com/subject/1045818/\" target=\"_blank\" rel=\"noopener\">乔斯坦·贾德《苏菲的世界》</a></li>\n<li><a href=\"https://book.douban.com/subject/4860448/\" target=\"_blank\" rel=\"noopener\">张五常《经济解释卷一： 科学说需求》</a></li>\n</ul>"},{"title":"在Beaglebone Black/bbblack上使用i2c读取rx8025硬件时钟","date":"2017-04-20T10:42:49.000Z","comments":1,"_content":"\n简绍如何在Beaglebone Black/bbblack上使用i2c设置和读取外置的rx8025硬件时钟。\n\n<!--more-->\n\n## 如何使用\n\n注意，\n\n- 目前仅支持rx8025t和rx8025sa；\n- 目前仅支持i2c1（P9_17和P9_18，默认未启用）；\n\n```bash\ngit clone https://github.com/zhangjunjia/beaglebone_black_bbblack_rx8025.git\ncd beaglebone_black_bbblack_rx8025\ngcc rtc-8025.c -o rtc-8025\n## set bbblack os time to rx8025\n./rtc-8025 set\n## get rx8025time and set to os\n./rtc-8025 get\n```\n\n## 原理简介\n\n### beaglebone的准备\n\n1. 搭配好rx8025外电路，笔者选用的是i2c1口；\n2. 参考[BeagleBone Black I2C References][1]设置i2c1（即bash下执行`echo BB-I2C1 > /sys/devices/bone_capemgr.9/slots`）\n\n通过文章可知rx8025芯片的默认slave address是0x32，在代码[rtc-8025.c](https://github.com/zhangjunjia/beaglebone_black_bbblack_rx8025/blob/master/rtc-8025.c)可见。\n\n### i2c-dev\n\n笔者使用i2c-dev工具操作i2c设备与rx8025芯片进行通信。关于i2c-dev的详细实现见[i2c-dev-interface][2]的**Implementation details**章节。简要描述下：操作i2c设备的驱动由内核负责，通过上文的设置将i2c设备映射为一个系统文件，就能在用户空间下对i2c设备进行读写编程，实质是内核操作i2c设备的系统调用，SCL和SDL的控制完全由内核驱动接管。\n\n### rx8025t和rx8025sa的差别\n\nrx8025t的说明书见[rx8025_cn](https://github.com/zhangjunjia/beaglebone_black_bbblack_rx8025/blob/master/rx8025_cn.pdf)，rx8025sa的说明书见[RX8025SA](https://github.com/zhangjunjia/beaglebone_black_bbblack_rx8025/blob/master/RX8025SA.pdf)。下面从编程的角度列举其不同点，\n\n- **EEPROM**：rx8025t的寄存器为EEPROM，这意味着每次读写rx8025t后，其PC指针将增加1，越限时回到0，rx8025sa则不是；\n- **read操作结果不同**：rx8025sa在使用`read`函数读取时，属于情况`Read method from address Fh, with no specified start address for read opreation`（说明书第26页），因此`read`函数返回结果的第一个字节其实是0x0F寄存器的内容，而rx8025t的第一个字节是秒寄存器；\n- **未就绪位不同**：未就绪位为1表征芯片处于初始化状态或需要程序初始化芯片，此状态下寄存器的内容无意义，rx8025t的未就绪位为VLF，而rx8025sa为PON；\n- **小时表示不同**：rx8025t默认使用24小时制，rx8025sa支持12/24小时制；\n- **写操作的不同**：根据说明书时序图章节，rx8025t通过`write`函数写的第一个字节是寄存器的开始地址，而rx8025sa则是寄存器的开始地址加上传输模式。\n\n### TODO\n\n为什么读取rx8025t时，通过`read`函数读取到的第一个字节是秒寄存器，从时序图的角度如何解释？\n\n## reference\n\n1. [BeagleBone Black I2C References][1]\n2. [i2c-dev-interface][2]\n\n[1]: https://datko.net/2013/11/03/bbb_i2c/\n[2]: https://www.kernel.org/doc/Documentation/i2c/dev-interface","source":"_posts/2017-04-20-rx-8025.md","raw":"---\ntitle: 在Beaglebone Black/bbblack上使用i2c读取rx8025硬件时钟\ndate: 2017-04-20 18:42:49\ncomments: true\ncategories: ['编程实践'] \ntags: ['I2C', 'rx8025', 'Beaglebone']\n---\n\n简绍如何在Beaglebone Black/bbblack上使用i2c设置和读取外置的rx8025硬件时钟。\n\n<!--more-->\n\n## 如何使用\n\n注意，\n\n- 目前仅支持rx8025t和rx8025sa；\n- 目前仅支持i2c1（P9_17和P9_18，默认未启用）；\n\n```bash\ngit clone https://github.com/zhangjunjia/beaglebone_black_bbblack_rx8025.git\ncd beaglebone_black_bbblack_rx8025\ngcc rtc-8025.c -o rtc-8025\n## set bbblack os time to rx8025\n./rtc-8025 set\n## get rx8025time and set to os\n./rtc-8025 get\n```\n\n## 原理简介\n\n### beaglebone的准备\n\n1. 搭配好rx8025外电路，笔者选用的是i2c1口；\n2. 参考[BeagleBone Black I2C References][1]设置i2c1（即bash下执行`echo BB-I2C1 > /sys/devices/bone_capemgr.9/slots`）\n\n通过文章可知rx8025芯片的默认slave address是0x32，在代码[rtc-8025.c](https://github.com/zhangjunjia/beaglebone_black_bbblack_rx8025/blob/master/rtc-8025.c)可见。\n\n### i2c-dev\n\n笔者使用i2c-dev工具操作i2c设备与rx8025芯片进行通信。关于i2c-dev的详细实现见[i2c-dev-interface][2]的**Implementation details**章节。简要描述下：操作i2c设备的驱动由内核负责，通过上文的设置将i2c设备映射为一个系统文件，就能在用户空间下对i2c设备进行读写编程，实质是内核操作i2c设备的系统调用，SCL和SDL的控制完全由内核驱动接管。\n\n### rx8025t和rx8025sa的差别\n\nrx8025t的说明书见[rx8025_cn](https://github.com/zhangjunjia/beaglebone_black_bbblack_rx8025/blob/master/rx8025_cn.pdf)，rx8025sa的说明书见[RX8025SA](https://github.com/zhangjunjia/beaglebone_black_bbblack_rx8025/blob/master/RX8025SA.pdf)。下面从编程的角度列举其不同点，\n\n- **EEPROM**：rx8025t的寄存器为EEPROM，这意味着每次读写rx8025t后，其PC指针将增加1，越限时回到0，rx8025sa则不是；\n- **read操作结果不同**：rx8025sa在使用`read`函数读取时，属于情况`Read method from address Fh, with no specified start address for read opreation`（说明书第26页），因此`read`函数返回结果的第一个字节其实是0x0F寄存器的内容，而rx8025t的第一个字节是秒寄存器；\n- **未就绪位不同**：未就绪位为1表征芯片处于初始化状态或需要程序初始化芯片，此状态下寄存器的内容无意义，rx8025t的未就绪位为VLF，而rx8025sa为PON；\n- **小时表示不同**：rx8025t默认使用24小时制，rx8025sa支持12/24小时制；\n- **写操作的不同**：根据说明书时序图章节，rx8025t通过`write`函数写的第一个字节是寄存器的开始地址，而rx8025sa则是寄存器的开始地址加上传输模式。\n\n### TODO\n\n为什么读取rx8025t时，通过`read`函数读取到的第一个字节是秒寄存器，从时序图的角度如何解释？\n\n## reference\n\n1. [BeagleBone Black I2C References][1]\n2. [i2c-dev-interface][2]\n\n[1]: https://datko.net/2013/11/03/bbb_i2c/\n[2]: https://www.kernel.org/doc/Documentation/i2c/dev-interface","slug":"rx-8025","published":1,"updated":"2017-05-11T03:34:39.000Z","layout":"post","photos":[],"link":"","_id":"cjlza6maq004epgupl0lv1qnv","content":"<p>简绍如何在Beaglebone Black/bbblack上使用i2c设置和读取外置的rx8025硬件时钟。</p>\n<a id=\"more\"></a>\n<h2 id=\"如何使用\"><a href=\"#如何使用\" class=\"headerlink\" title=\"如何使用\"></a>如何使用</h2><p>注意，</p>\n<ul>\n<li>目前仅支持rx8025t和rx8025sa；</li>\n<li>目前仅支持i2c1（P9_17和P9_18，默认未启用）；</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/zhangjunjia/beaglebone_black_bbblack_rx8025.git</span><br><span class=\"line\"><span class=\"built_in\">cd</span> beaglebone_black_bbblack_rx8025</span><br><span class=\"line\">gcc rtc-8025.c -o rtc-8025</span><br><span class=\"line\"><span class=\"comment\">## set bbblack os time to rx8025</span></span><br><span class=\"line\">./rtc-8025 <span class=\"built_in\">set</span></span><br><span class=\"line\"><span class=\"comment\">## get rx8025time and set to os</span></span><br><span class=\"line\">./rtc-8025 get</span><br></pre></td></tr></table></figure>\n<h2 id=\"原理简介\"><a href=\"#原理简介\" class=\"headerlink\" title=\"原理简介\"></a>原理简介</h2><h3 id=\"beaglebone的准备\"><a href=\"#beaglebone的准备\" class=\"headerlink\" title=\"beaglebone的准备\"></a>beaglebone的准备</h3><ol>\n<li>搭配好rx8025外电路，笔者选用的是i2c1口；</li>\n<li>参考<a href=\"https://datko.net/2013/11/03/bbb_i2c/\" target=\"_blank\" rel=\"noopener\">BeagleBone Black I2C References</a>设置i2c1（即bash下执行<code>echo BB-I2C1 &gt; /sys/devices/bone_capemgr.9/slots</code>）</li>\n</ol>\n<p>通过文章可知rx8025芯片的默认slave address是0x32，在代码<a href=\"https://github.com/zhangjunjia/beaglebone_black_bbblack_rx8025/blob/master/rtc-8025.c\" target=\"_blank\" rel=\"noopener\">rtc-8025.c</a>可见。</p>\n<h3 id=\"i2c-dev\"><a href=\"#i2c-dev\" class=\"headerlink\" title=\"i2c-dev\"></a>i2c-dev</h3><p>笔者使用i2c-dev工具操作i2c设备与rx8025芯片进行通信。关于i2c-dev的详细实现见<a href=\"https://www.kernel.org/doc/Documentation/i2c/dev-interface\" target=\"_blank\" rel=\"noopener\">i2c-dev-interface</a>的<strong>Implementation details</strong>章节。简要描述下：操作i2c设备的驱动由内核负责，通过上文的设置将i2c设备映射为一个系统文件，就能在用户空间下对i2c设备进行读写编程，实质是内核操作i2c设备的系统调用，SCL和SDL的控制完全由内核驱动接管。</p>\n<h3 id=\"rx8025t和rx8025sa的差别\"><a href=\"#rx8025t和rx8025sa的差别\" class=\"headerlink\" title=\"rx8025t和rx8025sa的差别\"></a>rx8025t和rx8025sa的差别</h3><p>rx8025t的说明书见<a href=\"https://github.com/zhangjunjia/beaglebone_black_bbblack_rx8025/blob/master/rx8025_cn.pdf\" target=\"_blank\" rel=\"noopener\">rx8025_cn</a>，rx8025sa的说明书见<a href=\"https://github.com/zhangjunjia/beaglebone_black_bbblack_rx8025/blob/master/RX8025SA.pdf\" target=\"_blank\" rel=\"noopener\">RX8025SA</a>。下面从编程的角度列举其不同点，</p>\n<ul>\n<li><strong>EEPROM</strong>：rx8025t的寄存器为EEPROM，这意味着每次读写rx8025t后，其PC指针将增加1，越限时回到0，rx8025sa则不是；</li>\n<li><strong>read操作结果不同</strong>：rx8025sa在使用<code>read</code>函数读取时，属于情况<code>Read method from address Fh, with no specified start address for read opreation</code>（说明书第26页），因此<code>read</code>函数返回结果的第一个字节其实是0x0F寄存器的内容，而rx8025t的第一个字节是秒寄存器；</li>\n<li><strong>未就绪位不同</strong>：未就绪位为1表征芯片处于初始化状态或需要程序初始化芯片，此状态下寄存器的内容无意义，rx8025t的未就绪位为VLF，而rx8025sa为PON；</li>\n<li><strong>小时表示不同</strong>：rx8025t默认使用24小时制，rx8025sa支持12/24小时制；</li>\n<li><strong>写操作的不同</strong>：根据说明书时序图章节，rx8025t通过<code>write</code>函数写的第一个字节是寄存器的开始地址，而rx8025sa则是寄存器的开始地址加上传输模式。</li>\n</ul>\n<h3 id=\"TODO\"><a href=\"#TODO\" class=\"headerlink\" title=\"TODO\"></a>TODO</h3><p>为什么读取rx8025t时，通过<code>read</code>函数读取到的第一个字节是秒寄存器，从时序图的角度如何解释？</p>\n<h2 id=\"reference\"><a href=\"#reference\" class=\"headerlink\" title=\"reference\"></a>reference</h2><ol>\n<li><a href=\"https://datko.net/2013/11/03/bbb_i2c/\" target=\"_blank\" rel=\"noopener\">BeagleBone Black I2C References</a></li>\n<li><a href=\"https://www.kernel.org/doc/Documentation/i2c/dev-interface\" target=\"_blank\" rel=\"noopener\">i2c-dev-interface</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>简绍如何在Beaglebone Black/bbblack上使用i2c设置和读取外置的rx8025硬件时钟。</p>","more":"<h2 id=\"如何使用\"><a href=\"#如何使用\" class=\"headerlink\" title=\"如何使用\"></a>如何使用</h2><p>注意，</p>\n<ul>\n<li>目前仅支持rx8025t和rx8025sa；</li>\n<li>目前仅支持i2c1（P9_17和P9_18，默认未启用）；</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/zhangjunjia/beaglebone_black_bbblack_rx8025.git</span><br><span class=\"line\"><span class=\"built_in\">cd</span> beaglebone_black_bbblack_rx8025</span><br><span class=\"line\">gcc rtc-8025.c -o rtc-8025</span><br><span class=\"line\"><span class=\"comment\">## set bbblack os time to rx8025</span></span><br><span class=\"line\">./rtc-8025 <span class=\"built_in\">set</span></span><br><span class=\"line\"><span class=\"comment\">## get rx8025time and set to os</span></span><br><span class=\"line\">./rtc-8025 get</span><br></pre></td></tr></table></figure>\n<h2 id=\"原理简介\"><a href=\"#原理简介\" class=\"headerlink\" title=\"原理简介\"></a>原理简介</h2><h3 id=\"beaglebone的准备\"><a href=\"#beaglebone的准备\" class=\"headerlink\" title=\"beaglebone的准备\"></a>beaglebone的准备</h3><ol>\n<li>搭配好rx8025外电路，笔者选用的是i2c1口；</li>\n<li>参考<a href=\"https://datko.net/2013/11/03/bbb_i2c/\" target=\"_blank\" rel=\"noopener\">BeagleBone Black I2C References</a>设置i2c1（即bash下执行<code>echo BB-I2C1 &gt; /sys/devices/bone_capemgr.9/slots</code>）</li>\n</ol>\n<p>通过文章可知rx8025芯片的默认slave address是0x32，在代码<a href=\"https://github.com/zhangjunjia/beaglebone_black_bbblack_rx8025/blob/master/rtc-8025.c\" target=\"_blank\" rel=\"noopener\">rtc-8025.c</a>可见。</p>\n<h3 id=\"i2c-dev\"><a href=\"#i2c-dev\" class=\"headerlink\" title=\"i2c-dev\"></a>i2c-dev</h3><p>笔者使用i2c-dev工具操作i2c设备与rx8025芯片进行通信。关于i2c-dev的详细实现见<a href=\"https://www.kernel.org/doc/Documentation/i2c/dev-interface\" target=\"_blank\" rel=\"noopener\">i2c-dev-interface</a>的<strong>Implementation details</strong>章节。简要描述下：操作i2c设备的驱动由内核负责，通过上文的设置将i2c设备映射为一个系统文件，就能在用户空间下对i2c设备进行读写编程，实质是内核操作i2c设备的系统调用，SCL和SDL的控制完全由内核驱动接管。</p>\n<h3 id=\"rx8025t和rx8025sa的差别\"><a href=\"#rx8025t和rx8025sa的差别\" class=\"headerlink\" title=\"rx8025t和rx8025sa的差别\"></a>rx8025t和rx8025sa的差别</h3><p>rx8025t的说明书见<a href=\"https://github.com/zhangjunjia/beaglebone_black_bbblack_rx8025/blob/master/rx8025_cn.pdf\" target=\"_blank\" rel=\"noopener\">rx8025_cn</a>，rx8025sa的说明书见<a href=\"https://github.com/zhangjunjia/beaglebone_black_bbblack_rx8025/blob/master/RX8025SA.pdf\" target=\"_blank\" rel=\"noopener\">RX8025SA</a>。下面从编程的角度列举其不同点，</p>\n<ul>\n<li><strong>EEPROM</strong>：rx8025t的寄存器为EEPROM，这意味着每次读写rx8025t后，其PC指针将增加1，越限时回到0，rx8025sa则不是；</li>\n<li><strong>read操作结果不同</strong>：rx8025sa在使用<code>read</code>函数读取时，属于情况<code>Read method from address Fh, with no specified start address for read opreation</code>（说明书第26页），因此<code>read</code>函数返回结果的第一个字节其实是0x0F寄存器的内容，而rx8025t的第一个字节是秒寄存器；</li>\n<li><strong>未就绪位不同</strong>：未就绪位为1表征芯片处于初始化状态或需要程序初始化芯片，此状态下寄存器的内容无意义，rx8025t的未就绪位为VLF，而rx8025sa为PON；</li>\n<li><strong>小时表示不同</strong>：rx8025t默认使用24小时制，rx8025sa支持12/24小时制；</li>\n<li><strong>写操作的不同</strong>：根据说明书时序图章节，rx8025t通过<code>write</code>函数写的第一个字节是寄存器的开始地址，而rx8025sa则是寄存器的开始地址加上传输模式。</li>\n</ul>\n<h3 id=\"TODO\"><a href=\"#TODO\" class=\"headerlink\" title=\"TODO\"></a>TODO</h3><p>为什么读取rx8025t时，通过<code>read</code>函数读取到的第一个字节是秒寄存器，从时序图的角度如何解释？</p>\n<h2 id=\"reference\"><a href=\"#reference\" class=\"headerlink\" title=\"reference\"></a>reference</h2><ol>\n<li><a href=\"https://datko.net/2013/11/03/bbb_i2c/\" target=\"_blank\" rel=\"noopener\">BeagleBone Black I2C References</a></li>\n<li><a href=\"https://www.kernel.org/doc/Documentation/i2c/dev-interface\" target=\"_blank\" rel=\"noopener\">i2c-dev-interface</a></li>\n</ol>"},{"title":"时间管理：如何掌控你的自由时间","date":"2017-04-11T10:45:21.000Z","comments":1,"_content":"\n本文的前4部分是[如何掌控你的自由时间 | TED](http://open.163.com/movie/2016/12/I/B/MC82BCQAN_MC8U8L3IB.html)的转译，第5部分是笔者个人的一些补充。转译若有错误，欢迎在评论区指正。[Laura Vanderkam](http://lauravanderkam.com/)的这个演讲不容错过，绝对能升级你对于「时间管理」的认知。\n\n<!-- more -->\n\n## Part1 时间管理的误区\n\n当人们发现我在写关于时间管理的内容时，通常有两个误解。\n\n一是我**很守时**，但我不是。我有4个孩子，我倒是想把迟到怪到他们头上，但这真不关他们事。有一次是在我的时间管理讲座迟到了，想想这有多讽刺。\n\n二是我有**很多节省时间的窍门**。经常有杂志社打电话来问我节省时间的小窍门，潜台词是——**利用每天节省下来的时间干大事**。我对其潜在意图表示怀疑，但我对他们的一些点子感兴趣，如把两个小时的电视剧录下来，快进其中30分钟广告用来锻炼身体，这样就节省了30分钟。但真正的好办法是，一天不要看两个小时的电视。杂志社的概念是**把零散时间加起来，这样就能成功**，这是有问题的。\n\n## Part2 什么才是真正的时间管理\n\n我通过研究成功人士的日程表发现：**掌控时间并不是通过节省时间来做成功的事，而是主动创造我们想要的生活**。当你这样做时，时间自动就省下来了。\n\n我曾进行过这样一项研究——统计1000个繁忙女性的时间开销，了解她们在时间上的分配。其中一个女士某一周的时间开销日志是这样的：周三晚她家里的热水器坏了，搞得地下室被淹透，这真是极其糟糕的体验。第二天她不得不找水管工来抽空地下室的水，找人修热水器，找人清理地毯。这些都记录在日志，占了该周7小时，平均每天一小时。但如果在那周的开始问她：你能挤出7小时用来锻炼身体吗？你能挤出7小时用来辅导孩子的学习吗？她的回答肯定是NO以及「你看不出我有多忙吗」。\n\n可是当地下室被水淹没，她不得不花上这7个小时，可见时间是有弹性的。我们无法创造更多时间，但**时间是否得到充分利用，取决于我们用它做什么。时间管理的真正关键，是对待真正重要的事情时像对待「坏掉的热水器」一样。**\n\n我还曾经采访过一位成功女性，她拥有一家公司，十二名雇员，6个孩子，很难预约得上。即使预约上了，她也可能没空。其中一次，她没空的原因是她要去徒步，因为那是个非常美丽的清晨。等我终于见到她时，**她说，「劳拉，我花的每一分钟都是我自己选择的」，她并不是说「我没有时间做甲乙丙丁」，而是说「我没有做因为那是不重要的事情」。**\n\n**我没时间，往往意味着这事情不重要**。我是没空擦百叶窗，但假如你给我10万美元，我立即就去，这不是时间不够的问题。所以，**时间其实是一种选择，我们的生活其实是我们选择的结果**。\n\n\n## Part3 如何掌控你的时间\n\n如何对待我们的生活，像对待「坏掉的热水器」一样呢？\n\n首先，你需要分析哪些才是真正重要的。先从工作开始吧！大部分人可能会在年末收到该年度的绩效评估，上面总结了过去一年的成绩和未来的发展机会，但我发现**直接做「未来的展望」**更加有效。假定现在是下一年，你对自己进行绩效评估，过去的一年你工作得非常出色，是因为你做了三到五件事情，把这几件事情写下来。\n\n当然，这一招也可用于私人生活，假如你过去的一年过得十分精彩，是因为你做了三五件事，把这几件事写下来，但别公布出去（某个心理学研究表明不宣布目标，成功的概率更高）。\n\n有了上述工作和生活的几件事，就有了接下来一年的6到10个目标。紧接着要对他们进行分解。\n\n- 假如你要做一份菜谱，那就通过书籍和朋友了解，然后动手制作；\n- 假如你要跑马拉松，你应该把你的跑鞋从鞋柜翻出来，然后制定训练计划。\n\n关键是要像对待那台「坏掉的热水器」一样，**把他们写到日程表的第一栏，要在一周的开始就想好这一周的计划**。我发现在周五下午做计划是最佳的时间，周五下午被经济学家称为「低机会成本时间」。你会发现每到周五，**人们是不会激动人心的宣布说我要朝着我个人和工作的首要目标努力，但却愿意花时间去思考什么是首要目标**。所以用一点星期五下午的时间，给自己列一张三栏优先顺序表，工作、感情和个人。列三栏是提醒自己要**注意三者的平衡**，因为我们经常会忽略感情和个人方面的计划。\n\n每个列表列好两三个事，纵观接下来一周，看看这些事情可以排在什么时候。怎么安排是你的选择，我知道这对部分人来说会比较复杂，有些人的生活就是比别人苦一些，比如有很多小孩要照顾。但接下来我要告诉你几个有力的数据，\n\n- **一周 = 24 * 7 = 168小时**，这是相当多的时间；\n- 假设你一周工作40小时，每天睡眠8小时（一周56小时），你还剩**72小时**可用来做其他的事情；\n- 假设你一周工作50小时，每天睡眠8小时（一周56小时），你还剩**62小时**可用来做其他的事情；\n- 假设你一周工作60小时，每天睡眠8小时（一周56小时），你还剩**52小时**可用来做其他的事情；\n- 假设你一周工作60小时，你确定你一周工作这么多小时？\n\n有一项研究表明，**当人们声称一周工作超过75小时，实际误差大概是25小时**。利用好这些时间，做真正重要的事，如陪伴你的孩子。即使你工作远超每天8小时，你仍有时间。实际上我们有很多的时间，有时甚至不需要很多时间就可以用来做精彩的事。不过大多数人有时间时做什么？拿出手机，玩微信，刷邮件，或是在家里晃荡。\n\n我对碎片时间的看法是，碎片时间也能充分利用并得到乐趣。碎片时间可以用来做什么呢？\n\n- 曾经我每天上班需要花两个小时，于是我就在公交上看书，通勤于我变成了享受；\n- 工作的休息时间可以用来冥想；\n- 工作繁忙时无法和家人吃晚餐，一起吃个早餐也不错。\n\n重点是留意一个人的整段时间，看看有意义的事情能安排到什么时候。**我真心相信，时间总是有的。即使我们很忙，还是有时间做重要的事情。如果我们集中时间在重要的事情上，我们就能用我们拥有的时间，打造出我们想要的生活**。谢谢大家！\n\n## Part4 Add-on\n\n总结一下：**时间管理就是做真正重要的事，像对待「坏掉的热水器」一样对待它们。**对于上文，笔者有几点补充，\n\n- **找到属于你自己的「坏掉的热水器」然后日拱一卒**：如果你**清楚的知道**了对自己而言，什么才是真正重要的事情，恭喜你！你要做的事情是每天都花时间在这上面，每天都要有所推进，做到日拱一卒。如果你没有，keep looking，don't settle！另外，「坏掉的热水器」这个比喻，只是作者举的例子，你可以把它换成属于你自己的比喻，前提是它能让你感受到紧迫感，逼着你非处理不可。比方说，可以是「坏掉的手机」、「打球扭伤了脚」和「发高烧」等等，尽情发挥想象力吧:)\n- **好好休息**：休息是性价比非常高的投入，高质量的休息能让你重新焕发精神，投入到工作和生活当中。知乎上有大量与这方面相关的问答，如[《如何高效地睡眠》](https://www.zhihu.com/question/19551007)。\n- **累了就切换**：曾读过一篇文章[《如何正确地休息》](http://mp.weixin.qq.com/s?__biz=MzIzMjEzMjMxOQ==&mid=2649368969&idx=3&sn=fd778a357c6d2d88d4b62a32ca0cb474&chksm=f0871239c7f09b2f1756732ef58968c22db4feef9f9ac7490eeed4666ec3cc6ac0782568a5f5&mpshare=1&scene=1&srcid=1016wNBpxR5oeQuSBta5d0PR#rd)，文中卢梭的观点非常具有启发性。如果你累了，尝试切换一下「进程」吧！\n    > 「我本不是一个生来适于研究学问的人，因为我用功的时间稍长一些就感到疲倦，甚至我不能一连半小时集中精力于一个问题上。但是，**我连续研究几个不同的问题，即使是不间断，我也能够轻松愉快地一个一个地寻思下去**，这一个问题可以消除另一个问题所带来的疲劳，用不着休息一下脑筋。于是，我就在我的治学中充分利用我所发现的这一特点，对一些问题交替进行研究。这样，即使我整天用功也不觉得疲倦了。」\n- **抗干扰能力**：「好好休息」和「累了就切换」，本质上是让你有更长久的「持续作战」能力，将时间倾注于要事。但时间的长度是有限的，从物理学的角度来讲，物体的质量等于体积乘以密度，当体积无法再增大时，想提高质量唯有增加密度。「抗干扰能力」的提升，本质上就是在提升时间的效率。笔者遵从最敬爱的一位智者查理芒格的教诲——「**反过来想，总是反过来想**」，要想如何提升「抗干扰能力」，先来看看如何才能尽可能的「分散你的注意力」，以下是笔者的一些总结：\n    - **电子产品**：尽可能在做事情时一边玩手机/电脑。微信、QQ、今日头条和微博等等数不胜数的软件产品，就是以「分散你的注意力」为目标来设计的。\n    - **人**：尽可能在做事情时频繁被打断或是去凑热闹。凑热闹是主动接触尽可能多的「干扰源」，即主动将时间碎片化。被打断是不懂得如何处理「干扰」，如果**你不懂得拒绝，不懂得判断事情的重要程度**，你的时间就会被人为的碎片化。\n    - **玩物**：尽可能在做事情时在旁边放上几样有趣的事物，让这些好玩的、有趣的东西分散你的注意力。\n    - **性欲**：花大量时间浏览黄片或是找黄图，让自己荷尔蒙爆棚！\n    \n    最后总结下：快速提升「抗干扰能力」的最佳建议是，**在你认真做事情时，把手机设置为静音和断网状态，把电脑不相关的软件和网页全关了，并尽可能找个独立空间待着**。如果你想锻炼自己对于「干扰源」的抗干扰的能力，在做事情时主动接触干扰源用以刻意练习是个不错的主意，[刘未鹏](mindhacks.cn)就是这么做的，这家伙就曾在嘈杂的环境下啃大部头用以锻炼自己的抗干扰能力。\n\n- **处理好你的内心世界**：**身体和内心世界是相互影响的**，最好的例子是如果你相信自己得了癌症（实际上并没有）并郁郁寡欢，你便会快速走向死亡。如果你没办法处理好自己的内心世界，没有稳定的精神边界和稳固的价值观，你的精神状态好不到哪去。对于此，**读书和思考**是最佳良药。读书有启迪心灵之力，而思考则使你思维变得更加的清晰，有助于你将「一团乱麻」进行「抽丝剥缕」，有助于你看清楚和看开。对于思考，向内看亦即**反思的重要性再强调也不为过**。反思是对自己思考的思考（一切行为皆是思考的产物），如果将人比喻为一个系统，反思就是在帮你找出系统存在的漏洞，使得这个系统更加的健壮和稳定。\n- **避免懒惰**：以上作者的言论以及笔者的补充，只需一点就可以完全摧毁——那就是「**懒惰**」。懒惰使你对自己宽容，懒惰使你舒服的待在让你无法成长的舒适区内。不要拿「劳逸结合」来自欺欺人，先问问自己——**今天计划要做的事情做到了吗？**还有一点需要纠正的是，**逃避现实本质上也是一种懒惰**——思考上的懒惰。\n\n笔者不太晓得「市面上」所谓的时间管理的概念及方法是怎样的，但笔者相信[Laura Vanderkam](http://lauravanderkam.com/)的观点是正确无误的。说说笔者近期实践之后的一些改变吧！\n\n1. Plan：遵循SMART原则写好了「年计划书」，在每月、每周、每日的开始通过teambition和Evernote制定计划。\n2. Do：极其关注自己注意力的分配，并每天都花时间（碎片时间时能把重要的事情做一点是一点）在那些真正重要的事情上，确保不偏离主线。不拿劳逸结合当借口，先把该完成的完成了再谈娱乐和休闲。\n3. Check：每天通过日记反思与复盘，每周、月末都写总结，每天都不断追问自己真正重要的是什么。\n4. Action：根据反思和复盘的结果，对自己的行为和观点进行调整。\n\n然后不断重复以上的戴明环，循环往复。最后以查理芒格的一句话作为结尾：**简单是长期努力的结果，而不是起点**。\n\n## Reference\n\n以下为本文的reference：\n\n1. [如何掌控你的自由时间 | TED](http://open.163.com/movie/2016/12/I/B/MC82BCQAN_MC8U8L3IB.html)\n2. [Laura Vanderkam's Blog](http://lauravanderkam.com/)\n3. [如何高效地睡眠](https://www.zhihu.com/question/19551007)\n4. [如何正确地休息](http://mp.weixin.qq.com/s?__biz=MzIzMjEzMjMxOQ==&mid=2649368969&idx=3&sn=fd778a357c6d2d88d4b62a32ca0cb474&chksm=f0871239c7f09b2f1756732ef58968c22db4feef9f9ac7490eeed4666ec3cc6ac0782568a5f5&mpshare=1&scene=1&srcid=1016wNBpxR5oeQuSBta5d0PR#rd)\n5. [刘未鹏|思维改变生活](mindhacks.cn)\n\n以下为笔者看过的有助于你加深「时间管理就是做真正重要的事」这个概念的资料。\n\n1. 书籍\n - [史蒂芬柯尾《高效能人士的七个习惯》](https://book.douban.com/subject/5325618/)\n - [李笑来《把时间当作朋友》](https://book.douban.com/subject/3609132/)\n - [彼得考夫曼《穷查理宝典》](https://book.douban.com/subject/5346110/)\n2. 视频\n - [古典《做人生玩家，让人生像游戏般好玩》](http://www.iqiyi.com/v_19rrkh4doc.html)\n - [大石头理论哲学课](https://v.qq.com/x/page/j0360i8km7z.html)\n3. 文章\n - [吴军：不做伪工作者](http://www.nowamagic.net/librarys/news/detail/2255)\n - [吴军-得到直播笔记](http://mp.weixin.qq.com/s?src=3&timestamp=1492097530&ver=1&signature=NKrr2xS7boDFbcrVd1huuPKquCHHMtFMD-9Y24pMEjonX1181cSRMxgEqm-9H0xwPOkgsXPkkLsvlDvFJ*NQ3OCjKDzh0KKq9TfaokJZoOML5P*3qeYsn1QQfbV3298CXEsJiEFEnUF1bRrz2yxjvdF8QT5IwQ9cHryHzG6WWdc=)\n - [神奇的时间管理术：就因为没时间，才什么都能办到](http://mp.weixin.qq.com/s?__biz=MzA4NDIwNjg2OA==&mid=400409993&idx=1&sn=93048e912aa4d0e4d895462cf6b6b2a5&scene=5&srcid=0914VYozI2UyvgLn0477Ea7I#rd)\n - [古典：用「生命之花」做怦然心动的月计划](http://www.360doc.com/content/15/1125/22/8785791_515833629.shtml)\n","source":"_posts/2017-04-11-how-to-manager-your-time.md","raw":"---\ntitle: 时间管理：如何掌控你的自由时间 \ndate: 2017-04-11 18:45:21\ncomments: true\ncategories: ['读书笔记']\ntags: ['时间管理', 'TED', '成长日志']\n---\n\n本文的前4部分是[如何掌控你的自由时间 | TED](http://open.163.com/movie/2016/12/I/B/MC82BCQAN_MC8U8L3IB.html)的转译，第5部分是笔者个人的一些补充。转译若有错误，欢迎在评论区指正。[Laura Vanderkam](http://lauravanderkam.com/)的这个演讲不容错过，绝对能升级你对于「时间管理」的认知。\n\n<!-- more -->\n\n## Part1 时间管理的误区\n\n当人们发现我在写关于时间管理的内容时，通常有两个误解。\n\n一是我**很守时**，但我不是。我有4个孩子，我倒是想把迟到怪到他们头上，但这真不关他们事。有一次是在我的时间管理讲座迟到了，想想这有多讽刺。\n\n二是我有**很多节省时间的窍门**。经常有杂志社打电话来问我节省时间的小窍门，潜台词是——**利用每天节省下来的时间干大事**。我对其潜在意图表示怀疑，但我对他们的一些点子感兴趣，如把两个小时的电视剧录下来，快进其中30分钟广告用来锻炼身体，这样就节省了30分钟。但真正的好办法是，一天不要看两个小时的电视。杂志社的概念是**把零散时间加起来，这样就能成功**，这是有问题的。\n\n## Part2 什么才是真正的时间管理\n\n我通过研究成功人士的日程表发现：**掌控时间并不是通过节省时间来做成功的事，而是主动创造我们想要的生活**。当你这样做时，时间自动就省下来了。\n\n我曾进行过这样一项研究——统计1000个繁忙女性的时间开销，了解她们在时间上的分配。其中一个女士某一周的时间开销日志是这样的：周三晚她家里的热水器坏了，搞得地下室被淹透，这真是极其糟糕的体验。第二天她不得不找水管工来抽空地下室的水，找人修热水器，找人清理地毯。这些都记录在日志，占了该周7小时，平均每天一小时。但如果在那周的开始问她：你能挤出7小时用来锻炼身体吗？你能挤出7小时用来辅导孩子的学习吗？她的回答肯定是NO以及「你看不出我有多忙吗」。\n\n可是当地下室被水淹没，她不得不花上这7个小时，可见时间是有弹性的。我们无法创造更多时间，但**时间是否得到充分利用，取决于我们用它做什么。时间管理的真正关键，是对待真正重要的事情时像对待「坏掉的热水器」一样。**\n\n我还曾经采访过一位成功女性，她拥有一家公司，十二名雇员，6个孩子，很难预约得上。即使预约上了，她也可能没空。其中一次，她没空的原因是她要去徒步，因为那是个非常美丽的清晨。等我终于见到她时，**她说，「劳拉，我花的每一分钟都是我自己选择的」，她并不是说「我没有时间做甲乙丙丁」，而是说「我没有做因为那是不重要的事情」。**\n\n**我没时间，往往意味着这事情不重要**。我是没空擦百叶窗，但假如你给我10万美元，我立即就去，这不是时间不够的问题。所以，**时间其实是一种选择，我们的生活其实是我们选择的结果**。\n\n\n## Part3 如何掌控你的时间\n\n如何对待我们的生活，像对待「坏掉的热水器」一样呢？\n\n首先，你需要分析哪些才是真正重要的。先从工作开始吧！大部分人可能会在年末收到该年度的绩效评估，上面总结了过去一年的成绩和未来的发展机会，但我发现**直接做「未来的展望」**更加有效。假定现在是下一年，你对自己进行绩效评估，过去的一年你工作得非常出色，是因为你做了三到五件事情，把这几件事情写下来。\n\n当然，这一招也可用于私人生活，假如你过去的一年过得十分精彩，是因为你做了三五件事，把这几件事写下来，但别公布出去（某个心理学研究表明不宣布目标，成功的概率更高）。\n\n有了上述工作和生活的几件事，就有了接下来一年的6到10个目标。紧接着要对他们进行分解。\n\n- 假如你要做一份菜谱，那就通过书籍和朋友了解，然后动手制作；\n- 假如你要跑马拉松，你应该把你的跑鞋从鞋柜翻出来，然后制定训练计划。\n\n关键是要像对待那台「坏掉的热水器」一样，**把他们写到日程表的第一栏，要在一周的开始就想好这一周的计划**。我发现在周五下午做计划是最佳的时间，周五下午被经济学家称为「低机会成本时间」。你会发现每到周五，**人们是不会激动人心的宣布说我要朝着我个人和工作的首要目标努力，但却愿意花时间去思考什么是首要目标**。所以用一点星期五下午的时间，给自己列一张三栏优先顺序表，工作、感情和个人。列三栏是提醒自己要**注意三者的平衡**，因为我们经常会忽略感情和个人方面的计划。\n\n每个列表列好两三个事，纵观接下来一周，看看这些事情可以排在什么时候。怎么安排是你的选择，我知道这对部分人来说会比较复杂，有些人的生活就是比别人苦一些，比如有很多小孩要照顾。但接下来我要告诉你几个有力的数据，\n\n- **一周 = 24 * 7 = 168小时**，这是相当多的时间；\n- 假设你一周工作40小时，每天睡眠8小时（一周56小时），你还剩**72小时**可用来做其他的事情；\n- 假设你一周工作50小时，每天睡眠8小时（一周56小时），你还剩**62小时**可用来做其他的事情；\n- 假设你一周工作60小时，每天睡眠8小时（一周56小时），你还剩**52小时**可用来做其他的事情；\n- 假设你一周工作60小时，你确定你一周工作这么多小时？\n\n有一项研究表明，**当人们声称一周工作超过75小时，实际误差大概是25小时**。利用好这些时间，做真正重要的事，如陪伴你的孩子。即使你工作远超每天8小时，你仍有时间。实际上我们有很多的时间，有时甚至不需要很多时间就可以用来做精彩的事。不过大多数人有时间时做什么？拿出手机，玩微信，刷邮件，或是在家里晃荡。\n\n我对碎片时间的看法是，碎片时间也能充分利用并得到乐趣。碎片时间可以用来做什么呢？\n\n- 曾经我每天上班需要花两个小时，于是我就在公交上看书，通勤于我变成了享受；\n- 工作的休息时间可以用来冥想；\n- 工作繁忙时无法和家人吃晚餐，一起吃个早餐也不错。\n\n重点是留意一个人的整段时间，看看有意义的事情能安排到什么时候。**我真心相信，时间总是有的。即使我们很忙，还是有时间做重要的事情。如果我们集中时间在重要的事情上，我们就能用我们拥有的时间，打造出我们想要的生活**。谢谢大家！\n\n## Part4 Add-on\n\n总结一下：**时间管理就是做真正重要的事，像对待「坏掉的热水器」一样对待它们。**对于上文，笔者有几点补充，\n\n- **找到属于你自己的「坏掉的热水器」然后日拱一卒**：如果你**清楚的知道**了对自己而言，什么才是真正重要的事情，恭喜你！你要做的事情是每天都花时间在这上面，每天都要有所推进，做到日拱一卒。如果你没有，keep looking，don't settle！另外，「坏掉的热水器」这个比喻，只是作者举的例子，你可以把它换成属于你自己的比喻，前提是它能让你感受到紧迫感，逼着你非处理不可。比方说，可以是「坏掉的手机」、「打球扭伤了脚」和「发高烧」等等，尽情发挥想象力吧:)\n- **好好休息**：休息是性价比非常高的投入，高质量的休息能让你重新焕发精神，投入到工作和生活当中。知乎上有大量与这方面相关的问答，如[《如何高效地睡眠》](https://www.zhihu.com/question/19551007)。\n- **累了就切换**：曾读过一篇文章[《如何正确地休息》](http://mp.weixin.qq.com/s?__biz=MzIzMjEzMjMxOQ==&mid=2649368969&idx=3&sn=fd778a357c6d2d88d4b62a32ca0cb474&chksm=f0871239c7f09b2f1756732ef58968c22db4feef9f9ac7490eeed4666ec3cc6ac0782568a5f5&mpshare=1&scene=1&srcid=1016wNBpxR5oeQuSBta5d0PR#rd)，文中卢梭的观点非常具有启发性。如果你累了，尝试切换一下「进程」吧！\n    > 「我本不是一个生来适于研究学问的人，因为我用功的时间稍长一些就感到疲倦，甚至我不能一连半小时集中精力于一个问题上。但是，**我连续研究几个不同的问题，即使是不间断，我也能够轻松愉快地一个一个地寻思下去**，这一个问题可以消除另一个问题所带来的疲劳，用不着休息一下脑筋。于是，我就在我的治学中充分利用我所发现的这一特点，对一些问题交替进行研究。这样，即使我整天用功也不觉得疲倦了。」\n- **抗干扰能力**：「好好休息」和「累了就切换」，本质上是让你有更长久的「持续作战」能力，将时间倾注于要事。但时间的长度是有限的，从物理学的角度来讲，物体的质量等于体积乘以密度，当体积无法再增大时，想提高质量唯有增加密度。「抗干扰能力」的提升，本质上就是在提升时间的效率。笔者遵从最敬爱的一位智者查理芒格的教诲——「**反过来想，总是反过来想**」，要想如何提升「抗干扰能力」，先来看看如何才能尽可能的「分散你的注意力」，以下是笔者的一些总结：\n    - **电子产品**：尽可能在做事情时一边玩手机/电脑。微信、QQ、今日头条和微博等等数不胜数的软件产品，就是以「分散你的注意力」为目标来设计的。\n    - **人**：尽可能在做事情时频繁被打断或是去凑热闹。凑热闹是主动接触尽可能多的「干扰源」，即主动将时间碎片化。被打断是不懂得如何处理「干扰」，如果**你不懂得拒绝，不懂得判断事情的重要程度**，你的时间就会被人为的碎片化。\n    - **玩物**：尽可能在做事情时在旁边放上几样有趣的事物，让这些好玩的、有趣的东西分散你的注意力。\n    - **性欲**：花大量时间浏览黄片或是找黄图，让自己荷尔蒙爆棚！\n    \n    最后总结下：快速提升「抗干扰能力」的最佳建议是，**在你认真做事情时，把手机设置为静音和断网状态，把电脑不相关的软件和网页全关了，并尽可能找个独立空间待着**。如果你想锻炼自己对于「干扰源」的抗干扰的能力，在做事情时主动接触干扰源用以刻意练习是个不错的主意，[刘未鹏](mindhacks.cn)就是这么做的，这家伙就曾在嘈杂的环境下啃大部头用以锻炼自己的抗干扰能力。\n\n- **处理好你的内心世界**：**身体和内心世界是相互影响的**，最好的例子是如果你相信自己得了癌症（实际上并没有）并郁郁寡欢，你便会快速走向死亡。如果你没办法处理好自己的内心世界，没有稳定的精神边界和稳固的价值观，你的精神状态好不到哪去。对于此，**读书和思考**是最佳良药。读书有启迪心灵之力，而思考则使你思维变得更加的清晰，有助于你将「一团乱麻」进行「抽丝剥缕」，有助于你看清楚和看开。对于思考，向内看亦即**反思的重要性再强调也不为过**。反思是对自己思考的思考（一切行为皆是思考的产物），如果将人比喻为一个系统，反思就是在帮你找出系统存在的漏洞，使得这个系统更加的健壮和稳定。\n- **避免懒惰**：以上作者的言论以及笔者的补充，只需一点就可以完全摧毁——那就是「**懒惰**」。懒惰使你对自己宽容，懒惰使你舒服的待在让你无法成长的舒适区内。不要拿「劳逸结合」来自欺欺人，先问问自己——**今天计划要做的事情做到了吗？**还有一点需要纠正的是，**逃避现实本质上也是一种懒惰**——思考上的懒惰。\n\n笔者不太晓得「市面上」所谓的时间管理的概念及方法是怎样的，但笔者相信[Laura Vanderkam](http://lauravanderkam.com/)的观点是正确无误的。说说笔者近期实践之后的一些改变吧！\n\n1. Plan：遵循SMART原则写好了「年计划书」，在每月、每周、每日的开始通过teambition和Evernote制定计划。\n2. Do：极其关注自己注意力的分配，并每天都花时间（碎片时间时能把重要的事情做一点是一点）在那些真正重要的事情上，确保不偏离主线。不拿劳逸结合当借口，先把该完成的完成了再谈娱乐和休闲。\n3. Check：每天通过日记反思与复盘，每周、月末都写总结，每天都不断追问自己真正重要的是什么。\n4. Action：根据反思和复盘的结果，对自己的行为和观点进行调整。\n\n然后不断重复以上的戴明环，循环往复。最后以查理芒格的一句话作为结尾：**简单是长期努力的结果，而不是起点**。\n\n## Reference\n\n以下为本文的reference：\n\n1. [如何掌控你的自由时间 | TED](http://open.163.com/movie/2016/12/I/B/MC82BCQAN_MC8U8L3IB.html)\n2. [Laura Vanderkam's Blog](http://lauravanderkam.com/)\n3. [如何高效地睡眠](https://www.zhihu.com/question/19551007)\n4. [如何正确地休息](http://mp.weixin.qq.com/s?__biz=MzIzMjEzMjMxOQ==&mid=2649368969&idx=3&sn=fd778a357c6d2d88d4b62a32ca0cb474&chksm=f0871239c7f09b2f1756732ef58968c22db4feef9f9ac7490eeed4666ec3cc6ac0782568a5f5&mpshare=1&scene=1&srcid=1016wNBpxR5oeQuSBta5d0PR#rd)\n5. [刘未鹏|思维改变生活](mindhacks.cn)\n\n以下为笔者看过的有助于你加深「时间管理就是做真正重要的事」这个概念的资料。\n\n1. 书籍\n - [史蒂芬柯尾《高效能人士的七个习惯》](https://book.douban.com/subject/5325618/)\n - [李笑来《把时间当作朋友》](https://book.douban.com/subject/3609132/)\n - [彼得考夫曼《穷查理宝典》](https://book.douban.com/subject/5346110/)\n2. 视频\n - [古典《做人生玩家，让人生像游戏般好玩》](http://www.iqiyi.com/v_19rrkh4doc.html)\n - [大石头理论哲学课](https://v.qq.com/x/page/j0360i8km7z.html)\n3. 文章\n - [吴军：不做伪工作者](http://www.nowamagic.net/librarys/news/detail/2255)\n - [吴军-得到直播笔记](http://mp.weixin.qq.com/s?src=3&timestamp=1492097530&ver=1&signature=NKrr2xS7boDFbcrVd1huuPKquCHHMtFMD-9Y24pMEjonX1181cSRMxgEqm-9H0xwPOkgsXPkkLsvlDvFJ*NQ3OCjKDzh0KKq9TfaokJZoOML5P*3qeYsn1QQfbV3298CXEsJiEFEnUF1bRrz2yxjvdF8QT5IwQ9cHryHzG6WWdc=)\n - [神奇的时间管理术：就因为没时间，才什么都能办到](http://mp.weixin.qq.com/s?__biz=MzA4NDIwNjg2OA==&mid=400409993&idx=1&sn=93048e912aa4d0e4d895462cf6b6b2a5&scene=5&srcid=0914VYozI2UyvgLn0477Ea7I#rd)\n - [古典：用「生命之花」做怦然心动的月计划](http://www.360doc.com/content/15/1125/22/8785791_515833629.shtml)\n","slug":"how-to-manager-your-time","published":1,"updated":"2017-06-03T07:00:46.000Z","layout":"post","photos":[],"link":"","_id":"cjlza6mas004ipgupntkv36oy","content":"<p>本文的前4部分是<a href=\"http://open.163.com/movie/2016/12/I/B/MC82BCQAN_MC8U8L3IB.html\" target=\"_blank\" rel=\"noopener\">如何掌控你的自由时间 | TED</a>的转译，第5部分是笔者个人的一些补充。转译若有错误，欢迎在评论区指正。<a href=\"http://lauravanderkam.com/\" target=\"_blank\" rel=\"noopener\">Laura Vanderkam</a>的这个演讲不容错过，绝对能升级你对于「时间管理」的认知。</p>\n<a id=\"more\"></a>\n<h2 id=\"Part1-时间管理的误区\"><a href=\"#Part1-时间管理的误区\" class=\"headerlink\" title=\"Part1 时间管理的误区\"></a>Part1 时间管理的误区</h2><p>当人们发现我在写关于时间管理的内容时，通常有两个误解。</p>\n<p>一是我<strong>很守时</strong>，但我不是。我有4个孩子，我倒是想把迟到怪到他们头上，但这真不关他们事。有一次是在我的时间管理讲座迟到了，想想这有多讽刺。</p>\n<p>二是我有<strong>很多节省时间的窍门</strong>。经常有杂志社打电话来问我节省时间的小窍门，潜台词是——<strong>利用每天节省下来的时间干大事</strong>。我对其潜在意图表示怀疑，但我对他们的一些点子感兴趣，如把两个小时的电视剧录下来，快进其中30分钟广告用来锻炼身体，这样就节省了30分钟。但真正的好办法是，一天不要看两个小时的电视。杂志社的概念是<strong>把零散时间加起来，这样就能成功</strong>，这是有问题的。</p>\n<h2 id=\"Part2-什么才是真正的时间管理\"><a href=\"#Part2-什么才是真正的时间管理\" class=\"headerlink\" title=\"Part2 什么才是真正的时间管理\"></a>Part2 什么才是真正的时间管理</h2><p>我通过研究成功人士的日程表发现：<strong>掌控时间并不是通过节省时间来做成功的事，而是主动创造我们想要的生活</strong>。当你这样做时，时间自动就省下来了。</p>\n<p>我曾进行过这样一项研究——统计1000个繁忙女性的时间开销，了解她们在时间上的分配。其中一个女士某一周的时间开销日志是这样的：周三晚她家里的热水器坏了，搞得地下室被淹透，这真是极其糟糕的体验。第二天她不得不找水管工来抽空地下室的水，找人修热水器，找人清理地毯。这些都记录在日志，占了该周7小时，平均每天一小时。但如果在那周的开始问她：你能挤出7小时用来锻炼身体吗？你能挤出7小时用来辅导孩子的学习吗？她的回答肯定是NO以及「你看不出我有多忙吗」。</p>\n<p>可是当地下室被水淹没，她不得不花上这7个小时，可见时间是有弹性的。我们无法创造更多时间，但<strong>时间是否得到充分利用，取决于我们用它做什么。时间管理的真正关键，是对待真正重要的事情时像对待「坏掉的热水器」一样。</strong></p>\n<p>我还曾经采访过一位成功女性，她拥有一家公司，十二名雇员，6个孩子，很难预约得上。即使预约上了，她也可能没空。其中一次，她没空的原因是她要去徒步，因为那是个非常美丽的清晨。等我终于见到她时，<strong>她说，「劳拉，我花的每一分钟都是我自己选择的」，她并不是说「我没有时间做甲乙丙丁」，而是说「我没有做因为那是不重要的事情」。</strong></p>\n<p><strong>我没时间，往往意味着这事情不重要</strong>。我是没空擦百叶窗，但假如你给我10万美元，我立即就去，这不是时间不够的问题。所以，<strong>时间其实是一种选择，我们的生活其实是我们选择的结果</strong>。</p>\n<h2 id=\"Part3-如何掌控你的时间\"><a href=\"#Part3-如何掌控你的时间\" class=\"headerlink\" title=\"Part3 如何掌控你的时间\"></a>Part3 如何掌控你的时间</h2><p>如何对待我们的生活，像对待「坏掉的热水器」一样呢？</p>\n<p>首先，你需要分析哪些才是真正重要的。先从工作开始吧！大部分人可能会在年末收到该年度的绩效评估，上面总结了过去一年的成绩和未来的发展机会，但我发现<strong>直接做「未来的展望」</strong>更加有效。假定现在是下一年，你对自己进行绩效评估，过去的一年你工作得非常出色，是因为你做了三到五件事情，把这几件事情写下来。</p>\n<p>当然，这一招也可用于私人生活，假如你过去的一年过得十分精彩，是因为你做了三五件事，把这几件事写下来，但别公布出去（某个心理学研究表明不宣布目标，成功的概率更高）。</p>\n<p>有了上述工作和生活的几件事，就有了接下来一年的6到10个目标。紧接着要对他们进行分解。</p>\n<ul>\n<li>假如你要做一份菜谱，那就通过书籍和朋友了解，然后动手制作；</li>\n<li>假如你要跑马拉松，你应该把你的跑鞋从鞋柜翻出来，然后制定训练计划。</li>\n</ul>\n<p>关键是要像对待那台「坏掉的热水器」一样，<strong>把他们写到日程表的第一栏，要在一周的开始就想好这一周的计划</strong>。我发现在周五下午做计划是最佳的时间，周五下午被经济学家称为「低机会成本时间」。你会发现每到周五，<strong>人们是不会激动人心的宣布说我要朝着我个人和工作的首要目标努力，但却愿意花时间去思考什么是首要目标</strong>。所以用一点星期五下午的时间，给自己列一张三栏优先顺序表，工作、感情和个人。列三栏是提醒自己要<strong>注意三者的平衡</strong>，因为我们经常会忽略感情和个人方面的计划。</p>\n<p>每个列表列好两三个事，纵观接下来一周，看看这些事情可以排在什么时候。怎么安排是你的选择，我知道这对部分人来说会比较复杂，有些人的生活就是比别人苦一些，比如有很多小孩要照顾。但接下来我要告诉你几个有力的数据，</p>\n<ul>\n<li><strong>一周 = 24 * 7 = 168小时</strong>，这是相当多的时间；</li>\n<li>假设你一周工作40小时，每天睡眠8小时（一周56小时），你还剩<strong>72小时</strong>可用来做其他的事情；</li>\n<li>假设你一周工作50小时，每天睡眠8小时（一周56小时），你还剩<strong>62小时</strong>可用来做其他的事情；</li>\n<li>假设你一周工作60小时，每天睡眠8小时（一周56小时），你还剩<strong>52小时</strong>可用来做其他的事情；</li>\n<li>假设你一周工作60小时，你确定你一周工作这么多小时？</li>\n</ul>\n<p>有一项研究表明，<strong>当人们声称一周工作超过75小时，实际误差大概是25小时</strong>。利用好这些时间，做真正重要的事，如陪伴你的孩子。即使你工作远超每天8小时，你仍有时间。实际上我们有很多的时间，有时甚至不需要很多时间就可以用来做精彩的事。不过大多数人有时间时做什么？拿出手机，玩微信，刷邮件，或是在家里晃荡。</p>\n<p>我对碎片时间的看法是，碎片时间也能充分利用并得到乐趣。碎片时间可以用来做什么呢？</p>\n<ul>\n<li>曾经我每天上班需要花两个小时，于是我就在公交上看书，通勤于我变成了享受；</li>\n<li>工作的休息时间可以用来冥想；</li>\n<li>工作繁忙时无法和家人吃晚餐，一起吃个早餐也不错。</li>\n</ul>\n<p>重点是留意一个人的整段时间，看看有意义的事情能安排到什么时候。<strong>我真心相信，时间总是有的。即使我们很忙，还是有时间做重要的事情。如果我们集中时间在重要的事情上，我们就能用我们拥有的时间，打造出我们想要的生活</strong>。谢谢大家！</p>\n<h2 id=\"Part4-Add-on\"><a href=\"#Part4-Add-on\" class=\"headerlink\" title=\"Part4 Add-on\"></a>Part4 Add-on</h2><p>总结一下：<strong>时间管理就是做真正重要的事，像对待「坏掉的热水器」一样对待它们。</strong>对于上文，笔者有几点补充，</p>\n<ul>\n<li><strong>找到属于你自己的「坏掉的热水器」然后日拱一卒</strong>：如果你<strong>清楚的知道</strong>了对自己而言，什么才是真正重要的事情，恭喜你！你要做的事情是每天都花时间在这上面，每天都要有所推进，做到日拱一卒。如果你没有，keep looking，don’t settle！另外，「坏掉的热水器」这个比喻，只是作者举的例子，你可以把它换成属于你自己的比喻，前提是它能让你感受到紧迫感，逼着你非处理不可。比方说，可以是「坏掉的手机」、「打球扭伤了脚」和「发高烧」等等，尽情发挥想象力吧:)</li>\n<li><strong>好好休息</strong>：休息是性价比非常高的投入，高质量的休息能让你重新焕发精神，投入到工作和生活当中。知乎上有大量与这方面相关的问答，如<a href=\"https://www.zhihu.com/question/19551007\" target=\"_blank\" rel=\"noopener\">《如何高效地睡眠》</a>。</li>\n<li><strong>累了就切换</strong>：曾读过一篇文章<a href=\"http://mp.weixin.qq.com/s?__biz=MzIzMjEzMjMxOQ==&amp;mid=2649368969&amp;idx=3&amp;sn=fd778a357c6d2d88d4b62a32ca0cb474&amp;chksm=f0871239c7f09b2f1756732ef58968c22db4feef9f9ac7490eeed4666ec3cc6ac0782568a5f5&amp;mpshare=1&amp;scene=1&amp;srcid=1016wNBpxR5oeQuSBta5d0PR#rd\" target=\"_blank\" rel=\"noopener\">《如何正确地休息》</a>，文中卢梭的观点非常具有启发性。如果你累了，尝试切换一下「进程」吧！<blockquote>\n<p>「我本不是一个生来适于研究学问的人，因为我用功的时间稍长一些就感到疲倦，甚至我不能一连半小时集中精力于一个问题上。但是，<strong>我连续研究几个不同的问题，即使是不间断，我也能够轻松愉快地一个一个地寻思下去</strong>，这一个问题可以消除另一个问题所带来的疲劳，用不着休息一下脑筋。于是，我就在我的治学中充分利用我所发现的这一特点，对一些问题交替进行研究。这样，即使我整天用功也不觉得疲倦了。」</p>\n</blockquote>\n</li>\n<li><p><strong>抗干扰能力</strong>：「好好休息」和「累了就切换」，本质上是让你有更长久的「持续作战」能力，将时间倾注于要事。但时间的长度是有限的，从物理学的角度来讲，物体的质量等于体积乘以密度，当体积无法再增大时，想提高质量唯有增加密度。「抗干扰能力」的提升，本质上就是在提升时间的效率。笔者遵从最敬爱的一位智者查理芒格的教诲——「<strong>反过来想，总是反过来想</strong>」，要想如何提升「抗干扰能力」，先来看看如何才能尽可能的「分散你的注意力」，以下是笔者的一些总结：</p>\n<ul>\n<li><strong>电子产品</strong>：尽可能在做事情时一边玩手机/电脑。微信、QQ、今日头条和微博等等数不胜数的软件产品，就是以「分散你的注意力」为目标来设计的。</li>\n<li><strong>人</strong>：尽可能在做事情时频繁被打断或是去凑热闹。凑热闹是主动接触尽可能多的「干扰源」，即主动将时间碎片化。被打断是不懂得如何处理「干扰」，如果<strong>你不懂得拒绝，不懂得判断事情的重要程度</strong>，你的时间就会被人为的碎片化。</li>\n<li><strong>玩物</strong>：尽可能在做事情时在旁边放上几样有趣的事物，让这些好玩的、有趣的东西分散你的注意力。</li>\n<li><p><strong>性欲</strong>：花大量时间浏览黄片或是找黄图，让自己荷尔蒙爆棚！</p>\n<p>最后总结下：快速提升「抗干扰能力」的最佳建议是，<strong>在你认真做事情时，把手机设置为静音和断网状态，把电脑不相关的软件和网页全关了，并尽可能找个独立空间待着</strong>。如果你想锻炼自己对于「干扰源」的抗干扰的能力，在做事情时主动接触干扰源用以刻意练习是个不错的主意，<a href=\"mindhacks.cn\">刘未鹏</a>就是这么做的，这家伙就曾在嘈杂的环境下啃大部头用以锻炼自己的抗干扰能力。</p>\n</li>\n</ul>\n</li>\n<li><p><strong>处理好你的内心世界</strong>：<strong>身体和内心世界是相互影响的</strong>，最好的例子是如果你相信自己得了癌症（实际上并没有）并郁郁寡欢，你便会快速走向死亡。如果你没办法处理好自己的内心世界，没有稳定的精神边界和稳固的价值观，你的精神状态好不到哪去。对于此，<strong>读书和思考</strong>是最佳良药。读书有启迪心灵之力，而思考则使你思维变得更加的清晰，有助于你将「一团乱麻」进行「抽丝剥缕」，有助于你看清楚和看开。对于思考，向内看亦即<strong>反思的重要性再强调也不为过</strong>。反思是对自己思考的思考（一切行为皆是思考的产物），如果将人比喻为一个系统，反思就是在帮你找出系统存在的漏洞，使得这个系统更加的健壮和稳定。</p>\n</li>\n<li><strong>避免懒惰</strong>：以上作者的言论以及笔者的补充，只需一点就可以完全摧毁——那就是「<strong>懒惰</strong>」。懒惰使你对自己宽容，懒惰使你舒服的待在让你无法成长的舒适区内。不要拿「劳逸结合」来自欺欺人，先问问自己——<strong>今天计划要做的事情做到了吗？</strong>还有一点需要纠正的是，<strong>逃避现实本质上也是一种懒惰</strong>——思考上的懒惰。</li>\n</ul>\n<p>笔者不太晓得「市面上」所谓的时间管理的概念及方法是怎样的，但笔者相信<a href=\"http://lauravanderkam.com/\" target=\"_blank\" rel=\"noopener\">Laura Vanderkam</a>的观点是正确无误的。说说笔者近期实践之后的一些改变吧！</p>\n<ol>\n<li>Plan：遵循SMART原则写好了「年计划书」，在每月、每周、每日的开始通过teambition和Evernote制定计划。</li>\n<li>Do：极其关注自己注意力的分配，并每天都花时间（碎片时间时能把重要的事情做一点是一点）在那些真正重要的事情上，确保不偏离主线。不拿劳逸结合当借口，先把该完成的完成了再谈娱乐和休闲。</li>\n<li>Check：每天通过日记反思与复盘，每周、月末都写总结，每天都不断追问自己真正重要的是什么。</li>\n<li>Action：根据反思和复盘的结果，对自己的行为和观点进行调整。</li>\n</ol>\n<p>然后不断重复以上的戴明环，循环往复。最后以查理芒格的一句话作为结尾：<strong>简单是长期努力的结果，而不是起点</strong>。</p>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><p>以下为本文的reference：</p>\n<ol>\n<li><a href=\"http://open.163.com/movie/2016/12/I/B/MC82BCQAN_MC8U8L3IB.html\" target=\"_blank\" rel=\"noopener\">如何掌控你的自由时间 | TED</a></li>\n<li><a href=\"http://lauravanderkam.com/\" target=\"_blank\" rel=\"noopener\">Laura Vanderkam’s Blog</a></li>\n<li><a href=\"https://www.zhihu.com/question/19551007\" target=\"_blank\" rel=\"noopener\">如何高效地睡眠</a></li>\n<li><a href=\"http://mp.weixin.qq.com/s?__biz=MzIzMjEzMjMxOQ==&amp;mid=2649368969&amp;idx=3&amp;sn=fd778a357c6d2d88d4b62a32ca0cb474&amp;chksm=f0871239c7f09b2f1756732ef58968c22db4feef9f9ac7490eeed4666ec3cc6ac0782568a5f5&amp;mpshare=1&amp;scene=1&amp;srcid=1016wNBpxR5oeQuSBta5d0PR#rd\" target=\"_blank\" rel=\"noopener\">如何正确地休息</a></li>\n<li><a href=\"mindhacks.cn\">刘未鹏|思维改变生活</a></li>\n</ol>\n<p>以下为笔者看过的有助于你加深「时间管理就是做真正重要的事」这个概念的资料。</p>\n<ol>\n<li>书籍<ul>\n<li><a href=\"https://book.douban.com/subject/5325618/\" target=\"_blank\" rel=\"noopener\">史蒂芬柯尾《高效能人士的七个习惯》</a></li>\n<li><a href=\"https://book.douban.com/subject/3609132/\" target=\"_blank\" rel=\"noopener\">李笑来《把时间当作朋友》</a></li>\n<li><a href=\"https://book.douban.com/subject/5346110/\" target=\"_blank\" rel=\"noopener\">彼得考夫曼《穷查理宝典》</a></li>\n</ul>\n</li>\n<li>视频<ul>\n<li><a href=\"http://www.iqiyi.com/v_19rrkh4doc.html\" target=\"_blank\" rel=\"noopener\">古典《做人生玩家，让人生像游戏般好玩》</a></li>\n<li><a href=\"https://v.qq.com/x/page/j0360i8km7z.html\" target=\"_blank\" rel=\"noopener\">大石头理论哲学课</a></li>\n</ul>\n</li>\n<li>文章<ul>\n<li><a href=\"http://www.nowamagic.net/librarys/news/detail/2255\" target=\"_blank\" rel=\"noopener\">吴军：不做伪工作者</a></li>\n<li><a href=\"http://mp.weixin.qq.com/s?src=3&amp;timestamp=1492097530&amp;ver=1&amp;signature=NKrr2xS7boDFbcrVd1huuPKquCHHMtFMD-9Y24pMEjonX1181cSRMxgEqm-9H0xwPOkgsXPkkLsvlDvFJ*NQ3OCjKDzh0KKq9TfaokJZoOML5P*3qeYsn1QQfbV3298CXEsJiEFEnUF1bRrz2yxjvdF8QT5IwQ9cHryHzG6WWdc=\" target=\"_blank\" rel=\"noopener\">吴军-得到直播笔记</a></li>\n<li><a href=\"http://mp.weixin.qq.com/s?__biz=MzA4NDIwNjg2OA==&amp;mid=400409993&amp;idx=1&amp;sn=93048e912aa4d0e4d895462cf6b6b2a5&amp;scene=5&amp;srcid=0914VYozI2UyvgLn0477Ea7I#rd\" target=\"_blank\" rel=\"noopener\">神奇的时间管理术：就因为没时间，才什么都能办到</a></li>\n<li><a href=\"http://www.360doc.com/content/15/1125/22/8785791_515833629.shtml\" target=\"_blank\" rel=\"noopener\">古典：用「生命之花」做怦然心动的月计划</a></li>\n</ul>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>本文的前4部分是<a href=\"http://open.163.com/movie/2016/12/I/B/MC82BCQAN_MC8U8L3IB.html\" target=\"_blank\" rel=\"noopener\">如何掌控你的自由时间 | TED</a>的转译，第5部分是笔者个人的一些补充。转译若有错误，欢迎在评论区指正。<a href=\"http://lauravanderkam.com/\" target=\"_blank\" rel=\"noopener\">Laura Vanderkam</a>的这个演讲不容错过，绝对能升级你对于「时间管理」的认知。</p>","more":"<h2 id=\"Part1-时间管理的误区\"><a href=\"#Part1-时间管理的误区\" class=\"headerlink\" title=\"Part1 时间管理的误区\"></a>Part1 时间管理的误区</h2><p>当人们发现我在写关于时间管理的内容时，通常有两个误解。</p>\n<p>一是我<strong>很守时</strong>，但我不是。我有4个孩子，我倒是想把迟到怪到他们头上，但这真不关他们事。有一次是在我的时间管理讲座迟到了，想想这有多讽刺。</p>\n<p>二是我有<strong>很多节省时间的窍门</strong>。经常有杂志社打电话来问我节省时间的小窍门，潜台词是——<strong>利用每天节省下来的时间干大事</strong>。我对其潜在意图表示怀疑，但我对他们的一些点子感兴趣，如把两个小时的电视剧录下来，快进其中30分钟广告用来锻炼身体，这样就节省了30分钟。但真正的好办法是，一天不要看两个小时的电视。杂志社的概念是<strong>把零散时间加起来，这样就能成功</strong>，这是有问题的。</p>\n<h2 id=\"Part2-什么才是真正的时间管理\"><a href=\"#Part2-什么才是真正的时间管理\" class=\"headerlink\" title=\"Part2 什么才是真正的时间管理\"></a>Part2 什么才是真正的时间管理</h2><p>我通过研究成功人士的日程表发现：<strong>掌控时间并不是通过节省时间来做成功的事，而是主动创造我们想要的生活</strong>。当你这样做时，时间自动就省下来了。</p>\n<p>我曾进行过这样一项研究——统计1000个繁忙女性的时间开销，了解她们在时间上的分配。其中一个女士某一周的时间开销日志是这样的：周三晚她家里的热水器坏了，搞得地下室被淹透，这真是极其糟糕的体验。第二天她不得不找水管工来抽空地下室的水，找人修热水器，找人清理地毯。这些都记录在日志，占了该周7小时，平均每天一小时。但如果在那周的开始问她：你能挤出7小时用来锻炼身体吗？你能挤出7小时用来辅导孩子的学习吗？她的回答肯定是NO以及「你看不出我有多忙吗」。</p>\n<p>可是当地下室被水淹没，她不得不花上这7个小时，可见时间是有弹性的。我们无法创造更多时间，但<strong>时间是否得到充分利用，取决于我们用它做什么。时间管理的真正关键，是对待真正重要的事情时像对待「坏掉的热水器」一样。</strong></p>\n<p>我还曾经采访过一位成功女性，她拥有一家公司，十二名雇员，6个孩子，很难预约得上。即使预约上了，她也可能没空。其中一次，她没空的原因是她要去徒步，因为那是个非常美丽的清晨。等我终于见到她时，<strong>她说，「劳拉，我花的每一分钟都是我自己选择的」，她并不是说「我没有时间做甲乙丙丁」，而是说「我没有做因为那是不重要的事情」。</strong></p>\n<p><strong>我没时间，往往意味着这事情不重要</strong>。我是没空擦百叶窗，但假如你给我10万美元，我立即就去，这不是时间不够的问题。所以，<strong>时间其实是一种选择，我们的生活其实是我们选择的结果</strong>。</p>\n<h2 id=\"Part3-如何掌控你的时间\"><a href=\"#Part3-如何掌控你的时间\" class=\"headerlink\" title=\"Part3 如何掌控你的时间\"></a>Part3 如何掌控你的时间</h2><p>如何对待我们的生活，像对待「坏掉的热水器」一样呢？</p>\n<p>首先，你需要分析哪些才是真正重要的。先从工作开始吧！大部分人可能会在年末收到该年度的绩效评估，上面总结了过去一年的成绩和未来的发展机会，但我发现<strong>直接做「未来的展望」</strong>更加有效。假定现在是下一年，你对自己进行绩效评估，过去的一年你工作得非常出色，是因为你做了三到五件事情，把这几件事情写下来。</p>\n<p>当然，这一招也可用于私人生活，假如你过去的一年过得十分精彩，是因为你做了三五件事，把这几件事写下来，但别公布出去（某个心理学研究表明不宣布目标，成功的概率更高）。</p>\n<p>有了上述工作和生活的几件事，就有了接下来一年的6到10个目标。紧接着要对他们进行分解。</p>\n<ul>\n<li>假如你要做一份菜谱，那就通过书籍和朋友了解，然后动手制作；</li>\n<li>假如你要跑马拉松，你应该把你的跑鞋从鞋柜翻出来，然后制定训练计划。</li>\n</ul>\n<p>关键是要像对待那台「坏掉的热水器」一样，<strong>把他们写到日程表的第一栏，要在一周的开始就想好这一周的计划</strong>。我发现在周五下午做计划是最佳的时间，周五下午被经济学家称为「低机会成本时间」。你会发现每到周五，<strong>人们是不会激动人心的宣布说我要朝着我个人和工作的首要目标努力，但却愿意花时间去思考什么是首要目标</strong>。所以用一点星期五下午的时间，给自己列一张三栏优先顺序表，工作、感情和个人。列三栏是提醒自己要<strong>注意三者的平衡</strong>，因为我们经常会忽略感情和个人方面的计划。</p>\n<p>每个列表列好两三个事，纵观接下来一周，看看这些事情可以排在什么时候。怎么安排是你的选择，我知道这对部分人来说会比较复杂，有些人的生活就是比别人苦一些，比如有很多小孩要照顾。但接下来我要告诉你几个有力的数据，</p>\n<ul>\n<li><strong>一周 = 24 * 7 = 168小时</strong>，这是相当多的时间；</li>\n<li>假设你一周工作40小时，每天睡眠8小时（一周56小时），你还剩<strong>72小时</strong>可用来做其他的事情；</li>\n<li>假设你一周工作50小时，每天睡眠8小时（一周56小时），你还剩<strong>62小时</strong>可用来做其他的事情；</li>\n<li>假设你一周工作60小时，每天睡眠8小时（一周56小时），你还剩<strong>52小时</strong>可用来做其他的事情；</li>\n<li>假设你一周工作60小时，你确定你一周工作这么多小时？</li>\n</ul>\n<p>有一项研究表明，<strong>当人们声称一周工作超过75小时，实际误差大概是25小时</strong>。利用好这些时间，做真正重要的事，如陪伴你的孩子。即使你工作远超每天8小时，你仍有时间。实际上我们有很多的时间，有时甚至不需要很多时间就可以用来做精彩的事。不过大多数人有时间时做什么？拿出手机，玩微信，刷邮件，或是在家里晃荡。</p>\n<p>我对碎片时间的看法是，碎片时间也能充分利用并得到乐趣。碎片时间可以用来做什么呢？</p>\n<ul>\n<li>曾经我每天上班需要花两个小时，于是我就在公交上看书，通勤于我变成了享受；</li>\n<li>工作的休息时间可以用来冥想；</li>\n<li>工作繁忙时无法和家人吃晚餐，一起吃个早餐也不错。</li>\n</ul>\n<p>重点是留意一个人的整段时间，看看有意义的事情能安排到什么时候。<strong>我真心相信，时间总是有的。即使我们很忙，还是有时间做重要的事情。如果我们集中时间在重要的事情上，我们就能用我们拥有的时间，打造出我们想要的生活</strong>。谢谢大家！</p>\n<h2 id=\"Part4-Add-on\"><a href=\"#Part4-Add-on\" class=\"headerlink\" title=\"Part4 Add-on\"></a>Part4 Add-on</h2><p>总结一下：<strong>时间管理就是做真正重要的事，像对待「坏掉的热水器」一样对待它们。</strong>对于上文，笔者有几点补充，</p>\n<ul>\n<li><strong>找到属于你自己的「坏掉的热水器」然后日拱一卒</strong>：如果你<strong>清楚的知道</strong>了对自己而言，什么才是真正重要的事情，恭喜你！你要做的事情是每天都花时间在这上面，每天都要有所推进，做到日拱一卒。如果你没有，keep looking，don’t settle！另外，「坏掉的热水器」这个比喻，只是作者举的例子，你可以把它换成属于你自己的比喻，前提是它能让你感受到紧迫感，逼着你非处理不可。比方说，可以是「坏掉的手机」、「打球扭伤了脚」和「发高烧」等等，尽情发挥想象力吧:)</li>\n<li><strong>好好休息</strong>：休息是性价比非常高的投入，高质量的休息能让你重新焕发精神，投入到工作和生活当中。知乎上有大量与这方面相关的问答，如<a href=\"https://www.zhihu.com/question/19551007\" target=\"_blank\" rel=\"noopener\">《如何高效地睡眠》</a>。</li>\n<li><strong>累了就切换</strong>：曾读过一篇文章<a href=\"http://mp.weixin.qq.com/s?__biz=MzIzMjEzMjMxOQ==&amp;mid=2649368969&amp;idx=3&amp;sn=fd778a357c6d2d88d4b62a32ca0cb474&amp;chksm=f0871239c7f09b2f1756732ef58968c22db4feef9f9ac7490eeed4666ec3cc6ac0782568a5f5&amp;mpshare=1&amp;scene=1&amp;srcid=1016wNBpxR5oeQuSBta5d0PR#rd\" target=\"_blank\" rel=\"noopener\">《如何正确地休息》</a>，文中卢梭的观点非常具有启发性。如果你累了，尝试切换一下「进程」吧！<blockquote>\n<p>「我本不是一个生来适于研究学问的人，因为我用功的时间稍长一些就感到疲倦，甚至我不能一连半小时集中精力于一个问题上。但是，<strong>我连续研究几个不同的问题，即使是不间断，我也能够轻松愉快地一个一个地寻思下去</strong>，这一个问题可以消除另一个问题所带来的疲劳，用不着休息一下脑筋。于是，我就在我的治学中充分利用我所发现的这一特点，对一些问题交替进行研究。这样，即使我整天用功也不觉得疲倦了。」</p>\n</blockquote>\n</li>\n<li><p><strong>抗干扰能力</strong>：「好好休息」和「累了就切换」，本质上是让你有更长久的「持续作战」能力，将时间倾注于要事。但时间的长度是有限的，从物理学的角度来讲，物体的质量等于体积乘以密度，当体积无法再增大时，想提高质量唯有增加密度。「抗干扰能力」的提升，本质上就是在提升时间的效率。笔者遵从最敬爱的一位智者查理芒格的教诲——「<strong>反过来想，总是反过来想</strong>」，要想如何提升「抗干扰能力」，先来看看如何才能尽可能的「分散你的注意力」，以下是笔者的一些总结：</p>\n<ul>\n<li><strong>电子产品</strong>：尽可能在做事情时一边玩手机/电脑。微信、QQ、今日头条和微博等等数不胜数的软件产品，就是以「分散你的注意力」为目标来设计的。</li>\n<li><strong>人</strong>：尽可能在做事情时频繁被打断或是去凑热闹。凑热闹是主动接触尽可能多的「干扰源」，即主动将时间碎片化。被打断是不懂得如何处理「干扰」，如果<strong>你不懂得拒绝，不懂得判断事情的重要程度</strong>，你的时间就会被人为的碎片化。</li>\n<li><strong>玩物</strong>：尽可能在做事情时在旁边放上几样有趣的事物，让这些好玩的、有趣的东西分散你的注意力。</li>\n<li><p><strong>性欲</strong>：花大量时间浏览黄片或是找黄图，让自己荷尔蒙爆棚！</p>\n<p>最后总结下：快速提升「抗干扰能力」的最佳建议是，<strong>在你认真做事情时，把手机设置为静音和断网状态，把电脑不相关的软件和网页全关了，并尽可能找个独立空间待着</strong>。如果你想锻炼自己对于「干扰源」的抗干扰的能力，在做事情时主动接触干扰源用以刻意练习是个不错的主意，<a href=\"mindhacks.cn\">刘未鹏</a>就是这么做的，这家伙就曾在嘈杂的环境下啃大部头用以锻炼自己的抗干扰能力。</p>\n</li>\n</ul>\n</li>\n<li><p><strong>处理好你的内心世界</strong>：<strong>身体和内心世界是相互影响的</strong>，最好的例子是如果你相信自己得了癌症（实际上并没有）并郁郁寡欢，你便会快速走向死亡。如果你没办法处理好自己的内心世界，没有稳定的精神边界和稳固的价值观，你的精神状态好不到哪去。对于此，<strong>读书和思考</strong>是最佳良药。读书有启迪心灵之力，而思考则使你思维变得更加的清晰，有助于你将「一团乱麻」进行「抽丝剥缕」，有助于你看清楚和看开。对于思考，向内看亦即<strong>反思的重要性再强调也不为过</strong>。反思是对自己思考的思考（一切行为皆是思考的产物），如果将人比喻为一个系统，反思就是在帮你找出系统存在的漏洞，使得这个系统更加的健壮和稳定。</p>\n</li>\n<li><strong>避免懒惰</strong>：以上作者的言论以及笔者的补充，只需一点就可以完全摧毁——那就是「<strong>懒惰</strong>」。懒惰使你对自己宽容，懒惰使你舒服的待在让你无法成长的舒适区内。不要拿「劳逸结合」来自欺欺人，先问问自己——<strong>今天计划要做的事情做到了吗？</strong>还有一点需要纠正的是，<strong>逃避现实本质上也是一种懒惰</strong>——思考上的懒惰。</li>\n</ul>\n<p>笔者不太晓得「市面上」所谓的时间管理的概念及方法是怎样的，但笔者相信<a href=\"http://lauravanderkam.com/\" target=\"_blank\" rel=\"noopener\">Laura Vanderkam</a>的观点是正确无误的。说说笔者近期实践之后的一些改变吧！</p>\n<ol>\n<li>Plan：遵循SMART原则写好了「年计划书」，在每月、每周、每日的开始通过teambition和Evernote制定计划。</li>\n<li>Do：极其关注自己注意力的分配，并每天都花时间（碎片时间时能把重要的事情做一点是一点）在那些真正重要的事情上，确保不偏离主线。不拿劳逸结合当借口，先把该完成的完成了再谈娱乐和休闲。</li>\n<li>Check：每天通过日记反思与复盘，每周、月末都写总结，每天都不断追问自己真正重要的是什么。</li>\n<li>Action：根据反思和复盘的结果，对自己的行为和观点进行调整。</li>\n</ol>\n<p>然后不断重复以上的戴明环，循环往复。最后以查理芒格的一句话作为结尾：<strong>简单是长期努力的结果，而不是起点</strong>。</p>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><p>以下为本文的reference：</p>\n<ol>\n<li><a href=\"http://open.163.com/movie/2016/12/I/B/MC82BCQAN_MC8U8L3IB.html\" target=\"_blank\" rel=\"noopener\">如何掌控你的自由时间 | TED</a></li>\n<li><a href=\"http://lauravanderkam.com/\" target=\"_blank\" rel=\"noopener\">Laura Vanderkam’s Blog</a></li>\n<li><a href=\"https://www.zhihu.com/question/19551007\" target=\"_blank\" rel=\"noopener\">如何高效地睡眠</a></li>\n<li><a href=\"http://mp.weixin.qq.com/s?__biz=MzIzMjEzMjMxOQ==&amp;mid=2649368969&amp;idx=3&amp;sn=fd778a357c6d2d88d4b62a32ca0cb474&amp;chksm=f0871239c7f09b2f1756732ef58968c22db4feef9f9ac7490eeed4666ec3cc6ac0782568a5f5&amp;mpshare=1&amp;scene=1&amp;srcid=1016wNBpxR5oeQuSBta5d0PR#rd\" target=\"_blank\" rel=\"noopener\">如何正确地休息</a></li>\n<li><a href=\"mindhacks.cn\">刘未鹏|思维改变生活</a></li>\n</ol>\n<p>以下为笔者看过的有助于你加深「时间管理就是做真正重要的事」这个概念的资料。</p>\n<ol>\n<li>书籍<ul>\n<li><a href=\"https://book.douban.com/subject/5325618/\" target=\"_blank\" rel=\"noopener\">史蒂芬柯尾《高效能人士的七个习惯》</a></li>\n<li><a href=\"https://book.douban.com/subject/3609132/\" target=\"_blank\" rel=\"noopener\">李笑来《把时间当作朋友》</a></li>\n<li><a href=\"https://book.douban.com/subject/5346110/\" target=\"_blank\" rel=\"noopener\">彼得考夫曼《穷查理宝典》</a></li>\n</ul>\n</li>\n<li>视频<ul>\n<li><a href=\"http://www.iqiyi.com/v_19rrkh4doc.html\" target=\"_blank\" rel=\"noopener\">古典《做人生玩家，让人生像游戏般好玩》</a></li>\n<li><a href=\"https://v.qq.com/x/page/j0360i8km7z.html\" target=\"_blank\" rel=\"noopener\">大石头理论哲学课</a></li>\n</ul>\n</li>\n<li>文章<ul>\n<li><a href=\"http://www.nowamagic.net/librarys/news/detail/2255\" target=\"_blank\" rel=\"noopener\">吴军：不做伪工作者</a></li>\n<li><a href=\"http://mp.weixin.qq.com/s?src=3&amp;timestamp=1492097530&amp;ver=1&amp;signature=NKrr2xS7boDFbcrVd1huuPKquCHHMtFMD-9Y24pMEjonX1181cSRMxgEqm-9H0xwPOkgsXPkkLsvlDvFJ*NQ3OCjKDzh0KKq9TfaokJZoOML5P*3qeYsn1QQfbV3298CXEsJiEFEnUF1bRrz2yxjvdF8QT5IwQ9cHryHzG6WWdc=\" target=\"_blank\" rel=\"noopener\">吴军-得到直播笔记</a></li>\n<li><a href=\"http://mp.weixin.qq.com/s?__biz=MzA4NDIwNjg2OA==&amp;mid=400409993&amp;idx=1&amp;sn=93048e912aa4d0e4d895462cf6b6b2a5&amp;scene=5&amp;srcid=0914VYozI2UyvgLn0477Ea7I#rd\" target=\"_blank\" rel=\"noopener\">神奇的时间管理术：就因为没时间，才什么都能办到</a></li>\n<li><a href=\"http://www.360doc.com/content/15/1125/22/8785791_515833629.shtml\" target=\"_blank\" rel=\"noopener\">古典：用「生命之花」做怦然心动的月计划</a></li>\n</ul>\n</li>\n</ol>"},{"title":"最优生产计划","date":"2017-05-09T09:25:16.000Z","comments":1,"_content":"\n## 目标\n\n已知各类生产产品的生产时间及负荷曲线（负荷曲线对时间的积分即电量），输入「目标生产计划」，计算后输出「最优生产计划」，使得按该计划进行生产成本最优。\n\n<!--more-->\n\n目标生产计划的构成为，\n\n- 计划开始时间\n- 计划结束时间\n- 生产哪些产品，如：A20件，B30件，C20件，D100件\n\n最优生产计划的构成为，\n\n- t1：开始生产产品P1\n- t2：开始生产产品P2\n- t3：开始生产产品P3\n- ……\n\n## 如何求解\n\n> 成本 = 峰期电费单价 * 峰期电量 + 平期电费单价 * 平期电量 + 谷期电费单价 * 谷期电量\n> \n> 注：这里的峰平谷指的是一天的不同时段，高峰期和低谷期的电费单价是不一样的。\n\n最优生产计划即成本最小的生产计划，安排生产计划需要考虑的约束有，\n\n`各产品生产时间+换料时间+下班/休息时间 <= (计划结束时间 - 计划开始时间)` \n\n这个问题实质是一个动态规划问题，\n\n1. 将「下班/休息时间」从计划时间挖去，得「N段」可用的时间槽；\n2. 将生产的总件数看成「M张」选票，投给上述的「N段」时间槽（候选人），假设共有「X种」投票结果；\n3. 对计划生产的产品序列进行全排列，假设共有「Y种」排列；\n4. 问题转变为从X*Y种排班方式选取最优排班，\n\t1. 判断该排班方式是否满足时间槽的时间约束，不满足则剔除；\n\t2. 安排「产品+换料时间」到时间槽，将时间槽内剩余时间切块，以投票的方式填充到时间槽内产品与产品间的间隔，求该时间槽最优解；\n\t3. 求解每个时间槽的最优解，累加得一次生产安排的最优解，再从多次生产安排选取成本最小的，即为所求。","source":"_posts/2017-05-09-power-adjustment.md","raw":"---\ntitle: 最优生产计划\ndate: 2017-05-09 17:25:16\ncomments: true\ncategories: ['算法'] \ntags: ['动态规划']\n---\n\n## 目标\n\n已知各类生产产品的生产时间及负荷曲线（负荷曲线对时间的积分即电量），输入「目标生产计划」，计算后输出「最优生产计划」，使得按该计划进行生产成本最优。\n\n<!--more-->\n\n目标生产计划的构成为，\n\n- 计划开始时间\n- 计划结束时间\n- 生产哪些产品，如：A20件，B30件，C20件，D100件\n\n最优生产计划的构成为，\n\n- t1：开始生产产品P1\n- t2：开始生产产品P2\n- t3：开始生产产品P3\n- ……\n\n## 如何求解\n\n> 成本 = 峰期电费单价 * 峰期电量 + 平期电费单价 * 平期电量 + 谷期电费单价 * 谷期电量\n> \n> 注：这里的峰平谷指的是一天的不同时段，高峰期和低谷期的电费单价是不一样的。\n\n最优生产计划即成本最小的生产计划，安排生产计划需要考虑的约束有，\n\n`各产品生产时间+换料时间+下班/休息时间 <= (计划结束时间 - 计划开始时间)` \n\n这个问题实质是一个动态规划问题，\n\n1. 将「下班/休息时间」从计划时间挖去，得「N段」可用的时间槽；\n2. 将生产的总件数看成「M张」选票，投给上述的「N段」时间槽（候选人），假设共有「X种」投票结果；\n3. 对计划生产的产品序列进行全排列，假设共有「Y种」排列；\n4. 问题转变为从X*Y种排班方式选取最优排班，\n\t1. 判断该排班方式是否满足时间槽的时间约束，不满足则剔除；\n\t2. 安排「产品+换料时间」到时间槽，将时间槽内剩余时间切块，以投票的方式填充到时间槽内产品与产品间的间隔，求该时间槽最优解；\n\t3. 求解每个时间槽的最优解，累加得一次生产安排的最优解，再从多次生产安排选取成本最小的，即为所求。","slug":"power-adjustment","published":1,"updated":"2017-05-17T04:12:42.000Z","layout":"post","photos":[],"link":"","_id":"cjlza6mau004lpgup0oca1v3d","content":"<h2 id=\"目标\"><a href=\"#目标\" class=\"headerlink\" title=\"目标\"></a>目标</h2><p>已知各类生产产品的生产时间及负荷曲线（负荷曲线对时间的积分即电量），输入「目标生产计划」，计算后输出「最优生产计划」，使得按该计划进行生产成本最优。</p>\n<a id=\"more\"></a>\n<p>目标生产计划的构成为，</p>\n<ul>\n<li>计划开始时间</li>\n<li>计划结束时间</li>\n<li>生产哪些产品，如：A20件，B30件，C20件，D100件</li>\n</ul>\n<p>最优生产计划的构成为，</p>\n<ul>\n<li>t1：开始生产产品P1</li>\n<li>t2：开始生产产品P2</li>\n<li>t3：开始生产产品P3</li>\n<li>……</li>\n</ul>\n<h2 id=\"如何求解\"><a href=\"#如何求解\" class=\"headerlink\" title=\"如何求解\"></a>如何求解</h2><blockquote>\n<p>成本 = 峰期电费单价 <em> 峰期电量 + 平期电费单价 </em> 平期电量 + 谷期电费单价 * 谷期电量</p>\n<p>注：这里的峰平谷指的是一天的不同时段，高峰期和低谷期的电费单价是不一样的。</p>\n</blockquote>\n<p>最优生产计划即成本最小的生产计划，安排生产计划需要考虑的约束有，</p>\n<p><code>各产品生产时间+换料时间+下班/休息时间 &lt;= (计划结束时间 - 计划开始时间)</code> </p>\n<p>这个问题实质是一个动态规划问题，</p>\n<ol>\n<li>将「下班/休息时间」从计划时间挖去，得「N段」可用的时间槽；</li>\n<li>将生产的总件数看成「M张」选票，投给上述的「N段」时间槽（候选人），假设共有「X种」投票结果；</li>\n<li>对计划生产的产品序列进行全排列，假设共有「Y种」排列；</li>\n<li>问题转变为从X*Y种排班方式选取最优排班，<ol>\n<li>判断该排班方式是否满足时间槽的时间约束，不满足则剔除；</li>\n<li>安排「产品+换料时间」到时间槽，将时间槽内剩余时间切块，以投票的方式填充到时间槽内产品与产品间的间隔，求该时间槽最优解；</li>\n<li>求解每个时间槽的最优解，累加得一次生产安排的最优解，再从多次生产安排选取成本最小的，即为所求。</li>\n</ol>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<h2 id=\"目标\"><a href=\"#目标\" class=\"headerlink\" title=\"目标\"></a>目标</h2><p>已知各类生产产品的生产时间及负荷曲线（负荷曲线对时间的积分即电量），输入「目标生产计划」，计算后输出「最优生产计划」，使得按该计划进行生产成本最优。</p>","more":"<p>目标生产计划的构成为，</p>\n<ul>\n<li>计划开始时间</li>\n<li>计划结束时间</li>\n<li>生产哪些产品，如：A20件，B30件，C20件，D100件</li>\n</ul>\n<p>最优生产计划的构成为，</p>\n<ul>\n<li>t1：开始生产产品P1</li>\n<li>t2：开始生产产品P2</li>\n<li>t3：开始生产产品P3</li>\n<li>……</li>\n</ul>\n<h2 id=\"如何求解\"><a href=\"#如何求解\" class=\"headerlink\" title=\"如何求解\"></a>如何求解</h2><blockquote>\n<p>成本 = 峰期电费单价 <em> 峰期电量 + 平期电费单价 </em> 平期电量 + 谷期电费单价 * 谷期电量</p>\n<p>注：这里的峰平谷指的是一天的不同时段，高峰期和低谷期的电费单价是不一样的。</p>\n</blockquote>\n<p>最优生产计划即成本最小的生产计划，安排生产计划需要考虑的约束有，</p>\n<p><code>各产品生产时间+换料时间+下班/休息时间 &lt;= (计划结束时间 - 计划开始时间)</code> </p>\n<p>这个问题实质是一个动态规划问题，</p>\n<ol>\n<li>将「下班/休息时间」从计划时间挖去，得「N段」可用的时间槽；</li>\n<li>将生产的总件数看成「M张」选票，投给上述的「N段」时间槽（候选人），假设共有「X种」投票结果；</li>\n<li>对计划生产的产品序列进行全排列，假设共有「Y种」排列；</li>\n<li>问题转变为从X*Y种排班方式选取最优排班，<ol>\n<li>判断该排班方式是否满足时间槽的时间约束，不满足则剔除；</li>\n<li>安排「产品+换料时间」到时间槽，将时间槽内剩余时间切块，以投票的方式填充到时间槽内产品与产品间的间隔，求该时间槽最优解；</li>\n<li>求解每个时间槽的最优解，累加得一次生产安排的最优解，再从多次生产安排选取成本最小的，即为所求。</li>\n</ol>\n</li>\n</ol>"},{"title":"C语言指针与数组","date":"2017-05-04T09:09:07.000Z","comments":1,"_content":"\nC语言数组下标`[]`符号竟是个语法糖？\n\n<!--more-->\n\n```c\n#include <stdio.h>\n\nstruct node {\n    int a[100];\n    int b[100];\n};\n\nint main() {\n    struct node ins;\n    int i = 0;\n    for(; i<200; i++) {\n        ins.a[i] = 1;\n    }\n    return 0;\n}\n```\n\n问：上述程序在运行时是否会产生数组越限？\n\n答：不会。\n\n> 《C程序设计语言》（第2版·新版）P84写到：\n> 对数组元素a[i]的引用也可以写成*(a+i)这种形式，在计算数组元素a[i]的值时，C语言实际上先将其转换为*(a+i)的形式，然后再进行求值。\n\n如果你没注意到此特性，将有可能导致灾难。","source":"_posts/2017-05-04-puzzle-of-c-pointer.md","raw":"---\ntitle: C语言指针与数组\ndate: 2017-05-04 17:09:07\ncomments: true\ncategories: ['编程实践'] \ntags: ['C/C++', '指针']\n---\n\nC语言数组下标`[]`符号竟是个语法糖？\n\n<!--more-->\n\n```c\n#include <stdio.h>\n\nstruct node {\n    int a[100];\n    int b[100];\n};\n\nint main() {\n    struct node ins;\n    int i = 0;\n    for(; i<200; i++) {\n        ins.a[i] = 1;\n    }\n    return 0;\n}\n```\n\n问：上述程序在运行时是否会产生数组越限？\n\n答：不会。\n\n> 《C程序设计语言》（第2版·新版）P84写到：\n> 对数组元素a[i]的引用也可以写成*(a+i)这种形式，在计算数组元素a[i]的值时，C语言实际上先将其转换为*(a+i)的形式，然后再进行求值。\n\n如果你没注意到此特性，将有可能导致灾难。","slug":"puzzle-of-c-pointer","published":1,"updated":"2017-05-11T04:09:22.000Z","layout":"post","photos":[],"link":"","_id":"cjlza6maw004ppgup00r9mn72","content":"<p>C语言数组下标<code>[]</code>符号竟是个语法糖？</p>\n<a id=\"more\"></a>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> a[<span class=\"number\">100</span>];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> b[<span class=\"number\">100</span>];</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span> <span class=\"title\">ins</span>;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(; i&lt;<span class=\"number\">200</span>; i++) &#123;</span><br><span class=\"line\">        ins.a[i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>问：上述程序在运行时是否会产生数组越限？</p>\n<p>答：不会。</p>\n<blockquote>\n<p>《C程序设计语言》（第2版·新版）P84写到：<br>对数组元素a[i]的引用也可以写成<em>(a+i)这种形式，在计算数组元素a[i]的值时，C语言实际上先将其转换为</em>(a+i)的形式，然后再进行求值。</p>\n</blockquote>\n<p>如果你没注意到此特性，将有可能导致灾难。</p>\n","site":{"data":{}},"excerpt":"<p>C语言数组下标<code>[]</code>符号竟是个语法糖？</p>","more":"<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> a[<span class=\"number\">100</span>];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> b[<span class=\"number\">100</span>];</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span> <span class=\"title\">ins</span>;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(; i&lt;<span class=\"number\">200</span>; i++) &#123;</span><br><span class=\"line\">        ins.a[i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>问：上述程序在运行时是否会产生数组越限？</p>\n<p>答：不会。</p>\n<blockquote>\n<p>《C程序设计语言》（第2版·新版）P84写到：<br>对数组元素a[i]的引用也可以写成<em>(a+i)这种形式，在计算数组元素a[i]的值时，C语言实际上先将其转换为</em>(a+i)的形式，然后再进行求值。</p>\n</blockquote>\n<p>如果你没注意到此特性，将有可能导致灾难。</p>"},{"title":"关于C语言的fread函数","date":"2017-07-07T09:14:16.000Z","comments":1,"_content":"\n关于C函数fread的一道小小题目。\n\n<!--more-->\n\n```c\n#include <stdio.h>\n#include <stdlib.h>\n\n// text.txt的内容只有一行，该行的内容为一个数值：7\n\nint main() {\n    char *file = \"text.txt\";\n    FILE *fp = fopen(file, \"r\");\n    if(fp) {\n        char str[128];\n        int rc = fread(str, 5, 1, fp);\n        printf(\"size is : %d\\n\", rc);\n        if(rc) \n            printf(\"content is : %d\\n\", atoi(str));\n        fclose(fp);\n    }\n    return 0;\n}\n```\n\n你猜运行上面的结果会输出什么？答案是：\n> size is : 0\n\n但我期望的结果是：\n> size is : 2\n> content is : 7\n\n问题出在哪里？且看看fread的定义：\n> ```size_t fread(void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);```\n\n这里的`size`表示读取的步长大小（字节数），`nitems`为读取多少步，返回结果是实际读取了多少步。上面的代码问题在于，读取的步长大小为5字节，但文件内容并没有5个字节这么多，于是返回结果`rc`为0，自然得不到期望输出了。将上述代码的第11行修改如下即可：\n\n    int rc = fread(str, 1, 5, fp);\n\n即步长为1，预期可以读到5步，实际上只读了两步就结束了（其中一个字节为换行符），因为遇到了文件结束符。","source":"_posts/2017-07-07-sth-about-fread.md","raw":"---\ntitle: 关于C语言的fread函数\ndate: 2017-07-07 17:14:16\ntags: ['C/C++']\ncomments: true\ncategories: ['编程实践']\n---\n\n关于C函数fread的一道小小题目。\n\n<!--more-->\n\n```c\n#include <stdio.h>\n#include <stdlib.h>\n\n// text.txt的内容只有一行，该行的内容为一个数值：7\n\nint main() {\n    char *file = \"text.txt\";\n    FILE *fp = fopen(file, \"r\");\n    if(fp) {\n        char str[128];\n        int rc = fread(str, 5, 1, fp);\n        printf(\"size is : %d\\n\", rc);\n        if(rc) \n            printf(\"content is : %d\\n\", atoi(str));\n        fclose(fp);\n    }\n    return 0;\n}\n```\n\n你猜运行上面的结果会输出什么？答案是：\n> size is : 0\n\n但我期望的结果是：\n> size is : 2\n> content is : 7\n\n问题出在哪里？且看看fread的定义：\n> ```size_t fread(void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);```\n\n这里的`size`表示读取的步长大小（字节数），`nitems`为读取多少步，返回结果是实际读取了多少步。上面的代码问题在于，读取的步长大小为5字节，但文件内容并没有5个字节这么多，于是返回结果`rc`为0，自然得不到期望输出了。将上述代码的第11行修改如下即可：\n\n    int rc = fread(str, 1, 5, fp);\n\n即步长为1，预期可以读到5步，实际上只读了两步就结束了（其中一个字节为换行符），因为遇到了文件结束符。","slug":"sth-about-fread","published":1,"updated":"2017-07-07T09:34:12.000Z","layout":"post","photos":[],"link":"","_id":"cjlza6may004tpgupd2g764pb","content":"<p>关于C函数fread的一道小小题目。</p>\n<a id=\"more\"></a>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// text.txt的内容只有一行，该行的内容为一个数值：7</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> *file = <span class=\"string\">\"text.txt\"</span>;</span><br><span class=\"line\">    FILE *fp = fopen(file, <span class=\"string\">\"r\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(fp) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">char</span> str[<span class=\"number\">128</span>];</span><br><span class=\"line\">        <span class=\"keyword\">int</span> rc = fread(str, <span class=\"number\">5</span>, <span class=\"number\">1</span>, fp);</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"size is : %d\\n\"</span>, rc);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(rc) </span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">\"content is : %d\\n\"</span>, atoi(str));</span><br><span class=\"line\">        fclose(fp);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>你猜运行上面的结果会输出什么？答案是：</p>\n<blockquote>\n<p>size is : 0</p>\n</blockquote>\n<p>但我期望的结果是：</p>\n<blockquote>\n<p>size is : 2<br>content is : 7</p>\n</blockquote>\n<p>问题出在哪里？且看看fread的定义：</p>\n<blockquote>\n<p><code>size_t fread(void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);</code></p>\n</blockquote>\n<p>这里的<code>size</code>表示读取的步长大小（字节数），<code>nitems</code>为读取多少步，返回结果是实际读取了多少步。上面的代码问题在于，读取的步长大小为5字节，但文件内容并没有5个字节这么多，于是返回结果<code>rc</code>为0，自然得不到期望输出了。将上述代码的第11行修改如下即可：</p>\n<pre><code>int rc = fread(str, 1, 5, fp);\n</code></pre><p>即步长为1，预期可以读到5步，实际上只读了两步就结束了（其中一个字节为换行符），因为遇到了文件结束符。</p>\n","site":{"data":{}},"excerpt":"<p>关于C函数fread的一道小小题目。</p>","more":"<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// text.txt的内容只有一行，该行的内容为一个数值：7</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> *file = <span class=\"string\">\"text.txt\"</span>;</span><br><span class=\"line\">    FILE *fp = fopen(file, <span class=\"string\">\"r\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(fp) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">char</span> str[<span class=\"number\">128</span>];</span><br><span class=\"line\">        <span class=\"keyword\">int</span> rc = fread(str, <span class=\"number\">5</span>, <span class=\"number\">1</span>, fp);</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"size is : %d\\n\"</span>, rc);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(rc) </span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">\"content is : %d\\n\"</span>, atoi(str));</span><br><span class=\"line\">        fclose(fp);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>你猜运行上面的结果会输出什么？答案是：</p>\n<blockquote>\n<p>size is : 0</p>\n</blockquote>\n<p>但我期望的结果是：</p>\n<blockquote>\n<p>size is : 2<br>content is : 7</p>\n</blockquote>\n<p>问题出在哪里？且看看fread的定义：</p>\n<blockquote>\n<p><code>size_t fread(void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);</code></p>\n</blockquote>\n<p>这里的<code>size</code>表示读取的步长大小（字节数），<code>nitems</code>为读取多少步，返回结果是实际读取了多少步。上面的代码问题在于，读取的步长大小为5字节，但文件内容并没有5个字节这么多，于是返回结果<code>rc</code>为0，自然得不到期望输出了。将上述代码的第11行修改如下即可：</p>\n<pre><code>int rc = fread(str, 1, 5, fp);\n</code></pre><p>即步长为1，预期可以读到5步，实际上只读了两步就结束了（其中一个字节为换行符），因为遇到了文件结束符。</p>"},{"title":"我理解的刻意练习","date":"2017-05-24T04:27:57.000Z","comments":1,"_content":"\n## Part1 刻意练习的背景\n\n刻意练习是关于如何在某个领域精进的方法论，它已经被大众所熟知。不管是各领域的专家，还是没有成为专家的，都普遍认同——**想要成为某个领域的专家，离不开刻意练习**。\n\n<!--more-->\n\n关于刻意练习，中国古人早有类似说法。欧阳修笔下卖油翁的「**唯手熟尔**」，便是体现。过去二三十年，科学家和心理学家们针对「专家是如何成为专家」的调查研究，在2006年催生了一部900多页的学术著作《The Cambridge Handbook of Expertise and Expert Performance》。这是「如何成为专家」这一领域的里程碑式著作，后期出现的一系列关于此的畅销书都受到了它的直接影响，其中包括格拉德威尔的《[异类][6]》。这些著作都指明，**刻意练习10000小时是成为某个领域专家的必要条件**。\n\n随着脑科学的发展，刻意练习有了进一步解释。神经科学和认知科学研究发现，人的任何一个技能，本质上是大脑内一系列神经纤维的电脉冲信号的传递。在大脑中，游离着大量自由活动的髓磷脂，它们能够观测神经纤维的电信号传递，将使用得较为高频的神经纤维线路包裹起来，形成专属通道。这些专属通道是脑神经的高速公路，其传输速度可以提升近3000倍，甚至可以控制速度，想慢就慢。**刻意练习便是在自己在大脑中建造属于某个领域的高速公路**。\n\n既然刻意练习已被证实为一个必要且有效的训练方法，那么我们要尽可能的用上它。刻意练习（deliberate practice）的**目的是精进**，刻意（deliberate）意味着要有预期（purpose）和设计（design），**通过设计（design）一系列自己还「做不好 」的小目标（purpose）让自己去完成（practice）**，不断朝专家方向逼近，**以避免无意识的自动完成**。这里的无意识完成，还有一个说法便是，只愿意处在自己的舒适区。\n\n## Part2 如何刻意练习\n\n那么该如何练习刻意练习呢？笔者在此引入质量管理著名的戴明环理论（PDCA）来指导实践练习。戴明环的P（Plan）为计划，D（Do）为执行，C（Check）为分析、衡量和检查，A（Act）为调整、响应。戴明环是不断PDCA循环呈现为**螺旋上升的一个动态过程**，下面展开来叙述。\n\n先说Plan，概括来讲便是**长、中、短期目标**。首先，你需要有个精进的方向，你想在哪个领域做到卓越，这便是你的长期目标，比如成为一个优秀的软件工程师；其次，你需要有一个相对长期目标清晰一些的中期目标，如自己动手写代码实现BP神经网络；最后，你需要有一连串可执行，具体的、可衡量的小目标，如先在matlab上运行BP神经网络的例子，这便是短期目标。短期目标有一要点，那便是**可以被完成（遵循[SMART原则][1]）**。假如你大量的练习都无法完成，没有任何成效，那无异于频繁的在给自己泼冷水，若是这样任何人都无法坚持下去。\n\n再说Do。执行的要点是专注（focus），**没有注意力倾注的练习，是不会有产出的**。专注也称思维体力，不同人的思维体力肯定是不同的。刘未鹏在《[暗时间][2]》里提到他曾在嘈杂的环境下啃大部头（某些技术书籍）以训练自己的专注能力，因为只有专注时才具备高效率，否则极可能是时间花出去了但却没有任何收获。\n\n紧接着是Check。戴明在晚期提出Check应该改为Study（研究），因为Check让人们只在意是否达成预期目标，而忽略了研究为什么没达成目标。总结来说，Check的要点**其一是测量与目标的偏差，其二是研究为什么没达成或者为什么做的比预想的好**。如果与目标的偏差无法测量，那么目标一开始便定得有问题。\n\n最后是Act。戴明环理论中，Act的目的是为Plan服务的，我理解其含义是针对于Check的响应。这里的响应有两个含义，一是奖励与惩罚，**完成预期目标应当有奖励，而未完成也理应有小小的惩罚，这会使得我们对错误及其的敏感，进而尽可能避免犯错和失败**；二是为制定下一个PDCA环的Plan提供素材，包括下个Plan该练习什么，以及该沉淀哪些有价值的信息，防止[狗熊掰棒子][3]（来自吴军老师的一个非常有趣的比喻），形成积累效应。\n\n《异类》提到成为一个领域的专家需要刻意练习10000小时，假如一天练习3小时，大概要十年时间，这意味着**大量重复的PDCA循环练习**。在制定长期Plan时，最好能向一位高人请教，正所谓站得高看得远。**当你所知有限时，你所谓的长期目标，可能只是井底之蛙的短见**。\n\n## Part3 兴趣以及如何获得「兴趣」效应\n\n练习本身是枯燥无味的，如吉他练习最简单的一点——右手拨弦。要做到右手拨弦时，声音清晰、明亮，且拨弦时不碰到其他弦，这本身就需要几十甚至近百次的练习。若是加上快速，且不同指法也做到前述条件，更是需要成百上千次的练习。有一样东西很神奇，它让我们愿意这样苦练，且乐此不疲，那就是兴趣。国际象棋界高手中著名的波尔加三姐妹，其中一个并不怎么喜欢国际象棋。这有力的说明了**即使你不喜欢，也可以通过刻意练习成为一个领域的专家，但兴趣却能把苦练变为一种乐趣，让人愿意持续不断的苦练**。面对没有兴趣的事物时，有办法获得这种兴趣效应吗？\n\n答案是肯定的。那就是通过「**赋予意义**」来弄清楚你是否真的想要。这个方法论来自于李笑来的得到专栏文章《为什么别人家的孩子那么有毅力》：\n\n> 若是某件事儿你觉得需要努力、需要坚持才行，那这事儿基本上从一开始就注定做不成了……**需要努力、需要坚持，说明你骨子里不愿意做啊**！你骨子里不愿意做的事情，不可能做好的，不可能做成的。\n> \n> 无论做什么事情，**在开始之前，都要想尽一切办法为这个事情赋予重大的意义，甚至多重重大的意义**。\n> \n> 当你决定习得某项技能的时候，在你以及「想办法赋予了它很多正面意义」之后，还可以想尽一切办法**为「没有它的存在」赋予很多负面意义**。拿出一张纸罗列，花几天甚至几个月去罗列：\n> \n> 1. 如果我没有这项技能，那现在有什么事儿我根本做不了？根本没有机会？\n> 2. 进而，在将来会遇到什么样的困难？会失去怎样的机会？\n> 3. 如果我最终没有掌握这项技能，我就跟哪些人是一样的？他们的生活究竟有多少凄惨？\n>\n> 不仅要罗列，还要「展开想象的翅膀」，把可以想象出来的细节「栩栩如生」地写下来——相信我，这会「吓到」你的大脑（准确地说，是**把那种你所需要的恐惧深深埋入你的潜意识**），然后它就会在很多的时候**自动工作**了，催促你赶紧弄，否则它就焦虑，它就害怕，它就不安生……\n\n拿跑步这件事情来说。跑步一可以让你获得健康的体魄，二能让你保持很棒的身材，三是让你有很好的精神，四是认识一些跑友……而假设你的世界没有了跑步呢？你可能会变得跟老王一样大腹便便，你可能会整日无精打采，你可能一生都做不到自律，你可能永远做不到坚持……简单思索，你便能想到很多正反面的意义。\n\n最后，如果你思索半天依然赋予不了意义，那请放弃吧！这可能根本就不是你想要的。\n\n## Part 4 结语\n\n刻意练习有得到，同样也有失去，这个失去是「**牺牲短期绩效**」。对于一个习惯手写的作家，刚开始学习电脑打字，效率肯定是不如动手写的，但在他熟练掌握了电脑打字后，效率将是以前的好几倍。还有一点便是，**日常工作和生活其实有大量可以刻意练习的地方**，比方说：\n\n- 逻辑的训练：我们每天要说很多的话，无论是面对面还是通过聊天工具，讲话**准确、清晰、必要、简短**不就是可以训练的点吗？首先这番话是否非讲不可？其次这番话讲得对不对？这番话传达得清晰吗？对方全部接收并理解了吗？表达是否足够简短呢？\n- 管理情绪的训练：心理学家的研究告诉我们，当情绪来临时，**压制它是没有用的，正确的做法是找到并分析你情绪的来源**。当你能客观且理性的分析情绪的起因时，你才具备管理情绪的能力；\n- 自律的训练：每天给自己定小目标，**完成则奖励自己，完不成则惩罚自己**；\n- 管理的训练：在下属遇到问题找你时，通过问「**你觉得呢**」迫使对方寻求解决方案，而不是要靠你来帮他解决；\n- 3W的训练：剖析一件事情时，弄清楚**what、why和how**。\n\n\n这样的训练比比皆是，那些不知道该刻意练习什么的人，无非是**思维懒惰进而导致行动懒惰**罢了。\n\n最后总结下。刻意练习的目的是精进，通过设计（design）一系列自己还「做不好 」的小目标（purpose）让自己去完成（practice），朝专家方向不断逼近。在开始之前，尽可能给自己要做的事情赋予重大意义，然后通过PDCA循环螺旋上升的去推进。其中P指长中短期目标，D是专注执行，C是检查，A是响应。\n\n**任何一个刻意练习的高手，必定是每天自带小目标和鸡血的人，每天都有量化的目标可完成，每天都能让自己保持亢奋去朝着目标推进**。\n\n## 参考文献\n\n- [SMART原则][1]\n- [刘未鹏：暗时间][2]\n- [吴军：也谈10000小时][3]\n- [万维钢：怎样练习一万小时][4]\n- [李叫兽：为什么你有10年经验，但成不了专家][5]\n- [格拉德威尔：异类][6]\n\n[1]: http://wiki.mbalib.com/wiki/SMART%E5%8E%9F%E5%88%99\n[2]: https://book.douban.com/subject/6709809/\n[3]: http://blog.csdn.net/u014231523/article/details/54236776\n[4]: https://sanwen.net/a/jgnpqoo.html\n[5]: http://www.360doc.com/content/15/0930/13/26689585_502445624.shtml\n[6]: https://book.douban.com/subject/3688489/","source":"_posts/2017-05-24-deliberate-practice.md","raw":"---\ntitle: 我理解的刻意练习\ndate: 2017-05-24 12:27:57\ntags: ['刻意练习']\ncomments: true\ncategories: ['读书笔记']\n---\n\n## Part1 刻意练习的背景\n\n刻意练习是关于如何在某个领域精进的方法论，它已经被大众所熟知。不管是各领域的专家，还是没有成为专家的，都普遍认同——**想要成为某个领域的专家，离不开刻意练习**。\n\n<!--more-->\n\n关于刻意练习，中国古人早有类似说法。欧阳修笔下卖油翁的「**唯手熟尔**」，便是体现。过去二三十年，科学家和心理学家们针对「专家是如何成为专家」的调查研究，在2006年催生了一部900多页的学术著作《The Cambridge Handbook of Expertise and Expert Performance》。这是「如何成为专家」这一领域的里程碑式著作，后期出现的一系列关于此的畅销书都受到了它的直接影响，其中包括格拉德威尔的《[异类][6]》。这些著作都指明，**刻意练习10000小时是成为某个领域专家的必要条件**。\n\n随着脑科学的发展，刻意练习有了进一步解释。神经科学和认知科学研究发现，人的任何一个技能，本质上是大脑内一系列神经纤维的电脉冲信号的传递。在大脑中，游离着大量自由活动的髓磷脂，它们能够观测神经纤维的电信号传递，将使用得较为高频的神经纤维线路包裹起来，形成专属通道。这些专属通道是脑神经的高速公路，其传输速度可以提升近3000倍，甚至可以控制速度，想慢就慢。**刻意练习便是在自己在大脑中建造属于某个领域的高速公路**。\n\n既然刻意练习已被证实为一个必要且有效的训练方法，那么我们要尽可能的用上它。刻意练习（deliberate practice）的**目的是精进**，刻意（deliberate）意味着要有预期（purpose）和设计（design），**通过设计（design）一系列自己还「做不好 」的小目标（purpose）让自己去完成（practice）**，不断朝专家方向逼近，**以避免无意识的自动完成**。这里的无意识完成，还有一个说法便是，只愿意处在自己的舒适区。\n\n## Part2 如何刻意练习\n\n那么该如何练习刻意练习呢？笔者在此引入质量管理著名的戴明环理论（PDCA）来指导实践练习。戴明环的P（Plan）为计划，D（Do）为执行，C（Check）为分析、衡量和检查，A（Act）为调整、响应。戴明环是不断PDCA循环呈现为**螺旋上升的一个动态过程**，下面展开来叙述。\n\n先说Plan，概括来讲便是**长、中、短期目标**。首先，你需要有个精进的方向，你想在哪个领域做到卓越，这便是你的长期目标，比如成为一个优秀的软件工程师；其次，你需要有一个相对长期目标清晰一些的中期目标，如自己动手写代码实现BP神经网络；最后，你需要有一连串可执行，具体的、可衡量的小目标，如先在matlab上运行BP神经网络的例子，这便是短期目标。短期目标有一要点，那便是**可以被完成（遵循[SMART原则][1]）**。假如你大量的练习都无法完成，没有任何成效，那无异于频繁的在给自己泼冷水，若是这样任何人都无法坚持下去。\n\n再说Do。执行的要点是专注（focus），**没有注意力倾注的练习，是不会有产出的**。专注也称思维体力，不同人的思维体力肯定是不同的。刘未鹏在《[暗时间][2]》里提到他曾在嘈杂的环境下啃大部头（某些技术书籍）以训练自己的专注能力，因为只有专注时才具备高效率，否则极可能是时间花出去了但却没有任何收获。\n\n紧接着是Check。戴明在晚期提出Check应该改为Study（研究），因为Check让人们只在意是否达成预期目标，而忽略了研究为什么没达成目标。总结来说，Check的要点**其一是测量与目标的偏差，其二是研究为什么没达成或者为什么做的比预想的好**。如果与目标的偏差无法测量，那么目标一开始便定得有问题。\n\n最后是Act。戴明环理论中，Act的目的是为Plan服务的，我理解其含义是针对于Check的响应。这里的响应有两个含义，一是奖励与惩罚，**完成预期目标应当有奖励，而未完成也理应有小小的惩罚，这会使得我们对错误及其的敏感，进而尽可能避免犯错和失败**；二是为制定下一个PDCA环的Plan提供素材，包括下个Plan该练习什么，以及该沉淀哪些有价值的信息，防止[狗熊掰棒子][3]（来自吴军老师的一个非常有趣的比喻），形成积累效应。\n\n《异类》提到成为一个领域的专家需要刻意练习10000小时，假如一天练习3小时，大概要十年时间，这意味着**大量重复的PDCA循环练习**。在制定长期Plan时，最好能向一位高人请教，正所谓站得高看得远。**当你所知有限时，你所谓的长期目标，可能只是井底之蛙的短见**。\n\n## Part3 兴趣以及如何获得「兴趣」效应\n\n练习本身是枯燥无味的，如吉他练习最简单的一点——右手拨弦。要做到右手拨弦时，声音清晰、明亮，且拨弦时不碰到其他弦，这本身就需要几十甚至近百次的练习。若是加上快速，且不同指法也做到前述条件，更是需要成百上千次的练习。有一样东西很神奇，它让我们愿意这样苦练，且乐此不疲，那就是兴趣。国际象棋界高手中著名的波尔加三姐妹，其中一个并不怎么喜欢国际象棋。这有力的说明了**即使你不喜欢，也可以通过刻意练习成为一个领域的专家，但兴趣却能把苦练变为一种乐趣，让人愿意持续不断的苦练**。面对没有兴趣的事物时，有办法获得这种兴趣效应吗？\n\n答案是肯定的。那就是通过「**赋予意义**」来弄清楚你是否真的想要。这个方法论来自于李笑来的得到专栏文章《为什么别人家的孩子那么有毅力》：\n\n> 若是某件事儿你觉得需要努力、需要坚持才行，那这事儿基本上从一开始就注定做不成了……**需要努力、需要坚持，说明你骨子里不愿意做啊**！你骨子里不愿意做的事情，不可能做好的，不可能做成的。\n> \n> 无论做什么事情，**在开始之前，都要想尽一切办法为这个事情赋予重大的意义，甚至多重重大的意义**。\n> \n> 当你决定习得某项技能的时候，在你以及「想办法赋予了它很多正面意义」之后，还可以想尽一切办法**为「没有它的存在」赋予很多负面意义**。拿出一张纸罗列，花几天甚至几个月去罗列：\n> \n> 1. 如果我没有这项技能，那现在有什么事儿我根本做不了？根本没有机会？\n> 2. 进而，在将来会遇到什么样的困难？会失去怎样的机会？\n> 3. 如果我最终没有掌握这项技能，我就跟哪些人是一样的？他们的生活究竟有多少凄惨？\n>\n> 不仅要罗列，还要「展开想象的翅膀」，把可以想象出来的细节「栩栩如生」地写下来——相信我，这会「吓到」你的大脑（准确地说，是**把那种你所需要的恐惧深深埋入你的潜意识**），然后它就会在很多的时候**自动工作**了，催促你赶紧弄，否则它就焦虑，它就害怕，它就不安生……\n\n拿跑步这件事情来说。跑步一可以让你获得健康的体魄，二能让你保持很棒的身材，三是让你有很好的精神，四是认识一些跑友……而假设你的世界没有了跑步呢？你可能会变得跟老王一样大腹便便，你可能会整日无精打采，你可能一生都做不到自律，你可能永远做不到坚持……简单思索，你便能想到很多正反面的意义。\n\n最后，如果你思索半天依然赋予不了意义，那请放弃吧！这可能根本就不是你想要的。\n\n## Part 4 结语\n\n刻意练习有得到，同样也有失去，这个失去是「**牺牲短期绩效**」。对于一个习惯手写的作家，刚开始学习电脑打字，效率肯定是不如动手写的，但在他熟练掌握了电脑打字后，效率将是以前的好几倍。还有一点便是，**日常工作和生活其实有大量可以刻意练习的地方**，比方说：\n\n- 逻辑的训练：我们每天要说很多的话，无论是面对面还是通过聊天工具，讲话**准确、清晰、必要、简短**不就是可以训练的点吗？首先这番话是否非讲不可？其次这番话讲得对不对？这番话传达得清晰吗？对方全部接收并理解了吗？表达是否足够简短呢？\n- 管理情绪的训练：心理学家的研究告诉我们，当情绪来临时，**压制它是没有用的，正确的做法是找到并分析你情绪的来源**。当你能客观且理性的分析情绪的起因时，你才具备管理情绪的能力；\n- 自律的训练：每天给自己定小目标，**完成则奖励自己，完不成则惩罚自己**；\n- 管理的训练：在下属遇到问题找你时，通过问「**你觉得呢**」迫使对方寻求解决方案，而不是要靠你来帮他解决；\n- 3W的训练：剖析一件事情时，弄清楚**what、why和how**。\n\n\n这样的训练比比皆是，那些不知道该刻意练习什么的人，无非是**思维懒惰进而导致行动懒惰**罢了。\n\n最后总结下。刻意练习的目的是精进，通过设计（design）一系列自己还「做不好 」的小目标（purpose）让自己去完成（practice），朝专家方向不断逼近。在开始之前，尽可能给自己要做的事情赋予重大意义，然后通过PDCA循环螺旋上升的去推进。其中P指长中短期目标，D是专注执行，C是检查，A是响应。\n\n**任何一个刻意练习的高手，必定是每天自带小目标和鸡血的人，每天都有量化的目标可完成，每天都能让自己保持亢奋去朝着目标推进**。\n\n## 参考文献\n\n- [SMART原则][1]\n- [刘未鹏：暗时间][2]\n- [吴军：也谈10000小时][3]\n- [万维钢：怎样练习一万小时][4]\n- [李叫兽：为什么你有10年经验，但成不了专家][5]\n- [格拉德威尔：异类][6]\n\n[1]: http://wiki.mbalib.com/wiki/SMART%E5%8E%9F%E5%88%99\n[2]: https://book.douban.com/subject/6709809/\n[3]: http://blog.csdn.net/u014231523/article/details/54236776\n[4]: https://sanwen.net/a/jgnpqoo.html\n[5]: http://www.360doc.com/content/15/0930/13/26689585_502445624.shtml\n[6]: https://book.douban.com/subject/3688489/","slug":"deliberate-practice","published":1,"updated":"2017-06-16T12:21:10.000Z","layout":"post","photos":[],"link":"","_id":"cjlza6mb0004xpgupi537uxz3","content":"<h2 id=\"Part1-刻意练习的背景\"><a href=\"#Part1-刻意练习的背景\" class=\"headerlink\" title=\"Part1 刻意练习的背景\"></a>Part1 刻意练习的背景</h2><p>刻意练习是关于如何在某个领域精进的方法论，它已经被大众所熟知。不管是各领域的专家，还是没有成为专家的，都普遍认同——<strong>想要成为某个领域的专家，离不开刻意练习</strong>。</p>\n<a id=\"more\"></a>\n<p>关于刻意练习，中国古人早有类似说法。欧阳修笔下卖油翁的「<strong>唯手熟尔</strong>」，便是体现。过去二三十年，科学家和心理学家们针对「专家是如何成为专家」的调查研究，在2006年催生了一部900多页的学术著作《The Cambridge Handbook of Expertise and Expert Performance》。这是「如何成为专家」这一领域的里程碑式著作，后期出现的一系列关于此的畅销书都受到了它的直接影响，其中包括格拉德威尔的《<a href=\"https://book.douban.com/subject/3688489/\" target=\"_blank\" rel=\"noopener\">异类</a>》。这些著作都指明，<strong>刻意练习10000小时是成为某个领域专家的必要条件</strong>。</p>\n<p>随着脑科学的发展，刻意练习有了进一步解释。神经科学和认知科学研究发现，人的任何一个技能，本质上是大脑内一系列神经纤维的电脉冲信号的传递。在大脑中，游离着大量自由活动的髓磷脂，它们能够观测神经纤维的电信号传递，将使用得较为高频的神经纤维线路包裹起来，形成专属通道。这些专属通道是脑神经的高速公路，其传输速度可以提升近3000倍，甚至可以控制速度，想慢就慢。<strong>刻意练习便是在自己在大脑中建造属于某个领域的高速公路</strong>。</p>\n<p>既然刻意练习已被证实为一个必要且有效的训练方法，那么我们要尽可能的用上它。刻意练习（deliberate practice）的<strong>目的是精进</strong>，刻意（deliberate）意味着要有预期（purpose）和设计（design），<strong>通过设计（design）一系列自己还「做不好 」的小目标（purpose）让自己去完成（practice）</strong>，不断朝专家方向逼近，<strong>以避免无意识的自动完成</strong>。这里的无意识完成，还有一个说法便是，只愿意处在自己的舒适区。</p>\n<h2 id=\"Part2-如何刻意练习\"><a href=\"#Part2-如何刻意练习\" class=\"headerlink\" title=\"Part2 如何刻意练习\"></a>Part2 如何刻意练习</h2><p>那么该如何练习刻意练习呢？笔者在此引入质量管理著名的戴明环理论（PDCA）来指导实践练习。戴明环的P（Plan）为计划，D（Do）为执行，C（Check）为分析、衡量和检查，A（Act）为调整、响应。戴明环是不断PDCA循环呈现为<strong>螺旋上升的一个动态过程</strong>，下面展开来叙述。</p>\n<p>先说Plan，概括来讲便是<strong>长、中、短期目标</strong>。首先，你需要有个精进的方向，你想在哪个领域做到卓越，这便是你的长期目标，比如成为一个优秀的软件工程师；其次，你需要有一个相对长期目标清晰一些的中期目标，如自己动手写代码实现BP神经网络；最后，你需要有一连串可执行，具体的、可衡量的小目标，如先在matlab上运行BP神经网络的例子，这便是短期目标。短期目标有一要点，那便是<strong>可以被完成（遵循<a href=\"http://wiki.mbalib.com/wiki/SMART%E5%8E%9F%E5%88%99\" target=\"_blank\" rel=\"noopener\">SMART原则</a>）</strong>。假如你大量的练习都无法完成，没有任何成效，那无异于频繁的在给自己泼冷水，若是这样任何人都无法坚持下去。</p>\n<p>再说Do。执行的要点是专注（focus），<strong>没有注意力倾注的练习，是不会有产出的</strong>。专注也称思维体力，不同人的思维体力肯定是不同的。刘未鹏在《<a href=\"https://book.douban.com/subject/6709809/\" target=\"_blank\" rel=\"noopener\">暗时间</a>》里提到他曾在嘈杂的环境下啃大部头（某些技术书籍）以训练自己的专注能力，因为只有专注时才具备高效率，否则极可能是时间花出去了但却没有任何收获。</p>\n<p>紧接着是Check。戴明在晚期提出Check应该改为Study（研究），因为Check让人们只在意是否达成预期目标，而忽略了研究为什么没达成目标。总结来说，Check的要点<strong>其一是测量与目标的偏差，其二是研究为什么没达成或者为什么做的比预想的好</strong>。如果与目标的偏差无法测量，那么目标一开始便定得有问题。</p>\n<p>最后是Act。戴明环理论中，Act的目的是为Plan服务的，我理解其含义是针对于Check的响应。这里的响应有两个含义，一是奖励与惩罚，<strong>完成预期目标应当有奖励，而未完成也理应有小小的惩罚，这会使得我们对错误及其的敏感，进而尽可能避免犯错和失败</strong>；二是为制定下一个PDCA环的Plan提供素材，包括下个Plan该练习什么，以及该沉淀哪些有价值的信息，防止<a href=\"http://blog.csdn.net/u014231523/article/details/54236776\" target=\"_blank\" rel=\"noopener\">狗熊掰棒子</a>（来自吴军老师的一个非常有趣的比喻），形成积累效应。</p>\n<p>《异类》提到成为一个领域的专家需要刻意练习10000小时，假如一天练习3小时，大概要十年时间，这意味着<strong>大量重复的PDCA循环练习</strong>。在制定长期Plan时，最好能向一位高人请教，正所谓站得高看得远。<strong>当你所知有限时，你所谓的长期目标，可能只是井底之蛙的短见</strong>。</p>\n<h2 id=\"Part3-兴趣以及如何获得「兴趣」效应\"><a href=\"#Part3-兴趣以及如何获得「兴趣」效应\" class=\"headerlink\" title=\"Part3 兴趣以及如何获得「兴趣」效应\"></a>Part3 兴趣以及如何获得「兴趣」效应</h2><p>练习本身是枯燥无味的，如吉他练习最简单的一点——右手拨弦。要做到右手拨弦时，声音清晰、明亮，且拨弦时不碰到其他弦，这本身就需要几十甚至近百次的练习。若是加上快速，且不同指法也做到前述条件，更是需要成百上千次的练习。有一样东西很神奇，它让我们愿意这样苦练，且乐此不疲，那就是兴趣。国际象棋界高手中著名的波尔加三姐妹，其中一个并不怎么喜欢国际象棋。这有力的说明了<strong>即使你不喜欢，也可以通过刻意练习成为一个领域的专家，但兴趣却能把苦练变为一种乐趣，让人愿意持续不断的苦练</strong>。面对没有兴趣的事物时，有办法获得这种兴趣效应吗？</p>\n<p>答案是肯定的。那就是通过「<strong>赋予意义</strong>」来弄清楚你是否真的想要。这个方法论来自于李笑来的得到专栏文章《为什么别人家的孩子那么有毅力》：</p>\n<blockquote>\n<p>若是某件事儿你觉得需要努力、需要坚持才行，那这事儿基本上从一开始就注定做不成了……<strong>需要努力、需要坚持，说明你骨子里不愿意做啊</strong>！你骨子里不愿意做的事情，不可能做好的，不可能做成的。</p>\n<p>无论做什么事情，<strong>在开始之前，都要想尽一切办法为这个事情赋予重大的意义，甚至多重重大的意义</strong>。</p>\n<p>当你决定习得某项技能的时候，在你以及「想办法赋予了它很多正面意义」之后，还可以想尽一切办法<strong>为「没有它的存在」赋予很多负面意义</strong>。拿出一张纸罗列，花几天甚至几个月去罗列：</p>\n<ol>\n<li>如果我没有这项技能，那现在有什么事儿我根本做不了？根本没有机会？</li>\n<li>进而，在将来会遇到什么样的困难？会失去怎样的机会？</li>\n<li>如果我最终没有掌握这项技能，我就跟哪些人是一样的？他们的生活究竟有多少凄惨？</li>\n</ol>\n<p>不仅要罗列，还要「展开想象的翅膀」，把可以想象出来的细节「栩栩如生」地写下来——相信我，这会「吓到」你的大脑（准确地说，是<strong>把那种你所需要的恐惧深深埋入你的潜意识</strong>），然后它就会在很多的时候<strong>自动工作</strong>了，催促你赶紧弄，否则它就焦虑，它就害怕，它就不安生……</p>\n</blockquote>\n<p>拿跑步这件事情来说。跑步一可以让你获得健康的体魄，二能让你保持很棒的身材，三是让你有很好的精神，四是认识一些跑友……而假设你的世界没有了跑步呢？你可能会变得跟老王一样大腹便便，你可能会整日无精打采，你可能一生都做不到自律，你可能永远做不到坚持……简单思索，你便能想到很多正反面的意义。</p>\n<p>最后，如果你思索半天依然赋予不了意义，那请放弃吧！这可能根本就不是你想要的。</p>\n<h2 id=\"Part-4-结语\"><a href=\"#Part-4-结语\" class=\"headerlink\" title=\"Part 4 结语\"></a>Part 4 结语</h2><p>刻意练习有得到，同样也有失去，这个失去是「<strong>牺牲短期绩效</strong>」。对于一个习惯手写的作家，刚开始学习电脑打字，效率肯定是不如动手写的，但在他熟练掌握了电脑打字后，效率将是以前的好几倍。还有一点便是，<strong>日常工作和生活其实有大量可以刻意练习的地方</strong>，比方说：</p>\n<ul>\n<li>逻辑的训练：我们每天要说很多的话，无论是面对面还是通过聊天工具，讲话<strong>准确、清晰、必要、简短</strong>不就是可以训练的点吗？首先这番话是否非讲不可？其次这番话讲得对不对？这番话传达得清晰吗？对方全部接收并理解了吗？表达是否足够简短呢？</li>\n<li>管理情绪的训练：心理学家的研究告诉我们，当情绪来临时，<strong>压制它是没有用的，正确的做法是找到并分析你情绪的来源</strong>。当你能客观且理性的分析情绪的起因时，你才具备管理情绪的能力；</li>\n<li>自律的训练：每天给自己定小目标，<strong>完成则奖励自己，完不成则惩罚自己</strong>；</li>\n<li>管理的训练：在下属遇到问题找你时，通过问「<strong>你觉得呢</strong>」迫使对方寻求解决方案，而不是要靠你来帮他解决；</li>\n<li>3W的训练：剖析一件事情时，弄清楚<strong>what、why和how</strong>。</li>\n</ul>\n<p>这样的训练比比皆是，那些不知道该刻意练习什么的人，无非是<strong>思维懒惰进而导致行动懒惰</strong>罢了。</p>\n<p>最后总结下。刻意练习的目的是精进，通过设计（design）一系列自己还「做不好 」的小目标（purpose）让自己去完成（practice），朝专家方向不断逼近。在开始之前，尽可能给自己要做的事情赋予重大意义，然后通过PDCA循环螺旋上升的去推进。其中P指长中短期目标，D是专注执行，C是检查，A是响应。</p>\n<p><strong>任何一个刻意练习的高手，必定是每天自带小目标和鸡血的人，每天都有量化的目标可完成，每天都能让自己保持亢奋去朝着目标推进</strong>。</p>\n<h2 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h2><ul>\n<li><a href=\"http://wiki.mbalib.com/wiki/SMART%E5%8E%9F%E5%88%99\" target=\"_blank\" rel=\"noopener\">SMART原则</a></li>\n<li><a href=\"https://book.douban.com/subject/6709809/\" target=\"_blank\" rel=\"noopener\">刘未鹏：暗时间</a></li>\n<li><a href=\"http://blog.csdn.net/u014231523/article/details/54236776\" target=\"_blank\" rel=\"noopener\">吴军：也谈10000小时</a></li>\n<li><a href=\"https://sanwen.net/a/jgnpqoo.html\" target=\"_blank\" rel=\"noopener\">万维钢：怎样练习一万小时</a></li>\n<li><a href=\"http://www.360doc.com/content/15/0930/13/26689585_502445624.shtml\" target=\"_blank\" rel=\"noopener\">李叫兽：为什么你有10年经验，但成不了专家</a></li>\n<li><a href=\"https://book.douban.com/subject/3688489/\" target=\"_blank\" rel=\"noopener\">格拉德威尔：异类</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"Part1-刻意练习的背景\"><a href=\"#Part1-刻意练习的背景\" class=\"headerlink\" title=\"Part1 刻意练习的背景\"></a>Part1 刻意练习的背景</h2><p>刻意练习是关于如何在某个领域精进的方法论，它已经被大众所熟知。不管是各领域的专家，还是没有成为专家的，都普遍认同——<strong>想要成为某个领域的专家，离不开刻意练习</strong>。</p>","more":"<p>关于刻意练习，中国古人早有类似说法。欧阳修笔下卖油翁的「<strong>唯手熟尔</strong>」，便是体现。过去二三十年，科学家和心理学家们针对「专家是如何成为专家」的调查研究，在2006年催生了一部900多页的学术著作《The Cambridge Handbook of Expertise and Expert Performance》。这是「如何成为专家」这一领域的里程碑式著作，后期出现的一系列关于此的畅销书都受到了它的直接影响，其中包括格拉德威尔的《<a href=\"https://book.douban.com/subject/3688489/\" target=\"_blank\" rel=\"noopener\">异类</a>》。这些著作都指明，<strong>刻意练习10000小时是成为某个领域专家的必要条件</strong>。</p>\n<p>随着脑科学的发展，刻意练习有了进一步解释。神经科学和认知科学研究发现，人的任何一个技能，本质上是大脑内一系列神经纤维的电脉冲信号的传递。在大脑中，游离着大量自由活动的髓磷脂，它们能够观测神经纤维的电信号传递，将使用得较为高频的神经纤维线路包裹起来，形成专属通道。这些专属通道是脑神经的高速公路，其传输速度可以提升近3000倍，甚至可以控制速度，想慢就慢。<strong>刻意练习便是在自己在大脑中建造属于某个领域的高速公路</strong>。</p>\n<p>既然刻意练习已被证实为一个必要且有效的训练方法，那么我们要尽可能的用上它。刻意练习（deliberate practice）的<strong>目的是精进</strong>，刻意（deliberate）意味着要有预期（purpose）和设计（design），<strong>通过设计（design）一系列自己还「做不好 」的小目标（purpose）让自己去完成（practice）</strong>，不断朝专家方向逼近，<strong>以避免无意识的自动完成</strong>。这里的无意识完成，还有一个说法便是，只愿意处在自己的舒适区。</p>\n<h2 id=\"Part2-如何刻意练习\"><a href=\"#Part2-如何刻意练习\" class=\"headerlink\" title=\"Part2 如何刻意练习\"></a>Part2 如何刻意练习</h2><p>那么该如何练习刻意练习呢？笔者在此引入质量管理著名的戴明环理论（PDCA）来指导实践练习。戴明环的P（Plan）为计划，D（Do）为执行，C（Check）为分析、衡量和检查，A（Act）为调整、响应。戴明环是不断PDCA循环呈现为<strong>螺旋上升的一个动态过程</strong>，下面展开来叙述。</p>\n<p>先说Plan，概括来讲便是<strong>长、中、短期目标</strong>。首先，你需要有个精进的方向，你想在哪个领域做到卓越，这便是你的长期目标，比如成为一个优秀的软件工程师；其次，你需要有一个相对长期目标清晰一些的中期目标，如自己动手写代码实现BP神经网络；最后，你需要有一连串可执行，具体的、可衡量的小目标，如先在matlab上运行BP神经网络的例子，这便是短期目标。短期目标有一要点，那便是<strong>可以被完成（遵循<a href=\"http://wiki.mbalib.com/wiki/SMART%E5%8E%9F%E5%88%99\" target=\"_blank\" rel=\"noopener\">SMART原则</a>）</strong>。假如你大量的练习都无法完成，没有任何成效，那无异于频繁的在给自己泼冷水，若是这样任何人都无法坚持下去。</p>\n<p>再说Do。执行的要点是专注（focus），<strong>没有注意力倾注的练习，是不会有产出的</strong>。专注也称思维体力，不同人的思维体力肯定是不同的。刘未鹏在《<a href=\"https://book.douban.com/subject/6709809/\" target=\"_blank\" rel=\"noopener\">暗时间</a>》里提到他曾在嘈杂的环境下啃大部头（某些技术书籍）以训练自己的专注能力，因为只有专注时才具备高效率，否则极可能是时间花出去了但却没有任何收获。</p>\n<p>紧接着是Check。戴明在晚期提出Check应该改为Study（研究），因为Check让人们只在意是否达成预期目标，而忽略了研究为什么没达成目标。总结来说，Check的要点<strong>其一是测量与目标的偏差，其二是研究为什么没达成或者为什么做的比预想的好</strong>。如果与目标的偏差无法测量，那么目标一开始便定得有问题。</p>\n<p>最后是Act。戴明环理论中，Act的目的是为Plan服务的，我理解其含义是针对于Check的响应。这里的响应有两个含义，一是奖励与惩罚，<strong>完成预期目标应当有奖励，而未完成也理应有小小的惩罚，这会使得我们对错误及其的敏感，进而尽可能避免犯错和失败</strong>；二是为制定下一个PDCA环的Plan提供素材，包括下个Plan该练习什么，以及该沉淀哪些有价值的信息，防止<a href=\"http://blog.csdn.net/u014231523/article/details/54236776\" target=\"_blank\" rel=\"noopener\">狗熊掰棒子</a>（来自吴军老师的一个非常有趣的比喻），形成积累效应。</p>\n<p>《异类》提到成为一个领域的专家需要刻意练习10000小时，假如一天练习3小时，大概要十年时间，这意味着<strong>大量重复的PDCA循环练习</strong>。在制定长期Plan时，最好能向一位高人请教，正所谓站得高看得远。<strong>当你所知有限时，你所谓的长期目标，可能只是井底之蛙的短见</strong>。</p>\n<h2 id=\"Part3-兴趣以及如何获得「兴趣」效应\"><a href=\"#Part3-兴趣以及如何获得「兴趣」效应\" class=\"headerlink\" title=\"Part3 兴趣以及如何获得「兴趣」效应\"></a>Part3 兴趣以及如何获得「兴趣」效应</h2><p>练习本身是枯燥无味的，如吉他练习最简单的一点——右手拨弦。要做到右手拨弦时，声音清晰、明亮，且拨弦时不碰到其他弦，这本身就需要几十甚至近百次的练习。若是加上快速，且不同指法也做到前述条件，更是需要成百上千次的练习。有一样东西很神奇，它让我们愿意这样苦练，且乐此不疲，那就是兴趣。国际象棋界高手中著名的波尔加三姐妹，其中一个并不怎么喜欢国际象棋。这有力的说明了<strong>即使你不喜欢，也可以通过刻意练习成为一个领域的专家，但兴趣却能把苦练变为一种乐趣，让人愿意持续不断的苦练</strong>。面对没有兴趣的事物时，有办法获得这种兴趣效应吗？</p>\n<p>答案是肯定的。那就是通过「<strong>赋予意义</strong>」来弄清楚你是否真的想要。这个方法论来自于李笑来的得到专栏文章《为什么别人家的孩子那么有毅力》：</p>\n<blockquote>\n<p>若是某件事儿你觉得需要努力、需要坚持才行，那这事儿基本上从一开始就注定做不成了……<strong>需要努力、需要坚持，说明你骨子里不愿意做啊</strong>！你骨子里不愿意做的事情，不可能做好的，不可能做成的。</p>\n<p>无论做什么事情，<strong>在开始之前，都要想尽一切办法为这个事情赋予重大的意义，甚至多重重大的意义</strong>。</p>\n<p>当你决定习得某项技能的时候，在你以及「想办法赋予了它很多正面意义」之后，还可以想尽一切办法<strong>为「没有它的存在」赋予很多负面意义</strong>。拿出一张纸罗列，花几天甚至几个月去罗列：</p>\n<ol>\n<li>如果我没有这项技能，那现在有什么事儿我根本做不了？根本没有机会？</li>\n<li>进而，在将来会遇到什么样的困难？会失去怎样的机会？</li>\n<li>如果我最终没有掌握这项技能，我就跟哪些人是一样的？他们的生活究竟有多少凄惨？</li>\n</ol>\n<p>不仅要罗列，还要「展开想象的翅膀」，把可以想象出来的细节「栩栩如生」地写下来——相信我，这会「吓到」你的大脑（准确地说，是<strong>把那种你所需要的恐惧深深埋入你的潜意识</strong>），然后它就会在很多的时候<strong>自动工作</strong>了，催促你赶紧弄，否则它就焦虑，它就害怕，它就不安生……</p>\n</blockquote>\n<p>拿跑步这件事情来说。跑步一可以让你获得健康的体魄，二能让你保持很棒的身材，三是让你有很好的精神，四是认识一些跑友……而假设你的世界没有了跑步呢？你可能会变得跟老王一样大腹便便，你可能会整日无精打采，你可能一生都做不到自律，你可能永远做不到坚持……简单思索，你便能想到很多正反面的意义。</p>\n<p>最后，如果你思索半天依然赋予不了意义，那请放弃吧！这可能根本就不是你想要的。</p>\n<h2 id=\"Part-4-结语\"><a href=\"#Part-4-结语\" class=\"headerlink\" title=\"Part 4 结语\"></a>Part 4 结语</h2><p>刻意练习有得到，同样也有失去，这个失去是「<strong>牺牲短期绩效</strong>」。对于一个习惯手写的作家，刚开始学习电脑打字，效率肯定是不如动手写的，但在他熟练掌握了电脑打字后，效率将是以前的好几倍。还有一点便是，<strong>日常工作和生活其实有大量可以刻意练习的地方</strong>，比方说：</p>\n<ul>\n<li>逻辑的训练：我们每天要说很多的话，无论是面对面还是通过聊天工具，讲话<strong>准确、清晰、必要、简短</strong>不就是可以训练的点吗？首先这番话是否非讲不可？其次这番话讲得对不对？这番话传达得清晰吗？对方全部接收并理解了吗？表达是否足够简短呢？</li>\n<li>管理情绪的训练：心理学家的研究告诉我们，当情绪来临时，<strong>压制它是没有用的，正确的做法是找到并分析你情绪的来源</strong>。当你能客观且理性的分析情绪的起因时，你才具备管理情绪的能力；</li>\n<li>自律的训练：每天给自己定小目标，<strong>完成则奖励自己，完不成则惩罚自己</strong>；</li>\n<li>管理的训练：在下属遇到问题找你时，通过问「<strong>你觉得呢</strong>」迫使对方寻求解决方案，而不是要靠你来帮他解决；</li>\n<li>3W的训练：剖析一件事情时，弄清楚<strong>what、why和how</strong>。</li>\n</ul>\n<p>这样的训练比比皆是，那些不知道该刻意练习什么的人，无非是<strong>思维懒惰进而导致行动懒惰</strong>罢了。</p>\n<p>最后总结下。刻意练习的目的是精进，通过设计（design）一系列自己还「做不好 」的小目标（purpose）让自己去完成（practice），朝专家方向不断逼近。在开始之前，尽可能给自己要做的事情赋予重大意义，然后通过PDCA循环螺旋上升的去推进。其中P指长中短期目标，D是专注执行，C是检查，A是响应。</p>\n<p><strong>任何一个刻意练习的高手，必定是每天自带小目标和鸡血的人，每天都有量化的目标可完成，每天都能让自己保持亢奋去朝着目标推进</strong>。</p>\n<h2 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h2><ul>\n<li><a href=\"http://wiki.mbalib.com/wiki/SMART%E5%8E%9F%E5%88%99\" target=\"_blank\" rel=\"noopener\">SMART原则</a></li>\n<li><a href=\"https://book.douban.com/subject/6709809/\" target=\"_blank\" rel=\"noopener\">刘未鹏：暗时间</a></li>\n<li><a href=\"http://blog.csdn.net/u014231523/article/details/54236776\" target=\"_blank\" rel=\"noopener\">吴军：也谈10000小时</a></li>\n<li><a href=\"https://sanwen.net/a/jgnpqoo.html\" target=\"_blank\" rel=\"noopener\">万维钢：怎样练习一万小时</a></li>\n<li><a href=\"http://www.360doc.com/content/15/0930/13/26689585_502445624.shtml\" target=\"_blank\" rel=\"noopener\">李叫兽：为什么你有10年经验，但成不了专家</a></li>\n<li><a href=\"https://book.douban.com/subject/3688489/\" target=\"_blank\" rel=\"noopener\">格拉德威尔：异类</a></li>\n</ul>"},{"title":"左移算法","date":"2017-07-28T04:29:39.000Z","_content":"\n假设有一个字符串\"abcdefgh\"，循环左移3位后得到\"defghabc\"，本文讲解其中的一种左移算法。\n\n<!--more-->\n\n已知条件如下：\n\n- 目标字符串（x）：abcdefgh\n- 字符串长度（n）：8\n- 循环左移位数（l）：3\n- 预期结果（y）：defghabc\n\n先考虑左移一位的情况，这个算法可以这样设计：\n\n- 将第一个字符x[0]暂存到变量t，然后x[1]赋给x[0]，x[2]赋给x[1]，以此类推\n- 结束条件为：x[i]的i等于n（即8），将t赋给x[n-1]（即x[7]）\n\n结束条件的特点是：x[i]的i对n做模运算等于缓存t时的字符数组下标（即0），继续归纳左移二位的情况：\n\n- x[0]赋给t，x[2]赋给x[0]，以此类推，结束条件同上，结束时t赋给x[6]\n- 然而x[1]，x[3]，x[5]，x[7]的位置是错的，按照上述规则执行一次移位，左移二位的工作全部完成\n\n这里的特点是n（即8）是l（即2）的倍数。第一次执行移位时，有4个字符的位置正确；第二次移位时，另外4个字符的位置也正确了，移位完成。这里可以归纳出来的结论是：**移位的次数为n与l的最大公约数**。\n\n因此，对于上文已知条件的求解，只需要按照上述算法执行一趟即可完成移位。算法的伪代码如下：\n\n```\n# gcd为最大公约数计算\nfor i in [0, gcd(n, l)):\n    t = x[i]\n    j = i\n    while true:\n        k = (j + l) % n\n\tif k == i:\n\t    break\n\tx[j] = x[k]\n\tj = k\n    x[j] = t\n```\n\n注：\n\n1. 算法整理自《编程珠玑2》\n2. 还有一种思路是：将字符串存储在一个循环链表中，然后偏移index指针到开始位置，按顺序进行读取即可，但比上述算法耗费空间（每个字符需要持有两个指针，一个指向前，一个指向后）\n","source":"_posts/2017-07-28-left-shift.md","raw":"---\ntitle: 左移算法\ndate: 2017-07-28 12:29:39\ntags:\n---\n\n假设有一个字符串\"abcdefgh\"，循环左移3位后得到\"defghabc\"，本文讲解其中的一种左移算法。\n\n<!--more-->\n\n已知条件如下：\n\n- 目标字符串（x）：abcdefgh\n- 字符串长度（n）：8\n- 循环左移位数（l）：3\n- 预期结果（y）：defghabc\n\n先考虑左移一位的情况，这个算法可以这样设计：\n\n- 将第一个字符x[0]暂存到变量t，然后x[1]赋给x[0]，x[2]赋给x[1]，以此类推\n- 结束条件为：x[i]的i等于n（即8），将t赋给x[n-1]（即x[7]）\n\n结束条件的特点是：x[i]的i对n做模运算等于缓存t时的字符数组下标（即0），继续归纳左移二位的情况：\n\n- x[0]赋给t，x[2]赋给x[0]，以此类推，结束条件同上，结束时t赋给x[6]\n- 然而x[1]，x[3]，x[5]，x[7]的位置是错的，按照上述规则执行一次移位，左移二位的工作全部完成\n\n这里的特点是n（即8）是l（即2）的倍数。第一次执行移位时，有4个字符的位置正确；第二次移位时，另外4个字符的位置也正确了，移位完成。这里可以归纳出来的结论是：**移位的次数为n与l的最大公约数**。\n\n因此，对于上文已知条件的求解，只需要按照上述算法执行一趟即可完成移位。算法的伪代码如下：\n\n```\n# gcd为最大公约数计算\nfor i in [0, gcd(n, l)):\n    t = x[i]\n    j = i\n    while true:\n        k = (j + l) % n\n\tif k == i:\n\t    break\n\tx[j] = x[k]\n\tj = k\n    x[j] = t\n```\n\n注：\n\n1. 算法整理自《编程珠玑2》\n2. 还有一种思路是：将字符串存储在一个循环链表中，然后偏移index指针到开始位置，按顺序进行读取即可，但比上述算法耗费空间（每个字符需要持有两个指针，一个指向前，一个指向后）\n","slug":"left-shift","published":1,"updated":"2018-06-07T04:10:28.040Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlza6mb2004zpgup3ivxxs3e","content":"<p>假设有一个字符串”abcdefgh”，循环左移3位后得到”defghabc”，本文讲解其中的一种左移算法。</p>\n<a id=\"more\"></a>\n<p>已知条件如下：</p>\n<ul>\n<li>目标字符串（x）：abcdefgh</li>\n<li>字符串长度（n）：8</li>\n<li>循环左移位数（l）：3</li>\n<li>预期结果（y）：defghabc</li>\n</ul>\n<p>先考虑左移一位的情况，这个算法可以这样设计：</p>\n<ul>\n<li>将第一个字符x[0]暂存到变量t，然后x[1]赋给x[0]，x[2]赋给x[1]，以此类推</li>\n<li>结束条件为：x[i]的i等于n（即8），将t赋给x[n-1]（即x[7]）</li>\n</ul>\n<p>结束条件的特点是：x[i]的i对n做模运算等于缓存t时的字符数组下标（即0），继续归纳左移二位的情况：</p>\n<ul>\n<li>x[0]赋给t，x[2]赋给x[0]，以此类推，结束条件同上，结束时t赋给x[6]</li>\n<li>然而x[1]，x[3]，x[5]，x[7]的位置是错的，按照上述规则执行一次移位，左移二位的工作全部完成</li>\n</ul>\n<p>这里的特点是n（即8）是l（即2）的倍数。第一次执行移位时，有4个字符的位置正确；第二次移位时，另外4个字符的位置也正确了，移位完成。这里可以归纳出来的结论是：<strong>移位的次数为n与l的最大公约数</strong>。</p>\n<p>因此，对于上文已知条件的求解，只需要按照上述算法执行一趟即可完成移位。算法的伪代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># gcd为最大公约数计算</span><br><span class=\"line\">for i in [0, gcd(n, l)):</span><br><span class=\"line\">    t = x[i]</span><br><span class=\"line\">    j = i</span><br><span class=\"line\">    while true:</span><br><span class=\"line\">        k = (j + l) % n</span><br><span class=\"line\">\tif k == i:</span><br><span class=\"line\">\t    break</span><br><span class=\"line\">\tx[j] = x[k]</span><br><span class=\"line\">\tj = k</span><br><span class=\"line\">    x[j] = t</span><br></pre></td></tr></table></figure>\n<p>注：</p>\n<ol>\n<li>算法整理自《编程珠玑2》</li>\n<li>还有一种思路是：将字符串存储在一个循环链表中，然后偏移index指针到开始位置，按顺序进行读取即可，但比上述算法耗费空间（每个字符需要持有两个指针，一个指向前，一个指向后）</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>假设有一个字符串”abcdefgh”，循环左移3位后得到”defghabc”，本文讲解其中的一种左移算法。</p>","more":"<p>已知条件如下：</p>\n<ul>\n<li>目标字符串（x）：abcdefgh</li>\n<li>字符串长度（n）：8</li>\n<li>循环左移位数（l）：3</li>\n<li>预期结果（y）：defghabc</li>\n</ul>\n<p>先考虑左移一位的情况，这个算法可以这样设计：</p>\n<ul>\n<li>将第一个字符x[0]暂存到变量t，然后x[1]赋给x[0]，x[2]赋给x[1]，以此类推</li>\n<li>结束条件为：x[i]的i等于n（即8），将t赋给x[n-1]（即x[7]）</li>\n</ul>\n<p>结束条件的特点是：x[i]的i对n做模运算等于缓存t时的字符数组下标（即0），继续归纳左移二位的情况：</p>\n<ul>\n<li>x[0]赋给t，x[2]赋给x[0]，以此类推，结束条件同上，结束时t赋给x[6]</li>\n<li>然而x[1]，x[3]，x[5]，x[7]的位置是错的，按照上述规则执行一次移位，左移二位的工作全部完成</li>\n</ul>\n<p>这里的特点是n（即8）是l（即2）的倍数。第一次执行移位时，有4个字符的位置正确；第二次移位时，另外4个字符的位置也正确了，移位完成。这里可以归纳出来的结论是：<strong>移位的次数为n与l的最大公约数</strong>。</p>\n<p>因此，对于上文已知条件的求解，只需要按照上述算法执行一趟即可完成移位。算法的伪代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># gcd为最大公约数计算</span><br><span class=\"line\">for i in [0, gcd(n, l)):</span><br><span class=\"line\">    t = x[i]</span><br><span class=\"line\">    j = i</span><br><span class=\"line\">    while true:</span><br><span class=\"line\">        k = (j + l) % n</span><br><span class=\"line\">\tif k == i:</span><br><span class=\"line\">\t    break</span><br><span class=\"line\">\tx[j] = x[k]</span><br><span class=\"line\">\tj = k</span><br><span class=\"line\">    x[j] = t</span><br></pre></td></tr></table></figure>\n<p>注：</p>\n<ol>\n<li>算法整理自《编程珠玑2》</li>\n<li>还有一种思路是：将字符串存储在一个循环链表中，然后偏移index指针到开始位置，按顺序进行读取即可，但比上述算法耗费空间（每个字符需要持有两个指针，一个指向前，一个指向后）</li>\n</ol>"},{"title":"论快乐","date":"2017-06-03T06:52:32.000Z","comments":1,"_content":"\n## 快乐是什么\n\n> 百度百科：快乐是灵长类精神上的一种愉悦，是一种心灵上的满足，是从内心由内到外感受到一种非常舒服的感觉。\n\n<!--more-->\n\n从脑科学的角度来讲，快乐的量化定义是：多巴胺的分泌水平增加。\n\n从人生意义的角度来讲，[幸福课](http://open.163.com/special/positivepsychology/)的教授Tal坚定地认为：「**幸福感是衡量人生的唯一标准**，是所有目标的最终目标」。这里的幸福感显然也没有离开快乐的范畴。\n\n在人们即将死去时，唯一能带走的，是这一辈子的快乐、幸福、悲伤、痛苦的记忆。若人生是一条曲线，快乐实则是个正脉冲，不快乐则是个负脉冲，这一生的幸福总量，便是这条曲线的积分。对于积分的大小，一时的快乐并不起决定性作用，长久的快乐才是我们所应当追求的。\n\n**人生的成功若只有一个衡量标准，那就是你的快乐总量。面临抉择时，听从内心的感受，你现在会因为这个选择而快乐吗？假使现在不会，未来呢？**\n\n## 如何变得快乐\n\n如何变得快乐？我认为主动去过上自己想要的生活，是快乐的源泉。\n\n很多人临死前，都会遗憾的想：「假设让我再活一回，我一定要……」。若不想自己死去时这般遗憾，我们需要从即刻开始，主动去过上我们想要的生活。简单的讲，那就是：**活在未来——主动思考并提前去过上自己想要的生活**。然而从统计的角度讲，**大部分人其实连自己想要什么生活都不知道**，因为留意身边非常快乐的其实只有一小撮人。然而，这其实是可以习得的。\n\n刻意练习已被证实为一种非常高效的训练方法，「活在未来」需要刻意练习，这里的练习要点是「**在大脑预演我们想要的生活，然后行动起来**」。将这些你主动预演的事情列成清单，其实便是「梦想清单」。主动展望未来，**从内心去探索自己想要的美好生活，不断花时间在头脑去预演，然后倒推回来，提前按照这个标准去学习和生活**（工作也是生活的一部分）。不断对自己再严格一点，你终将离自己想要的越来越近。下面有些问题可用于自检，帮助自己去找到想要的生活，\n\n- **假设不考虑钱，你想要什么？**你打算怎么做？\n- **假如这个世界完全自由给你选择，你想要什么？**你打算怎么做？\n\n主动「活在未来」可能很苦，但就像有些人喜欢长跑那样，虽跑步的过程是辛苦的，但跑完步后的放松和舒适能带来巨大的满足感。且由于跑完步后的快乐是可预期的，跑步渐渐也愉悦了起来。古人讲「**重在过程**」，这个过程是痛并快乐着的。\n\n主动「活在未来」可能会受挫，然而人生足足有3万天那么长，放眼这么长的时间，一时的成败真的不算什么。怎么能因为一时的挫败，而放弃了后面的人生，这简直是愚蠢。反过来讲，成功也不算什么，其不过是人生漫漫长路的一个里程碑而已，我想这便是为什么古人会讲「**不以成败论英雄**」吧。\n\n除了刻意练习「活在未来」，保持充足的睡眠，周期性锻炼身体，不断的阅读和思考以长时间保持头脑的清醒，人自然而然就快乐起来了。\n\n## 结语\n\n地球的历史是46亿年，将46亿年换算成365天，地球的一秒钟大概有146年那么长，我们的一生竟不过是是地球历史的一个瞬间。想到此，你会感叹，人是何其的渺小，人生是何其的短暂。再换一个角度想，人的一生足足有3万天那么长，长的足够你去做好多好多的事。**既然好不容易活一回，有什么理由不去活得精彩一些呢？**\n\n## 参考文献\n\n1. [李笑来：活在未来，而不是当下](http://www.zhibimo.com/read/xiaolai/reborn-every-7-years/A23.html)\n2. [方励：感谢你给我机会上场](http://v.youku.com/v_show/id_XNzg2MDQyNzYw.html)","source":"_posts/2017-06-03-talk-about-happy.md","raw":"---\ntitle: 论快乐\ndate: 2017-06-03 14:52:32\ntags: ['快乐', '幸福', '成长日志']\ncomments: true\ncategories: ['一些感悟']\n---\n\n## 快乐是什么\n\n> 百度百科：快乐是灵长类精神上的一种愉悦，是一种心灵上的满足，是从内心由内到外感受到一种非常舒服的感觉。\n\n<!--more-->\n\n从脑科学的角度来讲，快乐的量化定义是：多巴胺的分泌水平增加。\n\n从人生意义的角度来讲，[幸福课](http://open.163.com/special/positivepsychology/)的教授Tal坚定地认为：「**幸福感是衡量人生的唯一标准**，是所有目标的最终目标」。这里的幸福感显然也没有离开快乐的范畴。\n\n在人们即将死去时，唯一能带走的，是这一辈子的快乐、幸福、悲伤、痛苦的记忆。若人生是一条曲线，快乐实则是个正脉冲，不快乐则是个负脉冲，这一生的幸福总量，便是这条曲线的积分。对于积分的大小，一时的快乐并不起决定性作用，长久的快乐才是我们所应当追求的。\n\n**人生的成功若只有一个衡量标准，那就是你的快乐总量。面临抉择时，听从内心的感受，你现在会因为这个选择而快乐吗？假使现在不会，未来呢？**\n\n## 如何变得快乐\n\n如何变得快乐？我认为主动去过上自己想要的生活，是快乐的源泉。\n\n很多人临死前，都会遗憾的想：「假设让我再活一回，我一定要……」。若不想自己死去时这般遗憾，我们需要从即刻开始，主动去过上我们想要的生活。简单的讲，那就是：**活在未来——主动思考并提前去过上自己想要的生活**。然而从统计的角度讲，**大部分人其实连自己想要什么生活都不知道**，因为留意身边非常快乐的其实只有一小撮人。然而，这其实是可以习得的。\n\n刻意练习已被证实为一种非常高效的训练方法，「活在未来」需要刻意练习，这里的练习要点是「**在大脑预演我们想要的生活，然后行动起来**」。将这些你主动预演的事情列成清单，其实便是「梦想清单」。主动展望未来，**从内心去探索自己想要的美好生活，不断花时间在头脑去预演，然后倒推回来，提前按照这个标准去学习和生活**（工作也是生活的一部分）。不断对自己再严格一点，你终将离自己想要的越来越近。下面有些问题可用于自检，帮助自己去找到想要的生活，\n\n- **假设不考虑钱，你想要什么？**你打算怎么做？\n- **假如这个世界完全自由给你选择，你想要什么？**你打算怎么做？\n\n主动「活在未来」可能很苦，但就像有些人喜欢长跑那样，虽跑步的过程是辛苦的，但跑完步后的放松和舒适能带来巨大的满足感。且由于跑完步后的快乐是可预期的，跑步渐渐也愉悦了起来。古人讲「**重在过程**」，这个过程是痛并快乐着的。\n\n主动「活在未来」可能会受挫，然而人生足足有3万天那么长，放眼这么长的时间，一时的成败真的不算什么。怎么能因为一时的挫败，而放弃了后面的人生，这简直是愚蠢。反过来讲，成功也不算什么，其不过是人生漫漫长路的一个里程碑而已，我想这便是为什么古人会讲「**不以成败论英雄**」吧。\n\n除了刻意练习「活在未来」，保持充足的睡眠，周期性锻炼身体，不断的阅读和思考以长时间保持头脑的清醒，人自然而然就快乐起来了。\n\n## 结语\n\n地球的历史是46亿年，将46亿年换算成365天，地球的一秒钟大概有146年那么长，我们的一生竟不过是是地球历史的一个瞬间。想到此，你会感叹，人是何其的渺小，人生是何其的短暂。再换一个角度想，人的一生足足有3万天那么长，长的足够你去做好多好多的事。**既然好不容易活一回，有什么理由不去活得精彩一些呢？**\n\n## 参考文献\n\n1. [李笑来：活在未来，而不是当下](http://www.zhibimo.com/read/xiaolai/reborn-every-7-years/A23.html)\n2. [方励：感谢你给我机会上场](http://v.youku.com/v_show/id_XNzg2MDQyNzYw.html)","slug":"talk-about-happy","published":1,"updated":"2017-06-03T07:01:16.000Z","layout":"post","photos":[],"link":"","_id":"cjlza6mb50053pgup181d5kwm","content":"<h2 id=\"快乐是什么\"><a href=\"#快乐是什么\" class=\"headerlink\" title=\"快乐是什么\"></a>快乐是什么</h2><blockquote>\n<p>百度百科：快乐是灵长类精神上的一种愉悦，是一种心灵上的满足，是从内心由内到外感受到一种非常舒服的感觉。</p>\n</blockquote>\n<a id=\"more\"></a>\n<p>从脑科学的角度来讲，快乐的量化定义是：多巴胺的分泌水平增加。</p>\n<p>从人生意义的角度来讲，<a href=\"http://open.163.com/special/positivepsychology/\" target=\"_blank\" rel=\"noopener\">幸福课</a>的教授Tal坚定地认为：「<strong>幸福感是衡量人生的唯一标准</strong>，是所有目标的最终目标」。这里的幸福感显然也没有离开快乐的范畴。</p>\n<p>在人们即将死去时，唯一能带走的，是这一辈子的快乐、幸福、悲伤、痛苦的记忆。若人生是一条曲线，快乐实则是个正脉冲，不快乐则是个负脉冲，这一生的幸福总量，便是这条曲线的积分。对于积分的大小，一时的快乐并不起决定性作用，长久的快乐才是我们所应当追求的。</p>\n<p><strong>人生的成功若只有一个衡量标准，那就是你的快乐总量。面临抉择时，听从内心的感受，你现在会因为这个选择而快乐吗？假使现在不会，未来呢？</strong></p>\n<h2 id=\"如何变得快乐\"><a href=\"#如何变得快乐\" class=\"headerlink\" title=\"如何变得快乐\"></a>如何变得快乐</h2><p>如何变得快乐？我认为主动去过上自己想要的生活，是快乐的源泉。</p>\n<p>很多人临死前，都会遗憾的想：「假设让我再活一回，我一定要……」。若不想自己死去时这般遗憾，我们需要从即刻开始，主动去过上我们想要的生活。简单的讲，那就是：<strong>活在未来——主动思考并提前去过上自己想要的生活</strong>。然而从统计的角度讲，<strong>大部分人其实连自己想要什么生活都不知道</strong>，因为留意身边非常快乐的其实只有一小撮人。然而，这其实是可以习得的。</p>\n<p>刻意练习已被证实为一种非常高效的训练方法，「活在未来」需要刻意练习，这里的练习要点是「<strong>在大脑预演我们想要的生活，然后行动起来</strong>」。将这些你主动预演的事情列成清单，其实便是「梦想清单」。主动展望未来，<strong>从内心去探索自己想要的美好生活，不断花时间在头脑去预演，然后倒推回来，提前按照这个标准去学习和生活</strong>（工作也是生活的一部分）。不断对自己再严格一点，你终将离自己想要的越来越近。下面有些问题可用于自检，帮助自己去找到想要的生活，</p>\n<ul>\n<li><strong>假设不考虑钱，你想要什么？</strong>你打算怎么做？</li>\n<li><strong>假如这个世界完全自由给你选择，你想要什么？</strong>你打算怎么做？</li>\n</ul>\n<p>主动「活在未来」可能很苦，但就像有些人喜欢长跑那样，虽跑步的过程是辛苦的，但跑完步后的放松和舒适能带来巨大的满足感。且由于跑完步后的快乐是可预期的，跑步渐渐也愉悦了起来。古人讲「<strong>重在过程</strong>」，这个过程是痛并快乐着的。</p>\n<p>主动「活在未来」可能会受挫，然而人生足足有3万天那么长，放眼这么长的时间，一时的成败真的不算什么。怎么能因为一时的挫败，而放弃了后面的人生，这简直是愚蠢。反过来讲，成功也不算什么，其不过是人生漫漫长路的一个里程碑而已，我想这便是为什么古人会讲「<strong>不以成败论英雄</strong>」吧。</p>\n<p>除了刻意练习「活在未来」，保持充足的睡眠，周期性锻炼身体，不断的阅读和思考以长时间保持头脑的清醒，人自然而然就快乐起来了。</p>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>地球的历史是46亿年，将46亿年换算成365天，地球的一秒钟大概有146年那么长，我们的一生竟不过是是地球历史的一个瞬间。想到此，你会感叹，人是何其的渺小，人生是何其的短暂。再换一个角度想，人的一生足足有3万天那么长，长的足够你去做好多好多的事。<strong>既然好不容易活一回，有什么理由不去活得精彩一些呢？</strong></p>\n<h2 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h2><ol>\n<li><a href=\"http://www.zhibimo.com/read/xiaolai/reborn-every-7-years/A23.html\" target=\"_blank\" rel=\"noopener\">李笑来：活在未来，而不是当下</a></li>\n<li><a href=\"http://v.youku.com/v_show/id_XNzg2MDQyNzYw.html\" target=\"_blank\" rel=\"noopener\">方励：感谢你给我机会上场</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"<h2 id=\"快乐是什么\"><a href=\"#快乐是什么\" class=\"headerlink\" title=\"快乐是什么\"></a>快乐是什么</h2><blockquote>\n<p>百度百科：快乐是灵长类精神上的一种愉悦，是一种心灵上的满足，是从内心由内到外感受到一种非常舒服的感觉。</p>\n</blockquote>","more":"<p>从脑科学的角度来讲，快乐的量化定义是：多巴胺的分泌水平增加。</p>\n<p>从人生意义的角度来讲，<a href=\"http://open.163.com/special/positivepsychology/\" target=\"_blank\" rel=\"noopener\">幸福课</a>的教授Tal坚定地认为：「<strong>幸福感是衡量人生的唯一标准</strong>，是所有目标的最终目标」。这里的幸福感显然也没有离开快乐的范畴。</p>\n<p>在人们即将死去时，唯一能带走的，是这一辈子的快乐、幸福、悲伤、痛苦的记忆。若人生是一条曲线，快乐实则是个正脉冲，不快乐则是个负脉冲，这一生的幸福总量，便是这条曲线的积分。对于积分的大小，一时的快乐并不起决定性作用，长久的快乐才是我们所应当追求的。</p>\n<p><strong>人生的成功若只有一个衡量标准，那就是你的快乐总量。面临抉择时，听从内心的感受，你现在会因为这个选择而快乐吗？假使现在不会，未来呢？</strong></p>\n<h2 id=\"如何变得快乐\"><a href=\"#如何变得快乐\" class=\"headerlink\" title=\"如何变得快乐\"></a>如何变得快乐</h2><p>如何变得快乐？我认为主动去过上自己想要的生活，是快乐的源泉。</p>\n<p>很多人临死前，都会遗憾的想：「假设让我再活一回，我一定要……」。若不想自己死去时这般遗憾，我们需要从即刻开始，主动去过上我们想要的生活。简单的讲，那就是：<strong>活在未来——主动思考并提前去过上自己想要的生活</strong>。然而从统计的角度讲，<strong>大部分人其实连自己想要什么生活都不知道</strong>，因为留意身边非常快乐的其实只有一小撮人。然而，这其实是可以习得的。</p>\n<p>刻意练习已被证实为一种非常高效的训练方法，「活在未来」需要刻意练习，这里的练习要点是「<strong>在大脑预演我们想要的生活，然后行动起来</strong>」。将这些你主动预演的事情列成清单，其实便是「梦想清单」。主动展望未来，<strong>从内心去探索自己想要的美好生活，不断花时间在头脑去预演，然后倒推回来，提前按照这个标准去学习和生活</strong>（工作也是生活的一部分）。不断对自己再严格一点，你终将离自己想要的越来越近。下面有些问题可用于自检，帮助自己去找到想要的生活，</p>\n<ul>\n<li><strong>假设不考虑钱，你想要什么？</strong>你打算怎么做？</li>\n<li><strong>假如这个世界完全自由给你选择，你想要什么？</strong>你打算怎么做？</li>\n</ul>\n<p>主动「活在未来」可能很苦，但就像有些人喜欢长跑那样，虽跑步的过程是辛苦的，但跑完步后的放松和舒适能带来巨大的满足感。且由于跑完步后的快乐是可预期的，跑步渐渐也愉悦了起来。古人讲「<strong>重在过程</strong>」，这个过程是痛并快乐着的。</p>\n<p>主动「活在未来」可能会受挫，然而人生足足有3万天那么长，放眼这么长的时间，一时的成败真的不算什么。怎么能因为一时的挫败，而放弃了后面的人生，这简直是愚蠢。反过来讲，成功也不算什么，其不过是人生漫漫长路的一个里程碑而已，我想这便是为什么古人会讲「<strong>不以成败论英雄</strong>」吧。</p>\n<p>除了刻意练习「活在未来」，保持充足的睡眠，周期性锻炼身体，不断的阅读和思考以长时间保持头脑的清醒，人自然而然就快乐起来了。</p>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>地球的历史是46亿年，将46亿年换算成365天，地球的一秒钟大概有146年那么长，我们的一生竟不过是是地球历史的一个瞬间。想到此，你会感叹，人是何其的渺小，人生是何其的短暂。再换一个角度想，人的一生足足有3万天那么长，长的足够你去做好多好多的事。<strong>既然好不容易活一回，有什么理由不去活得精彩一些呢？</strong></p>\n<h2 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h2><ol>\n<li><a href=\"http://www.zhibimo.com/read/xiaolai/reborn-every-7-years/A23.html\" target=\"_blank\" rel=\"noopener\">李笑来：活在未来，而不是当下</a></li>\n<li><a href=\"http://v.youku.com/v_show/id_XNzg2MDQyNzYw.html\" target=\"_blank\" rel=\"noopener\">方励：感谢你给我机会上场</a></li>\n</ol>"},{"title":"我们能从乔布斯身上学到什么？","date":"2017-06-24T00:59:01.000Z","_content":"\n没错，这是一篇《乔布斯传》的读书笔记。\n\n<!--more-->\n\n乔布斯身上有非常多的标签，笔者不敢断言哪个标签最终决定了他的成功，但不妨碍去从这些标签学习到一些东西。没有人处处完美，乔布斯同样如此，但本文更多写的是乔布斯值得我们向他学习的一面。如果你想看到更为「血肉丰满」的乔布斯，建议你读一读这本书。\n\n## 1. 硅谷少年\n\n[吴军老师][1]在一次访谈曾说到他女儿选美国大学的事情，他更希望他女儿去哥伦比亚大学，而不是麻省理工大学。理由是哥大所处的地理位置是大城市，而MIT是小乡野。吴军深谙环境对人影响的重要性，他认为哥大所处的环境造就了其形形色色的人更多，伟大的人也更多，给年轻人带来的冲击也更多。「若不是MIT的人一上来就弄各种好玩的东西出来吸引学生，我女儿也不会报MIT」，访谈过程中，吴军如是说。\n\n乔布斯生长于硅谷，生长环境对乔布斯的影响，贯穿其一生。他曾写道：\n\n> **我们试图用我们仅有的天分去表达我们深层的感受，去表达我们对前人所有贡献的感激，去为历史长河加上一点什么。那就是推动我的力量。**\n\n惠普公司创始人休利特和帕卡德，是乔布斯的偶像。他们创造了伟大且长青的企业，乔布斯非常确定自己想要成为这样的人，这是他最底层的驱动力。\n\n乔布斯生长于一个普通的中产阶级家庭，其父亲对他最大的影响在于做事的专注和完美主义。乔爸爸是个机械迷，他虽然没能让乔布斯也爱上机械，但他专注工作时的那种专注对乔布斯造成了深远的影响，乔布斯在苹果的工作体现了一种如激光般的专注，总是能**把注意力聚焦在真正重要的事情上**。乔爸爸还是个完美主义者，他在制作衣柜时告诉乔布斯，不能因为衣柜的内侧没被人看到而草草了事，这也是为什么乔布斯会对苹果电脑的电路板及其走线严格要求的直接原因——**任何一个细节都理应去精心打磨**。\n\n本小节的启示是：\n\n- 年轻人应尽可能去一个有很多牛人的环境工作，去一个扎堆出现很多牛人的城市生活。虽然现在互联网使得人们更容易接近牛人，但这需要你主动去接触；处在一个身边大多是牛人的环境中，被动就可以接触到很多牛人，每天都在潜移默化的受影响。\n- **你想让你的孩子成为什么样的人，那么你应该先努力去成为这样的人**。孩子就是我们的一面镜子，你是怎样的人，影响你的孩子一生。\n\n## 2. 禅修者\n\n脑科学的研究表明，打坐（也称冥想）能显著的增加大脑皮质的厚度和大脑皮层的表面积。简单的讲，这能使你更聪明，做事情更容易专注，且感知能力更强。乔布斯少年就接触禅修，甚至在年轻时前往印度朝圣。撇开宗教相关的内容不说，打坐是每个人都应该养成的一个伴随终生的习惯，有兴趣更多了解打坐的请点击「[坐享其成][2]」。\n\n印度之旅给乔布斯带去的另外一个重大影响是「直觉式思考」。对于这点笔者并不是特别理解，所以可能讲述的不准确。从传记的意思来看，应该是**充分尊重自己的第一感觉**，并从此出发。比如乔布斯在批评产品的时候经常会讲「这就是一坨狗S」，然后指出哪哪不好。那么直觉是一种非理性吗？应该不完全是，因为直觉也可以是来自于长期理性思考的固化。但不管怎么说，充分尊重自己内心的第一感觉，仔细倾听自己内心的声音，然后运用理性去分析这些声音，是非常有用的一个方法论。\n\n## 3. 商人\n\n乔布斯和沃兹，在共同创立苹果前便玩到了一起。当时沃兹做了一个能免费打长途电话的黑匣子，乔布斯的直觉是要把它做成一个人人可用的产品。在苹果推出Apple I时，该电脑还保留了供极客们扩展的各种PCI接口，而在Apple II时，乔布斯把沃兹的那些「极客外设」全部否定掉了。苹果至此有了一个非常精准的客户定位，那就是普罗大众。乔布斯为什么这么做？\n\n显然，**假设你能从每个普罗大众身上都赚到钱，肯定比你从特定人群或企业身上赚到的钱要多得多**。这是一个放之四海而皆准的道理，微软、Facebook和谷歌等企业的成功同样遵循这个道理，乔布斯在还没开始创业前就已知晓了这一点。\n\n假设你以后可能创业，那么里的启示意义是：你的目标客户群体是什么？你的目标客户群体是否足够庞大？你的IDEA能否从这个群体的每个人身上都赚到钱？\n\n## 4. 现实扭曲者\n\n乔布斯身上有一种被称为现实扭曲力场的力量。这是一种化不可能为可能的力量，例如在做第一台Mac时，在生产iPhone4的玻璃时。很多与乔布斯共事过的人都说：\n\n- 如果不是他，我不知道原来可以把事情做得这么好；\n- 没想到我竟然做到了，这简直就是奇迹。\n\n笔者尝试理解这种现实力场，它应该是鼓励和信任的结合体。这里的启示是，不论是工作还是生活，**充分的信任对你而言重要的人，不要吝惜你的鼓励，能产生神奇的效应。打击人很容易，而发自内心的鼓励却需要涵养和智慧**。\n\n如果将这种力场用在自己身上，那便是在自己要动摇的时候告诉自己：**我怎么可能不行？咱是谁啊？我肯定行的**。说是自我暗示也罢，自打鸡血也罢，但这就是相信自己并鼓励自己啊！\n\n## 5. 艺术家与科技工作者\n\n乔布斯在多次产品发布会的结束，都会展示一张「两条道路交汇」的图，寓意是人文与科技的结合。人文与艺术着实对乔布斯造成了极大的影响。\n\n在里德学院时，辍学的乔布斯并没有立即离开学校，而是遵从他的直觉在学校选修了书法课。「all this comes back when we make the first mac computer」，乔布斯在斯坦福大学毕业演讲时如是说。乔布斯亦深受包豪斯风格的影响，极其崇尚艺术与技术的结合，以及设计的目的是人而不是产品。还有一点便是禅文化的影响，乔布斯希望产品尽可能的简单，这与当下的「Don't make me think」的设计理念如出一辙。\n\n本小节的启示是：人文和艺术是人们应该刻意去学习和接触的，它们能提高你的素养，提升你的品味，进而影响你的工作和生活。笔者曾读过这么一个观点：**审美能力是人们应该刻意培养的一种能力，它能使你的生活质量更高；正因为你具备审美能力，你才能发现原来生活中处处是美。**\n\n## 6. 领导者\n\n在乔布斯从皮克斯回归苹果时，他做了一项重大的举措——砍掉苹果的大部分产品线，而只专注于少数几项产品的研发和推广。他回归后，在白板上画了四宫格用以描述苹果未来的主要产品。四个格子分别是：台式、便携、消费级、专业级。四宫格的两两交叉构成了乔布斯回归苹果后，苹果的4类主要产品。当时做这个决定是需要勇气的，这意味着需要砍掉一部分能产生收入的业务。但也**正是因为这种减法，使得整个公司的愿景变得非常的清晰**，整个公司将大部分资源聚焦在这4类产品上，成就了新的辉煌，macbook就是在这时候诞生的。\n\n作为领导者，他还知道如何让员工做到。在说服第一台Mac的程序员将开机时间缩短时，他用了一个非常简单粗暴的数据。那就是将缩短的时间，乘上可能的受众数量，得出的结果是最终能节省几十甚至几百年的国民时间，给这件事情赋予了极其非凡的意义。说服斯卡利加入苹果时，他说了一句为大众所熟知的一句话——你愿意卖一辈子糖水，还是跟着我们改变世界？\n\n本小节的启示是：\n\n- 无论是工作还是生活，若想卓有成效，你必须有所取舍，**选择出最重要的事情，将注意力聚焦在那些真正重要的事情上**。\n- **人是活在自己编织的意义之网上的动物**，如果你真的想彻底说服自己或别人做一件事情，那就是赋予它重大的意义。\n\n## 7. 划时代的产品经理\n\n作为产品经理，乔布斯绝对是个说不大师。乔布斯用非黑即白的观点来判断一切，要么是狗屎，要么是完美。正因为乔布斯的这种苛求，正因为他坚持说不，正因为他不轻易妥协，使得苹果团队出品的水准逼近于完美。中国有句老话：**取法其上，得乎其中；取法其中，得乎其下**。虽然完美无止境，但乔布斯在追求完美的道路上，从不轻易就停下步伐。\n\n乔布斯对待产品的态度也传承给了他的团队。苹果团队会在每年集思会对接下来的主要产品方向进行PK，以评选最重要的产品方向。在定完产品方向后，又会对产品模型进行PK。像iPhone这类产品，其样机模型至少迭代了十几二十个版本，每个版本都要接受乔布斯和所有核心设计人员的批判。且为了能看到整个迭代的过程，设计团队会将被否决的模型保留，每次展示时将模型从第一版到最新一版一并程序，以便大家能看到为什么而改。\n\n然而作为一个产品经理，乔布斯最大的贡献在笔者看来是他对于产品的想法——那些划时代的想法。他曾说过这么一句：\n\n> 我记得亨利福特曾说过：如果我最初问消费者他们想要什么，他们应该是会告诉我——要一匹更快的马。人们不知道想要什么，直到你把它摆在他们面前。正因如此，我从不依靠市场研究。我们的任务是读懂还没落到纸面上的东西。\n\n乔布斯的想法并非凭空而来，一部分是借力自于他的同事，一部分是因为他在人文和艺术上的修养。他将人文艺术与科技紧密的结合在一起，将苹果打造成了一家时尚科技消费品公司。\n\n本小节的启示是：\n\n- 完美是一种追求，即使最终做不到真正的完美，但追求完美能让你做得比预期更好。在满足成本约束的前提下，尽可能抬高水准，不要轻易说行，差异就一点点的形成了。\n- **好的产品不是一蹴而就的，需要不断的迭代、打磨和升级**。\n\n## Ending\n\n这篇书评不是本书的结束，本书还留给了笔者一些问题去自问自答，这同样是你的问题：）\n\n- 你最底层的驱动力是什么？是什么驱动着你做现在的任何事情？\n- 假如你赞同环境的重要性，在你的有生之年，可以做什么事情，使得你跟牛人们在物理距离上更为接近？\n- 假如你在创业或即将创业，你的目标客户群体是什么？你的目标客户群体是否足够庞大？你的IDEA能否从这个群体的每个人身上都赚到钱？\n- 你经常轻易的打击人吗？你有多久没有鼓励别人了？你有多久没有鼓励自己了？\n- 你打算如何培养你发现美的能力？有什么可行性的举措？\n- 或许你在做很多的事情，尝试做一下减法，最重要的是哪几件事情？这几件事情值得你聚焦宝贵的注意力在上面吗？你需要如何分解任务，以最终实现这几件事情？\n- 你给自己制定的长远目标是否足够高要求？能再抬高一下水准吗？\n- 无论是商业还是交际，发掘他人真正需求是一项特别重要的能力？如何培养自己关于这方面的能力？\n\n最后以苹果think different广告的广告词缅怀乔布斯：\n\n> 或许他们是别人眼中的疯子，但他们却是我们眼中的天才。因为只有那些疯狂到以为自己能够改变世界的人，才能真正改变世界。\n\n以下是本文的reference：\n\n- [吴军老师：https://www.zhihu.com/question/30223466/answer/47276827][1]\n- [坐享其成：http://www.zhibimo.com/books/xiaolai/zuo-xiang-qi-cheng][2]\n\n[1]: https://www.zhihu.com/question/30223466/answer/47276827\n[2]: http://www.zhibimo.com/books/xiaolai/zuo-xiang-qi-cheng","source":"_posts/2017-06-24-learn-from-steven-jobs.md","raw":"---\ntitle: 我们能从乔布斯身上学到什么？\ndate: 2017-06-24 08:59:01\ntags:\n---\n\n没错，这是一篇《乔布斯传》的读书笔记。\n\n<!--more-->\n\n乔布斯身上有非常多的标签，笔者不敢断言哪个标签最终决定了他的成功，但不妨碍去从这些标签学习到一些东西。没有人处处完美，乔布斯同样如此，但本文更多写的是乔布斯值得我们向他学习的一面。如果你想看到更为「血肉丰满」的乔布斯，建议你读一读这本书。\n\n## 1. 硅谷少年\n\n[吴军老师][1]在一次访谈曾说到他女儿选美国大学的事情，他更希望他女儿去哥伦比亚大学，而不是麻省理工大学。理由是哥大所处的地理位置是大城市，而MIT是小乡野。吴军深谙环境对人影响的重要性，他认为哥大所处的环境造就了其形形色色的人更多，伟大的人也更多，给年轻人带来的冲击也更多。「若不是MIT的人一上来就弄各种好玩的东西出来吸引学生，我女儿也不会报MIT」，访谈过程中，吴军如是说。\n\n乔布斯生长于硅谷，生长环境对乔布斯的影响，贯穿其一生。他曾写道：\n\n> **我们试图用我们仅有的天分去表达我们深层的感受，去表达我们对前人所有贡献的感激，去为历史长河加上一点什么。那就是推动我的力量。**\n\n惠普公司创始人休利特和帕卡德，是乔布斯的偶像。他们创造了伟大且长青的企业，乔布斯非常确定自己想要成为这样的人，这是他最底层的驱动力。\n\n乔布斯生长于一个普通的中产阶级家庭，其父亲对他最大的影响在于做事的专注和完美主义。乔爸爸是个机械迷，他虽然没能让乔布斯也爱上机械，但他专注工作时的那种专注对乔布斯造成了深远的影响，乔布斯在苹果的工作体现了一种如激光般的专注，总是能**把注意力聚焦在真正重要的事情上**。乔爸爸还是个完美主义者，他在制作衣柜时告诉乔布斯，不能因为衣柜的内侧没被人看到而草草了事，这也是为什么乔布斯会对苹果电脑的电路板及其走线严格要求的直接原因——**任何一个细节都理应去精心打磨**。\n\n本小节的启示是：\n\n- 年轻人应尽可能去一个有很多牛人的环境工作，去一个扎堆出现很多牛人的城市生活。虽然现在互联网使得人们更容易接近牛人，但这需要你主动去接触；处在一个身边大多是牛人的环境中，被动就可以接触到很多牛人，每天都在潜移默化的受影响。\n- **你想让你的孩子成为什么样的人，那么你应该先努力去成为这样的人**。孩子就是我们的一面镜子，你是怎样的人，影响你的孩子一生。\n\n## 2. 禅修者\n\n脑科学的研究表明，打坐（也称冥想）能显著的增加大脑皮质的厚度和大脑皮层的表面积。简单的讲，这能使你更聪明，做事情更容易专注，且感知能力更强。乔布斯少年就接触禅修，甚至在年轻时前往印度朝圣。撇开宗教相关的内容不说，打坐是每个人都应该养成的一个伴随终生的习惯，有兴趣更多了解打坐的请点击「[坐享其成][2]」。\n\n印度之旅给乔布斯带去的另外一个重大影响是「直觉式思考」。对于这点笔者并不是特别理解，所以可能讲述的不准确。从传记的意思来看，应该是**充分尊重自己的第一感觉**，并从此出发。比如乔布斯在批评产品的时候经常会讲「这就是一坨狗S」，然后指出哪哪不好。那么直觉是一种非理性吗？应该不完全是，因为直觉也可以是来自于长期理性思考的固化。但不管怎么说，充分尊重自己内心的第一感觉，仔细倾听自己内心的声音，然后运用理性去分析这些声音，是非常有用的一个方法论。\n\n## 3. 商人\n\n乔布斯和沃兹，在共同创立苹果前便玩到了一起。当时沃兹做了一个能免费打长途电话的黑匣子，乔布斯的直觉是要把它做成一个人人可用的产品。在苹果推出Apple I时，该电脑还保留了供极客们扩展的各种PCI接口，而在Apple II时，乔布斯把沃兹的那些「极客外设」全部否定掉了。苹果至此有了一个非常精准的客户定位，那就是普罗大众。乔布斯为什么这么做？\n\n显然，**假设你能从每个普罗大众身上都赚到钱，肯定比你从特定人群或企业身上赚到的钱要多得多**。这是一个放之四海而皆准的道理，微软、Facebook和谷歌等企业的成功同样遵循这个道理，乔布斯在还没开始创业前就已知晓了这一点。\n\n假设你以后可能创业，那么里的启示意义是：你的目标客户群体是什么？你的目标客户群体是否足够庞大？你的IDEA能否从这个群体的每个人身上都赚到钱？\n\n## 4. 现实扭曲者\n\n乔布斯身上有一种被称为现实扭曲力场的力量。这是一种化不可能为可能的力量，例如在做第一台Mac时，在生产iPhone4的玻璃时。很多与乔布斯共事过的人都说：\n\n- 如果不是他，我不知道原来可以把事情做得这么好；\n- 没想到我竟然做到了，这简直就是奇迹。\n\n笔者尝试理解这种现实力场，它应该是鼓励和信任的结合体。这里的启示是，不论是工作还是生活，**充分的信任对你而言重要的人，不要吝惜你的鼓励，能产生神奇的效应。打击人很容易，而发自内心的鼓励却需要涵养和智慧**。\n\n如果将这种力场用在自己身上，那便是在自己要动摇的时候告诉自己：**我怎么可能不行？咱是谁啊？我肯定行的**。说是自我暗示也罢，自打鸡血也罢，但这就是相信自己并鼓励自己啊！\n\n## 5. 艺术家与科技工作者\n\n乔布斯在多次产品发布会的结束，都会展示一张「两条道路交汇」的图，寓意是人文与科技的结合。人文与艺术着实对乔布斯造成了极大的影响。\n\n在里德学院时，辍学的乔布斯并没有立即离开学校，而是遵从他的直觉在学校选修了书法课。「all this comes back when we make the first mac computer」，乔布斯在斯坦福大学毕业演讲时如是说。乔布斯亦深受包豪斯风格的影响，极其崇尚艺术与技术的结合，以及设计的目的是人而不是产品。还有一点便是禅文化的影响，乔布斯希望产品尽可能的简单，这与当下的「Don't make me think」的设计理念如出一辙。\n\n本小节的启示是：人文和艺术是人们应该刻意去学习和接触的，它们能提高你的素养，提升你的品味，进而影响你的工作和生活。笔者曾读过这么一个观点：**审美能力是人们应该刻意培养的一种能力，它能使你的生活质量更高；正因为你具备审美能力，你才能发现原来生活中处处是美。**\n\n## 6. 领导者\n\n在乔布斯从皮克斯回归苹果时，他做了一项重大的举措——砍掉苹果的大部分产品线，而只专注于少数几项产品的研发和推广。他回归后，在白板上画了四宫格用以描述苹果未来的主要产品。四个格子分别是：台式、便携、消费级、专业级。四宫格的两两交叉构成了乔布斯回归苹果后，苹果的4类主要产品。当时做这个决定是需要勇气的，这意味着需要砍掉一部分能产生收入的业务。但也**正是因为这种减法，使得整个公司的愿景变得非常的清晰**，整个公司将大部分资源聚焦在这4类产品上，成就了新的辉煌，macbook就是在这时候诞生的。\n\n作为领导者，他还知道如何让员工做到。在说服第一台Mac的程序员将开机时间缩短时，他用了一个非常简单粗暴的数据。那就是将缩短的时间，乘上可能的受众数量，得出的结果是最终能节省几十甚至几百年的国民时间，给这件事情赋予了极其非凡的意义。说服斯卡利加入苹果时，他说了一句为大众所熟知的一句话——你愿意卖一辈子糖水，还是跟着我们改变世界？\n\n本小节的启示是：\n\n- 无论是工作还是生活，若想卓有成效，你必须有所取舍，**选择出最重要的事情，将注意力聚焦在那些真正重要的事情上**。\n- **人是活在自己编织的意义之网上的动物**，如果你真的想彻底说服自己或别人做一件事情，那就是赋予它重大的意义。\n\n## 7. 划时代的产品经理\n\n作为产品经理，乔布斯绝对是个说不大师。乔布斯用非黑即白的观点来判断一切，要么是狗屎，要么是完美。正因为乔布斯的这种苛求，正因为他坚持说不，正因为他不轻易妥协，使得苹果团队出品的水准逼近于完美。中国有句老话：**取法其上，得乎其中；取法其中，得乎其下**。虽然完美无止境，但乔布斯在追求完美的道路上，从不轻易就停下步伐。\n\n乔布斯对待产品的态度也传承给了他的团队。苹果团队会在每年集思会对接下来的主要产品方向进行PK，以评选最重要的产品方向。在定完产品方向后，又会对产品模型进行PK。像iPhone这类产品，其样机模型至少迭代了十几二十个版本，每个版本都要接受乔布斯和所有核心设计人员的批判。且为了能看到整个迭代的过程，设计团队会将被否决的模型保留，每次展示时将模型从第一版到最新一版一并程序，以便大家能看到为什么而改。\n\n然而作为一个产品经理，乔布斯最大的贡献在笔者看来是他对于产品的想法——那些划时代的想法。他曾说过这么一句：\n\n> 我记得亨利福特曾说过：如果我最初问消费者他们想要什么，他们应该是会告诉我——要一匹更快的马。人们不知道想要什么，直到你把它摆在他们面前。正因如此，我从不依靠市场研究。我们的任务是读懂还没落到纸面上的东西。\n\n乔布斯的想法并非凭空而来，一部分是借力自于他的同事，一部分是因为他在人文和艺术上的修养。他将人文艺术与科技紧密的结合在一起，将苹果打造成了一家时尚科技消费品公司。\n\n本小节的启示是：\n\n- 完美是一种追求，即使最终做不到真正的完美，但追求完美能让你做得比预期更好。在满足成本约束的前提下，尽可能抬高水准，不要轻易说行，差异就一点点的形成了。\n- **好的产品不是一蹴而就的，需要不断的迭代、打磨和升级**。\n\n## Ending\n\n这篇书评不是本书的结束，本书还留给了笔者一些问题去自问自答，这同样是你的问题：）\n\n- 你最底层的驱动力是什么？是什么驱动着你做现在的任何事情？\n- 假如你赞同环境的重要性，在你的有生之年，可以做什么事情，使得你跟牛人们在物理距离上更为接近？\n- 假如你在创业或即将创业，你的目标客户群体是什么？你的目标客户群体是否足够庞大？你的IDEA能否从这个群体的每个人身上都赚到钱？\n- 你经常轻易的打击人吗？你有多久没有鼓励别人了？你有多久没有鼓励自己了？\n- 你打算如何培养你发现美的能力？有什么可行性的举措？\n- 或许你在做很多的事情，尝试做一下减法，最重要的是哪几件事情？这几件事情值得你聚焦宝贵的注意力在上面吗？你需要如何分解任务，以最终实现这几件事情？\n- 你给自己制定的长远目标是否足够高要求？能再抬高一下水准吗？\n- 无论是商业还是交际，发掘他人真正需求是一项特别重要的能力？如何培养自己关于这方面的能力？\n\n最后以苹果think different广告的广告词缅怀乔布斯：\n\n> 或许他们是别人眼中的疯子，但他们却是我们眼中的天才。因为只有那些疯狂到以为自己能够改变世界的人，才能真正改变世界。\n\n以下是本文的reference：\n\n- [吴军老师：https://www.zhihu.com/question/30223466/answer/47276827][1]\n- [坐享其成：http://www.zhibimo.com/books/xiaolai/zuo-xiang-qi-cheng][2]\n\n[1]: https://www.zhihu.com/question/30223466/answer/47276827\n[2]: http://www.zhibimo.com/books/xiaolai/zuo-xiang-qi-cheng","slug":"learn-from-steven-jobs","published":1,"updated":"2017-06-25T09:32:22.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlza6mb70056pguppri69n71","content":"<p>没错，这是一篇《乔布斯传》的读书笔记。</p>\n<a id=\"more\"></a>\n<p>乔布斯身上有非常多的标签，笔者不敢断言哪个标签最终决定了他的成功，但不妨碍去从这些标签学习到一些东西。没有人处处完美，乔布斯同样如此，但本文更多写的是乔布斯值得我们向他学习的一面。如果你想看到更为「血肉丰满」的乔布斯，建议你读一读这本书。</p>\n<h2 id=\"1-硅谷少年\"><a href=\"#1-硅谷少年\" class=\"headerlink\" title=\"1. 硅谷少年\"></a>1. 硅谷少年</h2><p><a href=\"https://www.zhihu.com/question/30223466/answer/47276827\" target=\"_blank\" rel=\"noopener\">吴军老师</a>在一次访谈曾说到他女儿选美国大学的事情，他更希望他女儿去哥伦比亚大学，而不是麻省理工大学。理由是哥大所处的地理位置是大城市，而MIT是小乡野。吴军深谙环境对人影响的重要性，他认为哥大所处的环境造就了其形形色色的人更多，伟大的人也更多，给年轻人带来的冲击也更多。「若不是MIT的人一上来就弄各种好玩的东西出来吸引学生，我女儿也不会报MIT」，访谈过程中，吴军如是说。</p>\n<p>乔布斯生长于硅谷，生长环境对乔布斯的影响，贯穿其一生。他曾写道：</p>\n<blockquote>\n<p><strong>我们试图用我们仅有的天分去表达我们深层的感受，去表达我们对前人所有贡献的感激，去为历史长河加上一点什么。那就是推动我的力量。</strong></p>\n</blockquote>\n<p>惠普公司创始人休利特和帕卡德，是乔布斯的偶像。他们创造了伟大且长青的企业，乔布斯非常确定自己想要成为这样的人，这是他最底层的驱动力。</p>\n<p>乔布斯生长于一个普通的中产阶级家庭，其父亲对他最大的影响在于做事的专注和完美主义。乔爸爸是个机械迷，他虽然没能让乔布斯也爱上机械，但他专注工作时的那种专注对乔布斯造成了深远的影响，乔布斯在苹果的工作体现了一种如激光般的专注，总是能<strong>把注意力聚焦在真正重要的事情上</strong>。乔爸爸还是个完美主义者，他在制作衣柜时告诉乔布斯，不能因为衣柜的内侧没被人看到而草草了事，这也是为什么乔布斯会对苹果电脑的电路板及其走线严格要求的直接原因——<strong>任何一个细节都理应去精心打磨</strong>。</p>\n<p>本小节的启示是：</p>\n<ul>\n<li>年轻人应尽可能去一个有很多牛人的环境工作，去一个扎堆出现很多牛人的城市生活。虽然现在互联网使得人们更容易接近牛人，但这需要你主动去接触；处在一个身边大多是牛人的环境中，被动就可以接触到很多牛人，每天都在潜移默化的受影响。</li>\n<li><strong>你想让你的孩子成为什么样的人，那么你应该先努力去成为这样的人</strong>。孩子就是我们的一面镜子，你是怎样的人，影响你的孩子一生。</li>\n</ul>\n<h2 id=\"2-禅修者\"><a href=\"#2-禅修者\" class=\"headerlink\" title=\"2. 禅修者\"></a>2. 禅修者</h2><p>脑科学的研究表明，打坐（也称冥想）能显著的增加大脑皮质的厚度和大脑皮层的表面积。简单的讲，这能使你更聪明，做事情更容易专注，且感知能力更强。乔布斯少年就接触禅修，甚至在年轻时前往印度朝圣。撇开宗教相关的内容不说，打坐是每个人都应该养成的一个伴随终生的习惯，有兴趣更多了解打坐的请点击「<a href=\"http://www.zhibimo.com/books/xiaolai/zuo-xiang-qi-cheng\" target=\"_blank\" rel=\"noopener\">坐享其成</a>」。</p>\n<p>印度之旅给乔布斯带去的另外一个重大影响是「直觉式思考」。对于这点笔者并不是特别理解，所以可能讲述的不准确。从传记的意思来看，应该是<strong>充分尊重自己的第一感觉</strong>，并从此出发。比如乔布斯在批评产品的时候经常会讲「这就是一坨狗S」，然后指出哪哪不好。那么直觉是一种非理性吗？应该不完全是，因为直觉也可以是来自于长期理性思考的固化。但不管怎么说，充分尊重自己内心的第一感觉，仔细倾听自己内心的声音，然后运用理性去分析这些声音，是非常有用的一个方法论。</p>\n<h2 id=\"3-商人\"><a href=\"#3-商人\" class=\"headerlink\" title=\"3. 商人\"></a>3. 商人</h2><p>乔布斯和沃兹，在共同创立苹果前便玩到了一起。当时沃兹做了一个能免费打长途电话的黑匣子，乔布斯的直觉是要把它做成一个人人可用的产品。在苹果推出Apple I时，该电脑还保留了供极客们扩展的各种PCI接口，而在Apple II时，乔布斯把沃兹的那些「极客外设」全部否定掉了。苹果至此有了一个非常精准的客户定位，那就是普罗大众。乔布斯为什么这么做？</p>\n<p>显然，<strong>假设你能从每个普罗大众身上都赚到钱，肯定比你从特定人群或企业身上赚到的钱要多得多</strong>。这是一个放之四海而皆准的道理，微软、Facebook和谷歌等企业的成功同样遵循这个道理，乔布斯在还没开始创业前就已知晓了这一点。</p>\n<p>假设你以后可能创业，那么里的启示意义是：你的目标客户群体是什么？你的目标客户群体是否足够庞大？你的IDEA能否从这个群体的每个人身上都赚到钱？</p>\n<h2 id=\"4-现实扭曲者\"><a href=\"#4-现实扭曲者\" class=\"headerlink\" title=\"4. 现实扭曲者\"></a>4. 现实扭曲者</h2><p>乔布斯身上有一种被称为现实扭曲力场的力量。这是一种化不可能为可能的力量，例如在做第一台Mac时，在生产iPhone4的玻璃时。很多与乔布斯共事过的人都说：</p>\n<ul>\n<li>如果不是他，我不知道原来可以把事情做得这么好；</li>\n<li>没想到我竟然做到了，这简直就是奇迹。</li>\n</ul>\n<p>笔者尝试理解这种现实力场，它应该是鼓励和信任的结合体。这里的启示是，不论是工作还是生活，<strong>充分的信任对你而言重要的人，不要吝惜你的鼓励，能产生神奇的效应。打击人很容易，而发自内心的鼓励却需要涵养和智慧</strong>。</p>\n<p>如果将这种力场用在自己身上，那便是在自己要动摇的时候告诉自己：<strong>我怎么可能不行？咱是谁啊？我肯定行的</strong>。说是自我暗示也罢，自打鸡血也罢，但这就是相信自己并鼓励自己啊！</p>\n<h2 id=\"5-艺术家与科技工作者\"><a href=\"#5-艺术家与科技工作者\" class=\"headerlink\" title=\"5. 艺术家与科技工作者\"></a>5. 艺术家与科技工作者</h2><p>乔布斯在多次产品发布会的结束，都会展示一张「两条道路交汇」的图，寓意是人文与科技的结合。人文与艺术着实对乔布斯造成了极大的影响。</p>\n<p>在里德学院时，辍学的乔布斯并没有立即离开学校，而是遵从他的直觉在学校选修了书法课。「all this comes back when we make the first mac computer」，乔布斯在斯坦福大学毕业演讲时如是说。乔布斯亦深受包豪斯风格的影响，极其崇尚艺术与技术的结合，以及设计的目的是人而不是产品。还有一点便是禅文化的影响，乔布斯希望产品尽可能的简单，这与当下的「Don’t make me think」的设计理念如出一辙。</p>\n<p>本小节的启示是：人文和艺术是人们应该刻意去学习和接触的，它们能提高你的素养，提升你的品味，进而影响你的工作和生活。笔者曾读过这么一个观点：<strong>审美能力是人们应该刻意培养的一种能力，它能使你的生活质量更高；正因为你具备审美能力，你才能发现原来生活中处处是美。</strong></p>\n<h2 id=\"6-领导者\"><a href=\"#6-领导者\" class=\"headerlink\" title=\"6. 领导者\"></a>6. 领导者</h2><p>在乔布斯从皮克斯回归苹果时，他做了一项重大的举措——砍掉苹果的大部分产品线，而只专注于少数几项产品的研发和推广。他回归后，在白板上画了四宫格用以描述苹果未来的主要产品。四个格子分别是：台式、便携、消费级、专业级。四宫格的两两交叉构成了乔布斯回归苹果后，苹果的4类主要产品。当时做这个决定是需要勇气的，这意味着需要砍掉一部分能产生收入的业务。但也<strong>正是因为这种减法，使得整个公司的愿景变得非常的清晰</strong>，整个公司将大部分资源聚焦在这4类产品上，成就了新的辉煌，macbook就是在这时候诞生的。</p>\n<p>作为领导者，他还知道如何让员工做到。在说服第一台Mac的程序员将开机时间缩短时，他用了一个非常简单粗暴的数据。那就是将缩短的时间，乘上可能的受众数量，得出的结果是最终能节省几十甚至几百年的国民时间，给这件事情赋予了极其非凡的意义。说服斯卡利加入苹果时，他说了一句为大众所熟知的一句话——你愿意卖一辈子糖水，还是跟着我们改变世界？</p>\n<p>本小节的启示是：</p>\n<ul>\n<li>无论是工作还是生活，若想卓有成效，你必须有所取舍，<strong>选择出最重要的事情，将注意力聚焦在那些真正重要的事情上</strong>。</li>\n<li><strong>人是活在自己编织的意义之网上的动物</strong>，如果你真的想彻底说服自己或别人做一件事情，那就是赋予它重大的意义。</li>\n</ul>\n<h2 id=\"7-划时代的产品经理\"><a href=\"#7-划时代的产品经理\" class=\"headerlink\" title=\"7. 划时代的产品经理\"></a>7. 划时代的产品经理</h2><p>作为产品经理，乔布斯绝对是个说不大师。乔布斯用非黑即白的观点来判断一切，要么是狗屎，要么是完美。正因为乔布斯的这种苛求，正因为他坚持说不，正因为他不轻易妥协，使得苹果团队出品的水准逼近于完美。中国有句老话：<strong>取法其上，得乎其中；取法其中，得乎其下</strong>。虽然完美无止境，但乔布斯在追求完美的道路上，从不轻易就停下步伐。</p>\n<p>乔布斯对待产品的态度也传承给了他的团队。苹果团队会在每年集思会对接下来的主要产品方向进行PK，以评选最重要的产品方向。在定完产品方向后，又会对产品模型进行PK。像iPhone这类产品，其样机模型至少迭代了十几二十个版本，每个版本都要接受乔布斯和所有核心设计人员的批判。且为了能看到整个迭代的过程，设计团队会将被否决的模型保留，每次展示时将模型从第一版到最新一版一并程序，以便大家能看到为什么而改。</p>\n<p>然而作为一个产品经理，乔布斯最大的贡献在笔者看来是他对于产品的想法——那些划时代的想法。他曾说过这么一句：</p>\n<blockquote>\n<p>我记得亨利福特曾说过：如果我最初问消费者他们想要什么，他们应该是会告诉我——要一匹更快的马。人们不知道想要什么，直到你把它摆在他们面前。正因如此，我从不依靠市场研究。我们的任务是读懂还没落到纸面上的东西。</p>\n</blockquote>\n<p>乔布斯的想法并非凭空而来，一部分是借力自于他的同事，一部分是因为他在人文和艺术上的修养。他将人文艺术与科技紧密的结合在一起，将苹果打造成了一家时尚科技消费品公司。</p>\n<p>本小节的启示是：</p>\n<ul>\n<li>完美是一种追求，即使最终做不到真正的完美，但追求完美能让你做得比预期更好。在满足成本约束的前提下，尽可能抬高水准，不要轻易说行，差异就一点点的形成了。</li>\n<li><strong>好的产品不是一蹴而就的，需要不断的迭代、打磨和升级</strong>。</li>\n</ul>\n<h2 id=\"Ending\"><a href=\"#Ending\" class=\"headerlink\" title=\"Ending\"></a>Ending</h2><p>这篇书评不是本书的结束，本书还留给了笔者一些问题去自问自答，这同样是你的问题：）</p>\n<ul>\n<li>你最底层的驱动力是什么？是什么驱动着你做现在的任何事情？</li>\n<li>假如你赞同环境的重要性，在你的有生之年，可以做什么事情，使得你跟牛人们在物理距离上更为接近？</li>\n<li>假如你在创业或即将创业，你的目标客户群体是什么？你的目标客户群体是否足够庞大？你的IDEA能否从这个群体的每个人身上都赚到钱？</li>\n<li>你经常轻易的打击人吗？你有多久没有鼓励别人了？你有多久没有鼓励自己了？</li>\n<li>你打算如何培养你发现美的能力？有什么可行性的举措？</li>\n<li>或许你在做很多的事情，尝试做一下减法，最重要的是哪几件事情？这几件事情值得你聚焦宝贵的注意力在上面吗？你需要如何分解任务，以最终实现这几件事情？</li>\n<li>你给自己制定的长远目标是否足够高要求？能再抬高一下水准吗？</li>\n<li>无论是商业还是交际，发掘他人真正需求是一项特别重要的能力？如何培养自己关于这方面的能力？</li>\n</ul>\n<p>最后以苹果think different广告的广告词缅怀乔布斯：</p>\n<blockquote>\n<p>或许他们是别人眼中的疯子，但他们却是我们眼中的天才。因为只有那些疯狂到以为自己能够改变世界的人，才能真正改变世界。</p>\n</blockquote>\n<p>以下是本文的reference：</p>\n<ul>\n<li><a href=\"https://www.zhihu.com/question/30223466/answer/47276827\" target=\"_blank\" rel=\"noopener\">吴军老师：https://www.zhihu.com/question/30223466/answer/47276827</a></li>\n<li><a href=\"http://www.zhibimo.com/books/xiaolai/zuo-xiang-qi-cheng\" target=\"_blank\" rel=\"noopener\">坐享其成：http://www.zhibimo.com/books/xiaolai/zuo-xiang-qi-cheng</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>没错，这是一篇《乔布斯传》的读书笔记。</p>","more":"<p>乔布斯身上有非常多的标签，笔者不敢断言哪个标签最终决定了他的成功，但不妨碍去从这些标签学习到一些东西。没有人处处完美，乔布斯同样如此，但本文更多写的是乔布斯值得我们向他学习的一面。如果你想看到更为「血肉丰满」的乔布斯，建议你读一读这本书。</p>\n<h2 id=\"1-硅谷少年\"><a href=\"#1-硅谷少年\" class=\"headerlink\" title=\"1. 硅谷少年\"></a>1. 硅谷少年</h2><p><a href=\"https://www.zhihu.com/question/30223466/answer/47276827\" target=\"_blank\" rel=\"noopener\">吴军老师</a>在一次访谈曾说到他女儿选美国大学的事情，他更希望他女儿去哥伦比亚大学，而不是麻省理工大学。理由是哥大所处的地理位置是大城市，而MIT是小乡野。吴军深谙环境对人影响的重要性，他认为哥大所处的环境造就了其形形色色的人更多，伟大的人也更多，给年轻人带来的冲击也更多。「若不是MIT的人一上来就弄各种好玩的东西出来吸引学生，我女儿也不会报MIT」，访谈过程中，吴军如是说。</p>\n<p>乔布斯生长于硅谷，生长环境对乔布斯的影响，贯穿其一生。他曾写道：</p>\n<blockquote>\n<p><strong>我们试图用我们仅有的天分去表达我们深层的感受，去表达我们对前人所有贡献的感激，去为历史长河加上一点什么。那就是推动我的力量。</strong></p>\n</blockquote>\n<p>惠普公司创始人休利特和帕卡德，是乔布斯的偶像。他们创造了伟大且长青的企业，乔布斯非常确定自己想要成为这样的人，这是他最底层的驱动力。</p>\n<p>乔布斯生长于一个普通的中产阶级家庭，其父亲对他最大的影响在于做事的专注和完美主义。乔爸爸是个机械迷，他虽然没能让乔布斯也爱上机械，但他专注工作时的那种专注对乔布斯造成了深远的影响，乔布斯在苹果的工作体现了一种如激光般的专注，总是能<strong>把注意力聚焦在真正重要的事情上</strong>。乔爸爸还是个完美主义者，他在制作衣柜时告诉乔布斯，不能因为衣柜的内侧没被人看到而草草了事，这也是为什么乔布斯会对苹果电脑的电路板及其走线严格要求的直接原因——<strong>任何一个细节都理应去精心打磨</strong>。</p>\n<p>本小节的启示是：</p>\n<ul>\n<li>年轻人应尽可能去一个有很多牛人的环境工作，去一个扎堆出现很多牛人的城市生活。虽然现在互联网使得人们更容易接近牛人，但这需要你主动去接触；处在一个身边大多是牛人的环境中，被动就可以接触到很多牛人，每天都在潜移默化的受影响。</li>\n<li><strong>你想让你的孩子成为什么样的人，那么你应该先努力去成为这样的人</strong>。孩子就是我们的一面镜子，你是怎样的人，影响你的孩子一生。</li>\n</ul>\n<h2 id=\"2-禅修者\"><a href=\"#2-禅修者\" class=\"headerlink\" title=\"2. 禅修者\"></a>2. 禅修者</h2><p>脑科学的研究表明，打坐（也称冥想）能显著的增加大脑皮质的厚度和大脑皮层的表面积。简单的讲，这能使你更聪明，做事情更容易专注，且感知能力更强。乔布斯少年就接触禅修，甚至在年轻时前往印度朝圣。撇开宗教相关的内容不说，打坐是每个人都应该养成的一个伴随终生的习惯，有兴趣更多了解打坐的请点击「<a href=\"http://www.zhibimo.com/books/xiaolai/zuo-xiang-qi-cheng\" target=\"_blank\" rel=\"noopener\">坐享其成</a>」。</p>\n<p>印度之旅给乔布斯带去的另外一个重大影响是「直觉式思考」。对于这点笔者并不是特别理解，所以可能讲述的不准确。从传记的意思来看，应该是<strong>充分尊重自己的第一感觉</strong>，并从此出发。比如乔布斯在批评产品的时候经常会讲「这就是一坨狗S」，然后指出哪哪不好。那么直觉是一种非理性吗？应该不完全是，因为直觉也可以是来自于长期理性思考的固化。但不管怎么说，充分尊重自己内心的第一感觉，仔细倾听自己内心的声音，然后运用理性去分析这些声音，是非常有用的一个方法论。</p>\n<h2 id=\"3-商人\"><a href=\"#3-商人\" class=\"headerlink\" title=\"3. 商人\"></a>3. 商人</h2><p>乔布斯和沃兹，在共同创立苹果前便玩到了一起。当时沃兹做了一个能免费打长途电话的黑匣子，乔布斯的直觉是要把它做成一个人人可用的产品。在苹果推出Apple I时，该电脑还保留了供极客们扩展的各种PCI接口，而在Apple II时，乔布斯把沃兹的那些「极客外设」全部否定掉了。苹果至此有了一个非常精准的客户定位，那就是普罗大众。乔布斯为什么这么做？</p>\n<p>显然，<strong>假设你能从每个普罗大众身上都赚到钱，肯定比你从特定人群或企业身上赚到的钱要多得多</strong>。这是一个放之四海而皆准的道理，微软、Facebook和谷歌等企业的成功同样遵循这个道理，乔布斯在还没开始创业前就已知晓了这一点。</p>\n<p>假设你以后可能创业，那么里的启示意义是：你的目标客户群体是什么？你的目标客户群体是否足够庞大？你的IDEA能否从这个群体的每个人身上都赚到钱？</p>\n<h2 id=\"4-现实扭曲者\"><a href=\"#4-现实扭曲者\" class=\"headerlink\" title=\"4. 现实扭曲者\"></a>4. 现实扭曲者</h2><p>乔布斯身上有一种被称为现实扭曲力场的力量。这是一种化不可能为可能的力量，例如在做第一台Mac时，在生产iPhone4的玻璃时。很多与乔布斯共事过的人都说：</p>\n<ul>\n<li>如果不是他，我不知道原来可以把事情做得这么好；</li>\n<li>没想到我竟然做到了，这简直就是奇迹。</li>\n</ul>\n<p>笔者尝试理解这种现实力场，它应该是鼓励和信任的结合体。这里的启示是，不论是工作还是生活，<strong>充分的信任对你而言重要的人，不要吝惜你的鼓励，能产生神奇的效应。打击人很容易，而发自内心的鼓励却需要涵养和智慧</strong>。</p>\n<p>如果将这种力场用在自己身上，那便是在自己要动摇的时候告诉自己：<strong>我怎么可能不行？咱是谁啊？我肯定行的</strong>。说是自我暗示也罢，自打鸡血也罢，但这就是相信自己并鼓励自己啊！</p>\n<h2 id=\"5-艺术家与科技工作者\"><a href=\"#5-艺术家与科技工作者\" class=\"headerlink\" title=\"5. 艺术家与科技工作者\"></a>5. 艺术家与科技工作者</h2><p>乔布斯在多次产品发布会的结束，都会展示一张「两条道路交汇」的图，寓意是人文与科技的结合。人文与艺术着实对乔布斯造成了极大的影响。</p>\n<p>在里德学院时，辍学的乔布斯并没有立即离开学校，而是遵从他的直觉在学校选修了书法课。「all this comes back when we make the first mac computer」，乔布斯在斯坦福大学毕业演讲时如是说。乔布斯亦深受包豪斯风格的影响，极其崇尚艺术与技术的结合，以及设计的目的是人而不是产品。还有一点便是禅文化的影响，乔布斯希望产品尽可能的简单，这与当下的「Don’t make me think」的设计理念如出一辙。</p>\n<p>本小节的启示是：人文和艺术是人们应该刻意去学习和接触的，它们能提高你的素养，提升你的品味，进而影响你的工作和生活。笔者曾读过这么一个观点：<strong>审美能力是人们应该刻意培养的一种能力，它能使你的生活质量更高；正因为你具备审美能力，你才能发现原来生活中处处是美。</strong></p>\n<h2 id=\"6-领导者\"><a href=\"#6-领导者\" class=\"headerlink\" title=\"6. 领导者\"></a>6. 领导者</h2><p>在乔布斯从皮克斯回归苹果时，他做了一项重大的举措——砍掉苹果的大部分产品线，而只专注于少数几项产品的研发和推广。他回归后，在白板上画了四宫格用以描述苹果未来的主要产品。四个格子分别是：台式、便携、消费级、专业级。四宫格的两两交叉构成了乔布斯回归苹果后，苹果的4类主要产品。当时做这个决定是需要勇气的，这意味着需要砍掉一部分能产生收入的业务。但也<strong>正是因为这种减法，使得整个公司的愿景变得非常的清晰</strong>，整个公司将大部分资源聚焦在这4类产品上，成就了新的辉煌，macbook就是在这时候诞生的。</p>\n<p>作为领导者，他还知道如何让员工做到。在说服第一台Mac的程序员将开机时间缩短时，他用了一个非常简单粗暴的数据。那就是将缩短的时间，乘上可能的受众数量，得出的结果是最终能节省几十甚至几百年的国民时间，给这件事情赋予了极其非凡的意义。说服斯卡利加入苹果时，他说了一句为大众所熟知的一句话——你愿意卖一辈子糖水，还是跟着我们改变世界？</p>\n<p>本小节的启示是：</p>\n<ul>\n<li>无论是工作还是生活，若想卓有成效，你必须有所取舍，<strong>选择出最重要的事情，将注意力聚焦在那些真正重要的事情上</strong>。</li>\n<li><strong>人是活在自己编织的意义之网上的动物</strong>，如果你真的想彻底说服自己或别人做一件事情，那就是赋予它重大的意义。</li>\n</ul>\n<h2 id=\"7-划时代的产品经理\"><a href=\"#7-划时代的产品经理\" class=\"headerlink\" title=\"7. 划时代的产品经理\"></a>7. 划时代的产品经理</h2><p>作为产品经理，乔布斯绝对是个说不大师。乔布斯用非黑即白的观点来判断一切，要么是狗屎，要么是完美。正因为乔布斯的这种苛求，正因为他坚持说不，正因为他不轻易妥协，使得苹果团队出品的水准逼近于完美。中国有句老话：<strong>取法其上，得乎其中；取法其中，得乎其下</strong>。虽然完美无止境，但乔布斯在追求完美的道路上，从不轻易就停下步伐。</p>\n<p>乔布斯对待产品的态度也传承给了他的团队。苹果团队会在每年集思会对接下来的主要产品方向进行PK，以评选最重要的产品方向。在定完产品方向后，又会对产品模型进行PK。像iPhone这类产品，其样机模型至少迭代了十几二十个版本，每个版本都要接受乔布斯和所有核心设计人员的批判。且为了能看到整个迭代的过程，设计团队会将被否决的模型保留，每次展示时将模型从第一版到最新一版一并程序，以便大家能看到为什么而改。</p>\n<p>然而作为一个产品经理，乔布斯最大的贡献在笔者看来是他对于产品的想法——那些划时代的想法。他曾说过这么一句：</p>\n<blockquote>\n<p>我记得亨利福特曾说过：如果我最初问消费者他们想要什么，他们应该是会告诉我——要一匹更快的马。人们不知道想要什么，直到你把它摆在他们面前。正因如此，我从不依靠市场研究。我们的任务是读懂还没落到纸面上的东西。</p>\n</blockquote>\n<p>乔布斯的想法并非凭空而来，一部分是借力自于他的同事，一部分是因为他在人文和艺术上的修养。他将人文艺术与科技紧密的结合在一起，将苹果打造成了一家时尚科技消费品公司。</p>\n<p>本小节的启示是：</p>\n<ul>\n<li>完美是一种追求，即使最终做不到真正的完美，但追求完美能让你做得比预期更好。在满足成本约束的前提下，尽可能抬高水准，不要轻易说行，差异就一点点的形成了。</li>\n<li><strong>好的产品不是一蹴而就的，需要不断的迭代、打磨和升级</strong>。</li>\n</ul>\n<h2 id=\"Ending\"><a href=\"#Ending\" class=\"headerlink\" title=\"Ending\"></a>Ending</h2><p>这篇书评不是本书的结束，本书还留给了笔者一些问题去自问自答，这同样是你的问题：）</p>\n<ul>\n<li>你最底层的驱动力是什么？是什么驱动着你做现在的任何事情？</li>\n<li>假如你赞同环境的重要性，在你的有生之年，可以做什么事情，使得你跟牛人们在物理距离上更为接近？</li>\n<li>假如你在创业或即将创业，你的目标客户群体是什么？你的目标客户群体是否足够庞大？你的IDEA能否从这个群体的每个人身上都赚到钱？</li>\n<li>你经常轻易的打击人吗？你有多久没有鼓励别人了？你有多久没有鼓励自己了？</li>\n<li>你打算如何培养你发现美的能力？有什么可行性的举措？</li>\n<li>或许你在做很多的事情，尝试做一下减法，最重要的是哪几件事情？这几件事情值得你聚焦宝贵的注意力在上面吗？你需要如何分解任务，以最终实现这几件事情？</li>\n<li>你给自己制定的长远目标是否足够高要求？能再抬高一下水准吗？</li>\n<li>无论是商业还是交际，发掘他人真正需求是一项特别重要的能力？如何培养自己关于这方面的能力？</li>\n</ul>\n<p>最后以苹果think different广告的广告词缅怀乔布斯：</p>\n<blockquote>\n<p>或许他们是别人眼中的疯子，但他们却是我们眼中的天才。因为只有那些疯狂到以为自己能够改变世界的人，才能真正改变世界。</p>\n</blockquote>\n<p>以下是本文的reference：</p>\n<ul>\n<li><a href=\"https://www.zhihu.com/question/30223466/answer/47276827\" target=\"_blank\" rel=\"noopener\">吴军老师：https://www.zhihu.com/question/30223466/answer/47276827</a></li>\n<li><a href=\"http://www.zhibimo.com/books/xiaolai/zuo-xiang-qi-cheng\" target=\"_blank\" rel=\"noopener\">坐享其成：http://www.zhibimo.com/books/xiaolai/zuo-xiang-qi-cheng</a></li>\n</ul>"},{"title":"Core Java 01 | equals vs ==","date":"2018-06-07T04:22:29.000Z","_content":"\nJava中，equals和==有何区别？\n\n<!-- more -->\n\n`==`是什么？\n\n- `==`是二元运算符；\n- 对于基本数据类型，`==`比较的是值是否相等；\n- 对于对象，`==`比较的是两个引用是否指向同一个内存地址；\n\n`equals`是什么？\n\n- `equals`是顶层父类`java.lang.Object`的成员方法，此方法需通过非空对象调用，其源码如下：\n```java\npublic boolean equals(Object obj) {\n    return (this == obj);\n}\n```\n- 在子类没有重写`equals`方法的情况下，比较的是两个引用是否指向同一个内存地址；\n- 在子类重写了`equals`的情况下，比较的结果视其具体实现而定。例如：8大基本数据的包装数据类型、String类重写了equals方法，比较的是值是否相等。\n\n对于equals，Java有个规定：\n\n> Note that it is generally necessary to override the hashCode method whenever this method is overridden, so as to maintain the general contract for the hashCode method, which states that equal objects must have equal hash codes.\n\n> 长话短说：若两个对象使用equals比较返回true，它们的hashCode方法返回的值必须相等。\n\nWhy？下回详解。\n","source":"_posts/2018-06-07-core-java-equals.md","raw":"---\ntitle: \"Core Java 01 | equals vs ==\"\ndate: 2018-06-07 12:22:29\ntags: ['Java']\n---\n\nJava中，equals和==有何区别？\n\n<!-- more -->\n\n`==`是什么？\n\n- `==`是二元运算符；\n- 对于基本数据类型，`==`比较的是值是否相等；\n- 对于对象，`==`比较的是两个引用是否指向同一个内存地址；\n\n`equals`是什么？\n\n- `equals`是顶层父类`java.lang.Object`的成员方法，此方法需通过非空对象调用，其源码如下：\n```java\npublic boolean equals(Object obj) {\n    return (this == obj);\n}\n```\n- 在子类没有重写`equals`方法的情况下，比较的是两个引用是否指向同一个内存地址；\n- 在子类重写了`equals`的情况下，比较的结果视其具体实现而定。例如：8大基本数据的包装数据类型、String类重写了equals方法，比较的是值是否相等。\n\n对于equals，Java有个规定：\n\n> Note that it is generally necessary to override the hashCode method whenever this method is overridden, so as to maintain the general contract for the hashCode method, which states that equal objects must have equal hash codes.\n\n> 长话短说：若两个对象使用equals比较返回true，它们的hashCode方法返回的值必须相等。\n\nWhy？下回详解。\n","slug":"core-java-equals","published":1,"updated":"2018-06-07T04:52:44.347Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlza6mb9005apgup12vrsk5e","content":"<p>Java中，equals和==有何区别？</p>\n<a id=\"more\"></a>\n<p><code>==</code>是什么？</p>\n<ul>\n<li><code>==</code>是二元运算符；</li>\n<li>对于基本数据类型，<code>==</code>比较的是值是否相等；</li>\n<li>对于对象，<code>==</code>比较的是两个引用是否指向同一个内存地址；</li>\n</ul>\n<p><code>equals</code>是什么？</p>\n<ul>\n<li><p><code>equals</code>是顶层父类<code>java.lang.Object</code>的成员方法，此方法需通过非空对象调用，其源码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">equals</span><span class=\"params\">(Object obj)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"keyword\">this</span> == obj);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在子类没有重写<code>equals</code>方法的情况下，比较的是两个引用是否指向同一个内存地址；</p>\n</li>\n<li>在子类重写了<code>equals</code>的情况下，比较的结果视其具体实现而定。例如：8大基本数据的包装数据类型、String类重写了equals方法，比较的是值是否相等。</li>\n</ul>\n<p>对于equals，Java有个规定：</p>\n<blockquote>\n<p>Note that it is generally necessary to override the hashCode method whenever this method is overridden, so as to maintain the general contract for the hashCode method, which states that equal objects must have equal hash codes.</p>\n</blockquote>\n<blockquote>\n<p>长话短说：若两个对象使用equals比较返回true，它们的hashCode方法返回的值必须相等。</p>\n</blockquote>\n<p>Why？下回详解。</p>\n","site":{"data":{}},"excerpt":"<p>Java中，equals和==有何区别？</p>","more":"<p><code>==</code>是什么？</p>\n<ul>\n<li><code>==</code>是二元运算符；</li>\n<li>对于基本数据类型，<code>==</code>比较的是值是否相等；</li>\n<li>对于对象，<code>==</code>比较的是两个引用是否指向同一个内存地址；</li>\n</ul>\n<p><code>equals</code>是什么？</p>\n<ul>\n<li><p><code>equals</code>是顶层父类<code>java.lang.Object</code>的成员方法，此方法需通过非空对象调用，其源码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">equals</span><span class=\"params\">(Object obj)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"keyword\">this</span> == obj);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在子类没有重写<code>equals</code>方法的情况下，比较的是两个引用是否指向同一个内存地址；</p>\n</li>\n<li>在子类重写了<code>equals</code>的情况下，比较的结果视其具体实现而定。例如：8大基本数据的包装数据类型、String类重写了equals方法，比较的是值是否相等。</li>\n</ul>\n<p>对于equals，Java有个规定：</p>\n<blockquote>\n<p>Note that it is generally necessary to override the hashCode method whenever this method is overridden, so as to maintain the general contract for the hashCode method, which states that equal objects must have equal hash codes.</p>\n</blockquote>\n<blockquote>\n<p>长话短说：若两个对象使用equals比较返回true，它们的hashCode方法返回的值必须相等。</p>\n</blockquote>\n<p>Why？下回详解。</p>"},{"title":"java mina close_wait issue","date":"2018-06-14T03:02:06.000Z","_content":"\n在Linux下使用Java Mina编写TCP/IP通信程序时，发现TCP Server出现了大量的CLOSE_WAIT，why？\n\n<!--more-->\n\nclose_wait状态出现在TCP四次挥手，「被动关闭的TCP端」才会出现此状态，详见下图。\n\n![TCP四次挥手](https://img-blog.csdn.net/20170606084851272?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXpjc3U=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n从图片可以得到以下信息，\n\n- 主动关闭端主动发送FIN报文\n- 被动关闭端接收到FIN报文后，协议栈一般会自动回复ACK报文，此时被动关闭端进入了**close_wait**状态。再次强调下，一旦被动关闭端收到了FIN报文并回复ACK，它便进入了close_wait状态\n- 直到被动关闭端发送了FIN报文后，close_wait状态才解除，被动关闭端进入last_ack的状态\n\n这里有两个问题，\n\n- 被动关闭端如何发送FIN报文？\n- 如果被动关闭端不主动close()会有什么后果？\n\n相应的答案是，\n\n- 主动close()已建立的socket连接，放在mina便是`session.closeNow()`\n- 被动关闭端会一直处在close_wait状态，直到达到一个超时时间才释放socket。这个时间默认是2小时，可通过修改系统配置缩短（搜索tcp keepalive setup）\n\n强调一点，**在close_wait状态解除前，除非tcp端口发生变化，否则主动关闭端将无法再次与被动关闭端建立tcp连接，这放在生产环境便是灾难。为什么会这样呢？因为TCP连接是一个4元标识，本地IP+本地端口+远端IP+远端端口唯一标识一个TCP连接，处于close_wait状态相当于keep住了一个4元标识，任何与此标识相同的连接请求（三次握手）将被TCP拒绝。**\n\n\n最重要的结论来了：**如果你遇到这类问题，说明你的程序存在BUG，没有正常close()掉失效的TCP连接**。若使用mina编程，可在sessionIdle()关闭失效的连接避免此错误。\n\n注：使用`lsof`命令可查看进程是否有socket处于close_wait状态。\n\n\n## 参考文献\n\nhttps://blog.csdn.net/qzcsu/article/details/72861891\n","source":"_posts/2018-06-14-close-wait-issue.md","raw":"---\ntitle: java mina close_wait issue\ndate: 2018-06-14 11:02:06\ntags: ['Java', 'Mina', 'TCP/IP']\n---\n\n在Linux下使用Java Mina编写TCP/IP通信程序时，发现TCP Server出现了大量的CLOSE_WAIT，why？\n\n<!--more-->\n\nclose_wait状态出现在TCP四次挥手，「被动关闭的TCP端」才会出现此状态，详见下图。\n\n![TCP四次挥手](https://img-blog.csdn.net/20170606084851272?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXpjc3U=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n从图片可以得到以下信息，\n\n- 主动关闭端主动发送FIN报文\n- 被动关闭端接收到FIN报文后，协议栈一般会自动回复ACK报文，此时被动关闭端进入了**close_wait**状态。再次强调下，一旦被动关闭端收到了FIN报文并回复ACK，它便进入了close_wait状态\n- 直到被动关闭端发送了FIN报文后，close_wait状态才解除，被动关闭端进入last_ack的状态\n\n这里有两个问题，\n\n- 被动关闭端如何发送FIN报文？\n- 如果被动关闭端不主动close()会有什么后果？\n\n相应的答案是，\n\n- 主动close()已建立的socket连接，放在mina便是`session.closeNow()`\n- 被动关闭端会一直处在close_wait状态，直到达到一个超时时间才释放socket。这个时间默认是2小时，可通过修改系统配置缩短（搜索tcp keepalive setup）\n\n强调一点，**在close_wait状态解除前，除非tcp端口发生变化，否则主动关闭端将无法再次与被动关闭端建立tcp连接，这放在生产环境便是灾难。为什么会这样呢？因为TCP连接是一个4元标识，本地IP+本地端口+远端IP+远端端口唯一标识一个TCP连接，处于close_wait状态相当于keep住了一个4元标识，任何与此标识相同的连接请求（三次握手）将被TCP拒绝。**\n\n\n最重要的结论来了：**如果你遇到这类问题，说明你的程序存在BUG，没有正常close()掉失效的TCP连接**。若使用mina编程，可在sessionIdle()关闭失效的连接避免此错误。\n\n注：使用`lsof`命令可查看进程是否有socket处于close_wait状态。\n\n\n## 参考文献\n\nhttps://blog.csdn.net/qzcsu/article/details/72861891\n","slug":"close-wait-issue","published":1,"updated":"2018-06-21T05:10:59.291Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlza6mbb005dpguptzbwqcx8","content":"<p>在Linux下使用Java Mina编写TCP/IP通信程序时，发现TCP Server出现了大量的CLOSE_WAIT，why？</p>\n<a id=\"more\"></a>\n<p>close_wait状态出现在TCP四次挥手，「被动关闭的TCP端」才会出现此状态，详见下图。</p>\n<p><img src=\"https://img-blog.csdn.net/20170606084851272?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXpjc3U=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"TCP四次挥手\"></p>\n<p>从图片可以得到以下信息，</p>\n<ul>\n<li>主动关闭端主动发送FIN报文</li>\n<li>被动关闭端接收到FIN报文后，协议栈一般会自动回复ACK报文，此时被动关闭端进入了<strong>close_wait</strong>状态。再次强调下，一旦被动关闭端收到了FIN报文并回复ACK，它便进入了close_wait状态</li>\n<li>直到被动关闭端发送了FIN报文后，close_wait状态才解除，被动关闭端进入last_ack的状态</li>\n</ul>\n<p>这里有两个问题，</p>\n<ul>\n<li>被动关闭端如何发送FIN报文？</li>\n<li>如果被动关闭端不主动close()会有什么后果？</li>\n</ul>\n<p>相应的答案是，</p>\n<ul>\n<li>主动close()已建立的socket连接，放在mina便是<code>session.closeNow()</code></li>\n<li>被动关闭端会一直处在close_wait状态，直到达到一个超时时间才释放socket。这个时间默认是2小时，可通过修改系统配置缩短（搜索tcp keepalive setup）</li>\n</ul>\n<p>强调一点，<strong>在close_wait状态解除前，除非tcp端口发生变化，否则主动关闭端将无法再次与被动关闭端建立tcp连接，这放在生产环境便是灾难。为什么会这样呢？因为TCP连接是一个4元标识，本地IP+本地端口+远端IP+远端端口唯一标识一个TCP连接，处于close_wait状态相当于keep住了一个4元标识，任何与此标识相同的连接请求（三次握手）将被TCP拒绝。</strong></p>\n<p>最重要的结论来了：<strong>如果你遇到这类问题，说明你的程序存在BUG，没有正常close()掉失效的TCP连接</strong>。若使用mina编程，可在sessionIdle()关闭失效的连接避免此错误。</p>\n<p>注：使用<code>lsof</code>命令可查看进程是否有socket处于close_wait状态。</p>\n<h2 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h2><p><a href=\"https://blog.csdn.net/qzcsu/article/details/72861891\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/qzcsu/article/details/72861891</a></p>\n","site":{"data":{}},"excerpt":"<p>在Linux下使用Java Mina编写TCP/IP通信程序时，发现TCP Server出现了大量的CLOSE_WAIT，why？</p>","more":"<p>close_wait状态出现在TCP四次挥手，「被动关闭的TCP端」才会出现此状态，详见下图。</p>\n<p><img src=\"https://img-blog.csdn.net/20170606084851272?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXpjc3U=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"TCP四次挥手\"></p>\n<p>从图片可以得到以下信息，</p>\n<ul>\n<li>主动关闭端主动发送FIN报文</li>\n<li>被动关闭端接收到FIN报文后，协议栈一般会自动回复ACK报文，此时被动关闭端进入了<strong>close_wait</strong>状态。再次强调下，一旦被动关闭端收到了FIN报文并回复ACK，它便进入了close_wait状态</li>\n<li>直到被动关闭端发送了FIN报文后，close_wait状态才解除，被动关闭端进入last_ack的状态</li>\n</ul>\n<p>这里有两个问题，</p>\n<ul>\n<li>被动关闭端如何发送FIN报文？</li>\n<li>如果被动关闭端不主动close()会有什么后果？</li>\n</ul>\n<p>相应的答案是，</p>\n<ul>\n<li>主动close()已建立的socket连接，放在mina便是<code>session.closeNow()</code></li>\n<li>被动关闭端会一直处在close_wait状态，直到达到一个超时时间才释放socket。这个时间默认是2小时，可通过修改系统配置缩短（搜索tcp keepalive setup）</li>\n</ul>\n<p>强调一点，<strong>在close_wait状态解除前，除非tcp端口发生变化，否则主动关闭端将无法再次与被动关闭端建立tcp连接，这放在生产环境便是灾难。为什么会这样呢？因为TCP连接是一个4元标识，本地IP+本地端口+远端IP+远端端口唯一标识一个TCP连接，处于close_wait状态相当于keep住了一个4元标识，任何与此标识相同的连接请求（三次握手）将被TCP拒绝。</strong></p>\n<p>最重要的结论来了：<strong>如果你遇到这类问题，说明你的程序存在BUG，没有正常close()掉失效的TCP连接</strong>。若使用mina编程，可在sessionIdle()关闭失效的连接避免此错误。</p>\n<p>注：使用<code>lsof</code>命令可查看进程是否有socket处于close_wait状态。</p>\n<h2 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h2><p><a href=\"https://blog.csdn.net/qzcsu/article/details/72861891\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/qzcsu/article/details/72861891</a></p>"},{"title":"jvisual-find-memory-leak","date":"2018-06-27T06:50:11.000Z","_content":"","source":"_posts/2018-06-27-jvisual-find-memory-leak.md","raw":"---\ntitle: jvisual-find-memory-leak\ndate: 2018-06-27 14:50:11\ntags:\n---\n","slug":"jvisual-find-memory-leak","published":1,"updated":"2018-06-27T06:50:12.020Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlza6mbd005gpgupghbibsji","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"too many open files in java","date":"2018-06-16T09:00:05.000Z","_content":"\nLinux平台下，每个进程能打开的文件描述符是有上限的，这个参数可以通过`ulimit`命令查看和在运行时设置，但若想持久化该配置，需配置到`sysctl.conf`，具体如何\n配置请自行百度。本文记录Java进程「too many open files」的错误，其原因便是打开的文件描述符超过了OS的上限。\n\n<!--more-->\n\n## Linux平台下如何诊断可能存在「too many open files」错误\n\n- 首先，通过`ps`命令查找到进程ID，如`2343`\n- 然后，使用`ls -l /proc/2343/fd`命令可以查看到具体打开了什么类型的文件描述符，如常见的pipe和socket。使用`ls -l /proc/2343/fd|wc -l`可对进程打开的文件描述符进行计数，如果这个数值不断在增大，说明程序存在文件描述符未正常关闭的BUG。注：这里的`2343`请替换为实际进程ID。\n\n## 常见原因是什么\n\n- 一种常见原因是文件流没有正常关闭，解决办法是使用try-finally或try-with-resources确保流的正常关闭。特殊的是，对于`new BufferedReader(new InputStreamReader(process.getInputStream()))`这类代码，在关闭`BufferedReader`时会自动关闭`InputStreamReader`\n- 另一种常见原因是`Runtime.getRuntime().exec()`所导致的问题，[StackOverFlow](https://stackoverflow.com/questions/15956452/troubleshooting-too-many-files-open-with-lsof)上有详细的介绍，示例如下：\n\n```java\n    try\n    {\n        // exec()常用来做操作系统调用\n        p = Runtime.getRuntime().exec(\"something\");\n    }\n    finally\n    {\n        if (p != null)\n        {\n            // 调用完毕后，必须显示关闭标准输出流、错误输出流和输入流，否则会导致文件描述符没有正常释放\n            // 可直接p.getOutputStream().close()关闭\n            IOUtils.closeQuietly(p.getOutputStream());\n            IOUtils.closeQuietly(p.getInputStream());\n            IOUtils.closeQuietly(p.getErrorStream());\n            // 注意，destroy()方法并不负责流的关闭，这是一个非常隐晦的错误\n            p.destroy();\n        }\n    }\n```\n\n","source":"_posts/2018-06-16-too-many-open-files.md","raw":"---\ntitle: too many open files in java\ndate: 2018-06-16 17:00:05\ntags: ['Java']\n---\n\nLinux平台下，每个进程能打开的文件描述符是有上限的，这个参数可以通过`ulimit`命令查看和在运行时设置，但若想持久化该配置，需配置到`sysctl.conf`，具体如何\n配置请自行百度。本文记录Java进程「too many open files」的错误，其原因便是打开的文件描述符超过了OS的上限。\n\n<!--more-->\n\n## Linux平台下如何诊断可能存在「too many open files」错误\n\n- 首先，通过`ps`命令查找到进程ID，如`2343`\n- 然后，使用`ls -l /proc/2343/fd`命令可以查看到具体打开了什么类型的文件描述符，如常见的pipe和socket。使用`ls -l /proc/2343/fd|wc -l`可对进程打开的文件描述符进行计数，如果这个数值不断在增大，说明程序存在文件描述符未正常关闭的BUG。注：这里的`2343`请替换为实际进程ID。\n\n## 常见原因是什么\n\n- 一种常见原因是文件流没有正常关闭，解决办法是使用try-finally或try-with-resources确保流的正常关闭。特殊的是，对于`new BufferedReader(new InputStreamReader(process.getInputStream()))`这类代码，在关闭`BufferedReader`时会自动关闭`InputStreamReader`\n- 另一种常见原因是`Runtime.getRuntime().exec()`所导致的问题，[StackOverFlow](https://stackoverflow.com/questions/15956452/troubleshooting-too-many-files-open-with-lsof)上有详细的介绍，示例如下：\n\n```java\n    try\n    {\n        // exec()常用来做操作系统调用\n        p = Runtime.getRuntime().exec(\"something\");\n    }\n    finally\n    {\n        if (p != null)\n        {\n            // 调用完毕后，必须显示关闭标准输出流、错误输出流和输入流，否则会导致文件描述符没有正常释放\n            // 可直接p.getOutputStream().close()关闭\n            IOUtils.closeQuietly(p.getOutputStream());\n            IOUtils.closeQuietly(p.getInputStream());\n            IOUtils.closeQuietly(p.getErrorStream());\n            // 注意，destroy()方法并不负责流的关闭，这是一个非常隐晦的错误\n            p.destroy();\n        }\n    }\n```\n\n","slug":"too-many-open-files","published":1,"updated":"2018-06-21T04:44:36.130Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlza6mbe005jpgupty15phak","content":"<p>Linux平台下，每个进程能打开的文件描述符是有上限的，这个参数可以通过<code>ulimit</code>命令查看和在运行时设置，但若想持久化该配置，需配置到<code>sysctl.conf</code>，具体如何<br>配置请自行百度。本文记录Java进程「too many open files」的错误，其原因便是打开的文件描述符超过了OS的上限。</p>\n<a id=\"more\"></a>\n<h2 id=\"Linux平台下如何诊断可能存在「too-many-open-files」错误\"><a href=\"#Linux平台下如何诊断可能存在「too-many-open-files」错误\" class=\"headerlink\" title=\"Linux平台下如何诊断可能存在「too many open files」错误\"></a>Linux平台下如何诊断可能存在「too many open files」错误</h2><ul>\n<li>首先，通过<code>ps</code>命令查找到进程ID，如<code>2343</code></li>\n<li>然后，使用<code>ls -l /proc/2343/fd</code>命令可以查看到具体打开了什么类型的文件描述符，如常见的pipe和socket。使用<code>ls -l /proc/2343/fd|wc -l</code>可对进程打开的文件描述符进行计数，如果这个数值不断在增大，说明程序存在文件描述符未正常关闭的BUG。注：这里的<code>2343</code>请替换为实际进程ID。</li>\n</ul>\n<h2 id=\"常见原因是什么\"><a href=\"#常见原因是什么\" class=\"headerlink\" title=\"常见原因是什么\"></a>常见原因是什么</h2><ul>\n<li>一种常见原因是文件流没有正常关闭，解决办法是使用try-finally或try-with-resources确保流的正常关闭。特殊的是，对于<code>new BufferedReader(new InputStreamReader(process.getInputStream()))</code>这类代码，在关闭<code>BufferedReader</code>时会自动关闭<code>InputStreamReader</code></li>\n<li>另一种常见原因是<code>Runtime.getRuntime().exec()</code>所导致的问题，<a href=\"https://stackoverflow.com/questions/15956452/troubleshooting-too-many-files-open-with-lsof\" target=\"_blank\" rel=\"noopener\">StackOverFlow</a>上有详细的介绍，示例如下：</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// exec()常用来做操作系统调用</span></span><br><span class=\"line\">    p = Runtime.getRuntime().exec(<span class=\"string\">\"something\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">finally</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (p != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 调用完毕后，必须显示关闭标准输出流、错误输出流和输入流，否则会导致文件描述符没有正常释放</span></span><br><span class=\"line\">        <span class=\"comment\">// 可直接p.getOutputStream().close()关闭</span></span><br><span class=\"line\">        IOUtils.closeQuietly(p.getOutputStream());</span><br><span class=\"line\">        IOUtils.closeQuietly(p.getInputStream());</span><br><span class=\"line\">        IOUtils.closeQuietly(p.getErrorStream());</span><br><span class=\"line\">        <span class=\"comment\">// 注意，destroy()方法并不负责流的关闭，这是一个非常隐晦的错误</span></span><br><span class=\"line\">        p.destroy();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>Linux平台下，每个进程能打开的文件描述符是有上限的，这个参数可以通过<code>ulimit</code>命令查看和在运行时设置，但若想持久化该配置，需配置到<code>sysctl.conf</code>，具体如何<br>配置请自行百度。本文记录Java进程「too many open files」的错误，其原因便是打开的文件描述符超过了OS的上限。</p>","more":"<h2 id=\"Linux平台下如何诊断可能存在「too-many-open-files」错误\"><a href=\"#Linux平台下如何诊断可能存在「too-many-open-files」错误\" class=\"headerlink\" title=\"Linux平台下如何诊断可能存在「too many open files」错误\"></a>Linux平台下如何诊断可能存在「too many open files」错误</h2><ul>\n<li>首先，通过<code>ps</code>命令查找到进程ID，如<code>2343</code></li>\n<li>然后，使用<code>ls -l /proc/2343/fd</code>命令可以查看到具体打开了什么类型的文件描述符，如常见的pipe和socket。使用<code>ls -l /proc/2343/fd|wc -l</code>可对进程打开的文件描述符进行计数，如果这个数值不断在增大，说明程序存在文件描述符未正常关闭的BUG。注：这里的<code>2343</code>请替换为实际进程ID。</li>\n</ul>\n<h2 id=\"常见原因是什么\"><a href=\"#常见原因是什么\" class=\"headerlink\" title=\"常见原因是什么\"></a>常见原因是什么</h2><ul>\n<li>一种常见原因是文件流没有正常关闭，解决办法是使用try-finally或try-with-resources确保流的正常关闭。特殊的是，对于<code>new BufferedReader(new InputStreamReader(process.getInputStream()))</code>这类代码，在关闭<code>BufferedReader</code>时会自动关闭<code>InputStreamReader</code></li>\n<li>另一种常见原因是<code>Runtime.getRuntime().exec()</code>所导致的问题，<a href=\"https://stackoverflow.com/questions/15956452/troubleshooting-too-many-files-open-with-lsof\" target=\"_blank\" rel=\"noopener\">StackOverFlow</a>上有详细的介绍，示例如下：</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// exec()常用来做操作系统调用</span></span><br><span class=\"line\">    p = Runtime.getRuntime().exec(<span class=\"string\">\"something\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">finally</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (p != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 调用完毕后，必须显示关闭标准输出流、错误输出流和输入流，否则会导致文件描述符没有正常释放</span></span><br><span class=\"line\">        <span class=\"comment\">// 可直接p.getOutputStream().close()关闭</span></span><br><span class=\"line\">        IOUtils.closeQuietly(p.getOutputStream());</span><br><span class=\"line\">        IOUtils.closeQuietly(p.getInputStream());</span><br><span class=\"line\">        IOUtils.closeQuietly(p.getErrorStream());</span><br><span class=\"line\">        <span class=\"comment\">// 注意，destroy()方法并不负责流的关闭，这是一个非常隐晦的错误</span></span><br><span class=\"line\">        p.destroy();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"如何诊断java程序CPU占用率过高","date":"2018-07-07T15:13:53.000Z","_content":"\n在最近一次编程时，我的一个Java应用在嵌入式设备bbblack上的CPU占用率高达60%至70%，简单记录我是如何诊断这个问题的。\n\n<!--more-->\n\nGitHub上有一个项目[jvmtop](https://github.com/patric-r/jvmtop)，借助于jvmtop这个工具，我们可以指定Java进程的pid进行profile，命令如下：\n\n```java\njvmtop <pid>\n```\n\n产生的输出大概如下：\n```\nJvmTop 0.4.1 alpha   amd64,  4 cpus, Linux 2.6.18-34\n https://github.com/patric-r/jvmtop\n\n PID 3539: org.apache.catalina.startup.Bootstrap\n ARGS: start\n VMARGS: -Djava.util.logging.config.file=/home/webserver/apache-tomcat-5.5[...]\n VM: Sun Microsystems Inc. Java HotSpot(TM) 64-Bit Server VM 1.6.0_25\n UP: 869:33m #THR: 106  #THRPEAK: 143  #THRCREATED: 128020 USER: webserver\n CPU:  4.55% GC:  3.25% HEAP: 137m / 227m NONHEAP:  75m / 304m\n Note: Only top 10 threads (according cpu load) are shown!\n\n  TID   NAME                                    STATE    CPU  TOTALCPU BLOCKEDBY\n     25 http-8080-Processor13                RUNNABLE  4.55%     1.60%\n 128022 RMI TCP Connection(18)-10.101.       RUNNABLE  1.82%     0.02%\n  36578 http-8080-Processor164               RUNNABLE  0.91%     2.35%\n  36453 http-8080-Processor94                RUNNABLE  0.91%     1.52%\n     27 http-8080-Processor15                RUNNABLE  0.91%     1.81%\n     14 http-8080-Processor2                 RUNNABLE  0.91%     3.17%\n 128026 JMX server connection timeout   TIMED_WAITING  0.00%     0.00%\n 128025 JMX server connection timeout   TIMED_WAITING  0.00%     0.00%\n 128024 JMX server connection timeout   TIMED_WAITING  0.00%     0.00%\n 128023 JMX server connection timeout   TIMED_WAITING  0.00%     0.00%\n```\n\n通过其输出，我们可以判断出是哪个线程占用较高CPU，以及线程出于什么样的状态。使用`jvmtop -e <pid>`还可以具体确定是哪个方法占用CPU时间片最多。通过这些信息，我定位到了异常：**我的某个循环体出现了死循环**。\n","source":"_posts/2018-07-07-jvmtop-profile.md","raw":"---\ntitle: 如何诊断java程序CPU占用率过高\ndate: 2018-07-07 23:13:53\ntags: ['Java']\n---\n\n在最近一次编程时，我的一个Java应用在嵌入式设备bbblack上的CPU占用率高达60%至70%，简单记录我是如何诊断这个问题的。\n\n<!--more-->\n\nGitHub上有一个项目[jvmtop](https://github.com/patric-r/jvmtop)，借助于jvmtop这个工具，我们可以指定Java进程的pid进行profile，命令如下：\n\n```java\njvmtop <pid>\n```\n\n产生的输出大概如下：\n```\nJvmTop 0.4.1 alpha   amd64,  4 cpus, Linux 2.6.18-34\n https://github.com/patric-r/jvmtop\n\n PID 3539: org.apache.catalina.startup.Bootstrap\n ARGS: start\n VMARGS: -Djava.util.logging.config.file=/home/webserver/apache-tomcat-5.5[...]\n VM: Sun Microsystems Inc. Java HotSpot(TM) 64-Bit Server VM 1.6.0_25\n UP: 869:33m #THR: 106  #THRPEAK: 143  #THRCREATED: 128020 USER: webserver\n CPU:  4.55% GC:  3.25% HEAP: 137m / 227m NONHEAP:  75m / 304m\n Note: Only top 10 threads (according cpu load) are shown!\n\n  TID   NAME                                    STATE    CPU  TOTALCPU BLOCKEDBY\n     25 http-8080-Processor13                RUNNABLE  4.55%     1.60%\n 128022 RMI TCP Connection(18)-10.101.       RUNNABLE  1.82%     0.02%\n  36578 http-8080-Processor164               RUNNABLE  0.91%     2.35%\n  36453 http-8080-Processor94                RUNNABLE  0.91%     1.52%\n     27 http-8080-Processor15                RUNNABLE  0.91%     1.81%\n     14 http-8080-Processor2                 RUNNABLE  0.91%     3.17%\n 128026 JMX server connection timeout   TIMED_WAITING  0.00%     0.00%\n 128025 JMX server connection timeout   TIMED_WAITING  0.00%     0.00%\n 128024 JMX server connection timeout   TIMED_WAITING  0.00%     0.00%\n 128023 JMX server connection timeout   TIMED_WAITING  0.00%     0.00%\n```\n\n通过其输出，我们可以判断出是哪个线程占用较高CPU，以及线程出于什么样的状态。使用`jvmtop -e <pid>`还可以具体确定是哪个方法占用CPU时间片最多。通过这些信息，我定位到了异常：**我的某个循环体出现了死循环**。\n","slug":"jvmtop-profile","published":1,"updated":"2018-07-07T15:23:59.459Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlza6mbg005lpgupdt8d8s1f","content":"<p>在最近一次编程时，我的一个Java应用在嵌入式设备bbblack上的CPU占用率高达60%至70%，简单记录我是如何诊断这个问题的。</p>\n<a id=\"more\"></a>\n<p>GitHub上有一个项目<a href=\"https://github.com/patric-r/jvmtop\" target=\"_blank\" rel=\"noopener\">jvmtop</a>，借助于jvmtop这个工具，我们可以指定Java进程的pid进行profile，命令如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jvmtop &lt;pid&gt;</span><br></pre></td></tr></table></figure>\n<p>产生的输出大概如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JvmTop 0.4.1 alpha   amd64,  4 cpus, Linux 2.6.18-34</span><br><span class=\"line\"> https://github.com/patric-r/jvmtop</span><br><span class=\"line\"></span><br><span class=\"line\"> PID 3539: org.apache.catalina.startup.Bootstrap</span><br><span class=\"line\"> ARGS: start</span><br><span class=\"line\"> VMARGS: -Djava.util.logging.config.file=/home/webserver/apache-tomcat-5.5[...]</span><br><span class=\"line\"> VM: Sun Microsystems Inc. Java HotSpot(TM) 64-Bit Server VM 1.6.0_25</span><br><span class=\"line\"> UP: 869:33m #THR: 106  #THRPEAK: 143  #THRCREATED: 128020 USER: webserver</span><br><span class=\"line\"> CPU:  4.55% GC:  3.25% HEAP: 137m / 227m NONHEAP:  75m / 304m</span><br><span class=\"line\"> Note: Only top 10 threads (according cpu load) are shown!</span><br><span class=\"line\"></span><br><span class=\"line\">  TID   NAME                                    STATE    CPU  TOTALCPU BLOCKEDBY</span><br><span class=\"line\">     25 http-8080-Processor13                RUNNABLE  4.55%     1.60%</span><br><span class=\"line\"> 128022 RMI TCP Connection(18)-10.101.       RUNNABLE  1.82%     0.02%</span><br><span class=\"line\">  36578 http-8080-Processor164               RUNNABLE  0.91%     2.35%</span><br><span class=\"line\">  36453 http-8080-Processor94                RUNNABLE  0.91%     1.52%</span><br><span class=\"line\">     27 http-8080-Processor15                RUNNABLE  0.91%     1.81%</span><br><span class=\"line\">     14 http-8080-Processor2                 RUNNABLE  0.91%     3.17%</span><br><span class=\"line\"> 128026 JMX server connection timeout   TIMED_WAITING  0.00%     0.00%</span><br><span class=\"line\"> 128025 JMX server connection timeout   TIMED_WAITING  0.00%     0.00%</span><br><span class=\"line\"> 128024 JMX server connection timeout   TIMED_WAITING  0.00%     0.00%</span><br><span class=\"line\"> 128023 JMX server connection timeout   TIMED_WAITING  0.00%     0.00%</span><br></pre></td></tr></table></figure></p>\n<p>通过其输出，我们可以判断出是哪个线程占用较高CPU，以及线程出于什么样的状态。使用<code>jvmtop -e &lt;pid&gt;</code>还可以具体确定是哪个方法占用CPU时间片最多。通过这些信息，我定位到了异常：<strong>我的某个循环体出现了死循环</strong>。</p>\n","site":{"data":{}},"excerpt":"<p>在最近一次编程时，我的一个Java应用在嵌入式设备bbblack上的CPU占用率高达60%至70%，简单记录我是如何诊断这个问题的。</p>","more":"<p>GitHub上有一个项目<a href=\"https://github.com/patric-r/jvmtop\" target=\"_blank\" rel=\"noopener\">jvmtop</a>，借助于jvmtop这个工具，我们可以指定Java进程的pid进行profile，命令如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jvmtop &lt;pid&gt;</span><br></pre></td></tr></table></figure>\n<p>产生的输出大概如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JvmTop 0.4.1 alpha   amd64,  4 cpus, Linux 2.6.18-34</span><br><span class=\"line\"> https://github.com/patric-r/jvmtop</span><br><span class=\"line\"></span><br><span class=\"line\"> PID 3539: org.apache.catalina.startup.Bootstrap</span><br><span class=\"line\"> ARGS: start</span><br><span class=\"line\"> VMARGS: -Djava.util.logging.config.file=/home/webserver/apache-tomcat-5.5[...]</span><br><span class=\"line\"> VM: Sun Microsystems Inc. Java HotSpot(TM) 64-Bit Server VM 1.6.0_25</span><br><span class=\"line\"> UP: 869:33m #THR: 106  #THRPEAK: 143  #THRCREATED: 128020 USER: webserver</span><br><span class=\"line\"> CPU:  4.55% GC:  3.25% HEAP: 137m / 227m NONHEAP:  75m / 304m</span><br><span class=\"line\"> Note: Only top 10 threads (according cpu load) are shown!</span><br><span class=\"line\"></span><br><span class=\"line\">  TID   NAME                                    STATE    CPU  TOTALCPU BLOCKEDBY</span><br><span class=\"line\">     25 http-8080-Processor13                RUNNABLE  4.55%     1.60%</span><br><span class=\"line\"> 128022 RMI TCP Connection(18)-10.101.       RUNNABLE  1.82%     0.02%</span><br><span class=\"line\">  36578 http-8080-Processor164               RUNNABLE  0.91%     2.35%</span><br><span class=\"line\">  36453 http-8080-Processor94                RUNNABLE  0.91%     1.52%</span><br><span class=\"line\">     27 http-8080-Processor15                RUNNABLE  0.91%     1.81%</span><br><span class=\"line\">     14 http-8080-Processor2                 RUNNABLE  0.91%     3.17%</span><br><span class=\"line\"> 128026 JMX server connection timeout   TIMED_WAITING  0.00%     0.00%</span><br><span class=\"line\"> 128025 JMX server connection timeout   TIMED_WAITING  0.00%     0.00%</span><br><span class=\"line\"> 128024 JMX server connection timeout   TIMED_WAITING  0.00%     0.00%</span><br><span class=\"line\"> 128023 JMX server connection timeout   TIMED_WAITING  0.00%     0.00%</span><br></pre></td></tr></table></figure></p>\n<p>通过其输出，我们可以判断出是哪个线程占用较高CPU，以及线程出于什么样的状态。使用<code>jvmtop -e &lt;pid&gt;</code>还可以具体确定是哪个方法占用CPU时间片最多。通过这些信息，我定位到了异常：<strong>我的某个循环体出现了死循环</strong>。</p>"},{"title":"zookeeper-puzzle-1","date":"2018-07-04T04:33:00.000Z","_content":"\ndiscovery : how does server know each other\nvote : how does zookeeper vote master\nroute : client connect to which server \napplication : how does zook implements mutex\n","source":"_posts/2018-07-04-zookeeper-puzzle-1.md","raw":"---\ntitle: zookeeper-puzzle-1\ndate: 2018-07-04 12:33:00\ntags:\n---\n\ndiscovery : how does server know each other\nvote : how does zookeeper vote master\nroute : client connect to which server \napplication : how does zook implements mutex\n","slug":"zookeeper-puzzle-1","published":1,"updated":"2018-07-11T05:41:46.345Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlza6mbh005opgupgnkhvxtc","content":"<p>discovery : how does server know each other<br>vote : how does zookeeper vote master<br>route : client connect to which server<br>application : how does zook implements mutex</p>\n","site":{"data":{}},"excerpt":"","more":"<p>discovery : how does server know each other<br>vote : how does zookeeper vote master<br>route : client connect to which server<br>application : how does zook implements mutex</p>\n"},{"title":"使用JMC+JFR+JProfile检测Java程序异常","date":"2018-09-12T15:03:39.000Z","_content":"\n记录一次使用JMC(Java Mission Controll)和JFR(Java Flight Record)以及JProfile检测Java应用异常的过程。\n<!--more-->\n","source":"_posts/2018-09-12-use-jmc-jfr-jprofile.md","raw":"---\ntitle: 使用JMC+JFR+JProfile检测Java程序异常\ndate: 2018-09-12 23:03:39\ntags: ['Java']\n---\n\n记录一次使用JMC(Java Mission Controll)和JFR(Java Flight Record)以及JProfile检测Java应用异常的过程。\n<!--more-->\n","slug":"use-jmc-jfr-jprofile","published":1,"updated":"2018-09-12T15:05:52.157Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlza6mbj005qpguphtzffvgs","content":"<p>记录一次使用JMC(Java Mission Controll)和JFR(Java Flight Record)以及JProfile检测Java应用异常的过程。<br><a id=\"more\"></a></p>\n","site":{"data":{}},"excerpt":"<p>记录一次使用JMC(Java Mission Controll)和JFR(Java Flight Record)以及JProfile检测Java应用异常的过程。<br>","more":"</p>"},{"title":"front-back-seperate","date":"2018-07-25T03:31:58.000Z","_content":"","source":"_posts/2018-07-25-front-back-seperate.md","raw":"---\ntitle: front-back-seperate\ndate: 2018-07-25 11:31:58\ntags:\n---\n","slug":"front-back-seperate","published":1,"updated":"2018-07-25T03:31:58.271Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlza6mbm005tpgup8rj7gaxd","content":"","site":{"data":{}},"excerpt":"","more":""}],"PostAsset":[],"PostCategory":[{"post_id":"cjlza6m3u0001pguppx3p8ecg","category_id":"cjlza6m400003pgup8t3316fx","_id":"cjlza6m49000dpgup6iindcna"},{"post_id":"cjlza6m3y0002pgupwgx29rxh","category_id":"cjlza6m450008pgupz78tap8a","_id":"cjlza6m4e000ipgupd1k4603u"},{"post_id":"cjlza6m4b000gpgup6aoapy3w","category_id":"cjlza6m4a000epgupfxqwwrke","_id":"cjlza6m4i000opguptr2rqqga"},{"post_id":"cjlza6m420005pgup5ewf3r9x","category_id":"cjlza6m4a000epgupfxqwwrke","_id":"cjlza6m4l000tpguphsm8kcud"},{"post_id":"cjlza6m4d000hpgupuwkgu0pk","category_id":"cjlza6m4a000epgupfxqwwrke","_id":"cjlza6m4m000wpgup3ztz85pi"},{"post_id":"cjlza6m4g000lpguphzclw872","category_id":"cjlza6m4a000epgupfxqwwrke","_id":"cjlza6m4o000zpgupzgt7rwvq"},{"post_id":"cjlza6m430006pgupxmkaeai9","category_id":"cjlza6m450008pgupz78tap8a","_id":"cjlza6m4q0013pgupywq3hugh"},{"post_id":"cjlza6m4h000npgupdcq2a372","category_id":"cjlza6m450008pgupz78tap8a","_id":"cjlza6m4s0016pgup9psu64sb"},{"post_id":"cjlza6m4k000spgupw877aqfv","category_id":"cjlza6m450008pgupz78tap8a","_id":"cjlza6m4u0019pgup4lzv57co"},{"post_id":"cjlza6m450007pgup0o9cxuas","category_id":"cjlza6m450008pgupz78tap8a","_id":"cjlza6m4w001dpgupzjk5q1il"},{"post_id":"cjlza6m4m000vpgup8w6tpaw3","category_id":"cjlza6m450008pgupz78tap8a","_id":"cjlza6m4y001gpguptvsi4qsu"},{"post_id":"cjlza6m47000bpgup38on6261","category_id":"cjlza6m4a000epgupfxqwwrke","_id":"cjlza6m4z001ipgup9ogztyex"},{"post_id":"cjlza6m4p0012pgup3tdwapob","category_id":"cjlza6m450008pgupz78tap8a","_id":"cjlza6m51001lpgups2wfjmpg"},{"post_id":"cjlza6m4r0015pguphh36p543","category_id":"cjlza6m450008pgupz78tap8a","_id":"cjlza6m52001opgupqpsot6oh"},{"post_id":"cjlza6m49000cpgup3zteybbe","category_id":"cjlza6m4a000epgupfxqwwrke","_id":"cjlza6m54001rpgupgqhyejvm"},{"post_id":"cjlza6m4t0018pgupjqw5pkb7","category_id":"cjlza6m450008pgupz78tap8a","_id":"cjlza6m56001upgupynheyp7f"},{"post_id":"cjlza6m4v001cpgupa9zmj6bh","category_id":"cjlza6m450008pgupz78tap8a","_id":"cjlza6m58001xpgup0wbsjht7"},{"post_id":"cjlza6m4n000ypgupo1yq9drx","category_id":"cjlza6m4v001bpguptnrymwhs","_id":"cjlza6m5a0021pgup7e9l9udr"},{"post_id":"cjlza6m4x001fpgupfhyrxlbu","category_id":"cjlza6m450008pgupz78tap8a","_id":"cjlza6m5c0025pgupcpzebaf9"},{"post_id":"cjlza6m4y001hpgup10cpio92","category_id":"cjlza6m4v001bpguptnrymwhs","_id":"cjlza6m5e0028pgupkfdmtr74"},{"post_id":"cjlza6m50001kpgupn8bb9nhw","category_id":"cjlza6m450008pgupz78tap8a","_id":"cjlza6m5g002bpgupg0mbieef"},{"post_id":"cjlza6m51001npgupsx99jqxs","category_id":"cjlza6m4v001bpguptnrymwhs","_id":"cjlza6m5h002epgupdtvk08j7"},{"post_id":"cjlza6m53001qpgupoww09sds","category_id":"cjlza6m450008pgupz78tap8a","_id":"cjlza6m5i002gpgup4mj1m4x0"},{"post_id":"cjlza6m55001tpgupwkj91utw","category_id":"cjlza6m4a000epgupfxqwwrke","_id":"cjlza6m5j002ipgupadtpj4mx"},{"post_id":"cjlza6m590020pgup6x89zzvh","category_id":"cjlza6m450008pgupz78tap8a","_id":"cjlza6m5j002kpgupi5ww4lpl"},{"post_id":"cjlza6m5c0024pgup8j8s9dhd","category_id":"cjlza6m450008pgupz78tap8a","_id":"cjlza6m5k002npgupmmfe1eey"},{"post_id":"cjlza6m5d0027pgupvg35ptxr","category_id":"cjlza6m450008pgupz78tap8a","_id":"cjlza6m5l002opgupsv1u4hap"},{"post_id":"cjlza6m57001wpgup1y0qet3m","category_id":"cjlza6m5b0022pgupica3k8sa","_id":"cjlza6m5l002qpgup40v5wf6u"},{"post_id":"cjlza6m5f002apgupfd9kqr3z","category_id":"cjlza6m4v001bpguptnrymwhs","_id":"cjlza6m5m002spgupivknj6cv"},{"post_id":"cjlza6mad0041pgupaqgjyiy6","category_id":"cjlza6m4a000epgupfxqwwrke","_id":"cjlza6mal0046pgup7e0p2bwo"},{"post_id":"cjlza6maf0042pgup9bxtl3du","category_id":"cjlza6m4a000epgupfxqwwrke","_id":"cjlza6mam0048pguppcr15aw0"},{"post_id":"cjlza6mai0044pgupakxw6sby","category_id":"cjlza6m4a000epgupfxqwwrke","_id":"cjlza6map004cpgupn1q888xv"},{"post_id":"cjlza6mak0045pgupnnjtyysz","category_id":"cjlza6m4a000epgupfxqwwrke","_id":"cjlza6mar004fpgupwu8el9x5"},{"post_id":"cjlza6mal0047pgup6fvhxccf","category_id":"cjlza6m4a000epgupfxqwwrke","_id":"cjlza6mat004jpguphh87w88h"},{"post_id":"cjlza6mao004bpgupb53nvqhe","category_id":"cjlza6m4v001bpguptnrymwhs","_id":"cjlza6mav004mpgupquwrr5su"},{"post_id":"cjlza6maq004epgupl0lv1qnv","category_id":"cjlza6m450008pgupz78tap8a","_id":"cjlza6max004qpgupe5a75p5u"},{"post_id":"cjlza6mas004ipgupntkv36oy","category_id":"cjlza6m4a000epgupfxqwwrke","_id":"cjlza6maz004upgupo29x63ym"},{"post_id":"cjlza6maw004ppgup00r9mn72","category_id":"cjlza6m450008pgupz78tap8a","_id":"cjlza6mb30050pgupgrjjjo4v"},{"post_id":"cjlza6may004tpgupd2g764pb","category_id":"cjlza6m450008pgupz78tap8a","_id":"cjlza6mb60054pgup80wc6inv"},{"post_id":"cjlza6mb0004xpgupi537uxz3","category_id":"cjlza6m4a000epgupfxqwwrke","_id":"cjlza6mb80057pgupksr11pii"},{"post_id":"cjlza6mau004lpgup0oca1v3d","category_id":"cjlza6may004rpgupi66nnary","_id":"cjlza6mba005bpgupxxrew2ay"},{"post_id":"cjlza6mb50053pgup181d5kwm","category_id":"cjlza6m4v001bpguptnrymwhs","_id":"cjlza6mbc005epgup36cxunpb"}],"PostTag":[{"post_id":"cjlza6m3u0001pguppx3p8ecg","tag_id":"cjlza6m410004pgup432sc3u0","_id":"cjlza6m46000apgupr6zejlze"},{"post_id":"cjlza6m3y0002pgupwgx29rxh","tag_id":"cjlza6m460009pgup6fec3lna","_id":"cjlza6m4h000mpguphzd094eb"},{"post_id":"cjlza6m3y0002pgupwgx29rxh","tag_id":"cjlza6m4a000fpgup86b3he77","_id":"cjlza6m4j000ppgupeb8ywl80"},{"post_id":"cjlza6m420005pgup5ewf3r9x","tag_id":"cjlza6m4e000kpgupsnq4wnow","_id":"cjlza6m4l000upgup7xexwcsu"},{"post_id":"cjlza6m430006pgupxmkaeai9","tag_id":"cjlza6m4k000rpgup1wxp64wr","_id":"cjlza6m4p0011pgupvcuzsj8g"},{"post_id":"cjlza6m450007pgup0o9cxuas","tag_id":"cjlza6m4p0010pgup9or9j38v","_id":"cjlza6m4u001apgup3p04izmn"},{"post_id":"cjlza6m47000bpgup38on6261","tag_id":"cjlza6m4t0017pgup3q0qkl78","_id":"cjlza6m51001mpgupt9avlec4"},{"post_id":"cjlza6m47000bpgup38on6261","tag_id":"cjlza6m4w001epgup84huawhd","_id":"cjlza6m53001ppgupndnjvdfm"},{"post_id":"cjlza6m53001qpgupoww09sds","tag_id":"cjlza6m4e000kpgupsnq4wnow","_id":"cjlza6m57001vpgupcb2mjikl"},{"post_id":"cjlza6m49000cpgup3zteybbe","tag_id":"cjlza6m50001jpguptqrmdynh","_id":"cjlza6m59001zpgups1kolfiv"},{"post_id":"cjlza6m49000cpgup3zteybbe","tag_id":"cjlza6m4w001epgup84huawhd","_id":"cjlza6m5b0023pgupq2owyyo1"},{"post_id":"cjlza6m4b000gpgup6aoapy3w","tag_id":"cjlza6m58001ypgup7m0b0ajm","_id":"cjlza6m5e0029pgupv0ctzmws"},{"post_id":"cjlza6m5d0027pgupvg35ptxr","tag_id":"cjlza6m4e000kpgupsnq4wnow","_id":"cjlza6m5h002dpgupcvm2xscx"},{"post_id":"cjlza6m5d0027pgupvg35ptxr","tag_id":"cjlza6m5d0026pguph00jz4lr","_id":"cjlza6m5i002fpgupi1pm6lsn"},{"post_id":"cjlza6m4d000hpgupuwkgu0pk","tag_id":"cjlza6m5d0026pguph00jz4lr","_id":"cjlza6m5j002jpgupfyhyvg7q"},{"post_id":"cjlza6m4d000hpgupuwkgu0pk","tag_id":"cjlza6m4e000kpgupsnq4wnow","_id":"cjlza6m5j002lpgupgk6m075y"},{"post_id":"cjlza6m4g000lpguphzclw872","tag_id":"cjlza6m4t0017pgup3q0qkl78","_id":"cjlza6m5l002rpgupkh6e0isj"},{"post_id":"cjlza6m4g000lpguphzclw872","tag_id":"cjlza6m4w001epgup84huawhd","_id":"cjlza6m5m002tpgupv2a29092"},{"post_id":"cjlza6m4h000npgupdcq2a372","tag_id":"cjlza6m5l002ppgupk0djipsm","_id":"cjlza6m5n002vpgupprjbui2o"},{"post_id":"cjlza6m4k000spgupw877aqfv","tag_id":"cjlza6m5m002upgup578g3ozz","_id":"cjlza6m5n002xpgup2g5f89yw"},{"post_id":"cjlza6m4m000vpgup8w6tpaw3","tag_id":"cjlza6m5n002wpgupboq1qisv","_id":"cjlza6m5o002zpgupuyqtq6o9"},{"post_id":"cjlza6m4n000ypgupo1yq9drx","tag_id":"cjlza6m5o002ypgupyyfwpr2t","_id":"cjlza6m5p0031pgup18zig2pa"},{"post_id":"cjlza6m4p0012pgup3tdwapob","tag_id":"cjlza6m460009pgup6fec3lna","_id":"cjlza6m5q0033pgup02eeelgj"},{"post_id":"cjlza6m4p0012pgup3tdwapob","tag_id":"cjlza6m5o0030pgupk594206g","_id":"cjlza6m5q0034pgupni2dwzd3"},{"post_id":"cjlza6m4r0015pguphh36p543","tag_id":"cjlza6m5d0026pguph00jz4lr","_id":"cjlza6m5r0037pguptkbg4ghr"},{"post_id":"cjlza6m4r0015pguphh36p543","tag_id":"cjlza6m5q0035pgup7utb13ru","_id":"cjlza6m5r0038pgup0re89txd"},{"post_id":"cjlza6m4t0018pgupjqw5pkb7","tag_id":"cjlza6m5l002ppgupk0djipsm","_id":"cjlza6m5s003apguphkosncut"},{"post_id":"cjlza6m4v001cpgupa9zmj6bh","tag_id":"cjlza6m4a000fpgup86b3he77","_id":"cjlza6m5t003cpgup3dok2roq"},{"post_id":"cjlza6m4v001cpgupa9zmj6bh","tag_id":"cjlza6m5r0039pgupwqbhlaxp","_id":"cjlza6m5t003dpguperbinrwx"},{"post_id":"cjlza6m4x001fpgupfhyrxlbu","tag_id":"cjlza6m5s003bpgupass5ryqm","_id":"cjlza6m5u003fpgup3xjeozy5"},{"post_id":"cjlza6m4y001hpgup10cpio92","tag_id":"cjlza6m5o002ypgupyyfwpr2t","_id":"cjlza6m5v003hpgupgf4txwem"},{"post_id":"cjlza6m50001kpgupn8bb9nhw","tag_id":"cjlza6m5d0026pguph00jz4lr","_id":"cjlza6m5v003jpgupnylzrcia"},{"post_id":"cjlza6m51001npgupsx99jqxs","tag_id":"cjlza6m5o002ypgupyyfwpr2t","_id":"cjlza6m5w003lpguprxslvqs5"},{"post_id":"cjlza6m55001tpgupwkj91utw","tag_id":"cjlza6m4e000kpgupsnq4wnow","_id":"cjlza6m5y003opgupuikc7db8"},{"post_id":"cjlza6m55001tpgupwkj91utw","tag_id":"cjlza6m5d0026pguph00jz4lr","_id":"cjlza6m5y003ppgupk8shh42l"},{"post_id":"cjlza6m55001tpgupwkj91utw","tag_id":"cjlza6m5x003mpgupmmehiiil","_id":"cjlza6m5y003rpgupsmr21jng"},{"post_id":"cjlza6m57001wpgup1y0qet3m","tag_id":"cjlza6m5x003npgup1r0npmtg","_id":"cjlza6m5z003spgupz94ucjtq"},{"post_id":"cjlza6m590020pgup6x89zzvh","tag_id":"cjlza6m4e000kpgupsnq4wnow","_id":"cjlza6m60003vpgupa5munsho"},{"post_id":"cjlza6m590020pgup6x89zzvh","tag_id":"cjlza6m5y003qpgupnihqrlfl","_id":"cjlza6m60003wpgupe7mgx5ow"},{"post_id":"cjlza6m590020pgup6x89zzvh","tag_id":"cjlza6m5d0026pguph00jz4lr","_id":"cjlza6m61003ypgupael93rn5"},{"post_id":"cjlza6m5c0024pgup8j8s9dhd","tag_id":"cjlza6m5z003upgup2rm2w66t","_id":"cjlza6m61003zpgup6p1dy1i9"},{"post_id":"cjlza6m5f002apgupfd9kqr3z","tag_id":"cjlza6m60003xpgupoaujq7ej","_id":"cjlza6m610040pgupkek7bcz8"},{"post_id":"cjlza6mak0045pgupnnjtyysz","tag_id":"cjlza6m4w001epgup84huawhd","_id":"cjlza6mao004apgupxk8rwfaa"},{"post_id":"cjlza6mak0045pgupnnjtyysz","tag_id":"cjlza6mah0043pgupdruv6o4s","_id":"cjlza6map004dpgupmpu2tf7h"},{"post_id":"cjlza6mak0045pgupnnjtyysz","tag_id":"cjlza6m60003xpgupoaujq7ej","_id":"cjlza6mas004hpgup22dtljy7"},{"post_id":"cjlza6mad0041pgupaqgjyiy6","tag_id":"cjlza6m4w001epgup84huawhd","_id":"cjlza6mat004kpgup3bss36au"},{"post_id":"cjlza6mad0041pgupaqgjyiy6","tag_id":"cjlza6mah0043pgupdruv6o4s","_id":"cjlza6maw004opgupmnckxrvz"},{"post_id":"cjlza6mad0041pgupaqgjyiy6","tag_id":"cjlza6m60003xpgupoaujq7ej","_id":"cjlza6may004spgup1oqrhpc0"},{"post_id":"cjlza6maf0042pgup9bxtl3du","tag_id":"cjlza6m4w001epgup84huawhd","_id":"cjlza6mb0004wpgup8y4ymo6g"},{"post_id":"cjlza6maf0042pgup9bxtl3du","tag_id":"cjlza6mah0043pgupdruv6o4s","_id":"cjlza6mb1004ypgup8bk4beus"},{"post_id":"cjlza6maf0042pgup9bxtl3du","tag_id":"cjlza6m60003xpgupoaujq7ej","_id":"cjlza6mb50052pgupemk169xp"},{"post_id":"cjlza6mai0044pgupakxw6sby","tag_id":"cjlza6m4w001epgup84huawhd","_id":"cjlza6mb70055pgup44oqke33"},{"post_id":"cjlza6mai0044pgupakxw6sby","tag_id":"cjlza6mah0043pgupdruv6o4s","_id":"cjlza6mb80058pgupi4mjz5uq"},{"post_id":"cjlza6mai0044pgupakxw6sby","tag_id":"cjlza6m60003xpgupoaujq7ej","_id":"cjlza6mba005cpguplqqoameu"},{"post_id":"cjlza6may004tpgupd2g764pb","tag_id":"cjlza6m4e000kpgupsnq4wnow","_id":"cjlza6mbc005fpgupbiysvgjz"},{"post_id":"cjlza6mal0047pgup6fvhxccf","tag_id":"cjlza6mav004npgupavfxepgu","_id":"cjlza6mbe005ipgupxqvqaco4"},{"post_id":"cjlza6mal0047pgup6fvhxccf","tag_id":"cjlza6maz004vpguphdj7s1un","_id":"cjlza6mbf005kpgupk7py9fgy"},{"post_id":"cjlza6mal0047pgup6fvhxccf","tag_id":"cjlza6mb40051pgupxh11ixqi","_id":"cjlza6mbh005npguplue41n23"},{"post_id":"cjlza6mb9005apgup12vrsk5e","tag_id":"cjlza6m4a000fpgup86b3he77","_id":"cjlza6mbi005ppgupv076xwgn"},{"post_id":"cjlza6mao004bpgupb53nvqhe","tag_id":"cjlza6mb80059pgupw6m9a7cj","_id":"cjlza6mbl005spgupin10g1nw"},{"post_id":"cjlza6mbe005jpgupty15phak","tag_id":"cjlza6m4a000fpgup86b3he77","_id":"cjlza6mbn005upgupwcgu8884"},{"post_id":"cjlza6mbg005lpgupdt8d8s1f","tag_id":"cjlza6m4a000fpgup86b3he77","_id":"cjlza6mbo005vpgup9oljnb0r"},{"post_id":"cjlza6mbj005qpguphtzffvgs","tag_id":"cjlza6m4a000fpgup86b3he77","_id":"cjlza6mbp005xpgupd0cxrdkj"},{"post_id":"cjlza6maq004epgupl0lv1qnv","tag_id":"cjlza6mbd005hpgupaq5qljzz","_id":"cjlza6mbp005ypgupi6vy5y91"},{"post_id":"cjlza6maq004epgupl0lv1qnv","tag_id":"cjlza6mbh005mpgupjjejehad","_id":"cjlza6mbr0060pgupnccz7vut"},{"post_id":"cjlza6maq004epgupl0lv1qnv","tag_id":"cjlza6mbl005rpgupkhspts69","_id":"cjlza6mbr0061pgupw9syxfd9"},{"post_id":"cjlza6mas004ipgupntkv36oy","tag_id":"cjlza6mbo005wpgupkssvk03d","_id":"cjlza6mbs0064pgupm9t38ggy"},{"post_id":"cjlza6mas004ipgupntkv36oy","tag_id":"cjlza6mbp005zpguprxatnu95","_id":"cjlza6mbt0065pgupndc92f4i"},{"post_id":"cjlza6mas004ipgupntkv36oy","tag_id":"cjlza6mbr0062pgupgma9usap","_id":"cjlza6mbu0067pgup16gswkfp"},{"post_id":"cjlza6mau004lpgup0oca1v3d","tag_id":"cjlza6mbs0063pgupi1b86r1k","_id":"cjlza6mbu0068pgup00sq3tiw"},{"post_id":"cjlza6maw004ppgup00r9mn72","tag_id":"cjlza6m4e000kpgupsnq4wnow","_id":"cjlza6mbv006apgupqfztcffu"},{"post_id":"cjlza6maw004ppgup00r9mn72","tag_id":"cjlza6mbt0066pgupb4kmcyt0","_id":"cjlza6mbv006bpgupn87xln3b"},{"post_id":"cjlza6mb0004xpgupi537uxz3","tag_id":"cjlza6mbu0069pgup9vb6a301","_id":"cjlza6mbw006dpgupv49yw9j4"},{"post_id":"cjlza6mb50053pgup181d5kwm","tag_id":"cjlza6mbw006cpgup732vcn9k","_id":"cjlza6mbz006hpgupnksp58y9"},{"post_id":"cjlza6mb50053pgup181d5kwm","tag_id":"cjlza6mbx006epgupf0q56a09","_id":"cjlza6mbz006ipgupifabx1ea"},{"post_id":"cjlza6mb50053pgup181d5kwm","tag_id":"cjlza6mbr0062pgupgma9usap","_id":"cjlza6mbz006jpgupt3qk1o1c"},{"post_id":"cjlza6mbb005dpguptzbwqcx8","tag_id":"cjlza6m4a000fpgup86b3he77","_id":"cjlza6mc0006kpgupvcrb2efz"},{"post_id":"cjlza6mbb005dpguptzbwqcx8","tag_id":"cjlza6mby006gpgup88kc5g5p","_id":"cjlza6mc0006lpgupozsjoqgo"},{"post_id":"cjlza6mbb005dpguptzbwqcx8","tag_id":"cjlza6m5y003qpgupnihqrlfl","_id":"cjlza6mc0006mpgupe6mzwzl5"}],"Tag":[{"name":"AI","_id":"cjlza6m410004pgup432sc3u0"},{"name":"HBase","_id":"cjlza6m460009pgup6fec3lna"},{"name":"Java","_id":"cjlza6m4a000fpgup86b3he77"},{"name":"C/C++","_id":"cjlza6m4e000kpgupsnq4wnow"},{"name":"Maven","_id":"cjlza6m4k000rpgup1wxp64wr"},{"name":"Spring","_id":"cjlza6m4p0010pgup9or9j38v"},{"name":"财商","_id":"cjlza6m4t0017pgup3q0qkl78"},{"name":"读书","_id":"cjlza6m4w001epgup84huawhd"},{"name":"哲学","_id":"cjlza6m50001jpguptqrmdynh"},{"name":"计算机原理","_id":"cjlza6m58001ypgup7m0b0ajm"},{"name":"Linux","_id":"cjlza6m5d0026pguph00jz4lr"},{"name":"SVN","_id":"cjlza6m5l002ppgupk0djipsm"},{"name":"信息安全","_id":"cjlza6m5m002upgup578g3ozz"},{"name":"LVM","_id":"cjlza6m5n002wpgupboq1qisv"},{"name":"贯行","_id":"cjlza6m5o002ypgupyyfwpr2t"},{"name":"Hadoop","_id":"cjlza6m5o0030pgupk594206g"},{"name":"内网穿透","_id":"cjlza6m5q0035pgup7utb13ru"},{"name":"Eclipse","_id":"cjlza6m5r0039pgupwqbhlaxp"},{"name":"Docker","_id":"cjlza6m5s003bpgupass5ryqm"},{"name":"Network","_id":"cjlza6m5x003mpgupmmehiiil"},{"name":"Wisdom","_id":"cjlza6m5x003npgup1r0npmtg"},{"name":"TCP/IP","_id":"cjlza6m5y003qpgupnihqrlfl"},{"name":"Tomcat","_id":"cjlza6m5z003upgup2rm2w66t"},{"name":"随想","_id":"cjlza6m60003xpgupoaujq7ej"},{"name":"李笑来","_id":"cjlza6mah0043pgupdruv6o4s"},{"name":"5分钟商学院","_id":"cjlza6mav004npgupavfxepgu"},{"name":"刘润","_id":"cjlza6maz004vpguphdj7s1un"},{"name":"商业知识","_id":"cjlza6mb40051pgupxh11ixqi"},{"name":"年总结","_id":"cjlza6mb80059pgupw6m9a7cj"},{"name":"I2C","_id":"cjlza6mbd005hpgupaq5qljzz"},{"name":"rx8025","_id":"cjlza6mbh005mpgupjjejehad"},{"name":"Beaglebone","_id":"cjlza6mbl005rpgupkhspts69"},{"name":"时间管理","_id":"cjlza6mbo005wpgupkssvk03d"},{"name":"TED","_id":"cjlza6mbp005zpguprxatnu95"},{"name":"成长日志","_id":"cjlza6mbr0062pgupgma9usap"},{"name":"动态规划","_id":"cjlza6mbs0063pgupi1b86r1k"},{"name":"指针","_id":"cjlza6mbt0066pgupb4kmcyt0"},{"name":"刻意练习","_id":"cjlza6mbu0069pgup9vb6a301"},{"name":"快乐","_id":"cjlza6mbw006cpgup732vcn9k"},{"name":"幸福","_id":"cjlza6mbx006epgupf0q56a09"},{"name":"Mina","_id":"cjlza6mby006gpgup88kc5g5p"}]}}